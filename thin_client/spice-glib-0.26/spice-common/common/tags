!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APPS	makefile	/^APPS=libspice-common-client.a$/;"	m
ATTR_PACKED	lz.c	386;"	d	file:
ATTR_PACKED	lz.c	388;"	d	file:
ATTR_PACKED	lz.c	420;"	d	file:
ATTR_PACKED	quic.c	771;"	d	file:
ATTR_PACKED	quic.c	773;"	d	file:
ATTR_PACKED	quic.c	814;"	d	file:
AppendSpanGroup	lines.c	268;"	d	file:
BACKTRACE_H	backtrace.h	20;"	d
BITOPS_H	bitops.h	22;"	d
BOUND_OFFSET	lz.c	425;"	d	file:
BPC	quic_family_tmpl.c	115;"	d	file:
BPC	quic_family_tmpl.c	26;"	d	file:
BPC	quic_family_tmpl.c	34;"	d	file:
BPC	quic_rgb_tmpl.c	31;"	d	file:
BPC	quic_rgb_tmpl.c	52;"	d	file:
BPC	quic_rgb_tmpl.c	73;"	d	file:
BPC	quic_rgb_tmpl.c	756;"	d	file:
BPC	quic_rgb_tmpl.c	94;"	d	file:
BPC	quic_tmpl.c	46;"	d	file:
BPC	quic_tmpl.c	634;"	d	file:
BPC_MASK	quic_rgb_tmpl.c	32;"	d	file:
BPC_MASK	quic_rgb_tmpl.c	53;"	d	file:
BPC_MASK	quic_rgb_tmpl.c	74;"	d	file:
BPC_MASK	quic_rgb_tmpl.c	757;"	d	file:
BPC_MASK	quic_rgb_tmpl.c	95;"	d	file:
BPC_MASK	quic_tmpl.c	47;"	d	file:
BPC_MASK	quic_tmpl.c	635;"	d	file:
BYTE	quic.c	/^typedef uint8_t BYTE;$/;"	t	file:
BYTES_TO_16	lz_compress_tmpl.c	533;"	d	file:
BitmapData	gdi_canvas.c	/^struct BitmapData {$/;"	s	file:
BitmapData::cache	gdi_canvas.c	/^    int cache;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::dc	gdi_canvas.c	/^    HDC dc;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::flags	gdi_canvas.c	/^    uint8_t flags;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::from_surface	gdi_canvas.c	/^    int from_surface;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::hbitmap	gdi_canvas.c	/^    HBITMAP hbitmap;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::pos	gdi_canvas.c	/^    SpicePoint pos;$/;"	m	struct:BitmapData	file:	access:public
BitmapData::prev_hbitmap	gdi_canvas.c	/^    HBITMAP prev_hbitmap;$/;"	m	struct:BitmapData	file:	access:public
Boolean	lines.c	/^typedef int Boolean;$/;"	t	file:
CANVAS_SINGLE_INSTANCE	sw_canvas.c	28;"	d	file:
CANVAS_USE_PIXMAN	sw_canvas.c	27;"	d	file:
CARD32	lines.c	/^typedef unsigned int CARD32;$/;"	t	file:
CAST_PLT_DISTANCE	lz_decompress_tmpl.c	106;"	d	file:
CAST_PLT_DISTANCE	lz_decompress_tmpl.c	118;"	d	file:
CAST_PLT_DISTANCE	lz_decompress_tmpl.c	136;"	d	file:
CAST_PLT_DISTANCE	lz_decompress_tmpl.c	154;"	d	file:
CAST_PLT_DISTANCE	lz_decompress_tmpl.c	346;"	d	file:
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS = -std=gnu99 -g -O2$/;"	m
CLIPSTEPEDGE	lines.c	2152;"	d	file:
COMPRESS_IMP	quic_rgb_tmpl.c	33;"	d	file:
COMPRESS_IMP	quic_rgb_tmpl.c	54;"	d	file:
COMPRESS_IMP	quic_rgb_tmpl.c	758;"	d	file:
COMPRESS_IMP	quic_rgb_tmpl.c	75;"	d	file:
COMPRESS_ONE	quic_rgb_tmpl.c	321;"	d	file:
COMPRESS_ONE	quic_rgb_tmpl.c	744;"	d	file:
COMPRESS_ONE_0	quic_rgb_tmpl.c	313;"	d	file:
COMPRESS_ONE_0	quic_rgb_tmpl.c	743;"	d	file:
COMPRESS_ONE_ROW0	quic_rgb_tmpl.c	172;"	d	file:
COMPRESS_ONE_ROW0	quic_rgb_tmpl.c	742;"	d	file:
COMPRESS_ONE_ROW0_0	quic_rgb_tmpl.c	165;"	d	file:
COMPRESS_ONE_ROW0_0	quic_rgb_tmpl.c	741;"	d	file:
COMP_LEVEL_SIZE_LIMIT	lz.c	428;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	109;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	121;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	139;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	163;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	167;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	179;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	183;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	199;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	205;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	219;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	344;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	80;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	91;"	d	file:
COPY_COMP_PIXEL	lz_decompress_tmpl.c	97;"	d	file:
COPY_PIXEL	lz_decompress_tmpl.c	217;"	d	file:
COPY_PIXEL	lz_decompress_tmpl.c	342;"	d	file:
COPY_PIXEL	lz_decompress_tmpl.c	70;"	d	file:
COPY_PLT_ENTRY	lz_decompress_tmpl.c	345;"	d	file:
COPY_PLT_ENTRY	lz_decompress_tmpl.c	83;"	d	file:
COPY_RASTER_OP	pixman_utils.c	70;"	d	file:
COPY_REF_PIXEL	lz_decompress_tmpl.c	218;"	d	file:
COPY_REF_PIXEL	lz_decompress_tmpl.c	343;"	d	file:
COPY_REF_PIXEL	lz_decompress_tmpl.c	71;"	d	file:
CORELATE	quic_rgb_tmpl.c	130;"	d	file:
CORELATE	quic_rgb_tmpl.c	149;"	d	file:
CORELATE	quic_rgb_tmpl.c	746;"	d	file:
CORELATE_0	quic_rgb_tmpl.c	120;"	d	file:
CORELATE_0	quic_rgb_tmpl.c	745;"	d	file:
COUNTER	quic.c	/^typedef unsigned COUNTER;   \/* counter in the array of counters in bucket of the data model *\/$/;"	t	file:
CalcLineDeltas	lines.c	217;"	d	file:
CanvasBase	canvas_base.c	/^typedef struct CanvasBase {$/;"	s	file:
CanvasBase	canvas_base.c	/^} CanvasBase;$/;"	t	typeref:struct:CanvasBase	file:
CanvasBase::bits_cache	canvas_base.c	/^    SpiceImageCache *bits_cache;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::canvas_region	canvas_base.c	/^    pixman_region32_t canvas_region;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::color_mask	canvas_base.c	/^    uint32_t color_mask;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::color_shift	canvas_base.c	/^    uint32_t color_shift;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::dc	canvas_base.c	/^    HDC dc;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::format	canvas_base.c	/^    uint32_t format;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::glz_data	canvas_base.c	/^    GlzData glz_data;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::height	canvas_base.c	/^    int height;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::jpeg	canvas_base.c	/^    SpiceJpegDecoder* jpeg;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::lz_data	canvas_base.c	/^    LzData lz_data;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::palette_cache	canvas_base.c	/^    SpicePaletteCache *palette_cache;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::parent	canvas_base.c	/^    SpiceCanvas parent;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::quic_data	canvas_base.c	/^    QuicData quic_data;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::surfaces	canvas_base.c	/^    SpiceImageSurfaces *surfaces;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::usr_data	canvas_base.c	/^    void *usr_data;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::usr_data_destroy	canvas_base.c	/^    spice_destroy_fn_t usr_data_destroy;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::width	canvas_base.c	/^    int width;$/;"	m	struct:CanvasBase	file:	access:public
CanvasBase::zlib	canvas_base.c	/^    SpiceZlibDecoder* zlib;$/;"	m	struct:CanvasBase	file:	access:public
CapButt	lines.h	100;"	d
CapNotLast	lines.h	99;"	d
CapProjecting	lines.h	102;"	d
CapRound	lines.h	101;"	d
Channel	quic.c	/^typedef struct Channel {$/;"	s	file:
Channel	quic.c	/^} Channel;$/;"	t	typeref:struct:Channel	file:
Channel::_buckets_ptrs	quic.c	/^    s_bucket **_buckets_ptrs;$/;"	m	struct:Channel	file:	access:public
Channel::correlate_row	quic.c	/^    BYTE *correlate_row;$/;"	m	struct:Channel	file:	access:public
Channel::correlate_row_width	quic.c	/^    int correlate_row_width;$/;"	m	struct:Channel	file:	access:public
Channel::encoder	quic.c	/^    Encoder *encoder;$/;"	m	struct:Channel	file:	access:public
Channel::family_stat_5bpc	quic.c	/^    FamilyStat family_stat_5bpc;$/;"	m	struct:Channel	file:	access:public
Channel::family_stat_8bpc	quic.c	/^    FamilyStat family_stat_8bpc;$/;"	m	struct:Channel	file:	access:public
Channel::state	quic.c	/^    CommonState state;$/;"	m	struct:Channel	file:	access:public
CommonState	quic.c	/^typedef struct CommonState {$/;"	s	file:
CommonState	quic.c	/^} CommonState;$/;"	t	typeref:struct:CommonState	file:
CommonState::encoder	quic.c	/^    Encoder *encoder;$/;"	m	struct:CommonState	file:	access:public
CommonState::melclen	quic.c	/^    int melclen;  \/* contents of the state array location$/;"	m	struct:CommonState	file:	access:public
CommonState::melcorder	quic.c	/^    unsigned long melcorder;  \/* 2^ melclen *\/$/;"	m	struct:CommonState	file:	access:public
CommonState::melcstate	quic.c	/^    int melcstate; \/* index to the state array *\/$/;"	m	struct:CommonState	file:	access:public
CommonState::tabrand_seed	quic.c	/^    unsigned int tabrand_seed;$/;"	m	struct:CommonState	file:	access:public
CommonState::waitcnt	quic.c	/^    unsigned int waitcnt;$/;"	m	struct:CommonState	file:	access:public
CommonState::wm_trigger	quic.c	/^    unsigned int wm_trigger;$/;"	m	struct:CommonState	file:	access:public
CommonState::wmidx	quic.c	/^    unsigned int wmidx;$/;"	m	struct:CommonState	file:	access:public
CommonState::wmileft	quic.c	/^    unsigned int wmileft;$/;"	m	struct:CommonState	file:	access:public
CoordModeOrigin	lines.h	88;"	d
CoordModePrevious	lines.h	89;"	d
DDXPointPtr	lines.c	/^typedef DDXPointRec *DDXPointPtr;$/;"	t	file:
DDXPointRec	lines.c	/^typedef SpicePoint DDXPointRec;$/;"	t	file:
DECORELATE	quic_rgb_tmpl.c	126;"	d	file:
DECORELATE	quic_rgb_tmpl.c	138;"	d	file:
DECORELATE	quic_rgb_tmpl.c	740;"	d	file:
DECORELATE_0	quic_rgb_tmpl.c	117;"	d	file:
DECORELATE_0	quic_rgb_tmpl.c	739;"	d	file:
DEFAULTZEROLINEBIAS	lines.c	151;"	d	file:
DEFINE_FLAG	makefile	/^DEFINE_FLAG= $/;"	m
DEFevol	quic.c	49;"	d	file:
DEFmaxclen	quic.c	58;"	d	file:
DEFwmimax	quic.c	61;"	d	file:
DEFwminext	quic.c	64;"	d	file:
DEFwmistart	quic.c	54;"	d	file:
DJB2_HASH	lz_compress_tmpl.c	48;"	d	file:
DJB2_START	lz_compress_tmpl.c	47;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	111;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	128;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	134;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	529;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	62;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	77;"	d	file:
ENCODE_PIXEL	lz_compress_tmpl.c	93;"	d	file:
EQN1	lines.c	1198;"	d	file:
EQN1B	lines.c	1199;"	d	file:
EQN2	lines.c	1200;"	d	file:
EQN2B	lines.c	1201;"	d	file:
EQN3	lines.c	1203;"	d	file:
EQN3B	lines.c	1204;"	d	file:
EQN4	lines.c	1205;"	d	file:
EQN4B	lines.c	1206;"	d	file:
EQN5	lines.c	1208;"	d	file:
EQN5B	lines.c	1209;"	d	file:
EQN6	lines.c	1210;"	d	file:
EQN6B	lines.c	1211;"	d	file:
EQN7	lines.c	1213;"	d	file:
EQN7B	lines.c	1214;"	d	file:
EQN8	lines.c	1215;"	d	file:
EQN8B	lines.c	1216;"	d	file:
EXPECT_CONT	region.c	/^    EXPECT_CONT,$/;"	e	enum:__anon32	file:
EXPECT_EQUAL	region.c	/^    EXPECT_EQUAL,$/;"	e	enum:__anon32	file:
EXPECT_R1_EMPTY	region.c	/^    EXPECT_R1_EMPTY,$/;"	e	enum:__anon32	file:
EXPECT_R2_EMPTY	region.c	/^    EXPECT_R2_EMPTY,$/;"	e	enum:__anon32	file:
EXPECT_SECT	region.c	/^    EXPECT_SECT,$/;"	e	enum:__anon32	file:
EXTENTCHECK	region.c	32;"	d	file:
EXTRA	lines.c	511;"	d	file:
EXTRACT	canvas_base.c	3325;"	d	file:
Encoder	lz.c	/^typedef struct Encoder {$/;"	s	file:
Encoder	lz.c	/^} Encoder;$/;"	t	typeref:struct:Encoder	file:
Encoder	quic.c	/^struct Encoder {$/;"	s	file:
Encoder	quic.c	/^typedef struct Encoder Encoder;$/;"	t	typeref:struct:Encoder	file:
Encoder::channels	quic.c	/^    Channel channels[MAX_CHANNELS];$/;"	m	struct:Encoder	file:	access:public
Encoder::free_image_segs	lz.c	/^    LzImageSegment *free_image_segs;$/;"	m	struct:Encoder	file:	access:public
Encoder::head_image_segs	lz.c	/^    LzImageSegment *head_image_segs;$/;"	m	struct:Encoder	file:	access:public
Encoder::height	lz.c	/^    int height;$/;"	m	struct:Encoder	file:	access:public
Encoder::height	quic.c	/^    unsigned int height;$/;"	m	struct:Encoder	file:	access:public
Encoder::htab	lz.c	/^    HashEntry htab[HASH_SIZE];$/;"	m	struct:Encoder	file:	access:public
Encoder::io_available_bits	quic.c	/^    unsigned int io_available_bits;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_bytes_count	lz.c	/^    size_t io_bytes_count;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_end	lz.c	/^    uint8_t            *io_end;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_end	quic.c	/^    uint32_t *io_end;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_last_copy	lz.c	/^    uint8_t            *io_last_copy;  \/\/ pointer to the last byte in which copy count was written$/;"	m	struct:Encoder	file:	access:public
Encoder::io_next_word	quic.c	/^    uint32_t io_next_word;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_now	lz.c	/^    uint8_t            *io_now;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_now	quic.c	/^    uint32_t *io_now;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_start	lz.c	/^    uint8_t            *io_start;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_word	quic.c	/^    uint32_t io_word;$/;"	m	struct:Encoder	file:	access:public
Encoder::io_words_count	quic.c	/^    uint32_t io_words_count;$/;"	m	struct:Encoder	file:	access:public
Encoder::n_buckets_5bpc	quic.c	/^    unsigned int n_buckets_5bpc;$/;"	m	struct:Encoder	file:	access:public
Encoder::n_buckets_8bpc	quic.c	/^    unsigned int n_buckets_8bpc;$/;"	m	struct:Encoder	file:	access:public
Encoder::num_channels	quic.c	/^    unsigned int num_channels;$/;"	m	struct:Encoder	file:	access:public
Encoder::palette	lz.c	/^    const SpicePalette    *palette;    \/\/ for decoding images with palettes to rgb$/;"	m	struct:Encoder	file:	access:public
Encoder::rgb_state	quic.c	/^    CommonState rgb_state;$/;"	m	struct:Encoder	file:	access:public
Encoder::rows_completed	quic.c	/^    int rows_completed;$/;"	m	struct:Encoder	file:	access:public
Encoder::stride	lz.c	/^    int stride;                       \/\/ stride is in bytes. For rgb must be equal to$/;"	m	struct:Encoder	file:	access:public
Encoder::tail_image_segs	lz.c	/^    LzImageSegment *tail_image_segs;$/;"	m	struct:Encoder	file:	access:public
Encoder::type	lz.c	/^    LzImageType type;$/;"	m	struct:Encoder	file:	access:public
Encoder::type	quic.c	/^    QuicImageType type;$/;"	m	struct:Encoder	file:	access:public
Encoder::usr	lz.c	/^    LzUsrContext    *usr;$/;"	m	struct:Encoder	file:	access:public
Encoder::usr	quic.c	/^    QuicUsrContext *usr;$/;"	m	struct:Encoder	file:	access:public
Encoder::width	lz.c	/^    int width;                       \/\/ the original width (in pixels)$/;"	m	struct:Encoder	file:	access:public
Encoder::width	quic.c	/^    unsigned int width;$/;"	m	struct:Encoder	file:	access:public
ExchangeSpans	lines.c	3395;"	d	file:
ExchangeSpans	lines.c	3396;"	d	file:
ExchangeSpans	lines.c	594;"	d	file:
FILL_LINES	quic.c	1217;"	d	file:
FIND_BAND	region.c	68;"	d	file:
FIXUP_ERROR	lines.c	234;"	d	file:
FNAME	lz_compress_tmpl.c	107;"	d	file:
FNAME	lz_compress_tmpl.c	127;"	d	file:
FNAME	lz_compress_tmpl.c	133;"	d	file:
FNAME	lz_compress_tmpl.c	526;"	d	file:
FNAME	lz_compress_tmpl.c	61;"	d	file:
FNAME	lz_compress_tmpl.c	76;"	d	file:
FNAME	lz_compress_tmpl.c	92;"	d	file:
FNAME	lz_decompress_tmpl.c	108;"	d	file:
FNAME	lz_decompress_tmpl.c	120;"	d	file:
FNAME	lz_decompress_tmpl.c	138;"	d	file:
FNAME	lz_decompress_tmpl.c	162;"	d	file:
FNAME	lz_decompress_tmpl.c	166;"	d	file:
FNAME	lz_decompress_tmpl.c	178;"	d	file:
FNAME	lz_decompress_tmpl.c	182;"	d	file:
FNAME	lz_decompress_tmpl.c	198;"	d	file:
FNAME	lz_decompress_tmpl.c	204;"	d	file:
FNAME	lz_decompress_tmpl.c	216;"	d	file:
FNAME	lz_decompress_tmpl.c	341;"	d	file:
FNAME	lz_decompress_tmpl.c	79;"	d	file:
FNAME	lz_decompress_tmpl.c	90;"	d	file:
FNAME	lz_decompress_tmpl.c	96;"	d	file:
FNAME	quic_family_tmpl.c	113;"	d	file:
FNAME	quic_family_tmpl.c	24;"	d	file:
FNAME	quic_family_tmpl.c	32;"	d	file:
FNAME	quic_rgb_tmpl.c	25;"	d	file:
FNAME	quic_rgb_tmpl.c	46;"	d	file:
FNAME	quic_rgb_tmpl.c	67;"	d	file:
FNAME	quic_rgb_tmpl.c	730;"	d	file:
FNAME	quic_rgb_tmpl.c	88;"	d	file:
FNAME	quic_tmpl.c	24;"	d	file:
FNAME	quic_tmpl.c	30;"	d	file:
FNAME	quic_tmpl.c	36;"	d	file:
FNAME	quic_tmpl.c	622;"	d	file:
FOUR_BYTE	quic.c	819;"	d	file:
FOUR_BYTE	quic_tmpl.c	35;"	d	file:
FamilyStat	quic.c	/^typedef struct FamilyStat {$/;"	s	file:
FamilyStat	quic.c	/^} FamilyStat;$/;"	t	typeref:struct:FamilyStat	file:
FamilyStat::buckets_buf	quic.c	/^    s_bucket *buckets_buf;$/;"	m	struct:FamilyStat	file:	access:public
FamilyStat::buckets_ptrs	quic.c	/^    s_bucket **buckets_ptrs;$/;"	m	struct:FamilyStat	file:	access:public
FamilyStat::counters	quic.c	/^    COUNTER *counters;$/;"	m	struct:FamilyStat	file:	access:public
FillMaskInfo	glc.c	/^typedef struct FillMaskInfo {$/;"	s	file:
FillMaskInfo	glc.c	/^} FillMaskInfo;$/;"	t	typeref:struct:FillMaskInfo	file:
FillMaskInfo::bitmap	glc.c	/^    const uint8_t *bitmap;$/;"	m	struct:FillMaskInfo	file:	access:public
FillMaskInfo::height	glc.c	/^    int height;$/;"	m	struct:FillMaskInfo	file:	access:public
FillMaskInfo::stride	glc.c	/^    int stride;$/;"	m	struct:FillMaskInfo	file:	access:public
FillMaskInfo::width	glc.c	/^    int width;$/;"	m	struct:FillMaskInfo	file:	access:public
FillMaskInfo::x_dest	glc.c	/^    int x_dest;$/;"	m	struct:FillMaskInfo	file:	access:public
FillMaskInfo::y_dest	glc.c	/^    int y_dest;$/;"	m	struct:FillMaskInfo	file:	access:public
FillRects	lines.h	/^    void (*FillRects)(lineGC * pGC,$/;"	m	struct:__anon33	access:public
FillSpans	lines.h	/^    void (*FillSpans)(lineGC * pGC,$/;"	m	struct:__anon33	access:public
GCPtr	lines.c	/^typedef struct lineGC *GCPtr;$/;"	t	typeref:struct:lineGC	file:
GDI_CANVAS	gdi_canvas.c	28;"	d	file:
GET_CODE	lz_compress_tmpl.c	538;"	d	file:
GET_b	lz_compress_tmpl.c	110;"	d	file:
GET_b	lz_compress_tmpl.c	141;"	d	file:
GET_b	lz_compress_tmpl.c	537;"	d	file:
GET_b	quic_rgb_tmpl.c	102;"	d	file:
GET_b	quic_rgb_tmpl.c	39;"	d	file:
GET_b	quic_rgb_tmpl.c	60;"	d	file:
GET_b	quic_rgb_tmpl.c	764;"	d	file:
GET_b	quic_rgb_tmpl.c	81;"	d	file:
GET_g	lz_compress_tmpl.c	109;"	d	file:
GET_g	lz_compress_tmpl.c	140;"	d	file:
GET_g	lz_compress_tmpl.c	536;"	d	file:
GET_g	quic_rgb_tmpl.c	100;"	d	file:
GET_g	quic_rgb_tmpl.c	37;"	d	file:
GET_g	quic_rgb_tmpl.c	58;"	d	file:
GET_g	quic_rgb_tmpl.c	762;"	d	file:
GET_g	quic_rgb_tmpl.c	79;"	d	file:
GET_r	lz_compress_tmpl.c	108;"	d	file:
GET_r	lz_compress_tmpl.c	139;"	d	file:
GET_r	lz_compress_tmpl.c	535;"	d	file:
GET_r	quic_rgb_tmpl.c	35;"	d	file:
GET_r	quic_rgb_tmpl.c	56;"	d	file:
GET_r	quic_rgb_tmpl.c	760;"	d	file:
GET_r	quic_rgb_tmpl.c	77;"	d	file:
GET_r	quic_rgb_tmpl.c	98;"	d	file:
GLCClipOp	glc.h	/^} GLCClipOp;$/;"	t	typeref:enum:__anon7
GLCCtx	glc.h	/^typedef void * GLCCtx;$/;"	t
GLCFillMode	glc.h	/^} GLCFillMode;$/;"	t	typeref:enum:__anon5
GLCImage	glc.h	/^} GLCImage;$/;"	t	typeref:struct:GLCPImage
GLCImageFormat	glc.h	/^} GLCImageFormat;$/;"	t	typeref:enum:__anon3
GLCMaskID	glc.h	/^} GLCMaskID;$/;"	t	typeref:enum:__anon6
GLCOp	glc.h	/^} GLCOp;$/;"	t	typeref:enum:__anon4
GLCPImage	glc.h	/^typedef struct GLCPImage {$/;"	s
GLCPImage::format	glc.h	/^    GLCImageFormat format;$/;"	m	struct:GLCPImage	access:public
GLCPImage::height	glc.h	/^    int height;$/;"	m	struct:GLCPImage	access:public
GLCPImage::pallet	glc.h	/^    uint32_t *pallet;$/;"	m	struct:GLCPImage	access:public
GLCPImage::pixels	glc.h	/^    uint8_t *pixels;$/;"	m	struct:GLCPImage	access:public
GLCPImage::stride	glc.h	/^    int stride;$/;"	m	struct:GLCPImage	access:public
GLCPImage::width	glc.h	/^    int width;$/;"	m	struct:GLCPImage	access:public
GLCPath	glc.h	/^typedef void * GLCPath;$/;"	t
GLCPattern	glc.h	/^typedef void * GLCPattern;$/;"	t
GLCRect	glc.h	/^typedef struct GLCRect {$/;"	s
GLCRect	glc.h	/^} GLCRect;$/;"	t	typeref:struct:GLCRect
GLCRect::height	glc.h	/^    double height;$/;"	m	struct:GLCRect	access:public
GLCRect::width	glc.h	/^    double width;$/;"	m	struct:GLCRect	access:public
GLCRect::x	glc.h	/^    double x;$/;"	m	struct:GLCRect	access:public
GLCRect::y	glc.h	/^    double y;$/;"	m	struct:GLCRect	access:public
GLCRecti	glc.h	/^typedef struct GLCRecti {$/;"	s
GLCRecti	glc.h	/^} GLCRecti;$/;"	t	typeref:struct:GLCRecti
GLCRecti::height	glc.h	/^    int height;$/;"	m	struct:GLCRecti	access:public
GLCRecti::width	glc.h	/^    int width;$/;"	m	struct:GLCRecti	access:public
GLCRecti::x	glc.h	/^    int x;$/;"	m	struct:GLCRecti	access:public
GLCRecti::y	glc.h	/^    int y;$/;"	m	struct:GLCRecti	access:public
GLC_CLIP_OP_AND	glc.h	/^    GLC_CLIP_OP_AND,$/;"	e	enum:__anon7
GLC_CLIP_OP_EXCLUDE	glc.h	/^    GLC_CLIP_OP_EXCLUDE,$/;"	e	enum:__anon7
GLC_CLIP_OP_OR	glc.h	/^    GLC_CLIP_OP_OR,$/;"	e	enum:__anon7
GLC_CLIP_OP_SET	glc.h	/^    GLC_CLIP_OP_SET,$/;"	e	enum:__anon7
GLC_ERROR_TEST_FINISH	gl_utils.h	39;"	d
GLC_ERROR_TEST_FLUSH	gl_utils.h	30;"	d
GLC_FILL_MODE_WINDING_NONZERO	glc.h	/^    GLC_FILL_MODE_WINDING_NONZERO,$/;"	e	enum:__anon5
GLC_FILL_MODE_WINDING_ODD	glc.h	/^    GLC_FILL_MODE_WINDING_ODD,$/;"	e	enum:__anon5
GLC_IMAGE_ARGB32	glc.h	/^    GLC_IMAGE_ARGB32,$/;"	e	enum:__anon3
GLC_IMAGE_RGB32	glc.h	/^    GLC_IMAGE_RGB32,$/;"	e	enum:__anon3
GLC_MASK_A	glc.h	/^    GLC_MASK_A,$/;"	e	enum:__anon6
GLC_MASK_B	glc.h	/^    GLC_MASK_B,$/;"	e	enum:__anon6
GLC_OP_AND	glc.h	/^    GLC_OP_AND = 0x1501,$/;"	e	enum:__anon4
GLC_OP_AND_INVERTED	glc.h	/^    GLC_OP_AND_INVERTED = 0x1504,$/;"	e	enum:__anon4
GLC_OP_AND_REVERSE	glc.h	/^    GLC_OP_AND_REVERSE = 0x1502,$/;"	e	enum:__anon4
GLC_OP_CLEAR	glc.h	/^    GLC_OP_CLEAR = 0x1500,$/;"	e	enum:__anon4
GLC_OP_COPY	glc.h	/^    GLC_OP_COPY = 0x1503,$/;"	e	enum:__anon4
GLC_OP_COPY_INVERTED	glc.h	/^    GLC_OP_COPY_INVERTED = 0x150C,$/;"	e	enum:__anon4
GLC_OP_EQUIV	glc.h	/^    GLC_OP_EQUIV = 0x1509,$/;"	e	enum:__anon4
GLC_OP_INVERT	glc.h	/^    GLC_OP_INVERT = 0x150A,$/;"	e	enum:__anon4
GLC_OP_NAND	glc.h	/^    GLC_OP_NAND = 0x150E,$/;"	e	enum:__anon4
GLC_OP_NOOP	glc.h	/^    GLC_OP_NOOP = 0x1505,$/;"	e	enum:__anon4
GLC_OP_NOR	glc.h	/^    GLC_OP_NOR = 0x1508,$/;"	e	enum:__anon4
GLC_OP_OR	glc.h	/^    GLC_OP_OR = 0x1507,$/;"	e	enum:__anon4
GLC_OP_OR_INVERTED	glc.h	/^    GLC_OP_OR_INVERTED = 0x150D,$/;"	e	enum:__anon4
GLC_OP_OR_REVERSE	glc.h	/^    GLC_OP_OR_REVERSE = 0x150B,$/;"	e	enum:__anon4
GLC_OP_SET	glc.h	/^    GLC_OP_SET = 0x150F,$/;"	e	enum:__anon4
GLC_OP_XOR	glc.h	/^    GLC_OP_XOR = 0x1506,$/;"	e	enum:__anon4
GLC_PATH_SEG_BEIZER	glc.c	/^    GLC_PATH_SEG_BEIZER,$/;"	e	enum:__anon14	file:
GLC_PATH_SEG_LINES	glc.c	/^    GLC_PATH_SEG_LINES,$/;"	e	enum:__anon14	file:
GLC_STROKE_ACTIVE	glc.c	/^    GLC_STROKE_ACTIVE,$/;"	e	enum:__anon15	file:
GLC_STROKE_FIRST	glc.c	/^    GLC_STROKE_FIRST,$/;"	e	enum:__anon15	file:
GLC_STROKE_NONACTIVE	glc.c	/^    GLC_STROKE_NONACTIVE,$/;"	e	enum:__anon15	file:
GLCanvas	gl_canvas.c	/^struct GLCanvas {$/;"	s	file:
GLCanvas	gl_canvas.c	/^typedef struct GLCanvas GLCanvas;$/;"	t	typeref:struct:GLCanvas	file:
GLCanvas::base	gl_canvas.c	/^    CanvasBase base;$/;"	m	struct:GLCanvas	file:	access:public
GLCanvas::glc	gl_canvas.c	/^    GLCCtx glc;$/;"	m	struct:GLCanvas	file:	access:public
GLCanvas::private_data	gl_canvas.c	/^    void *private_data;$/;"	m	struct:GLCanvas	file:	access:public
GLCanvas::private_data_size	gl_canvas.c	/^    int private_data_size;$/;"	m	struct:GLCanvas	file:	access:public
GLCanvas::textures_lost	gl_canvas.c	/^    int textures_lost;$/;"	m	struct:GLCanvas	file:	access:public
GL_CANVAS	gl_canvas.c	32;"	d	file:
GL_UTILS_H	gl_utils.h	22;"	d
GNULIB_defined_struct__gl_verify_type	verify.h	174;"	d
GSTACK_PATH	backtrace.c	40;"	d	file:
GdiCanvas	gdi_canvas.c	/^struct GdiCanvas {$/;"	s	file:
GdiCanvas	gdi_canvas.c	/^typedef struct GdiCanvas GdiCanvas;$/;"	t	typeref:struct:GdiCanvas	file:
GdiCanvas::base	gdi_canvas.c	/^    CanvasBase base;$/;"	m	struct:GdiCanvas	file:	access:public
GdiCanvas::dc	gdi_canvas.c	/^    HDC dc;$/;"	m	struct:GdiCanvas	file:	access:public
GdiCanvas::lock	gdi_canvas.c	/^    RecurciveMutex* lock;$/;"	m	struct:GdiCanvas	file:	access:public
GlzData	canvas_base.c	/^typedef struct GlzData {$/;"	s	file:
GlzData	canvas_base.c	/^} GlzData;$/;"	t	typeref:struct:GlzData	file:
GlzData::decode_data	canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:GlzData	file:	access:public
GlzData::decoder	canvas_base.c	/^    SpiceGlzDecoder *decoder;$/;"	m	struct:GlzData	file:	access:public
HASH_FUNC	lz_compress_tmpl.c	113;"	d	file:
HASH_FUNC	lz_compress_tmpl.c	142;"	d	file:
HASH_FUNC	lz_compress_tmpl.c	532;"	d	file:
HASH_FUNC	lz_compress_tmpl.c	65;"	d	file:
HASH_FUNC	lz_compress_tmpl.c	80;"	d	file:
HASH_FUNC	lz_compress_tmpl.c	95;"	d	file:
HASH_FUNC2	lz_compress_tmpl.c	545;"	d	file:
HASH_FUNC_16	lz_compress_tmpl.c	534;"	d	file:
HASH_LOG	lz.c	53;"	d	file:
HASH_MASK	lz.c	55;"	d	file:
HASH_SIZE	lz.c	54;"	d	file:
HAVE_STDLIB_H	gdi_canvas.c	20;"	d	file:
HAVE_STDLIB_H	sw_canvas.c	20;"	d	file:
H_SPICE_COMMON	spice_common.h	19;"	d
H_SPICE_LOG	log.h	19;"	d
HashEntry	lz.c	/^typedef struct HashEntry {$/;"	s	file:
HashEntry	lz.c	/^} HashEntry;$/;"	t	typeref:struct:HashEntry	file:
HashEntry::image_seg	lz.c	/^    LzImageSegment    *image_seg;$/;"	m	struct:HashEntry	file:	access:public
HashEntry::ref	lz.c	/^    uint8_t            *ref;$/;"	m	struct:HashEntry	file:	access:public
ICEIL	lines.c	/^static inline int ICEIL (double x)$/;"	f	file:	signature:(double x)
INC_PATH	makefile	/^INC_PATH=-I.. -I..\/spice-protocol\/ -I. -I\/usr\/include\/pixman-1\/pixman $/;"	m
IS_IMAGE_LOSSY	canvas_base.c	45;"	d	file:
IS_IMAGE_TYPE_PLT	lz_common.h	/^static const int IS_IMAGE_TYPE_PLT[] = {0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0};$/;"	v
IS_IMAGE_TYPE_RGB	lz_common.h	/^static const int IS_IMAGE_TYPE_RGB[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1};$/;"	v
InternaCtx	glc.c	/^struct InternaCtx {$/;"	s	file:
InternaCtx	glc.c	/^typedef struct InternaCtx InternaCtx;$/;"	t	typeref:struct:InternaCtx	file:
InternaCtx::draw_mode	glc.c	/^    int draw_mode;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::free_tess_vertex	glc.c	/^    TassVertex *free_tess_vertex;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::glBlendEquation	glc.c	/^    PFNGLBLENDEQUATIONPROC glBlendEquation;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::height	glc.c	/^    int height;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::line_dash	glc.c	/^    LineDash line_dash;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::line_width	glc.c	/^    GLfloat line_width;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::max_texture_size	glc.c	/^    int max_texture_size;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::pat	glc.c	/^    InternalPat *pat;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::path_stroke	glc.c	/^    PathStroke path_stroke;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::private_tex	glc.c	/^    GLuint private_tex;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::private_tex_height	glc.c	/^    int private_tex_height;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::private_tex_width	glc.c	/^    int private_tex_width;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::stencil_mask	glc.c	/^    int stencil_mask;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::stencil_refs	glc.c	/^    int stencil_refs;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::tesselator	glc.c	/^    GLUtesselator* tesselator;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::used_tess_vertex	glc.c	/^    TassVertex *used_tess_vertex;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::vertex_bufs	glc.c	/^    TassVertexBuf *vertex_bufs;$/;"	m	struct:InternaCtx	file:	access:public
InternaCtx::width	glc.c	/^    int width;$/;"	m	struct:InternaCtx	file:	access:public
InternalPat	glc.c	/^typedef struct InternalPat {$/;"	s	file:
InternalPat	glc.c	/^} InternalPat;$/;"	t	typeref:struct:InternalPat	file:
InternalPat::height	glc.c	/^    int height;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::owner	glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::refs	glc.c	/^    int refs;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::texture	glc.c	/^    GLuint texture;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::width	glc.c	/^    int width;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::x_orign	glc.c	/^    int x_orign;$/;"	m	struct:InternalPat	file:	access:public
InternalPat::y_orign	glc.c	/^    int y_orign;$/;"	m	struct:InternalPat	file:	access:public
InternalPath	glc.c	/^typedef struct InternalPath {$/;"	s	file:
InternalPath	glc.c	/^} InternalPath;$/;"	t	typeref:struct:InternalPath	file:
InternalPath::current_path	glc.c	/^    Path *current_path;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::current_segment	glc.c	/^    PathSegment *current_segment;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::owner	glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::paths	glc.c	/^    Path *paths;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::paths_pos	glc.c	/^    int paths_pos;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::paths_size	glc.c	/^    int paths_size;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::points	glc.c	/^    PathPoint *points;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::points_pos	glc.c	/^    int points_pos;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::points_size	glc.c	/^    int points_size;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::segments	glc.c	/^    PathSegment *segments;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::segments_pos	glc.c	/^    int segments_pos;$/;"	m	struct:InternalPath	file:	access:public
InternalPath::segments_size	glc.c	/^    int segments_size;$/;"	m	struct:InternalPath	file:	access:public
IsXDecreasingOctant	lines.c	239;"	d	file:
IsXMajorOctant	lines.c	237;"	d	file:
IsYDecreasingOctant	lines.c	240;"	d	file:
IsYMajorOctant	lines.c	238;"	d	file:
J	quic.c	/^static int J[MELCSTATES] = {$/;"	v	file:
JoinBevel	lines.h	108;"	d
JoinMiter	lines.h	106;"	d
JoinRound	lines.h	107;"	d
LIBS	makefile	/^LIBS=$/;"	m
LIB_PATH	makefile	/^LIB_PATH=$/;"	m
LIMIT_OFFSET	lz.c	426;"	d	file:
LINES_H	lines.h	50;"	d
LZ_A8	lz.c	468;"	d	file:
LZ_A8	lz.c	470;"	d	file:
LZ_A8	lz.c	472;"	d	file:
LZ_A8	lz_compress_tmpl.c	544;"	d	file:
LZ_A8	lz_decompress_tmpl.c	337;"	d	file:
LZ_EXPECT_CONDITIONAL	lz.c	377;"	d	file:
LZ_EXPECT_CONDITIONAL	lz.c	380;"	d	file:
LZ_EXPECT_CONDITIONAL	lz.c	501;"	d	file:
LZ_IMAGE_TYPE_A8	lz_common.h	/^    LZ_IMAGE_TYPE_A8$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_INVALID	lz_common.h	/^    LZ_IMAGE_TYPE_INVALID,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_LOG	lz_common.h	53;"	d
LZ_IMAGE_TYPE_MASK	lz_common.h	52;"	d
LZ_IMAGE_TYPE_PLT1_BE	lz_common.h	/^    LZ_IMAGE_TYPE_PLT1_BE,      \/\/ PLT stands for palette$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_PLT1_LE	lz_common.h	/^    LZ_IMAGE_TYPE_PLT1_LE,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_PLT4_BE	lz_common.h	/^    LZ_IMAGE_TYPE_PLT4_BE,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_PLT4_LE	lz_common.h	/^    LZ_IMAGE_TYPE_PLT4_LE,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_PLT8	lz_common.h	/^    LZ_IMAGE_TYPE_PLT8,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_RGB16	lz_common.h	/^    LZ_IMAGE_TYPE_RGB16,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_RGB24	lz_common.h	/^    LZ_IMAGE_TYPE_RGB24,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_RGB32	lz_common.h	/^    LZ_IMAGE_TYPE_RGB32,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_RGBA	lz_common.h	/^    LZ_IMAGE_TYPE_RGBA,$/;"	e	enum:__anon25
LZ_IMAGE_TYPE_XXXA	lz_common.h	/^    LZ_IMAGE_TYPE_XXXA,$/;"	e	enum:__anon25
LZ_MAGIC	lz_common.h	66;"	d
LZ_MAX_WINDOW_SIZE	lz_common.h	34;"	d
LZ_PLT	lz.c	438;"	d	file:
LZ_PLT	lz.c	440;"	d	file:
LZ_PLT	lz.c	443;"	d	file:
LZ_PLT	lz.c	448;"	d	file:
LZ_PLT	lz.c	453;"	d	file:
LZ_PLT	lz.c	458;"	d	file:
LZ_PLT	lz.c	463;"	d	file:
LZ_PLT	lz_compress_tmpl.c	539;"	d	file:
LZ_PLT	lz_decompress_tmpl.c	328;"	d	file:
LZ_READU16	lz_compress_tmpl.c	531;"	d	file:
LZ_RGB16	lz.c	476;"	d	file:
LZ_RGB16	lz.c	478;"	d	file:
LZ_RGB16	lz.c	480;"	d	file:
LZ_RGB16	lz_compress_tmpl.c	541;"	d	file:
LZ_RGB16	lz_decompress_tmpl.c	334;"	d	file:
LZ_RGB24	lz.c	484;"	d	file:
LZ_RGB24	lz.c	486;"	d	file:
LZ_RGB24	lz_compress_tmpl.c	542;"	d	file:
LZ_RGB24	lz_decompress_tmpl.c	335;"	d	file:
LZ_RGB32	lz.c	490;"	d	file:
LZ_RGB32	lz.c	492;"	d	file:
LZ_RGB32	lz_compress_tmpl.c	543;"	d	file:
LZ_RGB32	lz_decompress_tmpl.c	336;"	d	file:
LZ_RGB_ALPHA	lz.c	495;"	d	file:
LZ_RGB_ALPHA	lz.c	497;"	d	file:
LZ_RGB_ALPHA	lz_compress_tmpl.c	540;"	d	file:
LZ_RGB_ALPHA	lz_decompress_tmpl.c	338;"	d	file:
LZ_UNEXPECT_CONDITIONAL	lz.c	378;"	d	file:
LZ_UNEXPECT_CONDITIONAL	lz.c	381;"	d	file:
LZ_UNEXPECT_CONDITIONAL	lz.c	500;"	d	file:
LZ_VERSION	lz_common.h	69;"	d
LZ_VERSION_MAJOR	lz_common.h	67;"	d
LZ_VERSION_MINOR	lz_common.h	68;"	d
LineDash	glc.c	/^typedef struct LineDash {$/;"	s	file:
LineDash	glc.c	/^} LineDash;$/;"	t	typeref:struct:LineDash	file:
LineDash::cur_dash	glc.c	/^    int cur_dash;$/;"	m	struct:LineDash	file:	access:public
LineDash::dash_pos	glc.c	/^    double dash_pos;$/;"	m	struct:LineDash	file:	access:public
LineDash::dashes	glc.c	/^    double *dashes;$/;"	m	struct:LineDash	file:	access:public
LineDash::num_dashes	glc.c	/^    int num_dashes;$/;"	m	struct:LineDash	file:	access:public
LineDash::offset	glc.c	/^    double offset;$/;"	m	struct:LineDash	file:	access:public
LineDoubleDash	lines.h	95;"	d
LineFacePtr	lines.c	/^} LineFaceRec, *LineFacePtr;$/;"	t	typeref:struct:_LineFace	file:
LineFaceRec	lines.c	/^} LineFaceRec, *LineFacePtr;$/;"	t	typeref:struct:_LineFace	file:
LineOnOffDash	lines.h	94;"	d
LineSolid	lines.h	93;"	d
LzContext	lz.h	/^typedef void *LzContext;$/;"	t
LzData	canvas_base.c	/^typedef struct LzData {$/;"	s	file:
LzData	canvas_base.c	/^} LzData;$/;"	t	typeref:struct:LzData	file:
LzData::decode_data	canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:LzData	file:	access:public
LzData::jmp_env	canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:LzData	file:	access:public
LzData::lz	canvas_base.c	/^    LzContext *lz;$/;"	m	struct:LzData	file:	access:public
LzData::message_buf	canvas_base.c	/^    char message_buf[512];$/;"	m	struct:LzData	file:	access:public
LzData::usr	canvas_base.c	/^    LzUsrContext usr;$/;"	m	struct:LzData	file:	access:public
LzDecodeUsrData	canvas_utils.h	/^typedef struct LzDecodeUsrData {$/;"	s
LzDecodeUsrData	canvas_utils.h	/^} LzDecodeUsrData;$/;"	t	typeref:struct:LzDecodeUsrData
LzDecodeUsrData::dc	canvas_utils.h	/^    HDC dc;$/;"	m	struct:LzDecodeUsrData	access:public
LzDecodeUsrData::out_surface	canvas_utils.h	/^    pixman_image_t       *out_surface;$/;"	m	struct:LzDecodeUsrData	access:public
LzImageSegment	lz.c	/^struct LzImageSegment {$/;"	s	file:
LzImageSegment	lz.c	/^typedef struct LzImageSegment LzImageSegment;$/;"	t	typeref:struct:LzImageSegment	file:
LzImageSegment::lines	lz.c	/^    uint8_t            *lines;$/;"	m	struct:LzImageSegment	file:	access:public
LzImageSegment::lines_end	lz.c	/^    uint8_t            *lines_end;$/;"	m	struct:LzImageSegment	file:	access:public
LzImageSegment::next	lz.c	/^    LzImageSegment    *next;$/;"	m	struct:LzImageSegment	file:	access:public
LzImageSegment::size_delta	lz.c	/^    unsigned int size_delta;    \/\/ total size of the previous segments in units of$/;"	m	struct:LzImageSegment	file:	access:public
LzImageType	lz_common.h	/^} LzImageType;$/;"	t	typeref:enum:__anon25
LzUsrContext	lz.h	/^struct LzUsrContext {$/;"	s
LzUsrContext	lz.h	/^typedef struct LzUsrContext LzUsrContext;$/;"	t	typeref:struct:LzUsrContext
LzUsrContext::error	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::free	lz.h	/^    void (*free)(LzUsrContext *usr, void *ptr);$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::info	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::malloc	lz.h	/^    void    *(*malloc)(LzUsrContext *usr, int size);$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::more_lines	lz.h	/^    int (*more_lines)(LzUsrContext *usr, uint8_t **lines);      \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::more_space	lz.h	/^    int (*more_space)(LzUsrContext *usr, uint8_t **io_ptr);     \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext	access:public
LzUsrContext::warn	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
MALLOC_ERROR	mem.c	30;"	d	file:
MARSHALLER_BUFFER_SIZE	marshaller.c	56;"	d	file:
MASK	canvas_base.c	3322;"	d	file:
MAXNUMCODES	quic.c	46;"	d	file:
MAX_CHANNELS	quic.c	126;"	d	file:
MAX_COORDINATE	lines.c	79;"	d	file:
MAX_COPY	lz.c	423;"	d	file:
MAX_COPY	lz_common.h	35;"	d
MAX_DISTANCE	lz.c	434;"	d	file:
MAX_FARDISTANCE	lz.c	435;"	d	file:
MAX_LEN	lz.c	424;"	d	file:
MAXevol	quic.c	51;"	d	file:
MAXwminext	quic.c	66;"	d	file:
MELCSTATES	quic.c	538;"	d	file:
MEMCLEAR	quic_config.h	29;"	d
MIN_COORDINATE	lines.c	80;"	d	file:
MIN_FILE_SIZE	lz.c	427;"	d	file:
MINevol	quic.c	50;"	d	file:
MINwminext	quic.c	65;"	d	file:
MINwmistart	quic.c	55;"	d	file:
MIOUTCODES	lines.c	196;"	d	file:
MIPOLYRELOADLEFT	lines.c	328;"	d	file:
MIPOLYRELOADRIGHT	lines.c	340;"	d	file:
MIPOLYSTEPLEFT	lines.c	352;"	d	file:
MIPOLYSTEPRIGHT	lines.c	360;"	d	file:
MI_OUTPUT_POINT	lines.c	1436;"	d	file:
MORE_X	glc.c	272;"	d	file:
MUTEX_INIT	mutex.h	29;"	d
MUTEX_LOCK	mutex.h	30;"	d
MUTEX_UNLOCK	mutex.h	31;"	d
MarshallerBuffer	marshaller.c	/^struct MarshallerBuffer {$/;"	s	file:
MarshallerBuffer	marshaller.c	/^typedef struct MarshallerBuffer MarshallerBuffer;$/;"	t	typeref:struct:MarshallerBuffer	file:
MarshallerBuffer::data	marshaller.c	/^    uint8_t data[MARSHALLER_BUFFER_SIZE];$/;"	m	struct:MarshallerBuffer	file:	access:public
MarshallerBuffer::next	marshaller.c	/^    MarshallerBuffer *next;$/;"	m	struct:MarshallerBuffer	file:	access:public
MarshallerItem	marshaller.c	/^} MarshallerItem;$/;"	t	typeref:struct:__anon34	file:
MarshallerRef	marshaller.c	/^} MarshallerRef;$/;"	t	typeref:struct:__anon35	file:
NEXT_LINE	quic.c	1227;"	d	file:
N_STATIC_ITEMS	marshaller.c	64;"	d	file:
NextBand	lines.c	3491;"	d	file:
OBJS	makefile	/^OBJS=generated_client_demarshallers.o generated_client_demarshallers1.o generated_client_marshallers.o generated_client_marshallers1.o$/;"	m
OCTANT1	lines.c	140;"	d	file:
OCTANT2	lines.c	141;"	d	file:
OCTANT3	lines.c	142;"	d	file:
OCTANT4	lines.c	143;"	d	file:
OCTANT5	lines.c	144;"	d	file:
OCTANT6	lines.c	145;"	d	file:
OCTANT7	lines.c	146;"	d	file:
OCTANT8	lines.c	147;"	d	file:
OGLCTX_TYPE_PBUF	ogl_ctx.c	/^    OGLCTX_TYPE_PBUF,$/;"	e	enum:__anon26	file:
OGLCTX_TYPE_PIXMAP	ogl_ctx.c	/^    OGLCTX_TYPE_PIXMAP,$/;"	e	enum:__anon26	file:
OGLCtx	ogl_ctx.c	/^struct OGLCtx {$/;"	s	file:
OGLCtx	ogl_ctx.h	/^typedef struct OGLCtx OGLCtx;$/;"	t	typeref:struct:OGLCtx
OGLCtx::drawable	ogl_ctx.c	/^    GLXDrawable drawable;$/;"	m	struct:OGLCtx	file:	access:public
OGLCtx::glx_context	ogl_ctx.c	/^    GLXContext glx_context;$/;"	m	struct:OGLCtx	file:	access:public
OGLCtx::type	ogl_ctx.c	/^    int type;$/;"	m	struct:OGLCtx	file:	access:public
OGLCtx::x_display	ogl_ctx.c	/^    Display *x_display;$/;"	m	struct:OGLCtx	file:	access:public
OGLPixmapCtx	ogl_ctx.c	/^typedef struct OGLPixmapCtx {$/;"	s	file:
OGLPixmapCtx	ogl_ctx.c	/^} OGLPixmapCtx;$/;"	t	typeref:struct:OGLPixmapCtx	file:
OGLPixmapCtx::base	ogl_ctx.c	/^    OGLCtx base;$/;"	m	struct:OGLPixmapCtx	file:	access:public
OGLPixmapCtx::pixmap	ogl_ctx.c	/^    Pixmap pixmap;$/;"	m	struct:OGLPixmapCtx	file:	access:public
ONE_BYTE	quic.c	816;"	d	file:
ONE_BYTE	quic_tmpl.c	23;"	d	file:
OUTCODES	lines.c	190;"	d	file:
OUT_ABOVE	lines.c	187;"	d	file:
OUT_BELOW	lines.c	188;"	d	file:
OUT_LEFT	lines.c	185;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	161;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	165;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	177;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	181;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	197;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	203;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	215;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	340;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	78;"	d	file:
OUT_PIXEL	lz_decompress_tmpl.c	82;"	d	file:
OUT_RIGHT	lines.c	186;"	d	file:
PIXEL	lz_compress_tmpl.c	106;"	d	file:
PIXEL	lz_compress_tmpl.c	126;"	d	file:
PIXEL	lz_compress_tmpl.c	132;"	d	file:
PIXEL	lz_compress_tmpl.c	528;"	d	file:
PIXEL	lz_compress_tmpl.c	60;"	d	file:
PIXEL	lz_compress_tmpl.c	75;"	d	file:
PIXEL	lz_compress_tmpl.c	91;"	d	file:
PIXEL	quic_rgb_tmpl.c	24;"	d	file:
PIXEL	quic_rgb_tmpl.c	45;"	d	file:
PIXEL	quic_rgb_tmpl.c	66;"	d	file:
PIXEL	quic_rgb_tmpl.c	729;"	d	file:
PIXEL	quic_rgb_tmpl.c	87;"	d	file:
PIXEL	quic_tmpl.c	25;"	d	file:
PIXEL	quic_tmpl.c	31;"	d	file:
PIXEL	quic_tmpl.c	37;"	d	file:
PIXEL	quic_tmpl.c	621;"	d	file:
PIXEL_ID	lz_compress_tmpl.c	163;"	d	file:
PIXEL_ID	lz_compress_tmpl.c	527;"	d	file:
PIXMAN_DONT_DEFINE_STDINT	pixman_utils.h	25;"	d
PLT1_BE	lz.c	459;"	d	file:
PLT1_BE	lz_decompress_tmpl.c	332;"	d	file:
PLT1_LE	lz.c	464;"	d	file:
PLT1_LE	lz_decompress_tmpl.c	333;"	d	file:
PLT4_BE	lz.c	449;"	d	file:
PLT4_BE	lz_decompress_tmpl.c	330;"	d	file:
PLT4_LE	lz.c	454;"	d	file:
PLT4_LE	lz_decompress_tmpl.c	331;"	d	file:
PLT8	lz.c	444;"	d	file:
PLT8	lz_decompress_tmpl.c	329;"	d	file:
PLT_PIXELS_PER_BYTE	lz_common.h	/^static const int PLT_PIXELS_PER_BYTE[] = {0, 8, 8, 2, 2, 1};$/;"	v
PRED_1	quic.c	32;"	d	file:
Path	glc.c	/^} Path;$/;"	t	typeref:struct:Pathpath	file:
PathPoint	glc.c	/^typedef struct PathPoint {$/;"	s	file:
PathPoint	glc.c	/^} PathPoint;$/;"	t	typeref:struct:PathPoint	file:
PathPoint::x	glc.c	/^    double x;$/;"	m	struct:PathPoint	file:	access:public
PathPoint::y	glc.c	/^    double y;$/;"	m	struct:PathPoint	file:	access:public
PathPoint::z	glc.c	/^    double z;$/;"	m	struct:PathPoint	file:	access:public
PathSegment	glc.c	/^typedef struct PathSegment {$/;"	s	file:
PathSegment	glc.c	/^} PathSegment;$/;"	t	typeref:struct:PathSegment	file:
PathSegment::count	glc.c	/^    int count;$/;"	m	struct:PathSegment	file:	access:public
PathSegment::type	glc.c	/^    int type;$/;"	m	struct:PathSegment	file:	access:public
PathStroke	glc.c	/^typedef struct PathStroke {$/;"	s	file:
PathStroke	glc.c	/^} PathStroke;$/;"	t	typeref:struct:PathStroke	file:
PathStroke::state	glc.c	/^    int state;$/;"	m	struct:PathStroke	file:	access:public
PathStroke::x	glc.c	/^    double x;$/;"	m	struct:PathStroke	file:	access:public
PathStroke::y	glc.c	/^    double y;$/;"	m	struct:PathStroke	file:	access:public
Pathpath	glc.c	/^typedef struct Pathpath {$/;"	s	file:
Pathpath::num_segments	glc.c	/^    int num_segments;$/;"	m	struct:Pathpath	file:	access:public
Pathpath::start_point	glc.c	/^    int start_point;$/;"	m	struct:Pathpath	file:	access:public
PixmanData	canvas_utils.h	/^typedef struct PixmanData {$/;"	s
PixmanData	canvas_utils.h	/^} PixmanData;$/;"	t	typeref:struct:PixmanData
PixmanData::bitmap	canvas_utils.h	/^    HBITMAP bitmap;$/;"	m	struct:PixmanData	access:public
PixmanData::data	canvas_utils.h	/^    uint8_t *data;$/;"	m	struct:PixmanData	access:public
PixmanData::format	canvas_utils.h	/^    pixman_format_code_t format;$/;"	m	struct:PixmanData	access:public
PixmanData::mutex	canvas_utils.h	/^    HANDLE mutex;$/;"	m	struct:PixmanData	access:public
PointerInfo	generated_client_demarshallers.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	generated_client_demarshallers.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerInfo	generated_client_demarshallers1.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	generated_client_demarshallers1.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerInfo	generated_server_demarshallers.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	generated_server_demarshallers.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerInfo::dest	generated_client_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::dest	generated_client_demarshallers1.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::dest	generated_server_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::nelements	generated_client_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::nelements	generated_client_demarshallers1.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::nelements	generated_server_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::offset	generated_client_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::offset	generated_client_demarshallers1.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::offset	generated_server_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::parse	generated_client_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::parse	generated_client_demarshallers1.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
PointerInfo::parse	generated_server_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
PolyEdgePtr	lines.c	/^} PolyEdgeRec, *PolyEdgePtr;$/;"	t	typeref:struct:_PolyEdge	file:
PolyEdgeRec	lines.c	/^} PolyEdgeRec, *PolyEdgePtr;$/;"	t	typeref:struct:_PolyEdge	file:
PolySlopePtr	lines.c	/^} PolySlopeRec, *PolySlopePtr;$/;"	t	typeref:struct:_PolySlope	file:
PolySlopeRec	lines.c	/^} PolySlopeRec, *PolySlopePtr;$/;"	t	typeref:struct:_PolySlope	file:
PolyVertexPtr	lines.c	/^} PolyVertexRec, *PolyVertexPtr;$/;"	t	typeref:struct:_PolyVertex	file:
PolyVertexRec	lines.c	/^} PolyVertexRec, *PolyVertexPtr;$/;"	t	typeref:struct:_PolyVertex	file:
QRegion	region.h	/^typedef pixman_region32_t QRegion;$/;"	t
QUIC_COMPRESS_RGB	quic.c	1232;"	d	file:
QUIC_ERROR	quic.h	37;"	d
QUIC_FAMILY_5BPC	quic.c	329;"	d	file:
QUIC_FAMILY_5BPC	quic_family_tmpl.c	31;"	d	file:
QUIC_FAMILY_8BPC	quic.c	325;"	d	file:
QUIC_FAMILY_8BPC	quic_family_tmpl.c	23;"	d	file:
QUIC_IMAGE_TYPE_GRAY	quic.h	/^    QUIC_IMAGE_TYPE_GRAY,$/;"	e	enum:__anon24
QUIC_IMAGE_TYPE_INVALID	quic.h	/^    QUIC_IMAGE_TYPE_INVALID,$/;"	e	enum:__anon24
QUIC_IMAGE_TYPE_RGB16	quic.h	/^    QUIC_IMAGE_TYPE_RGB16,$/;"	e	enum:__anon24
QUIC_IMAGE_TYPE_RGB24	quic.h	/^    QUIC_IMAGE_TYPE_RGB24,$/;"	e	enum:__anon24
QUIC_IMAGE_TYPE_RGB32	quic.h	/^    QUIC_IMAGE_TYPE_RGB32,$/;"	e	enum:__anon24
QUIC_IMAGE_TYPE_RGBA	quic.h	/^    QUIC_IMAGE_TYPE_RGBA$/;"	e	enum:__anon24
QUIC_MAGIC	quic.c	38;"	d	file:
QUIC_OK	quic.h	38;"	d
QUIC_RGB	quic.c	36;"	d	file:
QUIC_RGB16	quic.c	830;"	d	file:
QUIC_RGB16	quic_rgb_tmpl.c	65;"	d	file:
QUIC_RGB16_TO_32	quic.c	833;"	d	file:
QUIC_RGB16_TO_32	quic_rgb_tmpl.c	86;"	d	file:
QUIC_RGB24	quic.c	827;"	d	file:
QUIC_RGB24	quic_rgb_tmpl.c	44;"	d	file:
QUIC_RGB32	quic.c	824;"	d	file:
QUIC_RGB32	quic_rgb_tmpl.c	23;"	d	file:
QUIC_UNCOMPRESS_RGB	quic.c	1515;"	d	file:
QUIC_VERSION	quic.c	41;"	d	file:
QUIC_VERSION_MAJOR	quic.c	39;"	d	file:
QUIC_VERSION_MINOR	quic.c	40;"	d	file:
QuicContext	quic.h	/^typedef void *QuicContext;$/;"	t
QuicData	canvas_base.c	/^typedef struct QuicData {$/;"	s	file:
QuicData	canvas_base.c	/^} QuicData;$/;"	t	typeref:struct:QuicData	file:
QuicData::chunks	canvas_base.c	/^    SpiceChunks *chunks;$/;"	m	struct:QuicData	file:	access:public
QuicData::current_chunk	canvas_base.c	/^    uint32_t current_chunk;$/;"	m	struct:QuicData	file:	access:public
QuicData::jmp_env	canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:QuicData	file:	access:public
QuicData::message_buf	canvas_base.c	/^    char message_buf[512];$/;"	m	struct:QuicData	file:	access:public
QuicData::quic	canvas_base.c	/^    QuicContext *quic;$/;"	m	struct:QuicData	file:	access:public
QuicData::usr	canvas_base.c	/^    QuicUsrContext usr;$/;"	m	struct:QuicData	file:	access:public
QuicFamily	quic.c	/^typedef struct QuicFamily {$/;"	s	file:
QuicFamily	quic.c	/^} QuicFamily;$/;"	t	typeref:struct:QuicFamily	file:
QuicFamily::golomb_code	quic.c	/^    unsigned int golomb_code[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::golomb_code_len	quic.c	/^    unsigned int golomb_code_len[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::nGRcodewords	quic.c	/^    unsigned int nGRcodewords[MAXNUMCODES];      \/* indexed by code number, contains number of$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::notGRcwlen	quic.c	/^    unsigned int notGRcwlen[MAXNUMCODES];        \/* indexed by code number, contains codeword$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::notGRprefixmask	quic.c	/^    unsigned int notGRprefixmask[MAXNUMCODES];   \/* indexed by code number, contains mask to$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::notGRsuffixlen	quic.c	/^    unsigned int notGRsuffixlen[MAXNUMCODES];    \/* indexed by code number, contains suffix$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::xlatL2U	quic.c	/^    unsigned int xlatL2U[256];$/;"	m	struct:QuicFamily	file:	access:public
QuicFamily::xlatU2L	quic.c	/^    BYTE xlatU2L[256];$/;"	m	struct:QuicFamily	file:	access:public
QuicImageType	quic.h	/^} QuicImageType;$/;"	t	typeref:enum:__anon24
QuicUsrContext	quic.h	/^struct QuicUsrContext {$/;"	s
QuicUsrContext	quic.h	/^typedef struct QuicUsrContext QuicUsrContext;$/;"	t	typeref:struct:QuicUsrContext
QuicUsrContext::error	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::free	quic.h	/^    void (*free)(QuicUsrContext *usr, void *ptr);$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::info	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::malloc	quic.h	/^    void *(*malloc)(QuicUsrContext *usr, int size);$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::more_lines	quic.h	/^    int (*more_lines)(QuicUsrContext *usr, uint8_t **lines); \/\/ on return the last line of previous$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::more_space	quic.h	/^    int (*more_space)(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed);$/;"	m	struct:QuicUsrContext	access:public
QuicUsrContext::warn	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
QuickSortSpans	lines.c	/^static void QuickSortSpans($/;"	f	file:	signature:( DDXPointRec spans[], int widths[], int numSpans)
QuickSortSpansX	lines.c	/^QuickSortSpansX (DDXPointRec points[], int widths[], int numSpans)$/;"	f	file:	signature:(DDXPointRec points[], int widths[], int numSpans)
RASTER_OP	pixman_utils.c	85;"	d	file:
REGION_TEST_ALL	region.h	35;"	d
REGION_TEST_LEFT_EXCLUSIVE	region.h	32;"	d
REGION_TEST_RIGHT_EXCLUSIVE	region.h	33;"	d
REGION_TEST_SHARED	region.h	34;"	d
RGB_BYTES_PER_PIXEL	lz_common.h	/^static const int RGB_BYTES_PER_PIXEL[] = {0, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 1};$/;"	v
RING_FOREACH	ring.h	143;"	d
RING_FOREACH_REVERSED	ring.h	148;"	d
RING_FOREACH_SAFE	ring.h	137;"	d
RLE	quic.c	30;"	d	file:
RLE_PRED_1_IMP	quic_rgb_tmpl.c	189;"	d	file:
RLE_PRED_1_IMP	quic_rgb_tmpl.c	197;"	d	file:
RLE_PRED_1_IMP	quic_rgb_tmpl.c	735;"	d	file:
RLE_PRED_1_IMP	quic_tmpl.c	54;"	d	file:
RLE_PRED_1_IMP	quic_tmpl.c	626;"	d	file:
RLE_PRED_1_IMP	quic_tmpl.c	62;"	d	file:
RLE_PRED_2	quic.c	34;"	d	file:
RLE_PRED_2_IMP	quic_rgb_tmpl.c	201;"	d	file:
RLE_PRED_2_IMP	quic_rgb_tmpl.c	208;"	d	file:
RLE_PRED_2_IMP	quic_rgb_tmpl.c	736;"	d	file:
RLE_PRED_2_IMP	quic_tmpl.c	627;"	d	file:
RLE_PRED_2_IMP	quic_tmpl.c	66;"	d	file:
RLE_PRED_2_IMP	quic_tmpl.c	73;"	d	file:
RLE_PRED_3_IMP	quic_rgb_tmpl.c	212;"	d	file:
RLE_PRED_3_IMP	quic_rgb_tmpl.c	217;"	d	file:
RLE_PRED_3_IMP	quic_rgb_tmpl.c	737;"	d	file:
RLE_PRED_3_IMP	quic_tmpl.c	628;"	d	file:
RLE_PRED_3_IMP	quic_tmpl.c	77;"	d	file:
RLE_PRED_3_IMP	quic_tmpl.c	82;"	d	file:
RLE_STAT	quic.c	31;"	d	file:
ROP3_FILL_HANDLERS	rop3.c	373;"	d	file:
ROP3_HANDLERS	rop3.c	149;"	d	file:
ROP3_HANDLERS_DEPTH	rop3.c	67;"	d	file:
ROP3_NUM_OPS	rop3.c	36;"	d	file:
ROPInput	canvas_base.c	/^} ROPInput;$/;"	t	typeref:enum:__anon27	file:
ROP_INPUT_BRUSH	canvas_base.c	/^    ROP_INPUT_BRUSH,$/;"	e	enum:__anon27	file:
ROP_INPUT_DEST	canvas_base.c	/^    ROP_INPUT_DEST$/;"	e	enum:__anon27	file:
ROP_INPUT_SRC	canvas_base.c	/^    ROP_INPUT_SRC,$/;"	e	enum:__anon27	file:
ROP_TABLE	pixman_utils.c	126;"	d	file:
ROUND	canvas_base.c	43;"	d	file:
Ring	ring.h	/^typedef struct Ring {$/;"	s
Ring	ring.h	/^} Ring;$/;"	t	typeref:struct:Ring
Ring::next	ring.h	/^    RingItem *next;$/;"	m	struct:Ring	access:public
Ring::prev	ring.h	/^    RingItem *prev;$/;"	m	struct:Ring	access:public
RingItem	ring.h	/^typedef struct Ring RingItem;$/;"	t	typeref:struct:Ring
SAME_PIXEL	lz_compress_tmpl.c	158;"	d	file:
SAME_PIXEL	lz_compress_tmpl.c	530;"	d	file:
SAME_PIXEL	lz_compress_tmpl.c	64;"	d	file:
SAME_PIXEL	lz_compress_tmpl.c	79;"	d	file:
SAME_PIXEL	lz_compress_tmpl.c	94;"	d	file:
SAME_PIXEL	quic_rgb_tmpl.c	106;"	d	file:
SAME_PIXEL	quic_rgb_tmpl.c	734;"	d	file:
SET_GLC_BOX	gl_canvas.c	164;"	d	file:
SET_GLC_RECT	gl_canvas.c	157;"	d	file:
SET_b	quic_rgb_tmpl.c	101;"	d	file:
SET_b	quic_rgb_tmpl.c	38;"	d	file:
SET_b	quic_rgb_tmpl.c	59;"	d	file:
SET_b	quic_rgb_tmpl.c	763;"	d	file:
SET_b	quic_rgb_tmpl.c	80;"	d	file:
SET_g	quic_rgb_tmpl.c	36;"	d	file:
SET_g	quic_rgb_tmpl.c	57;"	d	file:
SET_g	quic_rgb_tmpl.c	761;"	d	file:
SET_g	quic_rgb_tmpl.c	78;"	d	file:
SET_g	quic_rgb_tmpl.c	99;"	d	file:
SET_r	quic_rgb_tmpl.c	34;"	d	file:
SET_r	quic_rgb_tmpl.c	55;"	d	file:
SET_r	quic_rgb_tmpl.c	759;"	d	file:
SET_r	quic_rgb_tmpl.c	76;"	d	file:
SET_r	quic_rgb_tmpl.c	97;"	d	file:
SIZE_OVERFLOWS	mem.c	137;"	d	file:
SND_CODEC_ANY_FREQUENCY	snd_codec.h	53;"	d
SND_CODEC_CELT_BIT_RATE	snd_codec.h	38;"	d
SND_CODEC_CELT_COMPRESSED_FRAME_BYTES	snd_codec.h	40;"	d
SND_CODEC_CELT_FRAME_SIZE	snd_codec.h	37;"	d
SND_CODEC_CELT_PLAYBACK_FREQ	snd_codec.h	39;"	d
SND_CODEC_DECODE	snd_codec.h	64;"	d
SND_CODEC_DECODER_UNAVAILABLE	snd_codec.h	58;"	d
SND_CODEC_DECODE_FAILED	snd_codec.h	60;"	d
SND_CODEC_ENCODE	snd_codec.h	63;"	d
SND_CODEC_ENCODER_UNAVAILABLE	snd_codec.h	57;"	d
SND_CODEC_ENCODE_FAILED	snd_codec.h	59;"	d
SND_CODEC_INVALID_ENCODE_SIZE	snd_codec.h	61;"	d
SND_CODEC_MAX_COMPRESSED_BYTES	snd_codec.h	51;"	d
SND_CODEC_MAX_FRAME_BYTES	snd_codec.h	50;"	d
SND_CODEC_MAX_FRAME_SIZE	snd_codec.h	49;"	d
SND_CODEC_OK	snd_codec.h	55;"	d
SND_CODEC_OPUS_COMPRESSED_FRAME_BYTES	snd_codec.h	45;"	d
SND_CODEC_OPUS_FRAME_SIZE	snd_codec.h	43;"	d
SND_CODEC_OPUS_PLAYBACK_FREQ	snd_codec.h	44;"	d
SND_CODEC_PLAYBACK_CHAN	snd_codec.h	47;"	d
SND_CODEC_UNAVAILABLE	snd_codec.h	56;"	d
SOLID_RASTER_OP	pixman_utils.c	41;"	d	file:
SPICE_ABORT_LEVEL_DEFAULT	log.c	65;"	d	file:
SPICE_ABORT_LEVEL_DEFAULT	log.c	67;"	d	file:
SPICE_AGENT_MAX_DATA_SIZE	messages.h	199;"	d
SPICE_ATTR_NORETURN	macros.h	23;"	d
SPICE_ATTR_NORETURN	macros.h	28;"	d
SPICE_ATTR_PRINTF	macros.h	25;"	d
SPICE_ATTR_PRINTF	macros.h	29;"	d
SPICE_CHUNKS_FLAGS_FREE	mem.h	/^    SPICE_CHUNKS_FLAGS_FREE = (1<<1)$/;"	e	enum:__anon36
SPICE_CHUNKS_FLAGS_UNSTABLE	mem.h	/^    SPICE_CHUNKS_FLAGS_UNSTABLE = (1<<0),$/;"	e	enum:__anon36
SPICE_FIXED28_4	draw.h	/^typedef int32_t SPICE_FIXED28_4;$/;"	t
SPICE_GET_ADDRESS	draw.h	41;"	d
SPICE_LOG_DOMAIN	log.h	28;"	d
SPICE_LOG_LEVEL_CRITICAL	log.h	/^    SPICE_LOG_LEVEL_CRITICAL,$/;"	e	enum:__anon20
SPICE_LOG_LEVEL_DEBUG	log.h	/^    SPICE_LOG_LEVEL_DEBUG,$/;"	e	enum:__anon20
SPICE_LOG_LEVEL_ERROR	log.h	/^    SPICE_LOG_LEVEL_ERROR,$/;"	e	enum:__anon20
SPICE_LOG_LEVEL_INFO	log.h	/^    SPICE_LOG_LEVEL_INFO,$/;"	e	enum:__anon20
SPICE_LOG_LEVEL_WARNING	log.h	/^    SPICE_LOG_LEVEL_WARNING,$/;"	e	enum:__anon20
SPICE_ROP_AND	pixman_utils.h	/^    SPICE_ROP_AND,           \/* 0x1    src AND dst *\/$/;"	e	enum:__anon19
SPICE_ROP_AND_INVERTED	pixman_utils.h	/^    SPICE_ROP_AND_INVERTED,  \/* 0x4    (NOT src) AND dst *\/$/;"	e	enum:__anon19
SPICE_ROP_AND_REVERSE	pixman_utils.h	/^    SPICE_ROP_AND_REVERSE,   \/* 0x2    src AND NOT dst *\/$/;"	e	enum:__anon19
SPICE_ROP_CLEAR	pixman_utils.h	/^    SPICE_ROP_CLEAR,         \/* 0x0    0 *\/$/;"	e	enum:__anon19
SPICE_ROP_COPY	pixman_utils.h	/^    SPICE_ROP_COPY,          \/* 0x3    src *\/$/;"	e	enum:__anon19
SPICE_ROP_COPY_INVERTED	pixman_utils.h	/^    SPICE_ROP_COPY_INVERTED, \/* 0xc    NOT src *\/$/;"	e	enum:__anon19
SPICE_ROP_EQUIV	pixman_utils.h	/^    SPICE_ROP_EQUIV,         \/* 0x9    (NOT src) XOR dst *\/$/;"	e	enum:__anon19
SPICE_ROP_INVERT	pixman_utils.h	/^    SPICE_ROP_INVERT,        \/* 0xa    NOT dst *\/$/;"	e	enum:__anon19
SPICE_ROP_NAND	pixman_utils.h	/^    SPICE_ROP_NAND,          \/* 0xe    (NOT src) OR (NOT dst) *\/$/;"	e	enum:__anon19
SPICE_ROP_NOOP	pixman_utils.h	/^    SPICE_ROP_NOOP,          \/* 0x5    dst *\/$/;"	e	enum:__anon19
SPICE_ROP_NOR	pixman_utils.h	/^    SPICE_ROP_NOR,           \/* 0x8    (NOT src) AND (NOT dst) *\/$/;"	e	enum:__anon19
SPICE_ROP_OR	pixman_utils.h	/^    SPICE_ROP_OR,            \/* 0x7    src OR dst *\/$/;"	e	enum:__anon19
SPICE_ROP_OR_INVERTED	pixman_utils.h	/^    SPICE_ROP_OR_INVERTED,   \/* 0xd    (NOT src) OR dst *\/$/;"	e	enum:__anon19
SPICE_ROP_OR_REVERSE	pixman_utils.h	/^    SPICE_ROP_OR_REVERSE,    \/* 0xb    src OR (NOT dst) *\/$/;"	e	enum:__anon19
SPICE_ROP_SET	pixman_utils.h	/^    SPICE_ROP_SET            \/* 0xf    1 *\/$/;"	e	enum:__anon19
SPICE_ROP_XOR	pixman_utils.h	/^    SPICE_ROP_XOR,           \/* 0x6    src XOR dst *\/$/;"	e	enum:__anon19
SPICE_SET_ADDRESS	draw.h	42;"	d
SPICE_SSL_VERIFY_OP	ssl_verify.h	/^} SPICE_SSL_VERIFY_OP;$/;"	t	typeref:enum:__anon1
SPICE_SSL_VERIFY_OP_HOSTNAME	ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_HOSTNAME = (1 << 1),$/;"	e	enum:__anon1
SPICE_SSL_VERIFY_OP_NONE	ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_NONE     = 0,$/;"	e	enum:__anon1
SPICE_SSL_VERIFY_OP_PUBKEY	ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_PUBKEY   = (1 << 0),$/;"	e	enum:__anon1
SPICE_SSL_VERIFY_OP_SUBJECT	ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_SUBJECT  = (1 << 2),$/;"	e	enum:__anon1
SPICE_STRINGIFY	log.h	31;"	d
SPICE_STRINGIFY_ARG	log.h	32;"	d
SPICE_STRLOC	log.h	34;"	d
SPICE_SURFACE_FMT_DEPTH	draw.h	95;"	d
SQSECANT	lines.c	298;"	d	file:
SSL_VERIFY_H	ssl_verify.h	20;"	d
SUBSUMES	region.c	39;"	d	file:
SWAPINT	lines.c	204;"	d	file:
SWAPINT_PAIR	lines.c	210;"	d	file:
SWAPPT	lines.c	207;"	d	file:
SetYMajorOctant	lines.c	232;"	d	file:
SndCodec	snd_codec.h	/^typedef struct SndCodecInternal * SndCodec;$/;"	t	typeref:struct:SndCodecInternal
SndCodecInternal	snd_codec.c	/^} SndCodecInternal;$/;"	t	typeref:struct:__anon16	file:
SpanDataPtr	lines.c	/^} SpanDataRec, *SpanDataPtr;$/;"	t	typeref:struct:_SpanData	file:
SpanDataRec	lines.c	/^} SpanDataRec, *SpanDataPtr;$/;"	t	typeref:struct:_SpanData	file:
SpanGroup	lines.c	/^} SpanGroup;$/;"	t	typeref:struct:__anon38	file:
Spans	lines.c	/^} Spans;$/;"	t	typeref:struct:__anon37	file:
SpiceAlphaBlend	draw.h	/^typedef struct SpiceAlphaBlend {$/;"	s
SpiceAlphaBlend	draw.h	/^} SpiceAlphaBlend;$/;"	t	typeref:struct:SpiceAlphaBlend
SpiceAlphaBlend::alpha	draw.h	/^    uint8_t alpha;$/;"	m	struct:SpiceAlphaBlend	access:public
SpiceAlphaBlend::alpha_flags	draw.h	/^    uint16_t alpha_flags;$/;"	m	struct:SpiceAlphaBlend	access:public
SpiceAlphaBlend::src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceAlphaBlend	access:public
SpiceAlphaBlend::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceAlphaBlend	access:public
SpiceBitmap	draw.h	/^typedef struct SpiceBitmap {$/;"	s
SpiceBitmap	draw.h	/^} SpiceBitmap;$/;"	t	typeref:struct:SpiceBitmap
SpiceBitmap::data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::format	draw.h	/^    uint8_t format;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::palette	draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::palette_id	draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::stride	draw.h	/^    uint32_t stride;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::x	draw.h	/^    uint32_t x;$/;"	m	struct:SpiceBitmap	access:public
SpiceBitmap::y	draw.h	/^    uint32_t y;$/;"	m	struct:SpiceBitmap	access:public
SpiceBlackness	draw.h	/^typedef struct SpiceBlackness {$/;"	s
SpiceBlackness	draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceBlackness::mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceBlackness	access:public
SpiceBlend	draw.h	/^} SpiceCopy, SpiceBlend;$/;"	t	typeref:struct:SpiceCopy
SpiceBrush	draw.h	/^typedef struct SpiceBrush {$/;"	s
SpiceBrush	draw.h	/^} SpiceBrush;$/;"	t	typeref:struct:SpiceBrush
SpiceBrush::__anon18::color	draw.h	/^        uint32_t color;$/;"	m	union:SpiceBrush::__anon18	access:public
SpiceBrush::__anon18::pattern	draw.h	/^        SpicePattern pattern;$/;"	m	union:SpiceBrush::__anon18	access:public
SpiceBrush::type	draw.h	/^    uint32_t type;$/;"	m	struct:SpiceBrush	access:public
SpiceBrush::u	draw.h	/^    } u;$/;"	m	struct:SpiceBrush	typeref:union:SpiceBrush::__anon18	access:public
SpiceBuffer	mem.h	/^typedef struct SpiceBuffer$/;"	s
SpiceBuffer	mem.h	/^} SpiceBuffer;$/;"	t	typeref:struct:SpiceBuffer
SpiceBuffer::buffer	mem.h	/^    uint8_t *buffer;$/;"	m	struct:SpiceBuffer	access:public
SpiceBuffer::capacity	mem.h	/^    size_t capacity;$/;"	m	struct:SpiceBuffer	access:public
SpiceBuffer::offset	mem.h	/^    size_t offset;$/;"	m	struct:SpiceBuffer	access:public
SpiceCanvas	canvas_base.h	/^typedef struct _SpiceCanvas SpiceCanvas;$/;"	t	typeref:struct:_SpiceCanvas
SpiceCanvasOps	canvas_base.h	/^} SpiceCanvasOps;$/;"	t	typeref:struct:__anon13
SpiceChannelId	messages.h	/^typedef struct SpiceChannelId {$/;"	s
SpiceChannelId	messages.h	/^} SpiceChannelId;$/;"	t	typeref:struct:SpiceChannelId
SpiceChannelId::id	messages.h	/^    uint8_t id;$/;"	m	struct:SpiceChannelId	access:public
SpiceChannelId::type	messages.h	/^    uint8_t type;$/;"	m	struct:SpiceChannelId	access:public
SpiceChunk	mem.h	/^typedef struct SpiceChunk {$/;"	s
SpiceChunk	mem.h	/^} SpiceChunk;$/;"	t	typeref:struct:SpiceChunk
SpiceChunk::data	mem.h	/^    uint8_t *data;$/;"	m	struct:SpiceChunk	access:public
SpiceChunk::len	mem.h	/^    uint32_t len;$/;"	m	struct:SpiceChunk	access:public
SpiceChunks	mem.h	/^typedef struct SpiceChunks {$/;"	s
SpiceChunks	mem.h	/^} SpiceChunks;$/;"	t	typeref:struct:SpiceChunks
SpiceChunks::chunk	mem.h	/^    SpiceChunk   chunk[0];$/;"	m	struct:SpiceChunks	access:public
SpiceChunks::data_size	mem.h	/^    uint32_t     data_size;$/;"	m	struct:SpiceChunks	access:public
SpiceChunks::flags	mem.h	/^    uint32_t     flags;$/;"	m	struct:SpiceChunks	access:public
SpiceChunks::num_chunks	mem.h	/^    uint32_t     num_chunks;$/;"	m	struct:SpiceChunks	access:public
SpiceClip	draw.h	/^typedef struct SpiceClip {$/;"	s
SpiceClip	draw.h	/^} SpiceClip;$/;"	t	typeref:struct:SpiceClip
SpiceClip::rects	draw.h	/^    SpiceClipRects *rects;$/;"	m	struct:SpiceClip	access:public
SpiceClip::type	draw.h	/^    uint8_t type;$/;"	m	struct:SpiceClip	access:public
SpiceClipRects	draw.h	/^typedef struct SpiceClipRects {$/;"	s
SpiceClipRects	draw.h	/^} SpiceClipRects;$/;"	t	typeref:struct:SpiceClipRects
SpiceClipRects::num_rects	draw.h	/^  uint32_t num_rects;$/;"	m	struct:SpiceClipRects	access:public
SpiceClipRects::rects	draw.h	/^  SpiceRect rects[0];$/;"	m	struct:SpiceClipRects	access:public
SpiceComposite	draw.h	/^typedef struct SpiceComposite {$/;"	s
SpiceComposite	draw.h	/^} SpiceComposite;$/;"	t	typeref:struct:SpiceComposite
SpiceComposite::flags	draw.h	/^    uint32_t flags;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::mask_bitmap	draw.h	/^    SpiceImage *mask_bitmap;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::mask_origin	draw.h	/^    SpicePoint16 mask_origin;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::mask_transform	draw.h	/^    SpiceTransform mask_transform;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::src_origin	draw.h	/^    SpicePoint16 src_origin;$/;"	m	struct:SpiceComposite	access:public
SpiceComposite::src_transform	draw.h	/^    SpiceTransform src_transform;$/;"	m	struct:SpiceComposite	access:public
SpiceCopy	draw.h	/^typedef struct SpiceCopy {$/;"	s
SpiceCopy	draw.h	/^} SpiceCopy, SpiceBlend;$/;"	t	typeref:struct:SpiceCopy
SpiceCopy::mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceCopy	access:public
SpiceCopy::rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceCopy	access:public
SpiceCopy::scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceCopy	access:public
SpiceCopy::src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceCopy	access:public
SpiceCopy::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceCopy	access:public
SpiceCursor	messages.h	/^typedef struct SpiceCursor {$/;"	s
SpiceCursor	messages.h	/^} SpiceCursor;$/;"	t	typeref:struct:SpiceCursor
SpiceCursor::data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceCursor	access:public
SpiceCursor::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceCursor	access:public
SpiceCursor::flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceCursor	access:public
SpiceCursor::header	messages.h	/^    SpiceCursorHeader header;$/;"	m	struct:SpiceCursor	access:public
SpiceCursorHeader	draw.h	/^typedef struct SpiceCursorHeader {$/;"	s
SpiceCursorHeader	draw.h	/^} SpiceCursorHeader;$/;"	t	typeref:struct:SpiceCursorHeader
SpiceCursorHeader::height	draw.h	/^    uint16_t height;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceCursorHeader::hot_spot_x	draw.h	/^    uint16_t hot_spot_x;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceCursorHeader::hot_spot_y	draw.h	/^    uint16_t hot_spot_y;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceCursorHeader::type	draw.h	/^    uint16_t type;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceCursorHeader::unique	draw.h	/^    uint64_t unique;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceCursorHeader::width	draw.h	/^    uint16_t width;$/;"	m	struct:SpiceCursorHeader	access:public
SpiceFill	draw.h	/^typedef struct SpiceFill {$/;"	s
SpiceFill	draw.h	/^} SpiceFill;$/;"	t	typeref:struct:SpiceFill
SpiceFill::brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceFill	access:public
SpiceFill::mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceFill	access:public
SpiceFill::rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceFill	access:public
SpiceGlzDecoder	canvas_base.h	/^typedef struct _SpiceGlzDecoder SpiceGlzDecoder;$/;"	t	typeref:struct:_SpiceGlzDecoder
SpiceGlzDecoderOps	canvas_base.h	/^} SpiceGlzDecoderOps;$/;"	t	typeref:struct:__anon11
SpiceHead	messages.h	/^} SpiceHead;$/;"	t	typeref:struct:SpiceMsgDisplayHead
SpiceImage	draw.h	/^typedef struct SpiceImage {$/;"	s
SpiceImage	draw.h	/^} SpiceImage;$/;"	t	typeref:struct:SpiceImage
SpiceImage::__anon17::bitmap	draw.h	/^        SpiceBitmap         bitmap;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::jpeg	draw.h	/^        SpiceJPEGData       jpeg;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::jpeg_alpha	draw.h	/^        SpiceJPEGAlphaData  jpeg_alpha;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::lz_plt	draw.h	/^        SpiceLZPLTData      lz_plt;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::lz_rgb	draw.h	/^        SpiceLZRGBData      lz_rgb;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::quic	draw.h	/^        SpiceQUICData       quic;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::surface	draw.h	/^        SpiceSurface        surface;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::__anon17::zlib_glz	draw.h	/^        SpiceZlibGlzRGBData zlib_glz;$/;"	m	union:SpiceImage::__anon17	access:public
SpiceImage::descriptor	draw.h	/^    SpiceImageDescriptor descriptor;$/;"	m	struct:SpiceImage	access:public
SpiceImage::u	draw.h	/^    } u;$/;"	m	struct:SpiceImage	typeref:union:SpiceImage::__anon17	access:public
SpiceImageCache	canvas_base.h	/^typedef struct _SpiceImageCache SpiceImageCache;$/;"	t	typeref:struct:_SpiceImageCache
SpiceImageCacheOps	canvas_base.h	/^} SpiceImageCacheOps;$/;"	t	typeref:struct:__anon8
SpiceImageDescriptor	draw.h	/^typedef struct SpiceImageDescriptor {$/;"	s
SpiceImageDescriptor	draw.h	/^} SpiceImageDescriptor;$/;"	t	typeref:struct:SpiceImageDescriptor
SpiceImageDescriptor::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceImageDescriptor	access:public
SpiceImageDescriptor::height	draw.h	/^    uint32_t height;$/;"	m	struct:SpiceImageDescriptor	access:public
SpiceImageDescriptor::id	draw.h	/^    uint64_t id;$/;"	m	struct:SpiceImageDescriptor	access:public
SpiceImageDescriptor::type	draw.h	/^    uint8_t type;$/;"	m	struct:SpiceImageDescriptor	access:public
SpiceImageDescriptor::width	draw.h	/^    uint32_t width;$/;"	m	struct:SpiceImageDescriptor	access:public
SpiceImageSurfaces	canvas_base.h	/^typedef struct _SpiceImageSurfaces SpiceImageSurfaces;$/;"	t	typeref:struct:_SpiceImageSurfaces
SpiceImageSurfacesOps	canvas_base.h	/^} SpiceImageSurfacesOps;$/;"	t	typeref:struct:__anon9
SpiceInvers	draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceJPEGAlphaData	draw.h	/^typedef struct SpiceJPEGAlphaData {$/;"	s
SpiceJPEGAlphaData	draw.h	/^} SpiceJPEGAlphaData;$/;"	t	typeref:struct:SpiceJPEGAlphaData
SpiceJPEGAlphaData::data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceJPEGAlphaData	access:public
SpiceJPEGAlphaData::data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceJPEGAlphaData	access:public
SpiceJPEGAlphaData::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceJPEGAlphaData	access:public
SpiceJPEGAlphaData::jpeg_size	draw.h	/^    uint32_t jpeg_size;$/;"	m	struct:SpiceJPEGAlphaData	access:public
SpiceJPEGData	draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceJpegDecoder	canvas_base.h	/^typedef struct _SpiceJpegDecoder SpiceJpegDecoder;$/;"	t	typeref:struct:_SpiceJpegDecoder
SpiceJpegDecoderOps	canvas_base.h	/^typedef struct SpiceJpegDecoderOps {$/;"	s
SpiceJpegDecoderOps	canvas_base.h	/^} SpiceJpegDecoderOps;$/;"	t	typeref:struct:SpiceJpegDecoderOps
SpiceJpegDecoderOps::begin_decode	canvas_base.h	/^    void (*begin_decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps	access:public
SpiceJpegDecoderOps::decode	canvas_base.h	/^    void (*decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps	access:public
SpiceLZPLTData	draw.h	/^typedef struct SpiceLZPLTData {$/;"	s
SpiceLZPLTData	draw.h	/^} SpiceLZPLTData;$/;"	t	typeref:struct:SpiceLZPLTData
SpiceLZPLTData::data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceLZPLTData	access:public
SpiceLZPLTData::data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceLZPLTData	access:public
SpiceLZPLTData::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLZPLTData	access:public
SpiceLZPLTData::palette	draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceLZPLTData	access:public
SpiceLZPLTData::palette_id	draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceLZPLTData	access:public
SpiceLZRGBData	draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceLineAttr	draw.h	/^typedef struct SpiceLineAttr {$/;"	s
SpiceLineAttr	draw.h	/^} SpiceLineAttr;$/;"	t	typeref:struct:SpiceLineAttr
SpiceLineAttr::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLineAttr	access:public
SpiceLineAttr::style	draw.h	/^    SPICE_FIXED28_4 *style;$/;"	m	struct:SpiceLineAttr	access:public
SpiceLineAttr::style_nseg	draw.h	/^    uint8_t style_nseg;$/;"	m	struct:SpiceLineAttr	access:public
SpiceLogLevel	log.h	/^} SpiceLogLevel;$/;"	t	typeref:enum:__anon20
SpiceMarshaller	marshaller.c	/^struct SpiceMarshaller {$/;"	s	file:
SpiceMarshaller	marshaller.h	/^typedef struct SpiceMarshaller SpiceMarshaller;$/;"	t	typeref:struct:SpiceMarshaller
SpiceMarshaller::data	marshaller.c	/^    SpiceMarshallerData *data;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::items	marshaller.c	/^    MarshallerItem *items;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::items_size	marshaller.c	/^    int items_size; \/* number of items availible in items *\/$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::n_items	marshaller.c	/^    int n_items;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::next	marshaller.c	/^    SpiceMarshaller *next;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::pointer_ref	marshaller.c	/^    MarshallerRef pointer_ref;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::static_items	marshaller.c	/^    MarshallerItem static_items[N_STATIC_ITEMS];$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshaller::total_size	marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshaller	file:	access:public
SpiceMarshallerData	marshaller.c	/^struct SpiceMarshallerData {$/;"	s	file:
SpiceMarshallerData	marshaller.c	/^typedef struct SpiceMarshallerData SpiceMarshallerData;$/;"	t	typeref:struct:SpiceMarshallerData	file:
SpiceMarshallerData::base	marshaller.c	/^    size_t base;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::buffers	marshaller.c	/^    MarshallerBuffer *buffers;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::current_buffer	marshaller.c	/^    MarshallerBuffer *current_buffer;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::current_buffer_item	marshaller.c	/^    MarshallerItem *current_buffer_item;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::current_buffer_position	marshaller.c	/^    size_t current_buffer_position;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::last_marshaller	marshaller.c	/^    SpiceMarshaller *last_marshaller;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::marshallers	marshaller.c	/^    SpiceMarshaller *marshallers;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::static_buffer	marshaller.c	/^    MarshallerBuffer static_buffer;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::static_marshaller	marshaller.c	/^    SpiceMarshaller static_marshaller;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMarshallerData::total_size	marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshallerData	file:	access:public
SpiceMessageMarshallers	client_marshallers.h	/^} SpiceMessageMarshallers;$/;"	t	typeref:struct:__anon31
SpiceMigrationDstInfo	messages.h	/^typedef struct SpiceMigrationDstInfo {$/;"	s
SpiceMigrationDstInfo	messages.h	/^} SpiceMigrationDstInfo;$/;"	t	typeref:struct:SpiceMigrationDstInfo
SpiceMigrationDstInfo::cert_subject_data	messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::cert_subject_size	messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::host_data	messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::host_size	messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::port	messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::pub_key_data	messages.h	/^    uint8_t *pub_key_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::pub_key_size	messages.h	/^    uint32_t pub_key_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::pub_key_type	messages.h	/^    uint16_t pub_key_type;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMigrationDstInfo::sport	messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMigrationDstInfo	access:public
SpiceMsgAudioMute	messages.h	/^typedef struct SpiceMsgAudioMute {$/;"	s
SpiceMsgAudioMute	messages.h	/^} SpiceMsgAudioMute;$/;"	t	typeref:struct:SpiceMsgAudioMute
SpiceMsgAudioMute::mute	messages.h	/^    uint8_t mute;$/;"	m	struct:SpiceMsgAudioMute	access:public
SpiceMsgAudioVolume	messages.h	/^typedef struct SpiceMsgAudioVolume {$/;"	s
SpiceMsgAudioVolume	messages.h	/^} SpiceMsgAudioVolume;$/;"	t	typeref:struct:SpiceMsgAudioVolume
SpiceMsgAudioVolume::nchannels	messages.h	/^    uint8_t nchannels;$/;"	m	struct:SpiceMsgAudioVolume	access:public
SpiceMsgAudioVolume::volume	messages.h	/^    uint16_t volume[0];$/;"	m	struct:SpiceMsgAudioVolume	access:public
SpiceMsgChannels	messages.h	/^typedef struct SpiceMsgChannels {$/;"	s
SpiceMsgChannels	messages.h	/^} SpiceMsgChannels;$/;"	t	typeref:struct:SpiceMsgChannels
SpiceMsgChannels::channels	messages.h	/^    SpiceChannelId channels[0];$/;"	m	struct:SpiceMsgChannels	access:public
SpiceMsgChannels::num_of_channels	messages.h	/^    uint32_t num_of_channels;$/;"	m	struct:SpiceMsgChannels	access:public
SpiceMsgCursorInit	messages.h	/^typedef struct SpiceMsgCursorInit {$/;"	s
SpiceMsgCursorInit	messages.h	/^} SpiceMsgCursorInit;$/;"	t	typeref:struct:SpiceMsgCursorInit
SpiceMsgCursorInit::cursor	messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorInit	access:public
SpiceMsgCursorInit::position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorInit	access:public
SpiceMsgCursorInit::trail_frequency	messages.h	/^    uint16_t trail_frequency;$/;"	m	struct:SpiceMsgCursorInit	access:public
SpiceMsgCursorInit::trail_length	messages.h	/^    uint16_t trail_length;$/;"	m	struct:SpiceMsgCursorInit	access:public
SpiceMsgCursorInit::visible	messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorInit	access:public
SpiceMsgCursorMove	messages.h	/^typedef struct SpiceMsgCursorMove {$/;"	s
SpiceMsgCursorMove	messages.h	/^} SpiceMsgCursorMove;$/;"	t	typeref:struct:SpiceMsgCursorMove
SpiceMsgCursorMove::position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorMove	access:public
SpiceMsgCursorSet	messages.h	/^typedef struct SpiceMsgCursorSet {$/;"	s
SpiceMsgCursorSet	messages.h	/^} SpiceMsgCursorSet;$/;"	t	typeref:struct:SpiceMsgCursorSet
SpiceMsgCursorSet::cursor	messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorSet	access:public
SpiceMsgCursorSet::position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorSet	access:public
SpiceMsgCursorSet::visible	messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorSet	access:public
SpiceMsgCursorTrail	messages.h	/^typedef struct SpiceMsgCursorTrail {$/;"	s
SpiceMsgCursorTrail	messages.h	/^} SpiceMsgCursorTrail;$/;"	t	typeref:struct:SpiceMsgCursorTrail
SpiceMsgCursorTrail::frequency	messages.h	/^    uint16_t frequency;$/;"	m	struct:SpiceMsgCursorTrail	access:public
SpiceMsgCursorTrail::length	messages.h	/^    uint16_t length;$/;"	m	struct:SpiceMsgCursorTrail	access:public
SpiceMsgData	messages.h	/^typedef struct SpiceMsgData {$/;"	s
SpiceMsgData	messages.h	/^} SpiceMsgData;$/;"	t	typeref:struct:SpiceMsgData
SpiceMsgData::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgData	access:public
SpiceMsgData::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgData	access:public
SpiceMsgDisconnect	messages.h	/^typedef struct SpiceMsgDisconnect {$/;"	s
SpiceMsgDisconnect	messages.h	/^} SpiceMsgDisconnect;$/;"	t	typeref:struct:SpiceMsgDisconnect
SpiceMsgDisconnect::reason	messages.h	/^    uint32_t reason; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgDisconnect	access:public
SpiceMsgDisconnect::time_stamp	messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgDisconnect	access:public
SpiceMsgDisplayBase	messages.h	/^typedef struct SpiceMsgDisplayBase {$/;"	s
SpiceMsgDisplayBase	messages.h	/^} SpiceMsgDisplayBase;$/;"	t	typeref:struct:SpiceMsgDisplayBase
SpiceMsgDisplayBase::box	messages.h	/^    SpiceRect box;$/;"	m	struct:SpiceMsgDisplayBase	access:public
SpiceMsgDisplayBase::clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayBase	access:public
SpiceMsgDisplayBase::surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayBase	access:public
SpiceMsgDisplayCopyBits	messages.h	/^typedef struct SpiceMsgDisplayCopyBits {$/;"	s
SpiceMsgDisplayCopyBits	messages.h	/^} SpiceMsgDisplayCopyBits;$/;"	t	typeref:struct:SpiceMsgDisplayCopyBits
SpiceMsgDisplayCopyBits::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayCopyBits	access:public
SpiceMsgDisplayCopyBits::src_pos	messages.h	/^    SpicePoint src_pos;$/;"	m	struct:SpiceMsgDisplayCopyBits	access:public
SpiceMsgDisplayDrawAlphaBlend	messages.h	/^typedef struct SpiceMsgDisplayDrawAlphaBlend {$/;"	s
SpiceMsgDisplayDrawAlphaBlend	messages.h	/^} SpiceMsgDisplayDrawAlphaBlend;$/;"	t	typeref:struct:SpiceMsgDisplayDrawAlphaBlend
SpiceMsgDisplayDrawAlphaBlend::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend	access:public
SpiceMsgDisplayDrawAlphaBlend::data	messages.h	/^    SpiceAlphaBlend data;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend	access:public
SpiceMsgDisplayDrawBlackness	messages.h	/^typedef struct SpiceMsgDisplayDrawBlackness {$/;"	s
SpiceMsgDisplayDrawBlackness	messages.h	/^} SpiceMsgDisplayDrawBlackness;$/;"	t	typeref:struct:SpiceMsgDisplayDrawBlackness
SpiceMsgDisplayDrawBlackness::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawBlackness	access:public
SpiceMsgDisplayDrawBlackness::data	messages.h	/^    SpiceBlackness data;$/;"	m	struct:SpiceMsgDisplayDrawBlackness	access:public
SpiceMsgDisplayDrawBlend	messages.h	/^typedef SpiceMsgDisplayDrawCopy SpiceMsgDisplayDrawBlend;$/;"	t
SpiceMsgDisplayDrawComposite	messages.h	/^typedef struct SpiceMsgDisplayDrawComposite {$/;"	s
SpiceMsgDisplayDrawComposite	messages.h	/^} SpiceMsgDisplayDrawComposite;$/;"	t	typeref:struct:SpiceMsgDisplayDrawComposite
SpiceMsgDisplayDrawComposite::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawComposite	access:public
SpiceMsgDisplayDrawComposite::data	messages.h	/^    SpiceComposite data;$/;"	m	struct:SpiceMsgDisplayDrawComposite	access:public
SpiceMsgDisplayDrawCopy	messages.h	/^typedef struct SpiceMsgDisplayDrawCopy {$/;"	s
SpiceMsgDisplayDrawCopy	messages.h	/^} SpiceMsgDisplayDrawCopy;$/;"	t	typeref:struct:SpiceMsgDisplayDrawCopy
SpiceMsgDisplayDrawCopy::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawCopy	access:public
SpiceMsgDisplayDrawCopy::data	messages.h	/^    SpiceCopy data;$/;"	m	struct:SpiceMsgDisplayDrawCopy	access:public
SpiceMsgDisplayDrawFill	messages.h	/^typedef struct SpiceMsgDisplayDrawFill {$/;"	s
SpiceMsgDisplayDrawFill	messages.h	/^} SpiceMsgDisplayDrawFill;$/;"	t	typeref:struct:SpiceMsgDisplayDrawFill
SpiceMsgDisplayDrawFill::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawFill	access:public
SpiceMsgDisplayDrawFill::data	messages.h	/^    SpiceFill data;$/;"	m	struct:SpiceMsgDisplayDrawFill	access:public
SpiceMsgDisplayDrawInvers	messages.h	/^typedef struct SpiceMsgDisplayDrawInvers {$/;"	s
SpiceMsgDisplayDrawInvers	messages.h	/^} SpiceMsgDisplayDrawInvers;$/;"	t	typeref:struct:SpiceMsgDisplayDrawInvers
SpiceMsgDisplayDrawInvers::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawInvers	access:public
SpiceMsgDisplayDrawInvers::data	messages.h	/^    SpiceInvers data;$/;"	m	struct:SpiceMsgDisplayDrawInvers	access:public
SpiceMsgDisplayDrawOpaque	messages.h	/^typedef struct SpiceMsgDisplayDrawOpaque {$/;"	s
SpiceMsgDisplayDrawOpaque	messages.h	/^} SpiceMsgDisplayDrawOpaque;$/;"	t	typeref:struct:SpiceMsgDisplayDrawOpaque
SpiceMsgDisplayDrawOpaque::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawOpaque	access:public
SpiceMsgDisplayDrawOpaque::data	messages.h	/^    SpiceOpaque data;$/;"	m	struct:SpiceMsgDisplayDrawOpaque	access:public
SpiceMsgDisplayDrawRop3	messages.h	/^typedef struct SpiceMsgDisplayDrawRop3 {$/;"	s
SpiceMsgDisplayDrawRop3	messages.h	/^} SpiceMsgDisplayDrawRop3;$/;"	t	typeref:struct:SpiceMsgDisplayDrawRop3
SpiceMsgDisplayDrawRop3::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawRop3	access:public
SpiceMsgDisplayDrawRop3::data	messages.h	/^    SpiceRop3 data;$/;"	m	struct:SpiceMsgDisplayDrawRop3	access:public
SpiceMsgDisplayDrawStroke	messages.h	/^typedef struct SpiceMsgDisplayDrawStroke {$/;"	s
SpiceMsgDisplayDrawStroke	messages.h	/^} SpiceMsgDisplayDrawStroke;$/;"	t	typeref:struct:SpiceMsgDisplayDrawStroke
SpiceMsgDisplayDrawStroke::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawStroke	access:public
SpiceMsgDisplayDrawStroke::data	messages.h	/^    SpiceStroke data;$/;"	m	struct:SpiceMsgDisplayDrawStroke	access:public
SpiceMsgDisplayDrawText	messages.h	/^typedef struct SpiceMsgDisplayDrawText {$/;"	s
SpiceMsgDisplayDrawText	messages.h	/^} SpiceMsgDisplayDrawText;$/;"	t	typeref:struct:SpiceMsgDisplayDrawText
SpiceMsgDisplayDrawText::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawText	access:public
SpiceMsgDisplayDrawText::data	messages.h	/^    SpiceText data;$/;"	m	struct:SpiceMsgDisplayDrawText	access:public
SpiceMsgDisplayDrawTransparent	messages.h	/^typedef struct SpiceMsgDisplayDrawTransparent {$/;"	s
SpiceMsgDisplayDrawTransparent	messages.h	/^} SpiceMsgDisplayDrawTransparent;$/;"	t	typeref:struct:SpiceMsgDisplayDrawTransparent
SpiceMsgDisplayDrawTransparent::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawTransparent	access:public
SpiceMsgDisplayDrawTransparent::data	messages.h	/^    SpiceTransparent data;$/;"	m	struct:SpiceMsgDisplayDrawTransparent	access:public
SpiceMsgDisplayDrawWhiteness	messages.h	/^typedef struct SpiceMsgDisplayDrawWhiteness {$/;"	s
SpiceMsgDisplayDrawWhiteness	messages.h	/^} SpiceMsgDisplayDrawWhiteness;$/;"	t	typeref:struct:SpiceMsgDisplayDrawWhiteness
SpiceMsgDisplayDrawWhiteness::base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness	access:public
SpiceMsgDisplayDrawWhiteness::data	messages.h	/^    SpiceWhiteness data;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness	access:public
SpiceMsgDisplayHead	messages.h	/^typedef struct SpiceMsgDisplayHead {$/;"	s
SpiceMsgDisplayHead::flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::x	messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayHead::y	messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgDisplayHead	access:public
SpiceMsgDisplayInvalOne	messages.h	/^typedef struct SpiceMsgDisplayInvalOne {$/;"	s
SpiceMsgDisplayInvalOne	messages.h	/^} SpiceMsgDisplayInvalOne;$/;"	t	typeref:struct:SpiceMsgDisplayInvalOne
SpiceMsgDisplayInvalOne::id	messages.h	/^    uint64_t id;$/;"	m	struct:SpiceMsgDisplayInvalOne	access:public
SpiceMsgDisplayMode	messages.h	/^typedef struct SpiceMsgDisplayMode {$/;"	s
SpiceMsgDisplayMode	messages.h	/^} SpiceMsgDisplayMode;$/;"	t	typeref:struct:SpiceMsgDisplayMode
SpiceMsgDisplayMode::bits	messages.h	/^    uint32_t bits;$/;"	m	struct:SpiceMsgDisplayMode	access:public
SpiceMsgDisplayMode::x_res	messages.h	/^    uint32_t x_res;$/;"	m	struct:SpiceMsgDisplayMode	access:public
SpiceMsgDisplayMode::y_res	messages.h	/^    uint32_t y_res;$/;"	m	struct:SpiceMsgDisplayMode	access:public
SpiceMsgDisplayMonitorsConfig	messages.h	/^typedef struct SpiceMsgDisplayMonitorsConfig {$/;"	s
SpiceMsgDisplayMonitorsConfig	messages.h	/^} SpiceMsgDisplayMonitorsConfig;$/;"	t	typeref:struct:SpiceMsgDisplayMonitorsConfig
SpiceMsgDisplayMonitorsConfig::count	messages.h	/^    uint16_t count;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
SpiceMsgDisplayMonitorsConfig::heads	messages.h	/^    SpiceHead heads[0];$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
SpiceMsgDisplayMonitorsConfig::max_allowed	messages.h	/^    uint16_t max_allowed;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
SpiceMsgDisplayStreamActivateReport	messages.h	/^typedef struct SpiceMsgDisplayStreamActivateReport {$/;"	s
SpiceMsgDisplayStreamActivateReport	messages.h	/^} SpiceMsgDisplayStreamActivateReport;$/;"	t	typeref:struct:SpiceMsgDisplayStreamActivateReport
SpiceMsgDisplayStreamActivateReport::max_window_size	messages.h	/^    uint32_t max_window_size;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
SpiceMsgDisplayStreamActivateReport::stream_id	messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
SpiceMsgDisplayStreamActivateReport::timeout_ms	messages.h	/^    uint32_t timeout_ms;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
SpiceMsgDisplayStreamActivateReport::unique_id	messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
SpiceMsgDisplayStreamClip	messages.h	/^typedef struct SpiceMsgDisplayStreamClip {$/;"	s
SpiceMsgDisplayStreamClip	messages.h	/^} SpiceMsgDisplayStreamClip;$/;"	t	typeref:struct:SpiceMsgDisplayStreamClip
SpiceMsgDisplayStreamClip::clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamClip	access:public
SpiceMsgDisplayStreamClip::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamClip	access:public
SpiceMsgDisplayStreamCreate	messages.h	/^typedef struct SpiceMsgDisplayStreamCreate {$/;"	s
SpiceMsgDisplayStreamCreate	messages.h	/^} SpiceMsgDisplayStreamCreate;$/;"	t	typeref:struct:SpiceMsgDisplayStreamCreate
SpiceMsgDisplayStreamCreate::clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::codec_type	messages.h	/^    uint32_t codec_type;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::dest	messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::src_height	messages.h	/^    uint32_t src_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::src_width	messages.h	/^    uint32_t src_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::stamp	messages.h	/^    uint64_t stamp;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::stream_height	messages.h	/^    uint32_t stream_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::stream_width	messages.h	/^    uint32_t stream_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamCreate::surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
SpiceMsgDisplayStreamData	messages.h	/^typedef struct SpiceMsgDisplayStreamData {$/;"	s
SpiceMsgDisplayStreamData	messages.h	/^} SpiceMsgDisplayStreamData;$/;"	t	typeref:struct:SpiceMsgDisplayStreamData
SpiceMsgDisplayStreamData::base	messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
SpiceMsgDisplayStreamData::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
SpiceMsgDisplayStreamData::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
SpiceMsgDisplayStreamDataSized	messages.h	/^typedef struct SpiceMsgDisplayStreamDataSized {$/;"	s
SpiceMsgDisplayStreamDataSized	messages.h	/^} SpiceMsgDisplayStreamDataSized;$/;"	t	typeref:struct:SpiceMsgDisplayStreamDataSized
SpiceMsgDisplayStreamDataSized::base	messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDataSized::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDataSized::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDataSized::dest	messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDataSized::height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDataSized::width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
SpiceMsgDisplayStreamDestroy	messages.h	/^typedef struct SpiceMsgDisplayStreamDestroy {$/;"	s
SpiceMsgDisplayStreamDestroy	messages.h	/^} SpiceMsgDisplayStreamDestroy;$/;"	t	typeref:struct:SpiceMsgDisplayStreamDestroy
SpiceMsgDisplayStreamDestroy::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamDestroy	access:public
SpiceMsgEmpty	messages.h	/^typedef struct SpiceMsgEmpty {$/;"	s
SpiceMsgEmpty	messages.h	/^} SpiceMsgEmpty;$/;"	t	typeref:struct:SpiceMsgEmpty
SpiceMsgEmpty::padding	messages.h	/^    uint8_t padding;$/;"	m	struct:SpiceMsgEmpty	access:public
SpiceMsgInputsInit	messages.h	/^typedef struct SpiceMsgInputsInit {$/;"	s
SpiceMsgInputsInit	messages.h	/^} SpiceMsgInputsInit;$/;"	t	typeref:struct:SpiceMsgInputsInit
SpiceMsgInputsInit::keyboard_modifiers	messages.h	/^    uint32_t keyboard_modifiers;$/;"	m	struct:SpiceMsgInputsInit	access:public
SpiceMsgInputsKeyModifiers	messages.h	/^typedef struct SpiceMsgInputsKeyModifiers {$/;"	s
SpiceMsgInputsKeyModifiers	messages.h	/^} SpiceMsgInputsKeyModifiers;$/;"	t	typeref:struct:SpiceMsgInputsKeyModifiers
SpiceMsgInputsKeyModifiers::modifiers	messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgInputsKeyModifiers	access:public
SpiceMsgMainAgentConnectedTokens	messages.h	/^typedef struct SpiceMsgMainAgentTokens SpiceMsgMainAgentConnectedTokens;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgMainAgentDisconnect	messages.h	/^typedef struct SpiceMsgMainAgentDisconnect {$/;"	s
SpiceMsgMainAgentDisconnect	messages.h	/^} SpiceMsgMainAgentDisconnect;$/;"	t	typeref:struct:SpiceMsgMainAgentDisconnect
SpiceMsgMainAgentDisconnect::error_code	messages.h	/^    uint32_t error_code; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgMainAgentDisconnect	access:public
SpiceMsgMainAgentTokens	messages.h	/^typedef struct SpiceMsgMainAgentTokens {$/;"	s
SpiceMsgMainAgentTokens	messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgMainAgentTokens::num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgMainAgentTokens	access:public
SpiceMsgMainInit	messages.h	/^typedef struct SpiceMsgMainInit {$/;"	s
SpiceMsgMainInit	messages.h	/^} SpiceMsgMainInit;$/;"	t	typeref:struct:SpiceMsgMainInit
SpiceMsgMainInit::agent_connected	messages.h	/^    uint32_t agent_connected;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::agent_tokens	messages.h	/^    uint32_t agent_tokens;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::current_mouse_mode	messages.h	/^    uint32_t current_mouse_mode;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::display_channels_hint	messages.h	/^    uint32_t display_channels_hint;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::multi_media_time	messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::ram_hint	messages.h	/^    uint32_t ram_hint;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::session_id	messages.h	/^    uint32_t session_id;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainInit::supported_mouse_modes	messages.h	/^    uint32_t supported_mouse_modes;$/;"	m	struct:SpiceMsgMainInit	access:public
SpiceMsgMainMigrateBeginSeamless	messages.h	/^typedef struct SpiceMsgMainMigrateBeginSeamless {$/;"	s
SpiceMsgMainMigrateBeginSeamless	messages.h	/^} SpiceMsgMainMigrateBeginSeamless;$/;"	t	typeref:struct:SpiceMsgMainMigrateBeginSeamless
SpiceMsgMainMigrateBeginSeamless::dst_info	messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless	access:public
SpiceMsgMainMigrateBeginSeamless::src_mig_version	messages.h	/^    uint32_t src_mig_version;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless	access:public
SpiceMsgMainMigrationBegin	messages.h	/^typedef struct SpiceMsgMainMigrationBegin {$/;"	s
SpiceMsgMainMigrationBegin	messages.h	/^} SpiceMsgMainMigrationBegin;$/;"	t	typeref:struct:SpiceMsgMainMigrationBegin
SpiceMsgMainMigrationBegin::dst_info	messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrationBegin	access:public
SpiceMsgMainMigrationSwitchHost	messages.h	/^typedef struct SpiceMsgMainMigrationSwitchHost {$/;"	s
SpiceMsgMainMigrationSwitchHost	messages.h	/^} SpiceMsgMainMigrationSwitchHost;$/;"	t	typeref:struct:SpiceMsgMainMigrationSwitchHost
SpiceMsgMainMigrationSwitchHost::cert_subject_data	messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMigrationSwitchHost::cert_subject_size	messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMigrationSwitchHost::host_data	messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMigrationSwitchHost::host_size	messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMigrationSwitchHost::port	messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMigrationSwitchHost::sport	messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
SpiceMsgMainMouseMode	messages.h	/^typedef struct SpiceMsgMainMouseMode {$/;"	s
SpiceMsgMainMouseMode	messages.h	/^} SpiceMsgMainMouseMode;$/;"	t	typeref:struct:SpiceMsgMainMouseMode
SpiceMsgMainMouseMode::current_mode	messages.h	/^    uint32_t current_mode;$/;"	m	struct:SpiceMsgMainMouseMode	access:public
SpiceMsgMainMouseMode::supported_modes	messages.h	/^    uint32_t supported_modes;$/;"	m	struct:SpiceMsgMainMouseMode	access:public
SpiceMsgMainMultiMediaTime	messages.h	/^typedef struct SpiceMsgMainMultiMediaTime {$/;"	s
SpiceMsgMainMultiMediaTime	messages.h	/^} SpiceMsgMainMultiMediaTime;$/;"	t	typeref:struct:SpiceMsgMainMultiMediaTime
SpiceMsgMainMultiMediaTime::time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgMainMultiMediaTime	access:public
SpiceMsgMainName	messages.h	/^typedef struct SpiceMsgMainName {$/;"	s
SpiceMsgMainName	messages.h	/^} SpiceMsgMainName;$/;"	t	typeref:struct:SpiceMsgMainName
SpiceMsgMainName::name	messages.h	/^    uint8_t name[0];$/;"	m	struct:SpiceMsgMainName	access:public
SpiceMsgMainName::name_len	messages.h	/^    uint32_t name_len;$/;"	m	struct:SpiceMsgMainName	access:public
SpiceMsgMainUuid	messages.h	/^typedef struct SpiceMsgMainUuid {$/;"	s
SpiceMsgMainUuid	messages.h	/^} SpiceMsgMainUuid;$/;"	t	typeref:struct:SpiceMsgMainUuid
SpiceMsgMainUuid::uuid	messages.h	/^    uint8_t uuid[16];$/;"	m	struct:SpiceMsgMainUuid	access:public
SpiceMsgMigrate	messages.h	/^typedef struct SpiceMsgMigrate {$/;"	s
SpiceMsgMigrate	messages.h	/^} SpiceMsgMigrate;$/;"	t	typeref:struct:SpiceMsgMigrate
SpiceMsgMigrate::flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgMigrate	access:public
SpiceMsgNotify	messages.h	/^typedef struct SpiceMsgNotify {$/;"	s
SpiceMsgNotify	messages.h	/^} SpiceMsgNotify;$/;"	t	typeref:struct:SpiceMsgNotify
SpiceMsgNotify::message	messages.h	/^    uint8_t message[0];$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgNotify::message_len	messages.h	/^    uint32_t message_len;$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgNotify::severity	messages.h	/^    uint32_t severity;$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgNotify::time_stamp	messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgNotify::visibilty	messages.h	/^    uint32_t visibilty;$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgNotify::what	messages.h	/^    uint32_t what;$/;"	m	struct:SpiceMsgNotify	access:public
SpiceMsgPing	messages.h	/^typedef struct SpiceMsgPing {$/;"	s
SpiceMsgPing	messages.h	/^} SpiceMsgPing;$/;"	t	typeref:struct:SpiceMsgPing
SpiceMsgPing::data	messages.h	/^    void *data;$/;"	m	struct:SpiceMsgPing	access:public
SpiceMsgPing::data_len	messages.h	/^    uint32_t data_len;$/;"	m	struct:SpiceMsgPing	access:public
SpiceMsgPing::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgPing	access:public
SpiceMsgPing::timestamp	messages.h	/^    uint64_t timestamp;$/;"	m	struct:SpiceMsgPing	access:public
SpiceMsgPlaybackLatency	messages.h	/^typedef struct SpiceMsgPlaybackLatency {$/;"	s
SpiceMsgPlaybackLatency	messages.h	/^} SpiceMsgPlaybackLatency;$/;"	t	typeref:struct:SpiceMsgPlaybackLatency
SpiceMsgPlaybackLatency::latency_ms	messages.h	/^    uint32_t latency_ms;$/;"	m	struct:SpiceMsgPlaybackLatency	access:public
SpiceMsgPlaybackMode	messages.h	/^typedef struct SpiceMsgPlaybackMode {$/;"	s
SpiceMsgPlaybackMode	messages.h	/^} SpiceMsgPlaybackMode, SpiceMsgcRecordMode;$/;"	t	typeref:struct:SpiceMsgPlaybackMode
SpiceMsgPlaybackMode::data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
SpiceMsgPlaybackMode::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
SpiceMsgPlaybackMode::mode	messages.h	/^    uint32_t mode; \/\/SPICE_AUDIO_DATA_MODE_?$/;"	m	struct:SpiceMsgPlaybackMode	access:public
SpiceMsgPlaybackMode::time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
SpiceMsgPlaybackPacket	messages.h	/^typedef struct SpiceMsgPlaybackPacket {$/;"	s
SpiceMsgPlaybackPacket	messages.h	/^} SpiceMsgPlaybackPacket, SpiceMsgcRecordPacket;$/;"	t	typeref:struct:SpiceMsgPlaybackPacket
SpiceMsgPlaybackPacket::data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
SpiceMsgPlaybackPacket::data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
SpiceMsgPlaybackPacket::time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
SpiceMsgPlaybackStart	messages.h	/^typedef struct SpiceMsgPlaybackStart {$/;"	s
SpiceMsgPlaybackStart	messages.h	/^} SpiceMsgPlaybackStart;$/;"	t	typeref:struct:SpiceMsgPlaybackStart
SpiceMsgPlaybackStart::channels	messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
SpiceMsgPlaybackStart::format	messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgPlaybackStart	access:public
SpiceMsgPlaybackStart::frequency	messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
SpiceMsgPlaybackStart::time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
SpiceMsgPortEvent	messages.h	/^typedef struct SpiceMsgPortEvent {$/;"	s
SpiceMsgPortEvent	messages.h	/^} SpiceMsgPortEvent;$/;"	t	typeref:struct:SpiceMsgPortEvent
SpiceMsgPortEvent::event	messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgPortEvent	access:public
SpiceMsgPortInit	messages.h	/^typedef struct SpiceMsgPortInit {$/;"	s
SpiceMsgPortInit	messages.h	/^} SpiceMsgPortInit;$/;"	t	typeref:struct:SpiceMsgPortInit
SpiceMsgPortInit::name	messages.h	/^    uint8_t *name;$/;"	m	struct:SpiceMsgPortInit	access:public
SpiceMsgPortInit::name_size	messages.h	/^    uint32_t name_size;$/;"	m	struct:SpiceMsgPortInit	access:public
SpiceMsgPortInit::opened	messages.h	/^    uint8_t opened;$/;"	m	struct:SpiceMsgPortInit	access:public
SpiceMsgRecordStart	messages.h	/^typedef struct SpiceMsgRecordStart {$/;"	s
SpiceMsgRecordStart	messages.h	/^} SpiceMsgRecordStart;$/;"	t	typeref:struct:SpiceMsgRecordStart
SpiceMsgRecordStart::channels	messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgRecordStart	access:public
SpiceMsgRecordStart::format	messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgRecordStart	access:public
SpiceMsgRecordStart::frequency	messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgRecordStart	access:public
SpiceMsgSetAck	messages.h	/^typedef struct SpiceMsgSetAck {$/;"	s
SpiceMsgSetAck	messages.h	/^} SpiceMsgSetAck;$/;"	t	typeref:struct:SpiceMsgSetAck
SpiceMsgSetAck::generation	messages.h	/^    uint32_t generation;$/;"	m	struct:SpiceMsgSetAck	access:public
SpiceMsgSetAck::window	messages.h	/^    uint32_t window;$/;"	m	struct:SpiceMsgSetAck	access:public
SpiceMsgSmartcard	messages.h	/^typedef struct SpiceMsgSmartcard {$/;"	s
SpiceMsgSmartcard	messages.h	/^} SpiceMsgSmartcard;$/;"	t	typeref:struct:SpiceMsgSmartcard
SpiceMsgSmartcard::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgSmartcard	access:public
SpiceMsgSmartcard::length	messages.h	/^    uint32_t length;$/;"	m	struct:SpiceMsgSmartcard	access:public
SpiceMsgSmartcard::reader_id	messages.h	/^    uint32_t reader_id;$/;"	m	struct:SpiceMsgSmartcard	access:public
SpiceMsgSmartcard::type	messages.h	/^    VSCMsgType type;$/;"	m	struct:SpiceMsgSmartcard	access:public
SpiceMsgSurfaceCreate	messages.h	/^typedef struct SpiceMsgSurfaceCreate {$/;"	s
SpiceMsgSurfaceCreate	messages.h	/^} SpiceMsgSurfaceCreate;$/;"	t	typeref:struct:SpiceMsgSurfaceCreate
SpiceMsgSurfaceCreate::flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
SpiceMsgSurfaceCreate::format	messages.h	/^    uint32_t format;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
SpiceMsgSurfaceCreate::height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
SpiceMsgSurfaceCreate::surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
SpiceMsgSurfaceCreate::width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
SpiceMsgSurfaceDestroy	messages.h	/^typedef struct SpiceMsgSurfaceDestroy {$/;"	s
SpiceMsgSurfaceDestroy	messages.h	/^} SpiceMsgSurfaceDestroy;$/;"	t	typeref:struct:SpiceMsgSurfaceDestroy
SpiceMsgSurfaceDestroy::surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceDestroy	access:public
SpiceMsgTunnelInit	messages.h	/^typedef struct SpiceMsgTunnelInit {$/;"	s
SpiceMsgTunnelInit	messages.h	/^} SpiceMsgTunnelInit;$/;"	t	typeref:struct:SpiceMsgTunnelInit
SpiceMsgTunnelInit::max_num_of_sockets	messages.h	/^    uint16_t max_num_of_sockets;$/;"	m	struct:SpiceMsgTunnelInit	access:public
SpiceMsgTunnelInit::max_socket_data_size	messages.h	/^    uint32_t max_socket_data_size;$/;"	m	struct:SpiceMsgTunnelInit	access:public
SpiceMsgTunnelIpInfo	messages.h	/^typedef struct SpiceMsgTunnelIpInfo {$/;"	s
SpiceMsgTunnelIpInfo	messages.h	/^} SpiceMsgTunnelIpInfo;$/;"	t	typeref:struct:SpiceMsgTunnelIpInfo
SpiceMsgTunnelIpInfo::__anon21::ipv4	messages.h	/^      SpiceTunnelIPv4 ipv4;$/;"	m	union:SpiceMsgTunnelIpInfo::__anon21	access:public
SpiceMsgTunnelIpInfo::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelIpInfo	access:public
SpiceMsgTunnelIpInfo::type	messages.h	/^    uint16_t type;$/;"	m	struct:SpiceMsgTunnelIpInfo	access:public
SpiceMsgTunnelIpInfo::u	messages.h	/^    } u;$/;"	m	struct:SpiceMsgTunnelIpInfo	typeref:union:SpiceMsgTunnelIpInfo::__anon21	access:public
SpiceMsgTunnelServiceIpMap	messages.h	/^typedef struct SpiceMsgTunnelServiceIpMap {$/;"	s
SpiceMsgTunnelServiceIpMap	messages.h	/^} SpiceMsgTunnelServiceIpMap;$/;"	t	typeref:struct:SpiceMsgTunnelServiceIpMap
SpiceMsgTunnelServiceIpMap::service_id	messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelServiceIpMap	access:public
SpiceMsgTunnelServiceIpMap::virtual_ip	messages.h	/^    SpiceMsgTunnelIpInfo virtual_ip;$/;"	m	struct:SpiceMsgTunnelServiceIpMap	access:public
SpiceMsgTunnelSocketClose	messages.h	/^typedef struct SpiceMsgTunnelSocketClose {$/;"	s
SpiceMsgTunnelSocketClose	messages.h	/^} SpiceMsgTunnelSocketClose;$/;"	t	typeref:struct:SpiceMsgTunnelSocketClose
SpiceMsgTunnelSocketClose::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClose	access:public
SpiceMsgTunnelSocketClosedAck	messages.h	/^typedef struct SpiceMsgTunnelSocketClosedAck {$/;"	s
SpiceMsgTunnelSocketClosedAck	messages.h	/^} SpiceMsgTunnelSocketClosedAck;$/;"	t	typeref:struct:SpiceMsgTunnelSocketClosedAck
SpiceMsgTunnelSocketClosedAck::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClosedAck	access:public
SpiceMsgTunnelSocketData	messages.h	/^typedef struct SpiceMsgTunnelSocketData {$/;"	s
SpiceMsgTunnelSocketData	messages.h	/^} SpiceMsgTunnelSocketData;$/;"	t	typeref:struct:SpiceMsgTunnelSocketData
SpiceMsgTunnelSocketData::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketData	access:public
SpiceMsgTunnelSocketData::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelSocketData	access:public
SpiceMsgTunnelSocketFin	messages.h	/^typedef struct SpiceMsgTunnelSocketFin {$/;"	s
SpiceMsgTunnelSocketFin	messages.h	/^} SpiceMsgTunnelSocketFin;$/;"	t	typeref:struct:SpiceMsgTunnelSocketFin
SpiceMsgTunnelSocketFin::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketFin	access:public
SpiceMsgTunnelSocketOpen	messages.h	/^typedef struct SpiceMsgTunnelSocketOpen {$/;"	s
SpiceMsgTunnelSocketOpen	messages.h	/^} SpiceMsgTunnelSocketOpen;$/;"	t	typeref:struct:SpiceMsgTunnelSocketOpen
SpiceMsgTunnelSocketOpen::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
SpiceMsgTunnelSocketOpen::service_id	messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
SpiceMsgTunnelSocketOpen::tokens	messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
SpiceMsgTunnelSocketTokens	messages.h	/^typedef struct SpiceMsgTunnelSocketTokens {$/;"	s
SpiceMsgTunnelSocketTokens	messages.h	/^} SpiceMsgTunnelSocketTokens;$/;"	t	typeref:struct:SpiceMsgTunnelSocketTokens
SpiceMsgTunnelSocketTokens::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketTokens	access:public
SpiceMsgTunnelSocketTokens::num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgTunnelSocketTokens	access:public
SpiceMsgWaitForChannels	messages.h	/^typedef struct SpiceMsgWaitForChannels {$/;"	s
SpiceMsgWaitForChannels	messages.h	/^} SpiceMsgWaitForChannels;$/;"	t	typeref:struct:SpiceMsgWaitForChannels
SpiceMsgWaitForChannels::wait_count	messages.h	/^    uint8_t wait_count;$/;"	m	struct:SpiceMsgWaitForChannels	access:public
SpiceMsgWaitForChannels::wait_list	messages.h	/^    SpiceWaitForChannel wait_list[0];$/;"	m	struct:SpiceMsgWaitForChannels	access:public
SpiceMsgcAckSync	messages.h	/^typedef struct SpiceMsgcAckSync {$/;"	s
SpiceMsgcAckSync	messages.h	/^} SpiceMsgcAckSync;$/;"	t	typeref:struct:SpiceMsgcAckSync
SpiceMsgcAckSync::generation	messages.h	/^  uint32_t generation;$/;"	m	struct:SpiceMsgcAckSync	access:public
SpiceMsgcClientInfo	messages.h	/^typedef struct SpiceMsgcClientInfo {$/;"	s
SpiceMsgcClientInfo	messages.h	/^} SpiceMsgcClientInfo;$/;"	t	typeref:struct:SpiceMsgcClientInfo
SpiceMsgcClientInfo::cache_size	messages.h	/^    uint64_t cache_size;$/;"	m	struct:SpiceMsgcClientInfo	access:public
SpiceMsgcDisplayInit	messages.h	/^typedef struct SpiceMsgcDisplayInit {$/;"	s
SpiceMsgcDisplayInit	messages.h	/^} SpiceMsgcDisplayInit;$/;"	t	typeref:struct:SpiceMsgcDisplayInit
SpiceMsgcDisplayInit::glz_dictionary_id	messages.h	/^    uint8_t glz_dictionary_id;$/;"	m	struct:SpiceMsgcDisplayInit	access:public
SpiceMsgcDisplayInit::glz_dictionary_window_size	messages.h	/^    int32_t glz_dictionary_window_size;       \/\/ in pixels$/;"	m	struct:SpiceMsgcDisplayInit	access:public
SpiceMsgcDisplayInit::pixmap_cache_id	messages.h	/^    uint8_t pixmap_cache_id;$/;"	m	struct:SpiceMsgcDisplayInit	access:public
SpiceMsgcDisplayInit::pixmap_cache_size	messages.h	/^    int64_t pixmap_cache_size; \/\/in pixels$/;"	m	struct:SpiceMsgcDisplayInit	access:public
SpiceMsgcDisplayStreamReport	messages.h	/^typedef struct SpiceMsgcDisplayStreamReport {$/;"	s
SpiceMsgcDisplayStreamReport	messages.h	/^} SpiceMsgcDisplayStreamReport;$/;"	t	typeref:struct:SpiceMsgcDisplayStreamReport
SpiceMsgcDisplayStreamReport::audio_delay	messages.h	/^    uint32_t audio_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::end_frame_mm_time	messages.h	/^    uint32_t end_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::last_frame_delay	messages.h	/^    int32_t last_frame_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::num_drops	messages.h	/^    uint32_t num_drops;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::num_frames	messages.h	/^    uint32_t num_frames;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::start_frame_mm_time	messages.h	/^    uint32_t start_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::stream_id	messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcDisplayStreamReport::unique_id	messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
SpiceMsgcKeyDown	messages.h	/^typedef struct SpiceMsgcKeyDown {$/;"	s
SpiceMsgcKeyDown	messages.h	/^} SpiceMsgcKeyDown;$/;"	t	typeref:struct:SpiceMsgcKeyDown
SpiceMsgcKeyDown::code	messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyDown	access:public
SpiceMsgcKeyModifiers	messages.h	/^typedef struct SpiceMsgcKeyModifiers {$/;"	s
SpiceMsgcKeyModifiers	messages.h	/^} SpiceMsgcKeyModifiers;$/;"	t	typeref:struct:SpiceMsgcKeyModifiers
SpiceMsgcKeyModifiers::modifiers	messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgcKeyModifiers	access:public
SpiceMsgcKeyUp	messages.h	/^typedef struct SpiceMsgcKeyUp {$/;"	s
SpiceMsgcKeyUp	messages.h	/^} SpiceMsgcKeyUp;$/;"	t	typeref:struct:SpiceMsgcKeyUp
SpiceMsgcKeyUp::code	messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyUp	access:public
SpiceMsgcMainAgentStart	messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgcMainAgentTokens	messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgcMainMigrateDstDoSeamless	messages.h	/^typedef struct SpiceMsgcMainMigrateDstDoSeamless {$/;"	s
SpiceMsgcMainMigrateDstDoSeamless	messages.h	/^} SpiceMsgcMainMigrateDstDoSeamless;$/;"	t	typeref:struct:SpiceMsgcMainMigrateDstDoSeamless
SpiceMsgcMainMigrateDstDoSeamless::src_version	messages.h	/^    uint32_t src_version;$/;"	m	struct:SpiceMsgcMainMigrateDstDoSeamless	access:public
SpiceMsgcMainMouseModeRequest	messages.h	/^typedef struct SpiceMsgcMainMouseModeRequest {$/;"	s
SpiceMsgcMainMouseModeRequest	messages.h	/^} SpiceMsgcMainMouseModeRequest;$/;"	t	typeref:struct:SpiceMsgcMainMouseModeRequest
SpiceMsgcMainMouseModeRequest::mode	messages.h	/^    uint32_t mode;$/;"	m	struct:SpiceMsgcMainMouseModeRequest	access:public
SpiceMsgcMouseMotion	messages.h	/^typedef struct SpiceMsgcMouseMotion {$/;"	s
SpiceMsgcMouseMotion	messages.h	/^} SpiceMsgcMouseMotion;$/;"	t	typeref:struct:SpiceMsgcMouseMotion
SpiceMsgcMouseMotion::buttons_state	messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
SpiceMsgcMouseMotion::dx	messages.h	/^    int32_t dx;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
SpiceMsgcMouseMotion::dy	messages.h	/^    int32_t dy;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
SpiceMsgcMousePosition	messages.h	/^typedef struct SpiceMsgcMousePosition {$/;"	s
SpiceMsgcMousePosition	messages.h	/^} SpiceMsgcMousePosition;$/;"	t	typeref:struct:SpiceMsgcMousePosition
SpiceMsgcMousePosition::buttons_state	messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePosition	access:public
SpiceMsgcMousePosition::display_id	messages.h	/^    uint8_t display_id;$/;"	m	struct:SpiceMsgcMousePosition	access:public
SpiceMsgcMousePosition::x	messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgcMousePosition	access:public
SpiceMsgcMousePosition::y	messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgcMousePosition	access:public
SpiceMsgcMousePress	messages.h	/^typedef struct SpiceMsgcMousePress {$/;"	s
SpiceMsgcMousePress	messages.h	/^} SpiceMsgcMousePress;$/;"	t	typeref:struct:SpiceMsgcMousePress
SpiceMsgcMousePress::button	messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMousePress	access:public
SpiceMsgcMousePress::buttons_state	messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePress	access:public
SpiceMsgcMouseRelease	messages.h	/^typedef struct SpiceMsgcMouseRelease {$/;"	s
SpiceMsgcMouseRelease	messages.h	/^} SpiceMsgcMouseRelease;$/;"	t	typeref:struct:SpiceMsgcMouseRelease
SpiceMsgcMouseRelease::button	messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMouseRelease	access:public
SpiceMsgcMouseRelease::buttons_state	messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseRelease	access:public
SpiceMsgcPortEvent	messages.h	/^typedef struct SpiceMsgcPortEvent {$/;"	s
SpiceMsgcPortEvent	messages.h	/^} SpiceMsgcPortEvent;$/;"	t	typeref:struct:SpiceMsgcPortEvent
SpiceMsgcPortEvent::event	messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgcPortEvent	access:public
SpiceMsgcRecordMode	messages.h	/^} SpiceMsgPlaybackMode, SpiceMsgcRecordMode;$/;"	t	typeref:struct:SpiceMsgPlaybackMode
SpiceMsgcRecordPacket	messages.h	/^} SpiceMsgPlaybackPacket, SpiceMsgcRecordPacket;$/;"	t	typeref:struct:SpiceMsgPlaybackPacket
SpiceMsgcRecordStartMark	messages.h	/^typedef struct SpiceMsgcRecordStartMark {$/;"	s
SpiceMsgcRecordStartMark	messages.h	/^} SpiceMsgcRecordStartMark;$/;"	t	typeref:struct:SpiceMsgcRecordStartMark
SpiceMsgcRecordStartMark::time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgcRecordStartMark	access:public
SpiceMsgcSmartcard	messages.h	/^typedef struct SpiceMsgcSmartcard {$/;"	s
SpiceMsgcSmartcard	messages.h	/^} SpiceMsgcSmartcard;$/;"	t	typeref:struct:SpiceMsgcSmartcard
SpiceMsgcSmartcard::__anon23::add	messages.h	/^        VSCMsgReaderAdd add;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
SpiceMsgcSmartcard::__anon23::atr_data	messages.h	/^        VSCMsgATR atr_data;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
SpiceMsgcSmartcard::__anon23::error	messages.h	/^        VSCMsgError error;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
SpiceMsgcSmartcard::header	messages.h	/^    VSCMsgHeader header;$/;"	m	struct:SpiceMsgcSmartcard	access:public
SpiceMsgcTunnelAddGenericService	messages.h	/^typedef struct SpiceMsgcTunnelAddGenericService {$/;"	s
SpiceMsgcTunnelAddGenericService	messages.h	/^} SpiceMsgcTunnelAddGenericService;$/;"	t	typeref:struct:SpiceMsgcTunnelAddGenericService
SpiceMsgcTunnelAddGenericService::__anon22::ip	messages.h	/^        SpiceMsgTunnelIpInfo ip;$/;"	m	union:SpiceMsgcTunnelAddGenericService::__anon22	access:public
SpiceMsgcTunnelAddGenericService::description	messages.h	/^    uint64_t description;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::group	messages.h	/^    uint32_t group;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::name	messages.h	/^    uint64_t name;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::port	messages.h	/^    uint32_t port;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::type	messages.h	/^    uint32_t type;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
SpiceMsgcTunnelAddGenericService::u	messages.h	/^    } u;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	typeref:union:SpiceMsgcTunnelAddGenericService::__anon22	access:public
SpiceMsgcTunnelRemoveService	messages.h	/^typedef struct SpiceMsgcTunnelRemoveService {$/;"	s
SpiceMsgcTunnelRemoveService	messages.h	/^} SpiceMsgcTunnelRemoveService;$/;"	t	typeref:struct:SpiceMsgcTunnelRemoveService
SpiceMsgcTunnelRemoveService::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelRemoveService	access:public
SpiceMsgcTunnelSocketClosed	messages.h	/^typedef struct SpiceMsgcTunnelSocketClosed {$/;"	s
SpiceMsgcTunnelSocketClosed	messages.h	/^} SpiceMsgcTunnelSocketClosed;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketClosed
SpiceMsgcTunnelSocketClosed::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosed	access:public
SpiceMsgcTunnelSocketClosedAck	messages.h	/^typedef struct SpiceMsgcTunnelSocketClosedAck {$/;"	s
SpiceMsgcTunnelSocketClosedAck	messages.h	/^} SpiceMsgcTunnelSocketClosedAck;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketClosedAck
SpiceMsgcTunnelSocketClosedAck::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosedAck	access:public
SpiceMsgcTunnelSocketData	messages.h	/^typedef struct SpiceMsgcTunnelSocketData {$/;"	s
SpiceMsgcTunnelSocketData	messages.h	/^} SpiceMsgcTunnelSocketData;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketData
SpiceMsgcTunnelSocketData::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketData	access:public
SpiceMsgcTunnelSocketData::data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgcTunnelSocketData	access:public
SpiceMsgcTunnelSocketFin	messages.h	/^typedef struct SpiceMsgcTunnelSocketFin {$/;"	s
SpiceMsgcTunnelSocketFin	messages.h	/^} SpiceMsgcTunnelSocketFin;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketFin
SpiceMsgcTunnelSocketFin::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketFin	access:public
SpiceMsgcTunnelSocketOpenAck	messages.h	/^typedef struct SpiceMsgcTunnelSocketOpenAck {$/;"	s
SpiceMsgcTunnelSocketOpenAck	messages.h	/^} SpiceMsgcTunnelSocketOpenAck;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketOpenAck
SpiceMsgcTunnelSocketOpenAck::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck	access:public
SpiceMsgcTunnelSocketOpenAck::tokens	messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck	access:public
SpiceMsgcTunnelSocketOpenNack	messages.h	/^typedef struct SpiceMsgcTunnelSocketOpenNack {$/;"	s
SpiceMsgcTunnelSocketOpenNack	messages.h	/^} SpiceMsgcTunnelSocketOpenNack;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketOpenNack
SpiceMsgcTunnelSocketOpenNack::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenNack	access:public
SpiceMsgcTunnelSocketTokens	messages.h	/^typedef struct SpiceMsgcTunnelSocketTokens {$/;"	s
SpiceMsgcTunnelSocketTokens	messages.h	/^} SpiceMsgcTunnelSocketTokens;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketTokens
SpiceMsgcTunnelSocketTokens::connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketTokens	access:public
SpiceMsgcTunnelSocketTokens::num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgcTunnelSocketTokens	access:public
SpiceOpaque	draw.h	/^typedef struct SpiceOpaque {$/;"	s
SpiceOpaque	draw.h	/^} SpiceOpaque;$/;"	t	typeref:struct:SpiceOpaque
SpiceOpaque::brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpaque::mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpaque::rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpaque::scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpaque::src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpaque::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceOpaque	access:public
SpiceOpenSSLVerify	ssl_verify.h	/^} SpiceOpenSSLVerify;$/;"	t	typeref:struct:__anon2
SpicePalette	draw.h	/^typedef struct SpicePalette {$/;"	s
SpicePalette	draw.h	/^} SpicePalette;$/;"	t	typeref:struct:SpicePalette
SpicePalette::ents	draw.h	/^    uint32_t ents[0];$/;"	m	struct:SpicePalette	access:public
SpicePalette::num_ents	draw.h	/^    uint16_t num_ents;$/;"	m	struct:SpicePalette	access:public
SpicePalette::unique	draw.h	/^    uint64_t unique;$/;"	m	struct:SpicePalette	access:public
SpicePaletteCache	canvas_base.h	/^typedef struct _SpicePaletteCache SpicePaletteCache;$/;"	t	typeref:struct:_SpicePaletteCache
SpicePaletteCacheOps	canvas_base.h	/^} SpicePaletteCacheOps;$/;"	t	typeref:struct:__anon10
SpicePath	draw.h	/^typedef struct SpicePath {$/;"	s
SpicePath	draw.h	/^} SpicePath;$/;"	t	typeref:struct:SpicePath
SpicePath::num_segments	draw.h	/^  uint32_t num_segments;$/;"	m	struct:SpicePath	access:public
SpicePath::segments	draw.h	/^  SpicePathSeg *segments[0];$/;"	m	struct:SpicePath	access:public
SpicePathSeg	draw.h	/^typedef struct SpicePathSeg {$/;"	s
SpicePathSeg	draw.h	/^} SpicePathSeg;$/;"	t	typeref:struct:SpicePathSeg
SpicePathSeg::count	draw.h	/^    uint32_t count;$/;"	m	struct:SpicePathSeg	access:public
SpicePathSeg::flags	draw.h	/^    uint32_t flags;$/;"	m	struct:SpicePathSeg	access:public
SpicePathSeg::points	draw.h	/^    SpicePointFix points[0];$/;"	m	struct:SpicePathSeg	access:public
SpicePattern	draw.h	/^typedef struct SpicePattern {$/;"	s
SpicePattern	draw.h	/^} SpicePattern;$/;"	t	typeref:struct:SpicePattern
SpicePattern::pat	draw.h	/^    SpiceImage *pat;$/;"	m	struct:SpicePattern	access:public
SpicePattern::pos	draw.h	/^    SpicePoint pos;$/;"	m	struct:SpicePattern	access:public
SpicePoint	draw.h	/^typedef struct SpicePoint {$/;"	s
SpicePoint	draw.h	/^} SpicePoint;$/;"	t	typeref:struct:SpicePoint
SpicePoint16	draw.h	/^typedef struct SpicePoint16 {$/;"	s
SpicePoint16	draw.h	/^} SpicePoint16;$/;"	t	typeref:struct:SpicePoint16
SpicePoint16::x	draw.h	/^    int16_t x;$/;"	m	struct:SpicePoint16	access:public
SpicePoint16::y	draw.h	/^    int16_t y;$/;"	m	struct:SpicePoint16	access:public
SpicePoint::x	draw.h	/^    int32_t x;$/;"	m	struct:SpicePoint	access:public
SpicePoint::y	draw.h	/^    int32_t y;$/;"	m	struct:SpicePoint	access:public
SpicePointFix	draw.h	/^typedef struct SpicePointFix {$/;"	s
SpicePointFix	draw.h	/^} SpicePointFix;$/;"	t	typeref:struct:SpicePointFix
SpicePointFix::x	draw.h	/^    SPICE_FIXED28_4 x;$/;"	m	struct:SpicePointFix	access:public
SpicePointFix::y	draw.h	/^    SPICE_FIXED28_4 y;$/;"	m	struct:SpicePointFix	access:public
SpiceQMask	draw.h	/^typedef struct SpiceQMask {$/;"	s
SpiceQMask	draw.h	/^} SpiceQMask;$/;"	t	typeref:struct:SpiceQMask
SpiceQMask::bitmap	draw.h	/^    SpiceImage *bitmap;$/;"	m	struct:SpiceQMask	access:public
SpiceQMask::flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceQMask	access:public
SpiceQMask::pos	draw.h	/^    SpicePoint pos;$/;"	m	struct:SpiceQMask	access:public
SpiceQUICData	draw.h	/^typedef struct SpiceQUICData {$/;"	s
SpiceQUICData	draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceQUICData::data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceQUICData	access:public
SpiceQUICData::data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceQUICData	access:public
SpiceROP	pixman_utils.h	/^} SpiceROP;$/;"	t	typeref:enum:__anon19
SpiceRasterGlyph	draw.h	/^typedef struct SpiceRasterGlyph {$/;"	s
SpiceRasterGlyph	draw.h	/^} SpiceRasterGlyph;$/;"	t	typeref:struct:SpiceRasterGlyph
SpiceRasterGlyph::data	draw.h	/^    uint8_t data[0];$/;"	m	struct:SpiceRasterGlyph	access:public
SpiceRasterGlyph::glyph_origin	draw.h	/^    SpicePoint glyph_origin;$/;"	m	struct:SpiceRasterGlyph	access:public
SpiceRasterGlyph::height	draw.h	/^    uint16_t height;$/;"	m	struct:SpiceRasterGlyph	access:public
SpiceRasterGlyph::render_pos	draw.h	/^    SpicePoint render_pos;$/;"	m	struct:SpiceRasterGlyph	access:public
SpiceRasterGlyph::width	draw.h	/^    uint16_t width;$/;"	m	struct:SpiceRasterGlyph	access:public
SpiceRect	draw.h	/^typedef struct SpiceRect {$/;"	s
SpiceRect	draw.h	/^} SpiceRect;$/;"	t	typeref:struct:SpiceRect
SpiceRect::bottom	draw.h	/^    int32_t bottom;$/;"	m	struct:SpiceRect	access:public
SpiceRect::left	draw.h	/^    int32_t left;$/;"	m	struct:SpiceRect	access:public
SpiceRect::right	draw.h	/^    int32_t right;$/;"	m	struct:SpiceRect	access:public
SpiceRect::top	draw.h	/^    int32_t top;$/;"	m	struct:SpiceRect	access:public
SpiceResourceID	messages.h	/^typedef struct SpiceResourceID {$/;"	s
SpiceResourceID	messages.h	/^} SpiceResourceID;$/;"	t	typeref:struct:SpiceResourceID
SpiceResourceID::id	messages.h	/^    uint64_t id;$/;"	m	struct:SpiceResourceID	access:public
SpiceResourceID::type	messages.h	/^    uint8_t type;$/;"	m	struct:SpiceResourceID	access:public
SpiceResourceList	messages.h	/^typedef struct SpiceResourceList {$/;"	s
SpiceResourceList	messages.h	/^} SpiceResourceList;$/;"	t	typeref:struct:SpiceResourceList
SpiceResourceList::count	messages.h	/^    uint16_t count;$/;"	m	struct:SpiceResourceList	access:public
SpiceResourceList::resources	messages.h	/^    SpiceResourceID resources[0];$/;"	m	struct:SpiceResourceList	access:public
SpiceRop3	draw.h	/^typedef struct SpiceRop3 {$/;"	s
SpiceRop3	draw.h	/^} SpiceRop3;$/;"	t	typeref:struct:SpiceRop3
SpiceRop3::brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceRop3	access:public
SpiceRop3::mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceRop3	access:public
SpiceRop3::rop3	draw.h	/^    uint8_t rop3;$/;"	m	struct:SpiceRop3	access:public
SpiceRop3::scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceRop3	access:public
SpiceRop3::src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceRop3	access:public
SpiceRop3::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceRop3	access:public
SpiceStreamDataHeader	messages.h	/^typedef struct SpiceStreamDataHeader {$/;"	s
SpiceStreamDataHeader	messages.h	/^} SpiceStreamDataHeader;$/;"	t	typeref:struct:SpiceStreamDataHeader
SpiceStreamDataHeader::id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceStreamDataHeader	access:public
SpiceStreamDataHeader::multi_media_time	messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceStreamDataHeader	access:public
SpiceString	draw.h	/^typedef struct SpiceString {$/;"	s
SpiceString	draw.h	/^} SpiceString;$/;"	t	typeref:struct:SpiceString
SpiceString::flags	draw.h	/^    uint16_t flags;$/;"	m	struct:SpiceString	access:public
SpiceString::glyphs	draw.h	/^    SpiceRasterGlyph *glyphs[0];$/;"	m	struct:SpiceString	access:public
SpiceString::length	draw.h	/^    uint16_t length;$/;"	m	struct:SpiceString	access:public
SpiceStroke	draw.h	/^typedef struct SpiceStroke {$/;"	s
SpiceStroke	draw.h	/^} SpiceStroke;$/;"	t	typeref:struct:SpiceStroke
SpiceStroke::attr	draw.h	/^    SpiceLineAttr attr;$/;"	m	struct:SpiceStroke	access:public
SpiceStroke::back_mode	draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceStroke	access:public
SpiceStroke::brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceStroke	access:public
SpiceStroke::fore_mode	draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceStroke	access:public
SpiceStroke::path	draw.h	/^    SpicePath *path;$/;"	m	struct:SpiceStroke	access:public
SpiceSurface	draw.h	/^typedef struct SpiceSurface {$/;"	s
SpiceSurface	draw.h	/^} SpiceSurface;$/;"	t	typeref:struct:SpiceSurface
SpiceSurface::surface_id	draw.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceSurface	access:public
SpiceText	draw.h	/^typedef struct SpiceText {$/;"	s
SpiceText	draw.h	/^} SpiceText;$/;"	t	typeref:struct:SpiceText
SpiceText::back_area	draw.h	/^    SpiceRect back_area;$/;"	m	struct:SpiceText	access:public
SpiceText::back_brush	draw.h	/^    SpiceBrush back_brush;$/;"	m	struct:SpiceText	access:public
SpiceText::back_mode	draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceText	access:public
SpiceText::fore_brush	draw.h	/^    SpiceBrush fore_brush;$/;"	m	struct:SpiceText	access:public
SpiceText::fore_mode	draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceText	access:public
SpiceText::str	draw.h	/^    SpiceString *str;$/;"	m	struct:SpiceText	access:public
SpiceTransform	draw.h	/^typedef struct SpiceTransform {$/;"	s
SpiceTransform	draw.h	/^} SpiceTransform;$/;"	t	typeref:struct:SpiceTransform
SpiceTransform::t00	draw.h	/^    uint32_t t00;$/;"	m	struct:SpiceTransform	access:public
SpiceTransform::t01	draw.h	/^    uint32_t t01;$/;"	m	struct:SpiceTransform	access:public
SpiceTransform::t02	draw.h	/^    uint32_t t02;$/;"	m	struct:SpiceTransform	access:public
SpiceTransform::t10	draw.h	/^    uint32_t t10;$/;"	m	struct:SpiceTransform	access:public
SpiceTransform::t11	draw.h	/^    uint32_t t11;$/;"	m	struct:SpiceTransform	access:public
SpiceTransform::t12	draw.h	/^    uint32_t t12;$/;"	m	struct:SpiceTransform	access:public
SpiceTransparent	draw.h	/^typedef struct SpiceTransparent {$/;"	s
SpiceTransparent	draw.h	/^} SpiceTransparent;$/;"	t	typeref:struct:SpiceTransparent
SpiceTransparent::src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceTransparent	access:public
SpiceTransparent::src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceTransparent	access:public
SpiceTransparent::src_color	draw.h	/^    uint32_t src_color;$/;"	m	struct:SpiceTransparent	access:public
SpiceTransparent::true_color	draw.h	/^    uint32_t true_color;$/;"	m	struct:SpiceTransparent	access:public
SpiceTunnelIPv4	messages.h	/^typedef uint8_t SpiceTunnelIPv4[4];$/;"	t
SpiceWaitForChannel	messages.h	/^typedef struct SpiceWaitForChannel {$/;"	s
SpiceWaitForChannel	messages.h	/^} SpiceWaitForChannel;$/;"	t	typeref:struct:SpiceWaitForChannel
SpiceWaitForChannel::channel_id	messages.h	/^    uint8_t channel_id;$/;"	m	struct:SpiceWaitForChannel	access:public
SpiceWaitForChannel::channel_type	messages.h	/^    uint8_t channel_type;$/;"	m	struct:SpiceWaitForChannel	access:public
SpiceWaitForChannel::message_serial	messages.h	/^    uint64_t message_serial;$/;"	m	struct:SpiceWaitForChannel	access:public
SpiceWhiteness	draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceZlibDecoder	canvas_base.h	/^typedef struct _SpiceZlibDecoder SpiceZlibDecoder;$/;"	t	typeref:struct:_SpiceZlibDecoder
SpiceZlibDecoderOps	canvas_base.h	/^} SpiceZlibDecoderOps;$/;"	t	typeref:struct:__anon12
SpiceZlibGlzRGBData	draw.h	/^typedef struct SpiceZlibGlzRGBData {$/;"	s
SpiceZlibGlzRGBData	draw.h	/^} SpiceZlibGlzRGBData;$/;"	t	typeref:struct:SpiceZlibGlzRGBData
SpiceZlibGlzRGBData::data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
SpiceZlibGlzRGBData::data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
SpiceZlibGlzRGBData::glz_data_size	draw.h	/^    uint32_t glz_data_size;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
StepAround	lines.c	1864;"	d	file:
StrokeGC	canvas_base.c	/^} StrokeGC;$/;"	t	typeref:struct:__anon28	file:
StrokeLines	canvas_base.c	/^} StrokeLines;$/;"	t	typeref:struct:__anon30	file:
SwCanvas	sw_canvas.c	/^struct SwCanvas {$/;"	s	file:
SwCanvas	sw_canvas.c	/^typedef struct SwCanvas SwCanvas;$/;"	t	typeref:struct:SwCanvas	file:
SwCanvas::base	sw_canvas.c	/^    CanvasBase base;$/;"	m	struct:SwCanvas	file:	access:public
SwCanvas::image	sw_canvas.c	/^    pixman_image_t *image;$/;"	m	struct:SwCanvas	file:	access:public
SwCanvas::private_data	sw_canvas.c	/^    uint32_t *private_data;$/;"	m	struct:SwCanvas	file:	access:public
SwCanvas::private_data_size	sw_canvas.c	/^    int private_data_size;$/;"	m	struct:SwCanvas	file:	access:public
TABRAND_SEEDMASK	quic.c	207;"	d	file:
TABRAND_TABSIZE	quic.c	206;"	d	file:
TESS_CALL_BACK_TYPE	glc.c	1377;"	d	file:
TESS_CALL_BACK_TYPE	glc.c	1379;"	d	file:
TESS_VERTEX_ALLOC_BUNCH	glc.c	44;"	d	file:
THREE_BYTE	quic.c	838;"	d	file:
THREE_BYTE	quic_tmpl.c	29;"	d	file:
TILED_RASTER_OP	pixman_utils.c	53;"	d	file:
TO_RGB32	lz.c	445;"	d	file:
TO_RGB32	lz.c	450;"	d	file:
TO_RGB32	lz.c	455;"	d	file:
TO_RGB32	lz.c	460;"	d	file:
TO_RGB32	lz.c	465;"	d	file:
TO_RGB32	lz.c	473;"	d	file:
TO_RGB32	lz.c	481;"	d	file:
TO_RGB32	lz_decompress_tmpl.c	339;"	d	file:
T_2MDY	lines.c	1182;"	d	file:
T_2NDX	lines.c	1181;"	d	file:
T_ADDDX	lines.c	1186;"	d	file:
T_ADDDY	lines.c	1188;"	d	file:
T_ADDONE	lines.c	1194;"	d	file:
T_BIASSUBONE	lines.c	1190;"	d	file:
T_DIV2DX	lines.c	1192;"	d	file:
T_DIV2DY	lines.c	1193;"	d	file:
T_DXNOTY	lines.c	1183;"	d	file:
T_DYNOTX	lines.c	1184;"	d	file:
T_SUBBIAS	lines.c	1191;"	d	file:
T_SUBDX	lines.c	1187;"	d	file:
T_SUBDXORY	lines.c	1185;"	d	file:
T_SUBDY	lines.c	1189;"	d	file:
TassVertex	glc.c	/^struct TassVertex {$/;"	s	file:
TassVertex	glc.c	/^typedef struct TassVertex TassVertex;$/;"	t	typeref:struct:TassVertex	file:
TassVertex::list_link	glc.c	/^    TassVertex *list_link;$/;"	m	struct:TassVertex	file:	access:public
TassVertex::next	glc.c	/^    TassVertex *next;$/;"	m	struct:TassVertex	file:	access:public
TassVertex::point	glc.c	/^    PathPoint point;$/;"	m	struct:TassVertex	file:	access:public
TassVertexBuf	glc.c	/^struct TassVertexBuf {$/;"	s	file:
TassVertexBuf	glc.c	/^typedef struct TassVertexBuf TassVertexBuf;$/;"	t	typeref:struct:TassVertexBuf	file:
TassVertexBuf::next	glc.c	/^    TassVertexBuf *next;$/;"	m	struct:TassVertexBuf	file:	access:public
TassVertexBuf::vertexs	glc.c	/^    TassVertex vertexs[0];$/;"	m	struct:TassVertexBuf	file:	access:public
UINT16_FROM_LE	pixman_utils.c	1051;"	d	file:
UINT16_FROM_LE	pixman_utils.c	1054;"	d	file:
UINT32_FROM_LE	pixman_utils.c	1052;"	d	file:
UINT32_FROM_LE	pixman_utils.c	1055;"	d	file:
UNCOMPRESS_ONE	quic_rgb_tmpl.c	583;"	d	file:
UNCOMPRESS_ONE	quic_rgb_tmpl.c	750;"	d	file:
UNCOMPRESS_ONE_0	quic_rgb_tmpl.c	575;"	d	file:
UNCOMPRESS_ONE_0	quic_rgb_tmpl.c	749;"	d	file:
UNCOMPRESS_ONE_ROW0	quic_rgb_tmpl.c	468;"	d	file:
UNCOMPRESS_ONE_ROW0	quic_rgb_tmpl.c	748;"	d	file:
UNCOMPRESS_ONE_ROW0_0	quic_rgb_tmpl.c	461;"	d	file:
UNCOMPRESS_ONE_ROW0_0	quic_rgb_tmpl.c	747;"	d	file:
UNCOMPRESS_PIX_START	quic_rgb_tmpl.c	103;"	d	file:
UNCOMPRESS_PIX_START	quic_rgb_tmpl.c	40;"	d	file:
UNCOMPRESS_PIX_START	quic_rgb_tmpl.c	61;"	d	file:
UNCOMPRESS_PIX_START	quic_rgb_tmpl.c	765;"	d	file:
UNCOMPRESS_PIX_START	quic_rgb_tmpl.c	82;"	d	file:
UPDATE_MODEL	quic_rgb_tmpl.c	179;"	d	file:
UPDATE_MODEL	quic_rgb_tmpl.c	738;"	d	file:
USE_LINE_ANTIALIAS	glc.c	113;"	d	file:
UniquifySpansX	lines.c	/^UniquifySpansX (Spans * spans, DDXPointRec * newPoints, int *newWidths)$/;"	f	file:	signature:(Spans * spans, DDXPointRec * newPoints, int *newWidths)
VERTEX2	glc.c	159;"	d	file:
VNAME	quic_family_tmpl.c	114;"	d	file:
VNAME	quic_family_tmpl.c	25;"	d	file:
VNAME	quic_family_tmpl.c	33;"	d	file:
V_BOTTOM	lines.c	2962;"	d	file:
V_LEFT	lines.c	2963;"	d	file:
V_RIGHT	lines.c	2961;"	d	file:
V_TOP	lines.c	2960;"	d	file:
Vertex	glc.c	/^typedef GLdouble Vertex[3];$/;"	t	file:
X509_NAME	ssl_verify.h	34;"	d
XDECREASING	lines.c	136;"	d	file:
XMAJOROCTANTS	lines.c	149;"	d	file:
X_AXIS	lines.c	182;"	d	file:
Y	glc.c	158;"	d	file:
YDECREASING	lines.c	137;"	d	file:
YMAJOR	lines.c	138;"	d	file:
YMAX	lines.c	447;"	d	file:
YMIN	lines.c	446;"	d	file:
Y_AXIS	lines.c	183;"	d	file:
_GENERATED_HEADERS_H	generated_server_marshallers.h	24;"	d
_GL_CONCAT	verify.h	144;"	d
_GL_CONCAT0	verify.h	145;"	d
_GL_COUNTER	verify.h	152;"	d
_GL_COUNTER	verify.h	154;"	d
_GL_GENSYM	verify.h	159;"	d
_GL_HAVE_STATIC_ASSERT	verify.h	40;"	d
_GL_HAVE__STATIC_ASSERT	verify.h	35;"	d
_GL_VERIFY	verify.h	197;"	d
_GL_VERIFY	verify.h	199;"	d
_GL_VERIFY_H	verify.h	21;"	d
_GL_VERIFY_TRUE	verify.h	165;"	d
_GL_VERIFY_TYPE	verify.h	176;"	d
_GL_VERIFY_TYPE	verify.h	179;"	d
_GL_VERIFY_TYPE	verify.h	185;"	d
_H_CANVAS_BASE	canvas_base.h	20;"	d
_H_CANVAS_UTILS	canvas_utils.h	20;"	d
_H_DEMARSHAL	client_demarshallers.h	18;"	d
_H_GLCTX	ogl_ctx.h	20;"	d
_H_GL_CANVASE	glc.h	22;"	d
_H_MARSHALLER	marshaller.h	20;"	d
_H_MARSHALLERS	client_marshallers.h	20;"	d
_H_MEM	mem.h	20;"	d
_H_MESSAGES	messages.h	32;"	d
_H_MUTEX	mutex.h	20;"	d
_H_RECT	rect.h	20;"	d
_H_REGION	region.h	20;"	d
_H_RING2	ring.h	20;"	d
_H_ROP3	rop3.h	20;"	d
_H_SND_CODEC	snd_codec.h	20;"	d
_H_SPICE_DRAW	draw.h	32;"	d
_H__CANVAS	sw_canvas.h	20;"	d
_H__GDI_CANVAS	gdi_canvas.h	20;"	d
_H__GL_CANVAS	gl_canvas.h	20;"	d
_H__PIXMAN_UTILS	pixman_utils.h	20;"	d
_LZ_COMMON_H	lz_common.h	24;"	d
_LineFace	lines.c	/^typedef struct _LineFace {$/;"	s	file:
_LineFace::dx	lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::dy	lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::k	lines.c	/^    double k;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::x	lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::xa	lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::y	lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:	access:public
_LineFace::ya	lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:	access:public
_PIXEL_A	quic_rgb_tmpl.c	111;"	d	file:
_PIXEL_A	quic_rgb_tmpl.c	731;"	d	file:
_PIXEL_A	quic_tmpl.c	49;"	d	file:
_PIXEL_A	quic_tmpl.c	623;"	d	file:
_PIXEL_B	quic_rgb_tmpl.c	112;"	d	file:
_PIXEL_B	quic_rgb_tmpl.c	732;"	d	file:
_PIXEL_B	quic_tmpl.c	50;"	d	file:
_PIXEL_B	quic_tmpl.c	624;"	d	file:
_PIXEL_C	quic_rgb_tmpl.c	113;"	d	file:
_PIXEL_C	quic_rgb_tmpl.c	733;"	d	file:
_PIXEL_C	quic_tmpl.c	51;"	d	file:
_PIXEL_C	quic_tmpl.c	625;"	d	file:
_PolyEdge	lines.c	/^typedef struct _PolyEdge {$/;"	s	file:
_PolyEdge::dx	lines.c	/^    int dx;$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::dy	lines.c	/^    int dy;$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::e	lines.c	/^    int e;                      \/* initial error term *\/$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::height	lines.c	/^    int height;                 \/* number of scanlines to process *\/$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::signdx	lines.c	/^    int signdx;                 \/* variable dx sign *\/$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::stepx	lines.c	/^    int stepx;                  \/* fixed integral dx *\/$/;"	m	struct:_PolyEdge	file:	access:public
_PolyEdge::x	lines.c	/^    int x;                      \/* starting x coordinate *\/$/;"	m	struct:_PolyEdge	file:	access:public
_PolySlope	lines.c	/^typedef struct _PolySlope {$/;"	s	file:
_PolySlope::dx	lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:	access:public
_PolySlope::dy	lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:	access:public
_PolySlope::k	lines.c	/^    double k;                   \/* x0 * dy - y0 * dx *\/$/;"	m	struct:_PolySlope	file:	access:public
_PolyVertex	lines.c	/^typedef struct _PolyVertex {$/;"	s	file:
_PolyVertex::x	lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:	access:public
_PolyVertex::y	lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:	access:public
_SPICE_NEW	mem.h	104;"	d
_SPICE_NEW	mem.h	136;"	d
_SPICE_RENEW	mem.h	118;"	d
_SPICE_RENEW	mem.h	138;"	d
_SpanData	lines.c	/^typedef struct _SpanData {$/;"	s	file:
_SpanData::bgGroup	lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:	access:public
_SpanData::fgGroup	lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:	access:public
_SpiceCanvas	canvas_base.h	/^struct _SpiceCanvas {$/;"	s
_SpiceCanvas::ops	canvas_base.h	/^  SpiceCanvasOps *ops;$/;"	m	struct:_SpiceCanvas	access:public
_SpiceGlzDecoder	canvas_base.h	/^struct _SpiceGlzDecoder {$/;"	s
_SpiceGlzDecoder::ops	canvas_base.h	/^  SpiceGlzDecoderOps *ops;$/;"	m	struct:_SpiceGlzDecoder	access:public
_SpiceImageCache	canvas_base.h	/^struct _SpiceImageCache {$/;"	s
_SpiceImageCache::ops	canvas_base.h	/^  SpiceImageCacheOps *ops;$/;"	m	struct:_SpiceImageCache	access:public
_SpiceImageSurfaces	canvas_base.h	/^struct _SpiceImageSurfaces {$/;"	s
_SpiceImageSurfaces::ops	canvas_base.h	/^ SpiceImageSurfacesOps *ops;$/;"	m	struct:_SpiceImageSurfaces	access:public
_SpiceJpegDecoder	canvas_base.h	/^struct _SpiceJpegDecoder {$/;"	s
_SpiceJpegDecoder::ops	canvas_base.h	/^    SpiceJpegDecoderOps *ops;$/;"	m	struct:_SpiceJpegDecoder	access:public
_SpicePaletteCache	canvas_base.h	/^struct _SpicePaletteCache {$/;"	s
_SpicePaletteCache::ops	canvas_base.h	/^  SpicePaletteCacheOps *ops;$/;"	m	struct:_SpicePaletteCache	access:public
_SpiceZlibDecoder	canvas_base.h	/^struct _SpiceZlibDecoder {$/;"	s
_SpiceZlibDecoder::ops	canvas_base.h	/^  SpiceZlibDecoderOps *ops;$/;"	m	struct:_SpiceZlibDecoder	access:public
_Static_assert	verify.h	207;"	d
_XOPEN_SOURCE	lines.c	57;"	d	file:
_XOPEN_SOURCE	lines.c	59;"	d	file:
__LZ_CONFIG_H	lz_config.h	22;"	d
__LZ_H	lz.h	7;"	d
__MACROS_H	macros.h	20;"	d
__QUIC_CONFIG_H	quic_config.h	20;"	d
__QUIC_H	quic.h	20;"	d
__anon10::get	canvas_base.h	/^    SpicePalette *(*get)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
__anon10::put	canvas_base.h	/^    void (*put)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
__anon10::release	canvas_base.h	/^    void (*release)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
__anon11::decode	canvas_base.h	/^    void (*decode)(SpiceGlzDecoder *decoder,$/;"	m	struct:__anon11	access:public
__anon12::decode	canvas_base.h	/^    void (*decode)(SpiceZlibDecoder *decoder,$/;"	m	struct:__anon12	access:public
__anon13::blend_image	canvas_base.h	/^    void (*blend_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blend_image_from_surface	canvas_base.h	/^    void (*blend_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blend_scale_image	canvas_base.h	/^    void (*blend_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blend_scale_image_from_surface	canvas_base.h	/^    void (*blend_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blit_image	canvas_base.h	/^    void (*blit_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blit_image_from_surface	canvas_base.h	/^    void (*blit_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blit_image_rop	canvas_base.h	/^    void (*blit_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::blit_image_rop_from_surface	canvas_base.h	/^    void (*blit_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::clear	canvas_base.h	/^    void (*clear)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
__anon13::colorkey_image	canvas_base.h	/^    void (*colorkey_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::colorkey_image_from_surface	canvas_base.h	/^    void (*colorkey_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::colorkey_scale_image	canvas_base.h	/^    void (*colorkey_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::colorkey_scale_image_from_surface	canvas_base.h	/^    void (*colorkey_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::copy_bits	canvas_base.h	/^    void (*copy_bits)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos);$/;"	m	struct:__anon13	access:public
__anon13::copy_region	canvas_base.h	/^    void (*copy_region)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::destroy	canvas_base.h	/^    void (*destroy)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
__anon13::draw_alpha_blend	canvas_base.h	/^    void (*draw_alpha_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend);$/;"	m	struct:__anon13	access:public
__anon13::draw_blackness	canvas_base.h	/^    void (*draw_blackness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness);$/;"	m	struct:__anon13	access:public
__anon13::draw_blend	canvas_base.h	/^    void (*draw_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend);$/;"	m	struct:__anon13	access:public
__anon13::draw_composite	canvas_base.h	/^    void (*draw_composite)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceComposite *composite);$/;"	m	struct:__anon13	access:public
__anon13::draw_copy	canvas_base.h	/^    void (*draw_copy)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy);$/;"	m	struct:__anon13	access:public
__anon13::draw_fill	canvas_base.h	/^    void (*draw_fill)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill);$/;"	m	struct:__anon13	access:public
__anon13::draw_invers	canvas_base.h	/^    void (*draw_invers)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers);$/;"	m	struct:__anon13	access:public
__anon13::draw_opaque	canvas_base.h	/^    void (*draw_opaque)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque);$/;"	m	struct:__anon13	access:public
__anon13::draw_rop3	canvas_base.h	/^    void (*draw_rop3)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3);$/;"	m	struct:__anon13	access:public
__anon13::draw_stroke	canvas_base.h	/^    void (*draw_stroke)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke);$/;"	m	struct:__anon13	access:public
__anon13::draw_text	canvas_base.h	/^    void (*draw_text)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text);$/;"	m	struct:__anon13	access:public
__anon13::draw_transparent	canvas_base.h	/^    void (*draw_transparent)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent);$/;"	m	struct:__anon13	access:public
__anon13::draw_whiteness	canvas_base.h	/^    void (*draw_whiteness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness);$/;"	m	struct:__anon13	access:public
__anon13::fill_solid_rects	canvas_base.h	/^    void (*fill_solid_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_solid_rects_rop	canvas_base.h	/^    void (*fill_solid_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_solid_spans	canvas_base.h	/^    void (*fill_solid_spans)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_tiled_rects	canvas_base.h	/^    void (*fill_tiled_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_tiled_rects_from_surface	canvas_base.h	/^    void (*fill_tiled_rects_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_tiled_rects_rop	canvas_base.h	/^    void (*fill_tiled_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::fill_tiled_rects_rop_from_surface	canvas_base.h	/^    void (*fill_tiled_rects_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::get_image	canvas_base.h	/^    pixman_image_t *(*get_image)(SpiceCanvas *canvas, int force_opaque);$/;"	m	struct:__anon13	access:public
__anon13::group_end	canvas_base.h	/^    void (*group_end)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
__anon13::group_start	canvas_base.h	/^    void (*group_start)(SpiceCanvas *canvas, QRegion *region);$/;"	m	struct:__anon13	access:public
__anon13::put_image	canvas_base.h	/^    void (*put_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::read_bits	canvas_base.h	/^    void (*read_bits)(SpiceCanvas *canvas, uint8_t *dest, int dest_stride, const SpiceRect *area);$/;"	m	struct:__anon13	access:public
__anon13::scale_image	canvas_base.h	/^    void (*scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::scale_image_from_surface	canvas_base.h	/^    void (*scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::scale_image_rop	canvas_base.h	/^    void (*scale_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon13::scale_image_rop_from_surface	canvas_base.h	/^    void (*scale_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
__anon16::celt_decoder	snd_codec.c	/^    CELTDecoder *celt_decoder;$/;"	m	struct:__anon16	file:	access:public
__anon16::celt_encoder	snd_codec.c	/^    CELTEncoder *celt_encoder;$/;"	m	struct:__anon16	file:	access:public
__anon16::celt_mode	snd_codec.c	/^    CELTMode *celt_mode;$/;"	m	struct:__anon16	file:	access:public
__anon16::frequency	snd_codec.c	/^    int frequency;$/;"	m	struct:__anon16	file:	access:public
__anon16::mode	snd_codec.c	/^    int mode;$/;"	m	struct:__anon16	file:	access:public
__anon16::opus_decoder	snd_codec.c	/^    OpusDecoder *opus_decoder;$/;"	m	struct:__anon16	file:	access:public
__anon16::opus_encoder	snd_codec.c	/^    OpusEncoder *opus_encoder;$/;"	m	struct:__anon16	file:	access:public
__anon28::__anon29::surface_canvas	canvas_base.c	/^        SpiceCanvas *surface_canvas;$/;"	m	union:__anon28::__anon29	file:	access:public
__anon28::__anon29::tile	canvas_base.c	/^        pixman_image_t *tile;$/;"	m	union:__anon28::__anon29	file:	access:public
__anon28::back_rop	canvas_base.c	/^    SpiceROP back_rop;$/;"	m	struct:__anon28	file:	access:public
__anon28::base	canvas_base.c	/^    lineGC base;$/;"	m	struct:__anon28	file:	access:public
__anon28::canvas	canvas_base.c	/^    SpiceCanvas *canvas;$/;"	m	struct:__anon28	file:	access:public
__anon28::color	canvas_base.c	/^    uint32_t color;$/;"	m	struct:__anon28	file:	access:public
__anon28::dest_region	canvas_base.c	/^    pixman_region32_t dest_region;$/;"	m	struct:__anon28	file:	access:public
__anon28::fore_rop	canvas_base.c	/^    SpiceROP fore_rop;$/;"	m	struct:__anon28	file:	access:public
__anon28::solid	canvas_base.c	/^    int solid;$/;"	m	struct:__anon28	file:	access:public
__anon28::tile_offset_x	canvas_base.c	/^    int tile_offset_x;$/;"	m	struct:__anon28	file:	access:public
__anon28::tile_offset_y	canvas_base.c	/^    int tile_offset_y;$/;"	m	struct:__anon28	file:	access:public
__anon28::use_surface_canvas	canvas_base.c	/^    int use_surface_canvas;$/;"	m	struct:__anon28	file:	access:public
__anon2::all_preverify_ok	ssl_verify.h	/^    int                 all_preverify_ok;$/;"	m	struct:__anon2	access:public
__anon2::hostname	ssl_verify.h	/^    char                *hostname;$/;"	m	struct:__anon2	access:public
__anon2::pubkey	ssl_verify.h	/^    char                *pubkey;$/;"	m	struct:__anon2	access:public
__anon2::pubkey_size	ssl_verify.h	/^    size_t              pubkey_size;$/;"	m	struct:__anon2	access:public
__anon2::ssl	ssl_verify.h	/^    SSL                 *ssl;$/;"	m	struct:__anon2	access:public
__anon2::subject	ssl_verify.h	/^    char                *subject;$/;"	m	struct:__anon2	access:public
__anon2::verifyop	ssl_verify.h	/^    SPICE_SSL_VERIFY_OP verifyop;$/;"	m	struct:__anon2	access:public
__anon30::num_points	canvas_base.c	/^    int num_points;$/;"	m	struct:__anon30	file:	access:public
__anon30::points	canvas_base.c	/^    SpicePoint *points;$/;"	m	struct:__anon30	file:	access:public
__anon30::size	canvas_base.c	/^    int size;$/;"	m	struct:__anon30	file:	access:public
__anon31::msg_SpiceMsgAudioMute	client_marshallers.h	/^    void (*msg_SpiceMsgAudioMute)(SpiceMarshaller *m, SpiceMsgAudioMute *msg);$/;"	m	struct:__anon31	access:public
__anon31::msg_SpiceMsgAudioVolume	client_marshallers.h	/^    void (*msg_SpiceMsgAudioVolume)(SpiceMarshaller *m, SpiceMsgAudioVolume *msg);$/;"	m	struct:__anon31	access:public
__anon31::msg_SpiceMsgData	client_marshallers.h	/^    void (*msg_SpiceMsgData)(SpiceMarshaller *m, SpiceMsgData *msg);$/;"	m	struct:__anon31	access:public
__anon31::msg_SpiceMsgEmpty	client_marshallers.h	/^    void (*msg_SpiceMsgEmpty)(SpiceMarshaller *m, SpiceMsgEmpty *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_ack_sync	client_marshallers.h	/^    void (*msgc_ack_sync)(SpiceMarshaller *m, SpiceMsgcAckSync *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_disconnecting	client_marshallers.h	/^    void (*msgc_disconnecting)(SpiceMarshaller *m, SpiceMsgDisconnect *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_display_init	client_marshallers.h	/^    void (*msgc_display_init)(SpiceMarshaller *m, SpiceMsgcDisplayInit *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_display_stream_report	client_marshallers.h	/^    void (*msgc_display_stream_report)(SpiceMarshaller *m, SpiceMsgcDisplayStreamReport *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_key_down	client_marshallers.h	/^    void (*msgc_inputs_key_down)(SpiceMarshaller *m, SpiceMsgcKeyDown *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_key_modifiers	client_marshallers.h	/^    void (*msgc_inputs_key_modifiers)(SpiceMarshaller *m, SpiceMsgcKeyModifiers *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_key_up	client_marshallers.h	/^    void (*msgc_inputs_key_up)(SpiceMarshaller *m, SpiceMsgcKeyUp *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_mouse_motion	client_marshallers.h	/^    void (*msgc_inputs_mouse_motion)(SpiceMarshaller *m, SpiceMsgcMouseMotion *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_mouse_position	client_marshallers.h	/^    void (*msgc_inputs_mouse_position)(SpiceMarshaller *m, SpiceMsgcMousePosition *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_mouse_press	client_marshallers.h	/^    void (*msgc_inputs_mouse_press)(SpiceMarshaller *m, SpiceMsgcMousePress *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_inputs_mouse_release	client_marshallers.h	/^    void (*msgc_inputs_mouse_release)(SpiceMarshaller *m, SpiceMsgcMouseRelease *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_main_agent_start	client_marshallers.h	/^    void (*msgc_main_agent_start)(SpiceMarshaller *m, SpiceMsgcMainAgentStart *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_main_agent_token	client_marshallers.h	/^    void (*msgc_main_agent_token)(SpiceMarshaller *m, SpiceMsgcMainAgentTokens *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_main_client_info	client_marshallers.h	/^    void (*msgc_main_client_info)(SpiceMarshaller *m, SpiceMsgcClientInfo *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_main_migrate_dst_do_seamless	client_marshallers.h	/^    void (*msgc_main_migrate_dst_do_seamless)(SpiceMarshaller *m, SpiceMsgcMainMigrateDstDoSeamless *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_main_mouse_mode_request	client_marshallers.h	/^    void (*msgc_main_mouse_mode_request)(SpiceMarshaller *m, SpiceMsgcMainMouseModeRequest *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_pong	client_marshallers.h	/^    void (*msgc_pong)(SpiceMarshaller *m, SpiceMsgPing *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_port_event	client_marshallers.h	/^    void (*msgc_port_event)(SpiceMarshaller *m, SpiceMsgcPortEvent *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_record_data	client_marshallers.h	/^    void (*msgc_record_data)(SpiceMarshaller *m, SpiceMsgcRecordPacket *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_record_mode	client_marshallers.h	/^    void (*msgc_record_mode)(SpiceMarshaller *m, SpiceMsgcRecordMode *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_record_start_mark	client_marshallers.h	/^    void (*msgc_record_start_mark)(SpiceMarshaller *m, SpiceMsgcRecordStartMark *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_smartcard_atr	client_marshallers.h	/^    void (*msgc_smartcard_atr)(SpiceMarshaller *m, VSCMsgATR *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_smartcard_data	client_marshallers.h	/^    void (*msgc_smartcard_data)(SpiceMarshaller *m, SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out);$/;"	m	struct:__anon31	access:public
__anon31::msgc_smartcard_error	client_marshallers.h	/^    void (*msgc_smartcard_error)(SpiceMarshaller *m, VSCMsgError *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_smartcard_header	client_marshallers.h	/^    void (*msgc_smartcard_header)(SpiceMarshaller *m, VSCMsgHeader *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_smartcard_reader_add	client_marshallers.h	/^    void (*msgc_smartcard_reader_add)(SpiceMarshaller *m, VSCMsgReaderAdd *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_service_add	client_marshallers.h	/^    void (*msgc_tunnel_service_add)(SpiceMarshaller *m, SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_service_remove	client_marshallers.h	/^    void (*msgc_tunnel_service_remove)(SpiceMarshaller *m, SpiceMsgcTunnelRemoveService *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_closed	client_marshallers.h	/^    void (*msgc_tunnel_socket_closed)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosed *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_closed_ack	client_marshallers.h	/^    void (*msgc_tunnel_socket_closed_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosedAck *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_data	client_marshallers.h	/^    void (*msgc_tunnel_socket_data)(SpiceMarshaller *m, SpiceMsgcTunnelSocketData *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_fin	client_marshallers.h	/^    void (*msgc_tunnel_socket_fin)(SpiceMarshaller *m, SpiceMsgcTunnelSocketFin *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_open_ack	client_marshallers.h	/^    void (*msgc_tunnel_socket_open_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenAck *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_open_nack	client_marshallers.h	/^    void (*msgc_tunnel_socket_open_nack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenNack *msg);$/;"	m	struct:__anon31	access:public
__anon31::msgc_tunnel_socket_token	client_marshallers.h	/^    void (*msgc_tunnel_socket_token)(SpiceMarshaller *m, SpiceMsgcTunnelSocketTokens *msg);$/;"	m	struct:__anon31	access:public
__anon33::FillRects	lines.h	/^    void (*FillRects)(lineGC * pGC,$/;"	m	struct:__anon33	access:public
__anon33::FillSpans	lines.h	/^    void (*FillSpans)(lineGC * pGC,$/;"	m	struct:__anon33	access:public
__anon34::data	marshaller.c	/^    uint8_t *data;$/;"	m	struct:__anon34	file:	access:public
__anon34::free_data	marshaller.c	/^    spice_marshaller_item_free_func free_data;$/;"	m	struct:__anon34	file:	access:public
__anon34::len	marshaller.c	/^    size_t len;$/;"	m	struct:__anon34	file:	access:public
__anon34::opaque	marshaller.c	/^    void *opaque;$/;"	m	struct:__anon34	file:	access:public
__anon35::is_64bit	marshaller.c	/^    int is_64bit;$/;"	m	struct:__anon35	file:	access:public
__anon35::item_nr	marshaller.c	/^    int item_nr;$/;"	m	struct:__anon35	file:	access:public
__anon35::marshaller	marshaller.c	/^    SpiceMarshaller *marshaller;$/;"	m	struct:__anon35	file:	access:public
__anon35::offset	marshaller.c	/^    size_t offset;$/;"	m	struct:__anon35	file:	access:public
__anon37::count	lines.c	/^    int count;                  \/* number of spans                  *\/$/;"	m	struct:__anon37	file:	access:public
__anon37::points	lines.c	/^    DDXPointPtr points;         \/* pointer to list of start points  *\/$/;"	m	struct:__anon37	file:	access:public
__anon37::widths	lines.c	/^    int *widths;                \/* pointer to list of widths        *\/$/;"	m	struct:__anon37	file:	access:public
__anon38::count	lines.c	/^    int count;                  \/* Number of *Spans actually in group   *\/$/;"	m	struct:__anon38	file:	access:public
__anon38::group	lines.c	/^    Spans *group;               \/* List of Spans                        *\/$/;"	m	struct:__anon38	file:	access:public
__anon38::size	lines.c	/^    int size;                   \/* Total number of *Spans allocated     *\/$/;"	m	struct:__anon38	file:	access:public
__anon38::ymax	lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon38	file:	access:public
__anon38::ymin	lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon38	file:	access:public
__anon8::get	canvas_base.h	/^    pixman_image_t *(*get)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
__anon8::get_lossless	canvas_base.h	/^    pixman_image_t *(*get_lossless)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
__anon8::put	canvas_base.h	/^    void (*put)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
__anon8::put_lossy	canvas_base.h	/^    void (*put_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
__anon8::replace_lossy	canvas_base.h	/^    void (*replace_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
__anon9::get	canvas_base.h	/^ SpiceCanvas *(*get)(SpiceImageSurfaces *surfaces,$/;"	m	struct:__anon9	access:public
__blend_image	sw_canvas.c	/^static void __blend_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int overall_alpha)
__blend_scale_image	sw_canvas.c	/^static void __blend_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, int overall_alpha)
__blit_image	sw_canvas.c	/^static void __blit_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y)
__blit_image_rop	sw_canvas.c	/^static void __blit_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y, SpiceROP rop)
__canvas_put_bits	canvas_base.c	/^static inline void __canvas_put_bits(uint8_t *dest, int offset, uint8_t val, int n)$/;"	f	file:	signature:(uint8_t *dest, int offset, uint8_t val, int n)
__colorkey_image	sw_canvas.c	/^static void __colorkey_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y, uint32_t transparent_color)
__colorkey_scale_image	sw_canvas.c	/^static void __colorkey_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, uint32_t transparent_color)
__fill_mask	glc.c	/^static void __fill_mask(InternaCtx *ctx, void *data)$/;"	f	file:	signature:(InternaCtx *ctx, void *data)
__fill_tiled_rects	sw_canvas.c	/^static void __fill_tiled_rects(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, pixman_image_t *tile, int offset_x, int offset_y)
__fill_tiled_rects_rop	sw_canvas.c	/^static void __fill_tiled_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, pixman_image_t *tile, int offset_x, int offset_y, SpiceROP rop)
__lz_free_image_seg	lz.c	/^static inline void __lz_free_image_seg(Encoder *encoder, LzImageSegment *seg)$/;"	f	file:	signature:(Encoder *encoder, LzImageSegment *seg)
__read_io_word	quic.c	/^static void __read_io_word(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
__read_io_word_ptr	quic.c	/^static void (*__read_io_word_ptr)(Encoder *encoder) = __read_io_word;$/;"	v	file:
__ring_remove	ring.h	/^static inline void __ring_remove(RingItem *item)$/;"	f	signature:(RingItem *item)
__scale_image	sw_canvas.c	/^static void __scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode)
__scale_image_rop	sw_canvas.c	/^static void __scale_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, SpiceROP rop)
__surface_create_stride	canvas_utils.c	/^static inline pixman_image_t *__surface_create_stride(pixman_format_code_t format, int width, int height,$/;"	f	file:	signature:(pixman_format_code_t format, int width, int height, int stride)
__write_io_word	quic.c	/^static void __write_io_word(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
__write_io_word_ptr	quic.c	/^static void (*__write_io_word_ptr)(Encoder *encoder) = __write_io_word;$/;"	v	file:
_buckets_ptrs	quic.c	/^    s_bucket **_buckets_ptrs;$/;"	m	struct:Channel	file:	access:public
_gl_verify_error_if_negative	verify.h	/^    unsigned int _gl_verify_error_if_negative: w;$/;"	m	struct:_gl_verify_type	access:public
_gl_verify_type	verify.h	/^  struct _gl_verify_type {$/;"	s
_gl_verify_type::_gl_verify_error_if_negative	verify.h	/^    unsigned int _gl_verify_error_if_negative: w;$/;"	m	struct:_gl_verify_type	access:public
_glc_fill_mask	glc.c	/^void _glc_fill_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	f	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap)
_glc_fill_mask	glc.h	/^void _glc_fill_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	p	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap)
_gnutls_hostname_compare	ssl_verify.c	/^static int _gnutls_hostname_compare(const char *certname,$/;"	f	file:	signature:(const char *certname, size_t certnamesize, const char *hostname)
_rop3_brush	gdi_canvas.c	54;"	d	file:
_rop3_dest	gdi_canvas.c	56;"	d	file:
_rop3_src	gdi_canvas.c	55;"	d	file:
a	lz.c	/^    uint8_t a;$/;"	m	struct:one_byte_pixel_t	file:	access:public
a	quic.c	/^    BYTE a;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
a	quic.c	/^    BYTE a;$/;"	m	struct:one_byte_pixel_t	file:	access:public
a	quic.c	/^    BYTE a;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
abort_level	log.c	/^static int abort_level = -1;$/;"	v	file:
add	messages.h	/^        VSCMsgReaderAdd add;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
add_segment_common	glc.c	/^static void add_segment_common(InternalPath *internal, int type, int num_points)$/;"	f	file:	signature:(InternalPath *internal, int type, int num_points)
add_stencil_client	glc.c	/^static inline void add_stencil_client(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
agent_connected	messages.h	/^    uint32_t agent_connected;$/;"	m	struct:SpiceMsgMainInit	access:public
agent_tokens	messages.h	/^    uint32_t agent_tokens;$/;"	m	struct:SpiceMsgMainInit	access:public
all_preverify_ok	ssl_verify.h	/^    int                 all_preverify_ok;$/;"	m	struct:__anon2	access:public
alloc_lz_image_surface	canvas_utils.c	/^pixman_image_t *alloc_lz_image_surface(LzDecodeUsrData *canvas_data,$/;"	f	signature:(LzDecodeUsrData *canvas_data, pixman_format_code_t pixman_format, int width, int height, int gross_pixels, int top_down)
alloc_lz_image_surface	canvas_utils.h	/^pixman_image_t *alloc_lz_image_surface(LzDecodeUsrData *canvas_data,$/;"	p	signature:(LzDecodeUsrData *canvas_data, pixman_format_code_t pixman_format, int width, int height, int gross_pixels, int top_down)
alloc_tess_vertex	glc.c	/^static TassVertex *alloc_tess_vertex(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
alpha	draw.h	/^    uint8_t alpha;$/;"	m	struct:SpiceAlphaBlend	access:public
alpha_flags	draw.h	/^    uint16_t alpha_flags;$/;"	m	struct:SpiceAlphaBlend	access:public
alu	lines.h	/^    unsigned char alu;$/;"	m	struct:lineGC	access:public
atr_data	messages.h	/^        VSCMsgATR atr_data;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
attr	draw.h	/^    SpiceLineAttr attr;$/;"	m	struct:SpiceStroke	access:public
audio_delay	messages.h	/^    uint32_t audio_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
b	lz.c	/^    uint8_t b;$/;"	m	struct:rgb24_pixel_t	file:	access:public
b	lz.c	/^    uint8_t b;$/;"	m	struct:rgb32_pixel_t	file:	access:public
b	quic.c	/^    BYTE b;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
b	quic.c	/^    BYTE b;$/;"	m	struct:rgb24_pixel_t	file:	access:public
b	quic.c	/^    BYTE b;$/;"	m	struct:rgb32_pixel_t	file:	access:public
b	quic.c	/^    BYTE b;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
back_area	draw.h	/^    SpiceRect back_area;$/;"	m	struct:SpiceText	access:public
back_brush	draw.h	/^    SpiceBrush back_brush;$/;"	m	struct:SpiceText	access:public
back_mode	draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceStroke	access:public
back_mode	draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceText	access:public
back_rop	canvas_base.c	/^    SpiceROP back_rop;$/;"	m	struct:__anon28	file:	access:public
base	canvas_base.c	/^    lineGC base;$/;"	m	struct:__anon28	file:	access:public
base	gdi_canvas.c	/^    CanvasBase base;$/;"	m	struct:GdiCanvas	file:	access:public
base	gl_canvas.c	/^    CanvasBase base;$/;"	m	struct:GLCanvas	file:	access:public
base	marshaller.c	/^    size_t base;$/;"	m	struct:SpiceMarshallerData	file:	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayCopyBits	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawBlackness	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawComposite	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawCopy	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawFill	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawInvers	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawOpaque	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawRop3	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawStroke	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawText	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawTransparent	access:public
base	messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness	access:public
base	messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
base	messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
base	ogl_ctx.c	/^    OGLCtx base;$/;"	m	struct:OGLPixmapCtx	file:	access:public
base	sw_canvas.c	/^    CanvasBase base;$/;"	m	struct:SwCanvas	file:	access:public
begin_decode	canvas_base.h	/^    void (*begin_decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps	access:public
bestcode	quic.c	/^    unsigned int bestcode;  \/* best code so far *\/$/;"	m	struct:s_bucket	file:	access:public
besttrigtab	quic.c	/^static const unsigned short besttrigtab[3][11] = { \/* array of wm_trigger for waitmask and evol,$/;"	v	file:
bezier_flattener	glc.c	/^static TassVertex *bezier_flattener(InternaCtx *ctx, PathPoint *points)$/;"	f	file:	signature:(InternaCtx *ctx, PathPoint *points)
bgGroup	lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:	access:public
bitat	quic.c	/^static const unsigned int bitat[32] = {$/;"	v	file:
bitmap	canvas_utils.h	/^    HBITMAP bitmap;$/;"	m	struct:PixmanData	access:public
bitmap	draw.h	/^        SpiceBitmap         bitmap;$/;"	m	union:SpiceImage::__anon17	access:public
bitmap	draw.h	/^    SpiceImage *bitmap;$/;"	m	struct:SpiceQMask	access:public
bitmap	glc.c	/^    const uint8_t *bitmap;$/;"	m	struct:FillMaskInfo	file:	access:public
bitmap_16_to_16_555	pixman_utils.c	/^static void bitmap_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_16_to_32	pixman_utils.c	/^static void bitmap_16_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_1be_16_to_16_555	pixman_utils.c	/^static void bitmap_1be_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end, SpicePalette *palette)
bitmap_1be_32_to_32	pixman_utils.c	/^static void bitmap_1be_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end, SpicePalette *palette)
bitmap_24_to_16_555	pixman_utils.c	/^static void bitmap_24_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_24_to_32	pixman_utils.c	/^static void bitmap_24_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_32_to_16_555	pixman_utils.c	/^static void bitmap_32_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_32_to_32	pixman_utils.c	/^static void bitmap_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bitmap_4be_16_to_16_555	pixman_utils.c	/^static void bitmap_4be_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end, SpicePalette *palette)
bitmap_4be_32_to_32	pixman_utils.c	/^static void bitmap_4be_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end, SpicePalette *palette)
bitmap_8_16_to_16_555	pixman_utils.c	/^static void bitmap_8_16_to_16_555(uint8_t *dest, int dest_stride,$/;"	f	file:	signature:(uint8_t *dest, int dest_stride, uint8_t *src, int src_stride, int width, uint8_t *end, SpicePalette *palette)
bitmap_8_32_to_32	pixman_utils.c	/^static void bitmap_8_32_to_32(uint8_t *dest, int dest_stride,$/;"	f	file:	signature:(uint8_t *dest, int dest_stride, uint8_t *src, int src_stride, int width, uint8_t *end, SpicePalette *palette)
bitmap_8_to_8	pixman_utils.c	/^static void bitmap_8_to_8(uint8_t* dest, int dest_stride,$/;"	f	file:	signature:(uint8_t* dest, int dest_stride, uint8_t* src, int src_stride, int width, uint8_t* end)
bits	messages.h	/^    uint32_t bits;$/;"	m	struct:SpiceMsgDisplayMode	access:public
bits_cache	canvas_base.c	/^    SpiceImageCache *bits_cache;$/;"	m	struct:CanvasBase	file:	access:public
blend_image	canvas_base.h	/^    void (*blend_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blend_image	sw_canvas.c	/^static void blend_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int overall_alpha)
blend_image_from_surface	canvas_base.h	/^    void (*blend_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blend_image_from_surface	sw_canvas.c	/^static void blend_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, SpiceCanvas *surface_canvas, int src_has_alpha, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int overall_alpha)
blend_scale_image	canvas_base.h	/^    void (*blend_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blend_scale_image	sw_canvas.c	/^static void blend_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, int overall_alpha)
blend_scale_image_from_surface	canvas_base.h	/^    void (*blend_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blend_scale_image_from_surface	sw_canvas.c	/^static void blend_scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, int dest_has_alpha, SpiceCanvas *surface_canvas, int src_has_alpha, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, int overall_alpha)
blit_image	canvas_base.h	/^    void (*blit_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blit_image	sw_canvas.c	/^static void blit_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y)
blit_image_from_surface	canvas_base.h	/^    void (*blit_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blit_image_from_surface	sw_canvas.c	/^static void blit_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int offset_x, int offset_y)
blit_image_rop	canvas_base.h	/^    void (*blit_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blit_image_rop	sw_canvas.c	/^static void blit_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y, SpiceROP rop)
blit_image_rop_from_surface	canvas_base.h	/^    void (*blit_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
blit_image_rop_from_surface	sw_canvas.c	/^static void blit_image_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int offset_x, int offset_y, SpiceROP rop)
bottom	draw.h	/^    int32_t bottom;$/;"	m	struct:SpiceRect	access:public
box	messages.h	/^    SpiceRect box;$/;"	m	struct:SpiceMsgDisplayBase	access:public
bppmask	quic.c	/^static const unsigned long int bppmask[33] = {$/;"	v	file:
brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceFill	access:public
brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceOpaque	access:public
brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceRop3	access:public
brush	draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceStroke	access:public
buckets_buf	quic.c	/^    s_bucket *buckets_buf;$/;"	m	struct:FamilyStat	file:	access:public
buckets_ptrs	quic.c	/^    s_bucket **buckets_ptrs;$/;"	m	struct:FamilyStat	file:	access:public
buffer	mem.h	/^    uint8_t *buffer;$/;"	m	struct:SpiceBuffer	access:public
buffers	marshaller.c	/^    MarshallerBuffer *buffers;$/;"	m	struct:SpiceMarshallerData	file:	access:public
button	messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMousePress	access:public
button	messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMouseRelease	access:public
buttons_state	messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePress	access:public
buttons_state	messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseRelease	access:public
buttons_state	messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
buttons_state	messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePosition	access:public
c	quic.c	/^    BYTE c;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
c	quic.c	/^    BYTE c;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
cache	gdi_canvas.c	/^    int cache;$/;"	m	struct:BitmapData	file:	access:public
cache_size	messages.h	/^    uint64_t cache_size;$/;"	m	struct:SpiceMsgcClientInfo	access:public
calc_rop3	gdi_canvas.c	/^uint8_t calc_rop3(uint16_t rop3_bits, int brush)$/;"	f	signature:(uint16_t rop3_bits, int brush)
calc_rop3_src_brush	gdi_canvas.c	/^uint8_t calc_rop3_src_brush(uint16_t rop3_bits)$/;"	f	signature:(uint16_t rop3_bits)
canvas	canvas_base.c	/^    SpiceCanvas *canvas;$/;"	m	struct:__anon28	file:	access:public
canvas_16bpp_to_32bpp	canvas_base.c	/^static inline uint32_t canvas_16bpp_to_32bpp(uint32_t color)$/;"	f	file:	signature:(uint32_t color)
canvas_A1_invers	canvas_base.c	/^static inline pixman_image_t *canvas_A1_invers(pixman_image_t *src_surf)$/;"	f	file:	signature:(pixman_image_t *src_surf)
canvas_base_destroy	canvas_base.c	/^static void canvas_base_destroy(CanvasBase *canvas)$/;"	f	file:	signature:(CanvasBase *canvas)
canvas_base_group_end	canvas_base.c	/^static void canvas_base_group_end(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
canvas_base_group_start	canvas_base.c	/^static void canvas_base_group_start(SpiceCanvas *spice_canvas, QRegion *region)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, QRegion *region)
canvas_base_init	canvas_base.c	/^static int canvas_base_init(CanvasBase *canvas, SpiceCanvasOps *ops,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceCanvasOps *ops, int width, int height, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_base_init_ops	canvas_base.c	/^inline static void canvas_base_init_ops(SpiceCanvasOps *ops)$/;"	f	file:	signature:(SpiceCanvasOps *ops)
canvas_bitmap_to_surface	canvas_base.c	/^static pixman_image_t *canvas_bitmap_to_surface(CanvasBase *canvas, SpiceBitmap* bitmap,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceBitmap* bitmap, SpicePalette *palette, int want_original)
canvas_clear	sw_canvas.c	/^static void canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
canvas_clip_pixman	canvas_base.c	/^static void canvas_clip_pixman(CanvasBase *canvas,$/;"	f	file:	signature:(CanvasBase *canvas, pixman_region32_t *dest_region, SpiceClip *clip)
canvas_copy_bits	canvas_base.c	/^static void canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)
canvas_create	sw_canvas.c	/^SpiceCanvas *canvas_create(int width, int height, uint32_t format$/;"	f	signature:(int width, int height, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_create	sw_canvas.h	/^SpiceCanvas *canvas_create(int width, int height, uint32_t format$/;"	p	signature:(int width, int height, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_create_common	sw_canvas.c	/^static SpiceCanvas *canvas_create_common(pixman_image_t *image,$/;"	f	file:	signature:(pixman_image_t *image, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_create_for_data	sw_canvas.c	/^SpiceCanvas *canvas_create_for_data(int width, int height, uint32_t format,$/;"	f	signature:(int width, int height, uint32_t format, uint8_t *data, int stride , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_create_for_data	sw_canvas.h	/^SpiceCanvas *canvas_create_for_data(int width, int height, uint32_t format, uint8_t *data, int stride$/;"	p	signature:(int width, int height, uint32_t format, uint8_t *data, int stride , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
canvas_destroy	sw_canvas.c	/^static void canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
canvas_draw_alpha_blend	canvas_base.c	/^static void canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)
canvas_draw_blackness	canvas_base.c	/^static void canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)
canvas_draw_blend	canvas_base.c	/^static void canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)
canvas_draw_composite	canvas_base.c	/^static void canvas_draw_composite(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceComposite *composite)
canvas_draw_copy	canvas_base.c	/^static void canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)
canvas_draw_fill	canvas_base.c	/^static void canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)
canvas_draw_invers	canvas_base.c	/^static void canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)
canvas_draw_opaque	canvas_base.c	/^static void canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)
canvas_draw_rop3	canvas_base.c	/^static void canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)
canvas_draw_stroke	canvas_base.c	/^static void canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)
canvas_draw_text	sw_canvas.c	/^static void canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)
canvas_draw_transparent	canvas_base.c	/^static void canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent)
canvas_draw_whiteness	canvas_base.c	/^static void canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)
canvas_get_as_surface	sw_canvas.c	/^static pixman_image_t *canvas_get_as_surface(SwCanvas *canvas,$/;"	f	file:	signature:(SwCanvas *canvas, int with_alpha)
canvas_get_bitmap_mask	canvas_base.c	/^static pixman_image_t *canvas_get_bitmap_mask(CanvasBase *canvas, SpiceBitmap* bitmap, int invers)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceBitmap* bitmap, int invers)
canvas_get_bits	canvas_base.c	/^static pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceBitmap *bitmap, int want_original)
canvas_get_glz	canvas_base.c	/^static pixman_image_t *canvas_get_glz(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int want_original)
canvas_get_glz_rgb_common	canvas_base.c	/^static pixman_image_t *canvas_get_glz_rgb_common(CanvasBase *canvas, uint8_t *data,$/;"	f	file:	signature:(CanvasBase *canvas, uint8_t *data, int want_original)
canvas_get_image	canvas_base.c	/^static pixman_image_t *canvas_get_image(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int want_original)
canvas_get_image_from_self	canvas_base.c	/^static pixman_image_t* canvas_get_image_from_self(SpiceCanvas *canvas,$/;"	f	file:	signature:(SpiceCanvas *canvas, int x, int y, int32_t width, int32_t height, int force_opaque)
canvas_get_image_internal	canvas_base.c	/^static pixman_image_t *canvas_get_image_internal(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int want_original, int real_get)
canvas_get_jpeg	canvas_base.c	/^static pixman_image_t *canvas_get_jpeg(CanvasBase *canvas, SpiceImage *image, int invers)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int invers)
canvas_get_jpeg_alpha	canvas_base.c	/^static pixman_image_t *canvas_get_jpeg_alpha(CanvasBase *canvas,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int invers)
canvas_get_localized_palette	canvas_base.c	/^static inline SpicePalette *canvas_get_localized_palette(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags, int *free_palette)$/;"	f	file:	signature:(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags, int *free_palette)
canvas_get_lz	canvas_base.c	/^static pixman_image_t *canvas_get_lz(CanvasBase *canvas, SpiceImage *image, int invers,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int invers, int want_original)
canvas_get_mask	canvas_base.c	/^static pixman_image_t *canvas_get_mask(CanvasBase *canvas, SpiceQMask *mask, int *needs_invert_out)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceQMask *mask, int *needs_invert_out)
canvas_get_palette	canvas_base.c	/^static inline SpicePalette *canvas_get_palette(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags)$/;"	f	file:	signature:(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags)
canvas_get_pixman_brush	sw_canvas.c	/^static pixman_image_t *canvas_get_pixman_brush(SwCanvas *canvas,$/;"	f	file:	signature:(SwCanvas *canvas, SpiceBrush *brush)
canvas_get_quic	canvas_base.c	/^static pixman_image_t *canvas_get_quic(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int invers, int want_original)
canvas_get_str_mask	canvas_base.c	/^static pixman_image_t *canvas_get_str_mask(CanvasBase *canvas, SpiceString *str, int bpp, SpicePoint *pos)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceString *str, int bpp, SpicePoint *pos)
canvas_get_surface	canvas_base.c	/^static SpiceCanvas *canvas_get_surface(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image)
canvas_get_surface_internal	canvas_base.c	/^static SpiceCanvas *canvas_get_surface_internal(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image)
canvas_get_surface_mask	canvas_base.c	/^static SpiceCanvas *canvas_get_surface_mask(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image)
canvas_get_surface_mask_internal	canvas_base.c	/^static SpiceCanvas *canvas_get_surface_mask_internal(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image)
canvas_get_target_format	canvas_base.c	/^static pixman_format_code_t canvas_get_target_format(CanvasBase *canvas,$/;"	f	file:	signature:(CanvasBase *canvas, int source_has_alpha)
canvas_get_zlib_glz_rgb	canvas_base.c	/^static pixman_image_t *canvas_get_zlib_glz_rgb(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image, int want_original)
canvas_mask_pixman	canvas_base.c	/^static void canvas_mask_pixman(CanvasBase *canvas,$/;"	f	file:	signature:(CanvasBase *canvas, pixman_region32_t *dest_region, SpiceQMask *mask, int x, int y)
canvas_put_bits	canvas_base.c	/^static inline void canvas_put_bits(uint8_t *dest, int dest_offset, uint8_t *src, int n)$/;"	f	file:	signature:(uint8_t *dest, int dest_offset, uint8_t *src, int n)
canvas_put_glyph_bits	canvas_base.c	/^static void canvas_put_glyph_bits(SpiceRasterGlyph *glyph, int bpp, uint8_t *dest, int dest_stride,$/;"	f	file:	signature:(SpiceRasterGlyph *glyph, int bpp, uint8_t *dest, int dest_stride, SpiceRect *bounds)
canvas_put_image	sw_canvas.c	/^static void canvas_put_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, HDC dc, const SpiceRect *dest, const uint8_t *src_data, uint32_t src_width, uint32_t src_height, int src_stride, const QRegion *clip)
canvas_raster_glyph_box	canvas_base.c	/^static inline void canvas_raster_glyph_box(const SpiceRasterGlyph *glyph, SpiceRect *r)$/;"	f	file:	signature:(const SpiceRasterGlyph *glyph, SpiceRect *r)
canvas_read_bits	sw_canvas.c	/^static void canvas_read_bits(SpiceCanvas *spice_canvas, uint8_t *dest,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, uint8_t *dest, int dest_stride, const SpiceRect *area)
canvas_region	canvas_base.c	/^    pixman_region32_t canvas_region;$/;"	m	struct:CanvasBase	file:	access:public
canvas_scale_surface	canvas_base.c	/^static pixman_image_t *canvas_scale_surface(pixman_image_t *src, const SpiceRect *src_area, int width,$/;"	f	file:	signature:(pixman_image_t *src, const SpiceRect *src_area, int width, int height, int scale_mode)
canvas_surf_to_trans_surf	gl_canvas.c	/^static pixman_image_t *canvas_surf_to_trans_surf(GLCImage *image,$/;"	f	file:	signature:(GLCImage *image, uint32_t trans_color)
canvas_touch_image	canvas_base.c	/^static void canvas_touch_image(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceImage *image)
capStyle	lines.h	/^    unsigned int capStyle:2;$/;"	m	struct:lineGC	access:public
capacity	mem.h	/^    size_t capacity;$/;"	m	struct:SpiceBuffer	access:public
ceil_log_2	quic.c	/^static int ceil_log_2(int val) \/* ceil(log_2(val)) *\/$/;"	f	file:	signature:(int val)
celt_decoder	snd_codec.c	/^    CELTDecoder *celt_decoder;$/;"	m	struct:__anon16	file:	access:public
celt_encoder	snd_codec.c	/^    CELTEncoder *celt_encoder;$/;"	m	struct:__anon16	file:	access:public
celt_mode	snd_codec.c	/^    CELTMode *celt_mode;$/;"	m	struct:__anon16	file:	access:public
cert_subject_data	messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
cert_subject_data	messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
cert_subject_size	messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
cert_subject_size	messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
channel_id	messages.h	/^    uint8_t channel_id;$/;"	m	struct:SpiceWaitForChannel	access:public
channel_type	messages.h	/^    uint8_t channel_type;$/;"	m	struct:SpiceWaitForChannel	access:public
channels	messages.h	/^    SpiceChannelId channels[0];$/;"	m	struct:SpiceMsgChannels	access:public
channels	messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
channels	messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgRecordStart	access:public
channels	quic.c	/^    Channel channels[MAX_CHANNELS];$/;"	m	struct:Encoder	file:	access:public
chunk	mem.h	/^    SpiceChunk   chunk[0];$/;"	m	struct:SpiceChunks	access:public
chunks	canvas_base.c	/^    SpiceChunks *chunks;$/;"	m	struct:QuicData	file:	access:public
clear	canvas_base.h	/^    void (*clear)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
clear_dest_alpha	sw_canvas.c	/^static void clear_dest_alpha(pixman_image_t *dest,$/;"	f	file:	signature:(pixman_image_t *dest, int x, int y, int width, int height)
clear_row	quic.c	/^static void clear_row(four_bytes_t *row, int width)$/;"	f	file:	signature:(four_bytes_t *row, int width)
clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayBase	access:public
clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamClip	access:public
clip	messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
clip_common	glc.c	/^static void clip_common(InternaCtx *ctx, GLCClipOp op, void (*fill_func)(InternaCtx *, void *),$/;"	f	file:	signature:(InternaCtx *ctx, GLCClipOp op, void (*fill_func)(InternaCtx *, void *), void *data)
cnt_l_zeroes	quic.c	/^static unsigned int cnt_l_zeroes(const unsigned int bits)$/;"	f	file:	signature:(const unsigned int bits)
code	messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyDown	access:public
code	messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyUp	access:public
codec_type	messages.h	/^    uint32_t codec_type;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
color	canvas_base.c	/^    uint32_t color;$/;"	m	struct:__anon28	file:	access:public
color	draw.h	/^        uint32_t color;$/;"	m	union:SpiceBrush::__anon18	access:public
color_mask	canvas_base.c	/^    uint32_t color_mask;$/;"	m	struct:CanvasBase	file:	access:public
color_shift	canvas_base.c	/^    uint32_t color_shift;$/;"	m	struct:CanvasBase	file:	access:public
colorkey_image	canvas_base.h	/^    void (*colorkey_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
colorkey_image	sw_canvas.c	/^static void colorkey_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src_image, int offset_x, int offset_y, uint32_t transparent_color)
colorkey_image_from_surface	canvas_base.h	/^    void (*colorkey_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
colorkey_image_from_surface	sw_canvas.c	/^static void colorkey_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int offset_x, int offset_y, uint32_t transparent_color)
colorkey_scale_image	canvas_base.h	/^    void (*colorkey_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
colorkey_scale_image	sw_canvas.c	/^static void colorkey_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, uint32_t transparent_color)
colorkey_scale_image_from_surface	canvas_base.h	/^    void (*colorkey_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
colorkey_scale_image_from_surface	sw_canvas.c	/^static void colorkey_scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, uint32_t transparent_color)
compress	lz_compress_tmpl.c	/^static void FNAME(compress)(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
compress_output_prev	lz.c	/^static inline void compress_output_prev(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
compress_row	quic_rgb_tmpl.c	/^static void FNAME(compress_row)(Encoder *encoder,$/;"	f	file:	signature:(Encoder *encoder, const PIXEL * const prev_row, const PIXEL * const cur_row, unsigned int width)
compress_row	quic_tmpl.c	/^static void FNAME(compress_row)(Encoder *encoder, Channel *channel,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, const PIXEL * const prev_row, const PIXEL * const cur_row, unsigned int width)
compress_row0	quic_rgb_tmpl.c	/^static void FNAME(compress_row0)(Encoder *encoder, const PIXEL *cur_row,$/;"	f	file:	signature:(Encoder *encoder, const PIXEL *cur_row, unsigned int width)
compress_row0	quic_tmpl.c	/^static void FNAME(compress_row0)(Encoder *encoder, Channel *channel, const PIXEL *cur_row,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, const PIXEL *cur_row, unsigned int width)
compress_row0_seg	quic_rgb_tmpl.c	/^static void FNAME(compress_row0_seg)(Encoder *encoder, int i,$/;"	f	file:	signature:(Encoder *encoder, int i, const PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
compress_row0_seg	quic_tmpl.c	/^static void FNAME(compress_row0_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, int i, const PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
compress_row_seg	quic_rgb_tmpl.c	/^static void FNAME(compress_row_seg)(Encoder *encoder, int i,$/;"	f	file:	signature:(Encoder *encoder, int i, const PIXEL * const prev_row, const PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
compress_row_seg	quic_tmpl.c	/^static void FNAME(compress_row_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, int i, const PIXEL * const prev_row, const PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
compress_seg	lz_compress_tmpl.c	/^static void FNAME(compress_seg)(Encoder *encoder, LzImageSegment *seg, PIXEL *from, int copied)$/;"	f	file:	signature:(Encoder *encoder, LzImageSegment *seg, PIXEL *from, int copied)
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClose	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClosedAck	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketData	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketFin	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketTokens	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosed	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosedAck	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketData	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketFin	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenNack	access:public
connection_id	messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketTokens	access:public
consume_int16	generated_client_demarshallers.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int16	generated_client_demarshallers1.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int16	generated_server_demarshallers.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int32	generated_client_demarshallers.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int32	generated_client_demarshallers1.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int32	generated_server_demarshallers.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int64	generated_client_demarshallers.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int64	generated_client_demarshallers1.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int64	generated_server_demarshallers.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int8	generated_client_demarshallers.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int8	generated_client_demarshallers1.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_int8	generated_server_demarshallers.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint16	generated_client_demarshallers.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint16	generated_client_demarshallers1.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint16	generated_server_demarshallers.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint32	generated_client_demarshallers.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint32	generated_client_demarshallers1.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint32	generated_server_demarshallers.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint64	generated_client_demarshallers.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint64	generated_client_demarshallers1.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint64	generated_server_demarshallers.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint8	generated_client_demarshallers.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint8	generated_client_demarshallers1.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
consume_uint8	generated_server_demarshallers.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:	signature:(uint8_t **ptr)
copy_bitmap	gdi_canvas.c	/^static void copy_bitmap(const uint8_t *src_image, int height, int src_stride,$/;"	f	file:	signature:(const uint8_t *src_image, int height, int src_stride, uint8_t *dest_bitmap, int dest_stride)
copy_bitmap_alpha	gdi_canvas.c	/^static void copy_bitmap_alpha(const uint8_t *src_alpha, int height, int width, int src_stride,$/;"	f	file:	signature:(const uint8_t *src_alpha, int height, int width, int src_stride, uint8_t *dest_bitmap, int dest_stride, int alpha_bits_size)
copy_bits	canvas_base.h	/^    void (*copy_bits)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos);$/;"	m	struct:__anon13	access:public
copy_bits_down	pixman_utils.c	/^static void copy_bits_down(uint8_t *data, const int stride, int bpp,$/;"	f	file:	signature:(uint8_t *data, const int stride, int bpp, const int src_x, const int src_y, const int width, const int height, const int dest_x, const int dest_y)
copy_bits_same_line	pixman_utils.c	/^static void copy_bits_same_line(uint8_t *data, const int stride, int bpp,$/;"	f	file:	signature:(uint8_t *data, const int stride, int bpp, const int src_x, const int src_y, const int width, const int height, const int dest_x, const int dest_y)
copy_bits_up	pixman_utils.c	/^static void copy_bits_up(uint8_t *data, const int stride, int bpp,$/;"	f	file:	signature:(uint8_t *data, const int stride, int bpp, const int src_x, const int src_y, const int width, const int height, const int dest_x, const int dest_y)
copy_opposite_image	gl_canvas.c	/^static inline uint8_t *copy_opposite_image(GLCanvas *canvas, void *data, int stride, int height)$/;"	f	file:	signature:(GLCanvas *canvas, void *data, int stride, int height)
copy_region	canvas_base.h	/^    void (*copy_region)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
copy_region	sw_canvas.c	/^static void copy_region(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *dest_region, int dx, int dy)
copy_rop_16_func_t	pixman_utils.c	/^typedef void (*copy_rop_16_func_t)(uint16_t *ptr, uint16_t *src, int len);$/;"	t	file:
copy_rop_32_func_t	pixman_utils.c	/^typedef void (*copy_rop_32_func_t)(uint32_t *ptr, uint32_t *src, int len);$/;"	t	file:
copy_rop_8_func_t	pixman_utils.c	/^typedef void (*copy_rop_8_func_t)(uint8_t *ptr, uint8_t *src, int len);$/;"	t	file:
corelate	quic_tmpl.c	/^static inline void FNAME(corelate)(const PIXEL *prev, PIXEL *curr, const BYTE corelate,$/;"	f	file:	signature:(const PIXEL *prev, PIXEL *curr, const BYTE corelate, const unsigned int bpc_mask)
corelate_0	quic_tmpl.c	/^static inline void FNAME(corelate_0)(PIXEL *curr, const BYTE corelate,$/;"	f	file:	signature:(PIXEL *curr, const BYTE corelate, const unsigned int bpc_mask)
corelate_init	quic.c	/^static void corelate_init(QuicFamily *family, int bpc)$/;"	f	file:	signature:(QuicFamily *family, int bpc)
correlate_row	quic.c	/^    BYTE *correlate_row;$/;"	m	struct:Channel	file:	access:public
correlate_row_width	quic.c	/^    int correlate_row_width;$/;"	m	struct:Channel	file:	access:public
count	draw.h	/^    uint32_t count;$/;"	m	struct:SpicePathSeg	access:public
count	glc.c	/^    int count;$/;"	m	struct:PathSegment	file:	access:public
count	lines.c	/^    int count;                  \/* Number of *Spans actually in group   *\/$/;"	m	struct:__anon38	file:	access:public
count	lines.c	/^    int count;                  \/* number of spans                  *\/$/;"	m	struct:__anon37	file:	access:public
count	messages.h	/^    uint16_t count;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
count	messages.h	/^    uint16_t count;$/;"	m	struct:SpiceResourceList	access:public
counters	quic.c	/^    COUNTER *counters;$/;"	m	struct:FamilyStat	file:	access:public
create_bitmap	gdi_canvas.c	/^static uint8_t *create_bitmap(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc,$/;"	f	file:	signature:(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc, const uint8_t *bitmap_data, int width, int height, int stride, int bits, int rotate)
create_bitmap_from_pixman	gdi_canvas.c	/^static uint8_t *create_bitmap_from_pixman(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc,$/;"	f	file:	signature:(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc, pixman_image_t *surface, int rotate)
create_compatible_dc	canvas_base.c	/^static HDC create_compatible_dc()$/;"	f	file:
cur_dash	glc.c	/^    int cur_dash;$/;"	m	struct:LineDash	file:	access:public
current_buffer	marshaller.c	/^    MarshallerBuffer *current_buffer;$/;"	m	struct:SpiceMarshallerData	file:	access:public
current_buffer_item	marshaller.c	/^    MarshallerItem *current_buffer_item;$/;"	m	struct:SpiceMarshallerData	file:	access:public
current_buffer_position	marshaller.c	/^    size_t current_buffer_position;$/;"	m	struct:SpiceMarshallerData	file:	access:public
current_chunk	canvas_base.c	/^    uint32_t current_chunk;$/;"	m	struct:QuicData	file:	access:public
current_mode	messages.h	/^    uint32_t current_mode;$/;"	m	struct:SpiceMsgMainMouseMode	access:public
current_mouse_mode	messages.h	/^    uint32_t current_mouse_mode;$/;"	m	struct:SpiceMsgMainInit	access:public
current_path	glc.c	/^    Path *current_path;$/;"	m	struct:InternalPath	file:	access:public
current_segment	glc.c	/^    PathSegment *current_segment;$/;"	m	struct:InternalPath	file:	access:public
cursor	messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorInit	access:public
cursor	messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorSet	access:public
d	quic.c	/^    BYTE d;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
dash	lines.h	/^    unsigned char *dash;$/;"	m	struct:lineGC	access:public
dashOffset	lines.h	/^    unsigned short dashOffset;$/;"	m	struct:lineGC	access:public
dash_pos	glc.c	/^    double dash_pos;$/;"	m	struct:LineDash	file:	access:public
dashes	glc.c	/^    double *dashes;$/;"	m	struct:LineDash	file:	access:public
data	canvas_utils.h	/^    uint8_t *data;$/;"	m	struct:PixmanData	access:public
data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceBitmap	access:public
data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceJPEGAlphaData	access:public
data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceLZPLTData	access:public
data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceQUICData	access:public
data	draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
data	draw.h	/^    uint8_t data[0];$/;"	m	struct:SpiceRasterGlyph	access:public
data	marshaller.c	/^    SpiceMarshallerData *data;$/;"	m	struct:SpiceMarshaller	file:	access:public
data	marshaller.c	/^    uint8_t *data;$/;"	m	struct:__anon34	file:	access:public
data	marshaller.c	/^    uint8_t data[MARSHALLER_BUFFER_SIZE];$/;"	m	struct:MarshallerBuffer	file:	access:public
data	mem.h	/^    uint8_t *data;$/;"	m	struct:SpiceChunk	access:public
data	messages.h	/^    SpiceAlphaBlend data;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend	access:public
data	messages.h	/^    SpiceBlackness data;$/;"	m	struct:SpiceMsgDisplayDrawBlackness	access:public
data	messages.h	/^    SpiceComposite data;$/;"	m	struct:SpiceMsgDisplayDrawComposite	access:public
data	messages.h	/^    SpiceCopy data;$/;"	m	struct:SpiceMsgDisplayDrawCopy	access:public
data	messages.h	/^    SpiceFill data;$/;"	m	struct:SpiceMsgDisplayDrawFill	access:public
data	messages.h	/^    SpiceInvers data;$/;"	m	struct:SpiceMsgDisplayDrawInvers	access:public
data	messages.h	/^    SpiceOpaque data;$/;"	m	struct:SpiceMsgDisplayDrawOpaque	access:public
data	messages.h	/^    SpiceRop3 data;$/;"	m	struct:SpiceMsgDisplayDrawRop3	access:public
data	messages.h	/^    SpiceStroke data;$/;"	m	struct:SpiceMsgDisplayDrawStroke	access:public
data	messages.h	/^    SpiceText data;$/;"	m	struct:SpiceMsgDisplayDrawText	access:public
data	messages.h	/^    SpiceTransparent data;$/;"	m	struct:SpiceMsgDisplayDrawTransparent	access:public
data	messages.h	/^    SpiceWhiteness data;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness	access:public
data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceCursor	access:public
data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
data	messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgData	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgSmartcard	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelIpInfo	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelSocketData	access:public
data	messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgcTunnelSocketData	access:public
data	messages.h	/^    void *data;$/;"	m	struct:SpiceMsgPing	access:public
data_len	messages.h	/^    uint32_t data_len;$/;"	m	struct:SpiceMsgPing	access:public
data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceJPEGAlphaData	access:public
data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceLZPLTData	access:public
data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceQUICData	access:public
data_size	draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
data_size	mem.h	/^    uint32_t     data_size;$/;"	m	struct:SpiceChunks	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceCursor	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgData	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamData	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
data_size	messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
dc	canvas_base.c	/^    HDC dc;$/;"	m	struct:CanvasBase	file:	access:public
dc	canvas_utils.h	/^    HDC dc;$/;"	m	struct:LzDecodeUsrData	access:public
dc	gdi_canvas.c	/^    HDC dc;$/;"	m	struct:BitmapData	file:	access:public
dc	gdi_canvas.c	/^    HDC dc;$/;"	m	struct:GdiCanvas	file:	access:public
debug_level	log.c	/^static int debug_level = -1;$/;"	v	file:
decode	canvas_base.h	/^    void (*decode)(SpiceGlzDecoder *decoder,$/;"	m	struct:__anon11	access:public
decode	canvas_base.h	/^    void (*decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps	access:public
decode	canvas_base.h	/^    void (*decode)(SpiceZlibDecoder *decoder,$/;"	m	struct:__anon12	access:public
decode	lz.c	/^static inline uint8_t decode(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
decode_32	lz.c	/^static inline uint32_t decode_32(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
decode_channel_run	quic.c	/^static int decode_channel_run(Encoder *encoder, Channel *channel)$/;"	f	file:	signature:(Encoder *encoder, Channel *channel)
decode_data	canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:GlzData	file:	access:public
decode_data	canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:LzData	file:	access:public
decode_eat32bits	quic.c	/^static inline void decode_eat32bits(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
decode_eatbits	quic.c	/^static inline void decode_eatbits(Encoder *encoder, int len)$/;"	f	file:	signature:(Encoder *encoder, int len)
decode_run	quic.c	/^static inline unsigned int decode_run(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
decode_run	quic.c	/^static int decode_run(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
decoder	canvas_base.c	/^    SpiceGlzDecoder *decoder;$/;"	m	struct:GlzData	file:	access:public
decompress	lz_decompress_tmpl.c	/^static size_t FNAME(decompress)(Encoder *encoder, OUT_PIXEL *out_buf, int size)$/;"	f	file:	signature:(Encoder *encoder, OUT_PIXEL *out_buf, int size)
decorelate	quic_tmpl.c	/^static inline BYTE FNAME(decorelate)(const PIXEL *const prev, const PIXEL * const curr,$/;"	f	file:	signature:(const PIXEL *const prev, const PIXEL * const curr, const unsigned int bpc_mask)
decorelate_0	quic_tmpl.c	/^static inline BYTE FNAME(decorelate_0)(const PIXEL * const curr, const unsigned int bpc_mask)$/;"	f	file:	signature:(const PIXEL * const curr, const unsigned int bpc_mask)
decorelate_init	quic.c	/^static void decorelate_init(QuicFamily *family, int bpc)$/;"	f	file:	signature:(QuicFamily *family, int bpc)
default_rop3_test_handler	rop3.c	/^static void default_rop3_test_handler(void)$/;"	f	file:	signature:(void)
default_rop3_with_pattern_handler	rop3.c	/^static void default_rop3_with_pattern_handler(SPICE_GNUC_UNUSED pixman_image_t *d,$/;"	f	file:	signature:(SPICE_GNUC_UNUSED pixman_image_t *d, SPICE_GNUC_UNUSED pixman_image_t *s, SPICE_GNUC_UNUSED SpicePoint *src_pos, SPICE_GNUC_UNUSED pixman_image_t *p, SPICE_GNUC_UNUSED SpicePoint *pat_pos)
default_rop3_withe_color_handler	rop3.c	/^static void default_rop3_withe_color_handler(SPICE_GNUC_UNUSED pixman_image_t *d,$/;"	f	file:	signature:(SPICE_GNUC_UNUSED pixman_image_t *d, SPICE_GNUC_UNUSED pixman_image_t *s, SPICE_GNUC_UNUSED SpicePoint *src_pos, SPICE_GNUC_UNUSED uint32_t rgb)
description	messages.h	/^    uint64_t description;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
descriptor	draw.h	/^    SpiceImageDescriptor descriptor;$/;"	m	struct:SpiceImage	access:public
dest	generated_client_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
dest	generated_client_demarshallers1.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
dest	generated_server_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:	access:public
dest	messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
dest	messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
dest	rop3.c	/^ROP3_HANDLERS(DPSDPaoxx, ((*pat & *dest) | *src) ^ *pat ^ *dest, 0xb6);$/;"	v
dest	rop3.c	/^ROP3_HANDLERS(DPSDPoaxx, ((*pat | *dest) & *src) ^ *pat ^ *dest, 0x92);$/;"	v
dest	rop3.c	/^ROP3_HANDLERS(DSPDSaoxx, ((*src & *dest) | *pat) ^ *src ^ *dest, 0x9e);$/;"	v
dest	rop3.c	/^ROP3_HANDLERS(DSPDSoaxx, ((*src | *dest) & *pat) ^ *src ^ *dest, 0x86);$/;"	v
dest_region	canvas_base.c	/^    pixman_region32_t dest_region;$/;"	m	struct:__anon28	file:	access:public
destroy	canvas_base.h	/^    void (*destroy)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
destroy_channel	quic.c	/^static void destroy_channel(Channel *channel)$/;"	f	file:	signature:(Channel *channel)
display_channels_hint	messages.h	/^    uint32_t display_channels_hint;$/;"	m	struct:SpiceMsgMainInit	access:public
display_id	messages.h	/^    uint8_t display_id;$/;"	m	struct:SpiceMsgcMousePosition	access:public
do_rop3_with_color	rop3.c	/^void do_rop3_with_color(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	f	signature:(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos, uint32_t rgb)
do_rop3_with_color	rop3.h	/^void do_rop3_with_color(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	p	signature:(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos, uint32_t rgb)
do_rop3_with_pattern	rop3.c	/^void do_rop3_with_pattern(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	f	signature:(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos, pixman_image_t *p, SpicePoint *pat_pos)
do_rop3_with_pattern	rop3.h	/^void do_rop3_with_pattern(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	p	signature:(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos, pixman_image_t *p, SpicePoint *pat_pos)
dot	canvas_base.c	/^static inline int64_t dot(SPICE_FIXED28_4 x1,$/;"	f	file:	signature:(SPICE_FIXED28_4 x1, SPICE_FIXED28_4 y1, SPICE_FIXED28_4 x2, SPICE_FIXED28_4 y2)
dot2	canvas_base.c	/^static inline int64_t dot2(SPICE_FIXED28_4 x,$/;"	f	file:	signature:(SPICE_FIXED28_4 x, SPICE_FIXED28_4 y)
draw_alpha_blend	canvas_base.h	/^    void (*draw_alpha_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend);$/;"	m	struct:__anon13	access:public
draw_blackness	canvas_base.h	/^    void (*draw_blackness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness);$/;"	m	struct:__anon13	access:public
draw_blend	canvas_base.h	/^    void (*draw_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend);$/;"	m	struct:__anon13	access:public
draw_brush	canvas_base.c	/^static void draw_brush(SpiceCanvas *canvas,$/;"	f	file:	signature:(SpiceCanvas *canvas, pixman_region32_t *region, SpiceBrush *brush, SpiceROP rop)
draw_composite	canvas_base.h	/^    void (*draw_composite)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceComposite *composite);$/;"	m	struct:__anon13	access:public
draw_copy	canvas_base.h	/^    void (*draw_copy)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy);$/;"	m	struct:__anon13	access:public
draw_fill	canvas_base.h	/^    void (*draw_fill)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill);$/;"	m	struct:__anon13	access:public
draw_invers	canvas_base.h	/^    void (*draw_invers)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers);$/;"	m	struct:__anon13	access:public
draw_mode	glc.c	/^    int draw_mode;$/;"	m	struct:InternaCtx	file:	access:public
draw_opaque	canvas_base.h	/^    void (*draw_opaque)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque);$/;"	m	struct:__anon13	access:public
draw_rop3	canvas_base.h	/^    void (*draw_rop3)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3);$/;"	m	struct:__anon13	access:public
draw_str_mask_bitmap	gdi_canvas.c	/^static void draw_str_mask_bitmap(struct GdiCanvas *canvas,$/;"	f	file:	signature:(struct GdiCanvas *canvas, SpiceString *str, int n, SpiceRect *dest, SpiceRect *src, SpiceBrush *brush)
draw_stroke	canvas_base.h	/^    void (*draw_stroke)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke);$/;"	m	struct:__anon13	access:public
draw_text	canvas_base.h	/^    void (*draw_text)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text);$/;"	m	struct:__anon13	access:public
draw_transparent	canvas_base.h	/^    void (*draw_transparent)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent);$/;"	m	struct:__anon13	access:public
draw_whiteness	canvas_base.h	/^    void (*draw_whiteness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness);$/;"	m	struct:__anon13	access:public
drawable	ogl_ctx.c	/^    GLXDrawable drawable;$/;"	m	struct:OGLCtx	file:	access:public
dst_info	messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless	access:public
dst_info	messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrationBegin	access:public
dump_bitmap	canvas_base.c	/^static void dump_bitmap(SpiceBitmap *bitmap, SpicePalette *palette)$/;"	f	file:	signature:(SpiceBitmap *bitmap, SpicePalette *palette)
dump_jpeg	canvas_base.c	/^static void dump_jpeg(uint8_t* data, int data_size)$/;"	f	file:	signature:(uint8_t* data, int data_size)
dump_surface	canvas_base.c	/^static void dump_surface(pixman_image_t *surface, int cache)$/;"	f	file:	signature:(pixman_image_t *surface, int cache)
dump_surface	canvas_base.c	/^static void dump_surface(pixman_image_t *surface, int cache);$/;"	p	file:	signature:(pixman_image_t *surface, int cache)
dx	lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:	access:public
dx	lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:	access:public
dx	lines.c	/^    int dx;$/;"	m	struct:_PolyEdge	file:	access:public
dx	messages.h	/^    int32_t dx;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
dy	lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:	access:public
dy	lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:	access:public
dy	lines.c	/^    int dy;$/;"	m	struct:_PolyEdge	file:	access:public
dy	messages.h	/^    int32_t dy;$/;"	m	struct:SpiceMsgcMouseMotion	access:public
e	lines.c	/^    int e;                      \/* initial error term *\/$/;"	m	struct:_PolyEdge	file:	access:public
encode	lz.c	/^static inline void encode(Encoder *encoder, uint8_t byte)$/;"	f	file:	signature:(Encoder *encoder, uint8_t byte)
encode	quic.c	/^static inline void encode(Encoder *encoder, unsigned int word, unsigned int len)$/;"	f	file:	signature:(Encoder *encoder, unsigned int word, unsigned int len)
encode_32	lz.c	/^static inline void encode_32(Encoder *encoder, unsigned int word)$/;"	f	file:	signature:(Encoder *encoder, unsigned int word)
encode_32	quic.c	/^static inline void encode_32(Encoder *encoder, unsigned int word)$/;"	f	file:	signature:(Encoder *encoder, unsigned int word)
encode_channel_run	quic.c	/^static void encode_channel_run(Encoder *encoder, Channel *channel, unsigned int runlen)$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, unsigned int runlen)
encode_copy_count	lz.c	/^static inline void encode_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:	signature:(Encoder *encoder, uint8_t copy_count)
encode_level	lz.c	/^static inline void encode_level(Encoder *encoder, uint8_t level_code)$/;"	f	file:	signature:(Encoder *encoder, uint8_t level_code)
encode_ones	quic.c	/^static inline void encode_ones(Encoder *encoder, unsigned int n)$/;"	f	file:	signature:(Encoder *encoder, unsigned int n)
encode_run	quic.c	/^static inline void encode_run(Encoder *encoder, unsigned int len)$/;"	f	file:	signature:(Encoder *encoder, unsigned int len)
encode_run	quic.c	/^static void encode_run(Encoder *encoder, unsigned int runlen) \/\/todo: try use end of line$/;"	f	file:	signature:(Encoder *encoder, unsigned int runlen)
encoder	quic.c	/^    Encoder *encoder;$/;"	m	struct:Channel	file:	access:public
encoder	quic.c	/^    Encoder *encoder;$/;"	m	struct:CommonState	file:	access:public
encoder_init_rle	quic.c	/^static void encoder_init_rle(CommonState *state)$/;"	f	file:	signature:(CommonState *state)
encoder_reset	lz.c	/^static int encoder_reset(Encoder *encoder, uint8_t *io_ptr, uint8_t *io_ptr_end)$/;"	f	file:	signature:(Encoder *encoder, uint8_t *io_ptr, uint8_t *io_ptr_end)
encoder_reste	quic.c	/^static int encoder_reste(Encoder *encoder, uint32_t *io_ptr, uint32_t *io_ptr_end)$/;"	f	file:	signature:(Encoder *encoder, uint32_t *io_ptr, uint32_t *io_ptr_end)
encoder_reste_channels	quic.c	/^static int encoder_reste_channels(Encoder *encoder, int channels, int width, int bpc)$/;"	f	file:	signature:(Encoder *encoder, int channels, int width, int bpc)
end_frame_mm_time	messages.h	/^    uint32_t end_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
ents	draw.h	/^    uint32_t ents[0];$/;"	m	struct:SpicePalette	access:public
error	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
error	messages.h	/^        VSCMsgError error;$/;"	m	union:SpiceMsgcSmartcard::__anon23	access:public
error	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
error_code	messages.h	/^    uint32_t error_code; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgMainAgentDisconnect	access:public
event	messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgPortEvent	access:public
event	messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgcPortEvent	access:public
evol	quic.c	/^static int evol = DEFevol;$/;"	v	file:
family	quic_rgb_tmpl.c	30;"	d	file:
family	quic_rgb_tmpl.c	51;"	d	file:
family	quic_rgb_tmpl.c	72;"	d	file:
family	quic_rgb_tmpl.c	755;"	d	file:
family	quic_rgb_tmpl.c	93;"	d	file:
family	quic_tmpl.c	44;"	d	file:
family	quic_tmpl.c	633;"	d	file:
family_5bpc	quic.c	/^static QuicFamily family_5bpc;$/;"	v	file:
family_8bpc	quic.c	/^static QuicFamily family_8bpc;$/;"	v	file:
family_init	quic.c	/^static void family_init(QuicFamily *family, int bpc, int limit)$/;"	f	file:	signature:(QuicFamily *family, int bpc, int limit)
family_stat_5bpc	quic.c	/^    FamilyStat family_stat_5bpc;$/;"	m	struct:Channel	file:	access:public
family_stat_8bpc	quic.c	/^    FamilyStat family_stat_8bpc;$/;"	m	struct:Channel	file:	access:public
fgGroup	lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:	access:public
fill_common	gl_canvas.c	/^static inline void fill_common(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceQMask * mask, GLCOp op)$/;"	f	file:	signature:(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceQMask * mask, GLCOp op)
fill_mask	glc.c	/^static void fill_mask(InternaCtx *ctx, int x_dest, int y_dest, int width, int height, int stride,$/;"	p	file:	signature:(InternaCtx *ctx, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap)
fill_mask	glc.c	/^static void fill_mask(InternaCtx *ctx, int x_dest, int y_dest, int width, int height,$/;"	f	file:	signature:(InternaCtx *ctx, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap)
fill_model_structures	quic.c	/^static void fill_model_structures(SPICE_GNUC_UNUSED Encoder *encoder, FamilyStat *family_stat,$/;"	f	file:	signature:(SPICE_GNUC_UNUSED Encoder *encoder, FamilyStat *family_stat, unsigned int rep_first, unsigned int first_size, unsigned int rep_next, unsigned int mul_size, unsigned int levels, unsigned int ncounters, unsigned int nbuckets, unsigned int n_buckets_ptrs)
fill_path	glc.c	/^static void fill_path(InternaCtx *ctx, void *p)$/;"	f	file:	signature:(InternaCtx *ctx, void *p)
fill_path	glc.c	/^static void fill_path(InternaCtx *ctx, void *path);$/;"	p	file:	signature:(InternaCtx *ctx, void *path)
fill_rect	glc.c	/^static void fill_rect(InternaCtx *ctx, void *r)$/;"	f	file:	signature:(InternaCtx *ctx, void *r)
fill_rect	glc.c	/^static void fill_rect(InternaCtx *ctx, void *rect);$/;"	p	file:	signature:(InternaCtx *ctx, void *rect)
fill_solid_rects	canvas_base.h	/^    void (*fill_solid_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_solid_rects	sw_canvas.c	/^static void fill_solid_rects(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, uint32_t color)
fill_solid_rects_rop	canvas_base.h	/^    void (*fill_solid_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_solid_rects_rop	sw_canvas.c	/^static void fill_solid_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, uint32_t color, SpiceROP rop)
fill_solid_spans	canvas_base.h	/^    void (*fill_solid_spans)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_solid_spans	sw_canvas.c	/^static void fill_solid_spans(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpicePoint *points, int *widths, int n_spans, uint32_t color)
fill_tiled_rects	canvas_base.h	/^    void (*fill_tiled_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_tiled_rects	sw_canvas.c	/^static void fill_tiled_rects(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, pixman_image_t *tile, int offset_x, int offset_y)
fill_tiled_rects_from_surface	canvas_base.h	/^    void (*fill_tiled_rects_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_tiled_rects_from_surface	sw_canvas.c	/^static void fill_tiled_rects_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, SpiceCanvas *surface_canvas, int offset_x, int offset_y)
fill_tiled_rects_rop	canvas_base.h	/^    void (*fill_tiled_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_tiled_rects_rop	sw_canvas.c	/^static void fill_tiled_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, pixman_image_t *tile, int offset_x, int offset_y, SpiceROP rop)
fill_tiled_rects_rop_from_surface	canvas_base.h	/^    void (*fill_tiled_rects_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
fill_tiled_rects_rop_from_surface	sw_canvas.c	/^static void fill_tiled_rects_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_box32_t *rects, int n_rects, SpiceCanvas *surface_canvas, int offset_x, int offset_y, SpiceROP rop)
find_bucket	quic_family_tmpl.c	/^static s_bucket *FNAME(find_bucket)(Channel *channel, const unsigned int val)$/;"	f	file:	signature:(Channel *channel, const unsigned int val)
find_bucket	quic_rgb_tmpl.c	29;"	d	file:
find_bucket	quic_rgb_tmpl.c	50;"	d	file:
find_bucket	quic_rgb_tmpl.c	71;"	d	file:
find_bucket	quic_rgb_tmpl.c	754;"	d	file:
find_bucket	quic_rgb_tmpl.c	92;"	d	file:
find_bucket	quic_tmpl.c	43;"	d	file:
find_bucket	quic_tmpl.c	632;"	d	file:
find_model_params	quic.c	/^static void find_model_params(Encoder *encoder,$/;"	f	file:	signature:(Encoder *encoder, const int bpc, unsigned int *ncounters, unsigned int *levels, unsigned int *n_buckets_ptrs, unsigned int *repfirst, unsigned int *firstsize, unsigned int *repnext, unsigned int *mulsize, unsigned int *nbuckets)
find_msb	gl_utils.h	55;"	d
fix_to_double	canvas_base.c	/^static inline double fix_to_double(SPICE_FIXED28_4 fixed)$/;"	f	file:	signature:(SPICE_FIXED28_4 fixed)
fix_to_int	canvas_base.c	/^ static inline int fix_to_int(SPICE_FIXED28_4 fixed)$/;"	f	file:	signature:(SPICE_FIXED28_4 fixed)
flags	draw.h	/^    uint16_t flags;$/;"	m	struct:SpiceString	access:public
flags	draw.h	/^    uint32_t flags;$/;"	m	struct:SpiceComposite	access:public
flags	draw.h	/^    uint32_t flags;$/;"	m	struct:SpicePathSeg	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceBitmap	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceImageDescriptor	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceJPEGAlphaData	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLZPLTData	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLineAttr	access:public
flags	draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceQMask	access:public
flags	gdi_canvas.c	/^    uint8_t flags;$/;"	m	struct:BitmapData	file:	access:public
flags	mem.h	/^    uint32_t     flags;$/;"	m	struct:SpiceChunks	access:public
flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceCursor	access:public
flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayHead	access:public
flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgMigrate	access:public
flags	messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
flush	quic.c	/^static inline void flush(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
fore_brush	draw.h	/^    SpiceBrush fore_brush;$/;"	m	struct:SpiceText	access:public
fore_mode	draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceStroke	access:public
fore_mode	draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceText	access:public
fore_rop	canvas_base.c	/^    SpiceROP fore_rop;$/;"	m	struct:__anon28	file:	access:public
format	canvas_base.c	/^    uint32_t format;$/;"	m	struct:CanvasBase	file:	access:public
format	canvas_utils.h	/^    pixman_format_code_t format;$/;"	m	struct:PixmanData	access:public
format	draw.h	/^    uint8_t format;$/;"	m	struct:SpiceBitmap	access:public
format	glc.h	/^    GLCImageFormat format;$/;"	m	struct:GLCPImage	access:public
format	messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgPlaybackStart	access:public
format	messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgRecordStart	access:public
format	messages.h	/^    uint32_t format;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
four_bytes_pixel_t	quic.c	/^typedef struct ATTR_PACKED four_bytes_pixel_t {$/;"	s	file:
four_bytes_pixel_t::a	quic.c	/^    BYTE a;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
four_bytes_pixel_t::b	quic.c	/^    BYTE b;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
four_bytes_pixel_t::c	quic.c	/^    BYTE c;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
four_bytes_pixel_t::d	quic.c	/^    BYTE d;$/;"	m	struct:four_bytes_pixel_t	file:	access:public
four_bytes_t	quic.c	/^} four_bytes_t;$/;"	t	typeref:struct:four_bytes_pixel_t	file:
free	lz.h	/^    void (*free)(LzUsrContext *usr, void *ptr);$/;"	m	struct:LzUsrContext	access:public
free	quic.h	/^    void (*free)(QuicUsrContext *usr, void *ptr);$/;"	m	struct:QuicUsrContext	access:public
free_data	marshaller.c	/^    spice_marshaller_item_free_func free_data;$/;"	m	struct:__anon34	file:	access:public
free_family_stat	quic.c	/^static void free_family_stat(QuicUsrContext *usr, FamilyStat *family_stat)$/;"	f	file:	signature:(QuicUsrContext *usr, FamilyStat *family_stat)
free_image_segs	lz.c	/^    LzImageSegment *free_image_segs;$/;"	m	struct:Encoder	file:	access:public
free_item_data	marshaller.c	/^static void free_item_data(SpiceMarshaller *m)$/;"	f	file:	signature:(SpiceMarshaller *m)
free_items	marshaller.c	/^static void free_items(SpiceMarshaller *m)$/;"	f	file:	signature:(SpiceMarshaller *m)
free_mask	gdi_canvas.c	/^static void free_mask(struct BitmapData *bitmap)$/;"	f	file:	signature:(struct BitmapData *bitmap)
free_tass_vertex_bufs	glc.c	/^static void free_tass_vertex_bufs(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
free_tess_vertex	glc.c	/^    TassVertex *free_tess_vertex;$/;"	m	struct:InternaCtx	file:	access:public
frequency	messages.h	/^    uint16_t frequency;$/;"	m	struct:SpiceMsgCursorTrail	access:public
frequency	messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
frequency	messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgRecordStart	access:public
frequency	snd_codec.c	/^    int frequency;$/;"	m	struct:__anon16	file:	access:public
from_surface	gdi_canvas.c	/^    int from_surface;$/;"	m	struct:BitmapData	file:	access:public
g	lz.c	/^    uint8_t g;$/;"	m	struct:rgb24_pixel_t	file:	access:public
g	lz.c	/^    uint8_t g;$/;"	m	struct:rgb32_pixel_t	file:	access:public
g	quic.c	/^    BYTE g;$/;"	m	struct:rgb24_pixel_t	file:	access:public
g	quic.c	/^    BYTE g;$/;"	m	struct:rgb32_pixel_t	file:	access:public
gdi_canvas_clear	gdi_canvas.c	/^static void gdi_canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
gdi_canvas_copy_bits	gdi_canvas.c	/^static void gdi_canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)
gdi_canvas_create	gdi_canvas.c	/^SpiceCanvas *gdi_canvas_create(int width, int height,$/;"	f	signature:(int width, int height, HDC dc, RecurciveMutex* lock, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
gdi_canvas_create	gdi_canvas.h	/^SpiceCanvas *gdi_canvas_create(int width, int height,$/;"	p	signature:(int width, int height, HDC dc, class RecurciveMutex *lock, uint32_t format, SpiceImageCache *bits_cache, SpicePaletteCache *palette_cache, SpiceImageSurfaces *surfaces, SpiceGlzDecoder *glz_decoder, SpiceJpegDecoder *jpeg_decoder, SpiceZlibDecoder *zlib_decoder)
gdi_canvas_destroy	gdi_canvas.c	/^static void gdi_canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
gdi_canvas_draw_alpha_blend	gdi_canvas.c	/^static void gdi_canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)
gdi_canvas_draw_blackness	gdi_canvas.c	/^static void gdi_canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)
gdi_canvas_draw_blend	gdi_canvas.c	/^static void gdi_canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)
gdi_canvas_draw_copy	gdi_canvas.c	/^static void gdi_canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)
gdi_canvas_draw_fill	gdi_canvas.c	/^static void gdi_canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)
gdi_canvas_draw_invers	gdi_canvas.c	/^static void gdi_canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)
gdi_canvas_draw_opaque	gdi_canvas.c	/^static void gdi_canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)
gdi_canvas_draw_rop3	gdi_canvas.c	/^static void gdi_canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)
gdi_canvas_draw_stroke	gdi_canvas.c	/^static void gdi_canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)
gdi_canvas_draw_text	gdi_canvas.c	/^static void gdi_canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)
gdi_canvas_draw_transparent	gdi_canvas.c	/^static void gdi_canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent)
gdi_canvas_draw_whiteness	gdi_canvas.c	/^static void gdi_canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)
gdi_canvas_init	gdi_canvas.c	/^void gdi_canvas_init(void) \/\/unsafe global function$/;"	f	signature:(void)
gdi_canvas_init	gdi_canvas.h	/^void gdi_canvas_init(void);$/;"	p	signature:(void)
gdi_canvas_ops	gdi_canvas.c	/^static SpiceCanvasOps gdi_canvas_ops;$/;"	v	file:
gdi_canvas_put_image	gdi_canvas.c	/^static void gdi_canvas_put_image(SpiceCanvas *spice_canvas, HDC dc, const SpiceRect *dest, const uint8_t *src_data,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, HDC dc, const SpiceRect *dest, const uint8_t *src_data, uint32_t src_width, uint32_t src_height, int src_stride, const QRegion *clip)
gdi_draw_bitmap	gdi_canvas.c	/^static void gdi_draw_bitmap(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, HDC src_dc, struct BitmapData *bitmapmask, uint32_t rop3_val)
gdi_draw_bitmap_alpha	gdi_canvas.c	/^static void gdi_draw_bitmap_alpha(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, HDC src_dc, uint8_t alpha, int use_bitmap_alpha)
gdi_draw_bitmap_redrop	gdi_canvas.c	/^static void gdi_draw_bitmap_redrop(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, HDC src_dc, struct BitmapData *bitmapmask, uint16_t rop, int brush)
gdi_draw_bitmap_transparent	gdi_canvas.c	/^static void gdi_draw_bitmap_transparent(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src,$/;"	f	file:	signature:(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, HDC src_dc, uint32_t color)
gdi_draw_image	gdi_canvas.c	/^static void gdi_draw_image(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, pixman_image_t *image, struct BitmapData *bitmapmask, uint16_t rop, int rotate)
gdi_draw_image_alpha	gdi_canvas.c	/^static void gdi_draw_image_alpha(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, pixman_image_t *image, uint8_t alpha, int rotate, int use_bitmap_alpha)
gdi_draw_image_rop3	gdi_canvas.c	/^static void gdi_draw_image_rop3(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:	signature:(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, pixman_image_t *image, struct BitmapData *bitmapmask, uint8_t rop3, int rotate)
gdi_draw_image_transparent	gdi_canvas.c	/^static void gdi_draw_image_transparent(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src,$/;"	f	file:	signature:(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src, const SpiceRect *dest, pixman_image_t *image, uint32_t color, int rotate)
gdi_get_userstyle	gdi_canvas.c	/^static uint32_t *gdi_get_userstyle(GdiCanvas *canvas, uint8_t nseg, SPICE_FIXED28_4* style, int start_is_gap)$/;"	f	file:	signature:(GdiCanvas *canvas, uint8_t nseg, SPICE_FIXED28_4* style, int start_is_gap)
gdi_handlers	canvas_utils.c	/^static int gdi_handlers = 0;$/;"	v	file:
generation	messages.h	/^    uint32_t generation;$/;"	m	struct:SpiceMsgSetAck	access:public
generation	messages.h	/^  uint32_t generation;$/;"	m	struct:SpiceMsgcAckSync	access:public
get	canvas_base.h	/^    SpicePalette *(*get)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
get	canvas_base.h	/^    pixman_image_t *(*get)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
get	canvas_base.h	/^ SpiceCanvas *(*get)(SpiceImageSurfaces *surfaces,$/;"	m	struct:__anon9	access:public
get_brush	gdi_canvas.c	/^static HBRUSH get_brush(GdiCanvas *canvas, SpiceBrush *brush, RecurciveMutex **brush_lock)$/;"	f	file:	signature:(GdiCanvas *canvas, SpiceBrush *brush, RecurciveMutex **brush_lock)
get_color_ref	gdi_canvas.c	/^static inline COLORREF get_color_ref(GdiCanvas *canvas, uint32_t color)$/;"	f	file:	signature:(GdiCanvas *canvas, uint32_t color)
get_converted_color	gdi_canvas.c	/^static inline uint8_t get_converted_color(uint8_t color)$/;"	f	file:	signature:(uint8_t color)
get_image	canvas_base.h	/^    pixman_image_t *(*get_image)(SpiceCanvas *canvas, int force_opaque);$/;"	m	struct:__anon13	access:public
get_image	sw_canvas.c	/^static pixman_image_t *get_image(SpiceCanvas *canvas, int force_opaque)$/;"	f	file:	signature:(SpiceCanvas *canvas, int force_opaque)
get_lossless	canvas_base.h	/^    pixman_image_t *(*get_lossless)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
get_mask_bitmap	gdi_canvas.c	/^static struct BitmapData get_mask_bitmap(struct GdiCanvas *canvas, struct SpiceQMask *mask)$/;"	f	file:	signature:(struct GdiCanvas *canvas, struct SpiceQMask *mask)
get_path	gl_canvas.c	/^static GLCPath get_path(GLCanvas *canvas, SpicePath *s)$/;"	f	file:	signature:(GLCanvas *canvas, SpicePath *s)
glBlendEquation	glc.c	/^    PFNGLBLENDEQUATIONPROC glBlendEquation;$/;"	m	struct:InternaCtx	file:	access:public
gl_canvas_clear	gl_canvas.c	/^static void gl_canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
gl_canvas_copy_bits	gl_canvas.c	/^static void gl_canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)
gl_canvas_create	gl_canvas.c	/^SpiceCanvas *gl_canvas_create(int width, int height, uint32_t format$/;"	f	signature:(int width, int height, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
gl_canvas_create	gl_canvas.h	/^SpiceCanvas *gl_canvas_create(int width, int height, uint32_t format$/;"	p	signature:(int width, int height, uint32_t format , SpiceImageCache *bits_cache , SpicePaletteCache *palette_cache , SpiceImageSurfaces *surfaces , SpiceGlzDecoder *glz_decoder , SpiceJpegDecoder *jpeg_decoder , SpiceZlibDecoder *zlib_decoder )
gl_canvas_destroy	gl_canvas.c	/^static void gl_canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
gl_canvas_draw_alpha_blend	gl_canvas.c	/^static void gl_canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend *alpha_blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend *alpha_blend)
gl_canvas_draw_blackness	gl_canvas.c	/^static void gl_canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)
gl_canvas_draw_blend	gl_canvas.c	/^static void gl_canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)
gl_canvas_draw_copy	gl_canvas.c	/^static void gl_canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)
gl_canvas_draw_fill	gl_canvas.c	/^static void gl_canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)
gl_canvas_draw_invers	gl_canvas.c	/^static void gl_canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)
gl_canvas_draw_opaque	gl_canvas.c	/^static void gl_canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)
gl_canvas_draw_rop3	gl_canvas.c	/^static void gl_canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)
gl_canvas_draw_stroke	gl_canvas.c	/^static void gl_canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)
gl_canvas_draw_text	gl_canvas.c	/^static void gl_canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)
gl_canvas_draw_transparent	gl_canvas.c	/^static void gl_canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent *transparent)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent *transparent)
gl_canvas_draw_whiteness	gl_canvas.c	/^static void gl_canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)
gl_canvas_group_end	gl_canvas.c	/^static void gl_canvas_group_end(SpiceCanvas *spice_canvas)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas)
gl_canvas_group_start	gl_canvas.c	/^static void gl_canvas_group_start(SpiceCanvas *spice_canvas, QRegion *region)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, QRegion *region)
gl_canvas_init	gl_canvas.c	/^void gl_canvas_init(void) \/\/unsafe global function$/;"	f	signature:(void)
gl_canvas_init	gl_canvas.h	/^void gl_canvas_init(void);$/;"	p	signature:(void)
gl_canvas_ops	gl_canvas.c	/^static SpiceCanvasOps gl_canvas_ops;$/;"	v	file:
gl_canvas_put_image	gl_canvas.c	/^static void gl_canvas_put_image(SpiceCanvas *spice_canvas, const SpiceRect *dest, const uint8_t *src_data,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, const SpiceRect *dest, const uint8_t *src_data, uint32_t src_width, uint32_t src_height, int src_stride, const QRegion *clip)
gl_canvas_read_bits	gl_canvas.c	/^static void gl_canvas_read_bits(SpiceCanvas *spice_canvas, uint8_t *dest, int dest_stride, const SpiceRect *area)$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, uint8_t *dest, int dest_stride, const SpiceRect *area)
gl_canvas_set_textures_lost	gl_canvas.c	/^void gl_canvas_set_textures_lost(SpiceCanvas *spice_canvas,$/;"	f	signature:(SpiceCanvas *spice_canvas, int textures_lost)
gl_canvas_set_textures_lost	gl_canvas.h	/^void gl_canvas_set_textures_lost(SpiceCanvas *canvas, int textures_lost);$/;"	p	signature:(SpiceCanvas *canvas, int textures_lost)
gl_get_to_power_two	gl_utils.h	56;"	d
glc	gl_canvas.c	/^    GLCCtx glc;$/;"	m	struct:GLCanvas	file:	access:public
glc_begin_path	glc.c	/^static void glc_begin_path(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
glc_clear	glc.c	/^void glc_clear(GLCCtx glc)$/;"	f	signature:(GLCCtx glc)
glc_clear	glc.h	/^void glc_clear(GLCCtx glc);$/;"	p	signature:(GLCCtx glc)
glc_clear_mask	glc.c	/^void glc_clear_mask(GLCCtx glc, GLCMaskID id)$/;"	f	signature:(GLCCtx glc, GLCMaskID id)
glc_clear_mask	glc.h	/^void glc_clear_mask(GLCCtx glc, GLCMaskID id);$/;"	p	signature:(GLCCtx glc, GLCMaskID id)
glc_clip_mask	glc.c	/^void glc_clip_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height,$/;"	f	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap, GLCClipOp op)
glc_clip_mask	glc.h	/^void glc_clip_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	p	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap, GLCClipOp op)
glc_clip_path	glc.c	/^void glc_clip_path(GLCCtx glc, GLCPath path, GLCClipOp op)$/;"	f	signature:(GLCCtx glc, GLCPath path, GLCClipOp op)
glc_clip_path	glc.h	/^void glc_clip_path(GLCCtx glc, GLCPath path, GLCClipOp op);$/;"	p	signature:(GLCCtx glc, GLCPath path, GLCClipOp op)
glc_clip_rect	glc.c	/^void glc_clip_rect(GLCCtx glc, const GLCRect *rect, GLCClipOp op)$/;"	f	signature:(GLCCtx glc, const GLCRect *rect, GLCClipOp op)
glc_clip_rect	glc.h	/^void glc_clip_rect(GLCCtx glc, const GLCRect *rect, GLCClipOp op);$/;"	p	signature:(GLCCtx glc, const GLCRect *rect, GLCClipOp op)
glc_clip_reset	glc.c	/^void glc_clip_reset(GLCCtx glc)$/;"	f	signature:(GLCCtx glc)
glc_clip_reset	glc.h	/^void glc_clip_reset(GLCCtx glc);$/;"	p	signature:(GLCCtx glc)
glc_copy_pixels	glc.c	/^void glc_copy_pixels(GLCCtx glc, int x_dest, int y_dest, int x_src, int y_src, int width,$/;"	f	signature:(GLCCtx glc, int x_dest, int y_dest, int x_src, int y_src, int width, int height)
glc_copy_pixels	glc.h	/^void glc_copy_pixels(GLCCtx glc, int x_dest, int y_dest, int x_src, int y_src, int width,$/;"	p	signature:(GLCCtx glc, int x_dest, int y_dest, int x_src, int y_src, int width, int height)
glc_create	glc.c	/^GLCCtx glc_create(int width, int height)$/;"	f	signature:(int width, int height)
glc_create	glc.h	/^GLCCtx glc_create(int width, int height);$/;"	p	signature:(int width, int height)
glc_destroy	glc.c	/^void glc_destroy(GLCCtx glc, int textures_lost)$/;"	f	signature:(GLCCtx glc, int textures_lost)
glc_destroy	glc.h	/^void glc_destroy(GLCCtx glc, int textures_lost);$/;"	p	signature:(GLCCtx glc, int textures_lost)
glc_draw_image	glc.c	/^void glc_draw_image(GLCCtx glc, const GLCRecti *dest, const GLCRecti *src, const GLCImage *image,$/;"	f	signature:(GLCCtx glc, const GLCRecti *dest, const GLCRecti *src, const GLCImage *image, int scale_mode, double alpha)
glc_draw_image	glc.h	/^void glc_draw_image(GLCCtx glc, const GLCRecti *dest, const GLCRecti *src, const GLCImage *image,$/;"	p	signature:(GLCCtx glc, const GLCRecti *dest, const GLCRecti *src, const GLCImage *image, int scale_mode, double alpha)
glc_end_path	glc.c	/^static void glc_end_path(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
glc_fill_alpha	glc.c	/^void glc_fill_alpha(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	f	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *alpha_mask)
glc_fill_alpha	glc.h	/^void glc_fill_alpha(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	p	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *alpha_mask)
glc_fill_path	glc.c	/^void glc_fill_path(GLCCtx glc, GLCPath path_ref)$/;"	f	signature:(GLCCtx glc, GLCPath path_ref)
glc_fill_path	glc.h	/^void glc_fill_path(GLCCtx glc, GLCPath path);$/;"	p	signature:(GLCCtx glc, GLCPath path)
glc_fill_rect	glc.c	/^void glc_fill_rect(GLCCtx glc, const GLCRect *rect)$/;"	f	signature:(GLCCtx glc, const GLCRect *rect)
glc_fill_rect	glc.h	/^void glc_fill_rect(GLCCtx glc, const GLCRect *rect);$/;"	p	signature:(GLCCtx glc, const GLCRect *rect)
glc_flush	glc.c	/^void glc_flush(GLCCtx glc)$/;"	f	signature:(GLCCtx glc)
glc_flush	glc.h	/^void glc_flush(GLCCtx glc);$/;"	p	signature:(GLCCtx glc)
glc_mask_rects	glc.c	/^void glc_mask_rects(GLCCtx glc, int num_rect, GLCRect *rects, GLCMaskID id)$/;"	f	signature:(GLCCtx glc, int num_rect, GLCRect *rects, GLCMaskID id)
glc_mask_rects	glc.h	/^void glc_mask_rects(GLCCtx glc, int num_rect, GLCRect *rects, GLCMaskID id);$/;"	p	signature:(GLCCtx glc, int num_rect, GLCRect *rects, GLCMaskID id)
glc_path_cleare	glc.c	/^void glc_path_cleare(GLCPath path)$/;"	f	signature:(GLCPath path)
glc_path_cleare	glc.h	/^void glc_path_cleare(GLCPath);$/;"	p	signature:(GLCPath)
glc_path_close	glc.c	/^void glc_path_close(GLCPath path)$/;"	f	signature:(GLCPath path)
glc_path_close	glc.h	/^void glc_path_close(GLCPath path);$/;"	p	signature:(GLCPath path)
glc_path_create	glc.c	/^GLCPath glc_path_create(GLCCtx glc)$/;"	f	signature:(GLCCtx glc)
glc_path_create	glc.h	/^GLCPath glc_path_create(GLCCtx glc);$/;"	p	signature:(GLCCtx glc)
glc_path_curve_to	glc.c	/^void glc_path_curve_to(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y,$/;"	f	signature:(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y)
glc_path_curve_to	glc.h	/^void glc_path_curve_to(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y,$/;"	p	signature:(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y)
glc_path_destroy	glc.c	/^void glc_path_destroy(GLCPath path)$/;"	f	signature:(GLCPath path)
glc_path_destroy	glc.h	/^void glc_path_destroy(GLCPath path);$/;"	p	signature:(GLCPath path)
glc_path_line_to	glc.c	/^void glc_path_line_to(GLCPath path, double x, double y)$/;"	f	signature:(GLCPath path, double x, double y)
glc_path_line_to	glc.h	/^void glc_path_line_to(GLCPath path, double x, double y);$/;"	p	signature:(GLCPath path, double x, double y)
glc_path_move_to	glc.c	/^void glc_path_move_to(GLCPath path, double x, double y)$/;"	f	signature:(GLCPath path, double x, double y)
glc_path_move_to	glc.h	/^void glc_path_move_to(GLCPath path, double x, double y);$/;"	p	signature:(GLCPath path, double x, double y)
glc_path_rel_curve_to	glc.h	/^void glc_path_rel_curve_to(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y,$/;"	p	signature:(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y)
glc_path_rel_line_to	glc.h	/^void glc_path_rel_line_to(GLCPath path, double x, double y);$/;"	p	signature:(GLCPath path, double x, double y)
glc_path_rel_move_to	glc.h	/^void glc_path_rel_move_to(GLCPath path, double x, double y);$/;"	p	signature:(GLCPath path, double x, double y)
glc_pattern_create	glc.c	/^GLCPattern glc_pattern_create(GLCCtx glc, int x_orign, int y_orign, const GLCImage *image)$/;"	f	signature:(GLCCtx glc, int x_orign, int y_orign, const GLCImage *image)
glc_pattern_create	glc.h	/^GLCPattern glc_pattern_create(GLCCtx glc, int x_orign, int y_orign, const GLCImage *image);$/;"	p	signature:(GLCCtx glc, int x_orign, int y_orign, const GLCImage *image)
glc_pattern_destroy	glc.c	/^void glc_pattern_destroy(GLCPattern pat)$/;"	f	signature:(GLCPattern pat)
glc_pattern_destroy	glc.h	/^void glc_pattern_destroy(GLCPattern pattern);$/;"	p	signature:(GLCPattern pattern)
glc_pattern_set	glc.c	/^void glc_pattern_set(GLCPattern pattern, int x_orign, int y_orign, const GLCImage *image)$/;"	f	signature:(GLCPattern pattern, int x_orign, int y_orign, const GLCImage *image)
glc_pattern_set	glc.h	/^void glc_pattern_set(GLCPattern pattern, int x_orign, int y_orign, const GLCImage *image);$/;"	p	signature:(GLCPattern pattern, int x_orign, int y_orign, const GLCImage *image)
glc_read_pixels	glc.c	/^void glc_read_pixels(GLCCtx glc, int x, int y, GLCImage *image)$/;"	f	signature:(GLCCtx glc, int x, int y, GLCImage *image)
glc_read_pixels	glc.h	/^void glc_read_pixels(GLCCtx glc, int x, int y, GLCImage *image);$/;"	p	signature:(GLCCtx glc, int x, int y, GLCImage *image)
glc_set_alpha_factor	glc.h	/^void glc_set_alpha_factor(GLCCtx glc, double alpah);$/;"	p	signature:(GLCCtx glc, double alpah)
glc_set_fill_mode	glc.c	/^void glc_set_fill_mode(GLCCtx glc, GLCFillMode fill_mode)$/;"	f	signature:(GLCCtx glc, GLCFillMode fill_mode)
glc_set_fill_mode	glc.h	/^void glc_set_fill_mode(GLCCtx glc, GLCFillMode mode);$/;"	p	signature:(GLCCtx glc, GLCFillMode mode)
glc_set_line_dash	glc.c	/^void glc_set_line_dash(GLCCtx glc, const double *dashes, int num_dashes, double offset)$/;"	f	signature:(GLCCtx glc, const double *dashes, int num_dashes, double offset)
glc_set_line_dash	glc.h	/^void glc_set_line_dash(GLCCtx glc, const double *dashes, int num_dashes, double offset);$/;"	p	signature:(GLCCtx glc, const double *dashes, int num_dashes, double offset)
glc_set_line_end_cap	glc.h	/^void glc_set_line_end_cap(GLCCtx glc, int style);$/;"	p	signature:(GLCCtx glc, int style)
glc_set_line_join	glc.h	/^void glc_set_line_join(GLCCtx glc, int style);$/;"	p	signature:(GLCCtx glc, int style)
glc_set_line_width	glc.c	/^void glc_set_line_width(GLCCtx glc, double width)$/;"	f	signature:(GLCCtx glc, double width)
glc_set_line_width	glc.h	/^void glc_set_line_width(GLCCtx glc, double width);$/;"	p	signature:(GLCCtx glc, double width)
glc_set_mask	glc.c	/^void glc_set_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height,$/;"	f	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap, GLCMaskID id)
glc_set_mask	glc.h	/^void glc_set_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height,$/;"	p	signature:(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride, const uint8_t *bitmap, GLCMaskID id)
glc_set_miter_limit	glc.h	/^void glc_set_miter_limit(GLCCtx glc, int limit);$/;"	p	signature:(GLCCtx glc, int limit)
glc_set_op	glc.c	/^void glc_set_op(GLCCtx glc, GLCOp op)$/;"	f	signature:(GLCCtx glc, GLCOp op)
glc_set_op	glc.h	/^void glc_set_op(GLCCtx glc, GLCOp op);$/;"	p	signature:(GLCCtx glc, GLCOp op)
glc_set_pattern	glc.c	/^void glc_set_pattern(GLCCtx glc, GLCPattern pattern)$/;"	f	signature:(GLCCtx glc, GLCPattern pattern)
glc_set_pattern	glc.h	/^void glc_set_pattern(GLCCtx glc, GLCPattern pattern);$/;"	p	signature:(GLCCtx glc, GLCPattern pattern)
glc_set_rgb	glc.c	/^void glc_set_rgb(GLCCtx glc, double red, double green, double blue)$/;"	f	signature:(GLCCtx glc, double red, double green, double blue)
glc_set_rgb	glc.h	/^void glc_set_rgb(GLCCtx glc, double red, double green, double blue);$/;"	p	signature:(GLCCtx glc, double red, double green, double blue)
glc_set_rgba	glc.h	/^void glc_set_rgba(GLCCtx glc, double red, double green, double blue, double alpha);$/;"	p	signature:(GLCCtx glc, double red, double green, double blue, double alpha)
glc_stroke_line	glc.c	/^static void glc_stroke_line(double x1, double y1, double x2, double y2, double width)$/;"	f	file:	signature:(double x1, double y1, double x2, double y2, double width)
glc_stroke_line_dash	glc.c	/^static double glc_stroke_line_dash(double x1, double y1, double x2, double y2,$/;"	f	file:	signature:(double x1, double y1, double x2, double y2, double width, LineDash *dash)
glc_stroke_path	glc.c	/^void glc_stroke_path(GLCCtx glc, GLCPath path_ref)$/;"	f	signature:(GLCCtx glc, GLCPath path_ref)
glc_stroke_path	glc.h	/^void glc_stroke_path(GLCCtx glc, GLCPath path);$/;"	p	signature:(GLCCtx glc, GLCPath path)
glc_stroke_rect	glc.c	/^void glc_stroke_rect(GLCCtx glc, const GLCRect *rect)$/;"	f	signature:(GLCCtx glc, const GLCRect *rect)
glc_stroke_rect	glc.h	/^void glc_stroke_rect(GLCCtx glc, const GLCRect *rect);$/;"	p	signature:(GLCCtx glc, const GLCRect *rect)
glc_vertex2d	glc.c	/^static void glc_vertex2d(InternaCtx *ctx, double x, double y)$/;"	f	file:	signature:(InternaCtx *ctx, double x, double y)
glx_context	ogl_ctx.c	/^    GLXContext glx_context;$/;"	m	struct:OGLCtx	file:	access:public
glyph_origin	draw.h	/^    SpicePoint glyph_origin;$/;"	m	struct:SpiceRasterGlyph	access:public
glyphs	draw.h	/^    SpiceRasterGlyph *glyphs[0];$/;"	m	struct:SpiceString	access:public
glz_data	canvas_base.c	/^    GlzData glz_data;$/;"	m	struct:CanvasBase	file:	access:public
glz_data_size	draw.h	/^    uint32_t glz_data_size;$/;"	m	struct:SpiceZlibGlzRGBData	access:public
glz_dictionary_id	messages.h	/^    uint8_t glz_dictionary_id;$/;"	m	struct:SpiceMsgcDisplayInit	access:public
glz_dictionary_window_size	messages.h	/^    int32_t glz_dictionary_window_size;       \/\/ in pixels$/;"	m	struct:SpiceMsgcDisplayInit	access:public
golomb_code	quic.c	/^    unsigned int golomb_code[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:	access:public
golomb_code	quic_family_tmpl.c	/^static inline unsigned int FNAME(golomb_code)(const BYTE n, const unsigned int l)$/;"	f	file:	signature:(const BYTE n, const unsigned int l)
golomb_code_len	quic.c	/^    unsigned int golomb_code_len[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:	access:public
golomb_code_len	quic_family_tmpl.c	/^static inline unsigned int FNAME(golomb_code_len)(const BYTE n, const unsigned int l)$/;"	f	file:	signature:(const BYTE n, const unsigned int l)
golomb_coding	quic_family_tmpl.c	/^static void FNAME(golomb_coding)(const BYTE n, const unsigned int l, unsigned int * const codeword,$/;"	f	file:	signature:(const BYTE n, const unsigned int l, unsigned int * const codeword, unsigned int * const codewordlen)
golomb_coding	quic_rgb_tmpl.c	26;"	d	file:
golomb_coding	quic_rgb_tmpl.c	47;"	d	file:
golomb_coding	quic_rgb_tmpl.c	68;"	d	file:
golomb_coding	quic_rgb_tmpl.c	751;"	d	file:
golomb_coding	quic_rgb_tmpl.c	89;"	d	file:
golomb_coding	quic_tmpl.c	40;"	d	file:
golomb_coding	quic_tmpl.c	629;"	d	file:
golomb_coding_slow	quic.c	/^static void golomb_coding_slow(QuicFamily *family, const BYTE n, const unsigned int l,$/;"	f	file:	signature:(QuicFamily *family, const BYTE n, const unsigned int l, unsigned int * const codeword, unsigned int * const codewordlen)
golomb_decoding	quic_family_tmpl.c	/^static unsigned int FNAME(golomb_decoding)(const unsigned int l, const unsigned int bits,$/;"	f	file:	signature:(const unsigned int l, const unsigned int bits, unsigned int * const codewordlen)
golomb_decoding	quic_rgb_tmpl.c	27;"	d	file:
golomb_decoding	quic_rgb_tmpl.c	48;"	d	file:
golomb_decoding	quic_rgb_tmpl.c	69;"	d	file:
golomb_decoding	quic_rgb_tmpl.c	752;"	d	file:
golomb_decoding	quic_rgb_tmpl.c	90;"	d	file:
golomb_decoding	quic_tmpl.c	41;"	d	file:
golomb_deoding	quic_tmpl.c	630;"	d	file:
group	lines.c	/^    Spans *group;               \/* List of Spans                        *\/$/;"	m	struct:__anon38	file:	access:public
group	messages.h	/^    uint32_t group;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
group_end	canvas_base.h	/^    void (*group_end)(SpiceCanvas *canvas);$/;"	m	struct:__anon13	access:public
group_start	canvas_base.h	/^    void (*group_start)(SpiceCanvas *canvas, QRegion *region);$/;"	m	struct:__anon13	access:public
hbitmap	gdi_canvas.c	/^    HBITMAP hbitmap;$/;"	m	struct:BitmapData	file:	access:public
head_image_segs	lz.c	/^    LzImageSegment *head_image_segs;$/;"	m	struct:Encoder	file:	access:public
header	messages.h	/^    SpiceCursorHeader header;$/;"	m	struct:SpiceCursor	access:public
header	messages.h	/^    VSCMsgHeader header;$/;"	m	struct:SpiceMsgcSmartcard	access:public
heads	messages.h	/^    SpiceHead heads[0];$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
height	canvas_base.c	/^    int height;$/;"	m	struct:CanvasBase	file:	access:public
height	draw.h	/^    uint16_t height;$/;"	m	struct:SpiceCursorHeader	access:public
height	draw.h	/^    uint16_t height;$/;"	m	struct:SpiceRasterGlyph	access:public
height	draw.h	/^    uint32_t height;$/;"	m	struct:SpiceImageDescriptor	access:public
height	glc.c	/^    int height;$/;"	m	struct:FillMaskInfo	file:	access:public
height	glc.c	/^    int height;$/;"	m	struct:InternaCtx	file:	access:public
height	glc.c	/^    int height;$/;"	m	struct:InternalPat	file:	access:public
height	glc.h	/^    double height;$/;"	m	struct:GLCRect	access:public
height	glc.h	/^    int height;$/;"	m	struct:GLCPImage	access:public
height	glc.h	/^    int height;$/;"	m	struct:GLCRecti	access:public
height	lines.c	/^    int height;                 \/* number of scanlines to process *\/$/;"	m	struct:_PolyEdge	file:	access:public
height	lines.h	/^    int height;$/;"	m	struct:lineGC	access:public
height	lz.c	/^    int height;$/;"	m	struct:Encoder	file:	access:public
height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayHead	access:public
height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
height	messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
height	quic.c	/^    unsigned int height;$/;"	m	struct:Encoder	file:	access:public
host_data	messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
host_data	messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
host_size	messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
host_size	messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
hostname	ssl_verify.h	/^    char                *hostname;$/;"	m	struct:__anon2	access:public
hot_spot_x	draw.h	/^    uint16_t hot_spot_x;$/;"	m	struct:SpiceCursorHeader	access:public
hot_spot_y	draw.h	/^    uint16_t hot_spot_y;$/;"	m	struct:SpiceCursorHeader	access:public
htab	lz.c	/^    HashEntry htab[HASH_SIZE];$/;"	m	struct:Encoder	file:	access:public
id	draw.h	/^    uint64_t id;$/;"	m	struct:SpiceImageDescriptor	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayHead	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamClip	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamDestroy	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgPing	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelRemoveService	access:public
id	messages.h	/^    uint32_t id;$/;"	m	struct:SpiceStreamDataHeader	access:public
id	messages.h	/^    uint64_t id;$/;"	m	struct:SpiceMsgDisplayInvalOne	access:public
id	messages.h	/^    uint64_t id;$/;"	m	struct:SpiceResourceID	access:public
id	messages.h	/^    uint8_t id;$/;"	m	struct:SpiceChannelId	access:public
image	sw_canvas.c	/^    pixman_image_t *image;$/;"	m	struct:SwCanvas	file:	access:public
image_has_palette_to_cache	canvas_base.c	/^static int image_has_palette_to_cache(SpiceImage *image)$/;"	f	file:	signature:(SpiceImage *image)
image_seg	lz.c	/^    LzImageSegment    *image_seg;$/;"	m	struct:HashEntry	file:	access:public
inet_aton	ssl_verify.c	/^static int inet_aton(const char* ip, struct in_addr* in_addr)$/;"	f	file:	signature:(const char* ip, struct in_addr* in_addr)
info	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
info	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
init	glc.c	/^static int init(InternaCtx *ctx, int width, int height)$/;"	f	file:	signature:(InternaCtx *ctx, int width, int height)
init_channel	quic.c	/^static int init_channel(Encoder *encoder, Channel *channel)$/;"	f	file:	signature:(Encoder *encoder, Channel *channel)
init_decode_io	quic.c	/^static inline void init_decode_io(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
init_encoder	lz.c	/^static int init_encoder(Encoder *encoder, LzUsrContext *usr)$/;"	f	file:	signature:(Encoder *encoder, LzUsrContext *usr)
init_encoder	quic.c	/^static int init_encoder(Encoder *encoder, QuicUsrContext *usr)$/;"	f	file:	signature:(Encoder *encoder, QuicUsrContext *usr)
init_model_structures	quic.c	/^static int init_model_structures(Encoder *encoder, FamilyStat *family_stat,$/;"	f	file:	signature:(Encoder *encoder, FamilyStat *family_stat, unsigned int rep_first, unsigned int first_size, unsigned int rep_next, unsigned int mul_size, unsigned int levels, unsigned int ncounters, unsigned int n_buckets_ptrs, unsigned int n_buckets)
init_pattern	glc.c	/^static inline void init_pattern(InternalPat *pat, int x_orign, int y_orign, const GLCImage *image)$/;"	f	file:	signature:(InternalPat *pat, int x_orign, int y_orign, const GLCImage *image)
init_zeroLUT	quic.c	/^static void init_zeroLUT(void)$/;"	f	file:	signature:(void)
int_to_fix	canvas_base.c	/^ static inline SPICE_FIXED28_4  int_to_fix(int v)$/;"	f	file:	signature:(int v)
io_available_bits	quic.c	/^    unsigned int io_available_bits;$/;"	m	struct:Encoder	file:	access:public
io_bytes_count	lz.c	/^    size_t io_bytes_count;$/;"	m	struct:Encoder	file:	access:public
io_end	lz.c	/^    uint8_t            *io_end;$/;"	m	struct:Encoder	file:	access:public
io_end	quic.c	/^    uint32_t *io_end;$/;"	m	struct:Encoder	file:	access:public
io_last_copy	lz.c	/^    uint8_t            *io_last_copy;  \/\/ pointer to the last byte in which copy count was written$/;"	m	struct:Encoder	file:	access:public
io_next_word	quic.c	/^    uint32_t io_next_word;$/;"	m	struct:Encoder	file:	access:public
io_now	lz.c	/^    uint8_t            *io_now;$/;"	m	struct:Encoder	file:	access:public
io_now	quic.c	/^    uint32_t *io_now;$/;"	m	struct:Encoder	file:	access:public
io_start	lz.c	/^    uint8_t            *io_start;$/;"	m	struct:Encoder	file:	access:public
io_word	quic.c	/^    uint32_t io_word;$/;"	m	struct:Encoder	file:	access:public
io_words_count	quic.c	/^    uint32_t io_words_count;$/;"	m	struct:Encoder	file:	access:public
ip	messages.h	/^        SpiceMsgTunnelIpInfo ip;$/;"	m	union:SpiceMsgcTunnelAddGenericService::__anon22	access:public
ipv4	messages.h	/^      SpiceTunnelIPv4 ipv4;$/;"	m	union:SpiceMsgTunnelIpInfo::__anon21	access:public
is_64bit	marshaller.c	/^    int is_64bit;$/;"	m	struct:__anon35	file:	access:public
is_io_to_decode_end	lz.c	/^static inline int is_io_to_decode_end(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
item_nr	marshaller.c	/^    int item_nr;$/;"	m	struct:__anon35	file:	access:public
items	marshaller.c	/^    MarshallerItem *items;$/;"	m	struct:SpiceMarshaller	file:	access:public
items_size	marshaller.c	/^    int items_size; \/* number of items availible in items *\/$/;"	m	struct:SpiceMarshaller	file:	access:public
jmp_env	canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:LzData	file:	access:public
jmp_env	canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:QuicData	file:	access:public
joinStyle	lines.h	/^    unsigned int joinStyle:2;$/;"	m	struct:lineGC	access:public
jpeg	canvas_base.c	/^    SpiceJpegDecoder* jpeg;$/;"	m	struct:CanvasBase	file:	access:public
jpeg	draw.h	/^        SpiceJPEGData       jpeg;$/;"	m	union:SpiceImage::__anon17	access:public
jpeg_alpha	draw.h	/^        SpiceJPEGAlphaData  jpeg_alpha;$/;"	m	union:SpiceImage::__anon17	access:public
jpeg_id	canvas_base.c	/^static int jpeg_id = 0;$/;"	v	file:
jpeg_size	draw.h	/^    uint32_t jpeg_size;$/;"	m	struct:SpiceJPEGAlphaData	access:public
k	lines.c	/^    double k;                   \/* x0 * dy - y0 * dx *\/$/;"	m	struct:_PolySlope	file:	access:public
k	lines.c	/^    double k;$/;"	m	struct:_LineFace	file:	access:public
keyboard_modifiers	messages.h	/^    uint32_t keyboard_modifiers;$/;"	m	struct:SpiceMsgInputsInit	access:public
last_frame_delay	messages.h	/^    int32_t last_frame_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
last_marshaller	marshaller.c	/^    SpiceMarshaller *last_marshaller;$/;"	m	struct:SpiceMarshallerData	file:	access:public
latency_ms	messages.h	/^    uint32_t latency_ms;$/;"	m	struct:SpiceMsgPlaybackLatency	access:public
left	draw.h	/^    int32_t left;$/;"	m	struct:SpiceRect	access:public
len	marshaller.c	/^    size_t len;$/;"	m	struct:__anon34	file:	access:public
len	mem.h	/^    uint32_t len;$/;"	m	struct:SpiceChunk	access:public
length	draw.h	/^    uint16_t length;$/;"	m	struct:SpiceString	access:public
length	messages.h	/^    uint16_t length;$/;"	m	struct:SpiceMsgCursorTrail	access:public
length	messages.h	/^    uint32_t length;$/;"	m	struct:SpiceMsgSmartcard	access:public
lineGC	lines.h	/^struct lineGC {$/;"	s
lineGC	lines.h	/^typedef struct lineGC lineGC;$/;"	t	typeref:struct:lineGC
lineGC::alu	lines.h	/^    unsigned char alu;$/;"	m	struct:lineGC	access:public
lineGC::capStyle	lines.h	/^    unsigned int capStyle:2;$/;"	m	struct:lineGC	access:public
lineGC::dash	lines.h	/^    unsigned char *dash;$/;"	m	struct:lineGC	access:public
lineGC::dashOffset	lines.h	/^    unsigned short dashOffset;$/;"	m	struct:lineGC	access:public
lineGC::height	lines.h	/^    int height;$/;"	m	struct:lineGC	access:public
lineGC::joinStyle	lines.h	/^    unsigned int joinStyle:2;$/;"	m	struct:lineGC	access:public
lineGC::lineStyle	lines.h	/^    unsigned int lineStyle:2;$/;"	m	struct:lineGC	access:public
lineGC::lineWidth	lines.h	/^    unsigned short lineWidth;$/;"	m	struct:lineGC	access:public
lineGC::numInDashList	lines.h	/^    unsigned short numInDashList;$/;"	m	struct:lineGC	access:public
lineGC::ops	lines.h	/^    lineGCOps *ops;$/;"	m	struct:lineGC	access:public
lineGC::width	lines.h	/^    int width;$/;"	m	struct:lineGC	access:public
lineGCOps	lines.h	/^} lineGCOps;$/;"	t	typeref:struct:__anon33
lineStyle	lines.h	/^    unsigned int lineStyle:2;$/;"	m	struct:lineGC	access:public
lineWidth	lines.h	/^    unsigned short lineWidth;$/;"	m	struct:lineGC	access:public
line_dash	glc.c	/^    LineDash line_dash;$/;"	m	struct:InternaCtx	file:	access:public
line_width	glc.c	/^    GLfloat line_width;$/;"	m	struct:InternaCtx	file:	access:public
lines	lz.c	/^    uint8_t            *lines;$/;"	m	struct:LzImageSegment	file:	access:public
lines_end	lz.c	/^    uint8_t            *lines_end;$/;"	m	struct:LzImageSegment	file:	access:public
list_link	glc.c	/^    TassVertex *list_link;$/;"	m	struct:TassVertex	file:	access:public
lock	gdi_canvas.c	/^    RecurciveMutex* lock;$/;"	m	struct:GdiCanvas	file:	access:public
lookup_ref	marshaller.c	/^static uint8_t *lookup_ref(MarshallerRef *ref)$/;"	f	file:	signature:(MarshallerRef *ref)
lz	canvas_base.c	/^    LzContext *lz;$/;"	m	struct:LzData	file:	access:public
lz_alloc_image_seg	lz.c	/^static inline LzImageSegment *lz_alloc_image_seg(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
lz_alloc_image_seg	lz.c	/^static inline LzImageSegment *lz_alloc_image_seg(Encoder *encoder);$/;"	p	file:	signature:(Encoder *encoder)
lz_create	lz.c	/^LzContext *lz_create(LzUsrContext *usr)$/;"	f	signature:(LzUsrContext *usr)
lz_create	lz.h	/^LzContext *lz_create(LzUsrContext *usr);$/;"	p	signature:(LzUsrContext *usr)
lz_data	canvas_base.c	/^    LzData lz_data;$/;"	m	struct:CanvasBase	file:	access:public
lz_dealloc_free_segments	lz.c	/^static void lz_dealloc_free_segments(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
lz_decode	lz.c	/^void lz_decode(LzContext *lz, LzImageType to_type, uint8_t *buf)$/;"	f	signature:(LzContext *lz, LzImageType to_type, uint8_t *buf)
lz_decode	lz.h	/^void lz_decode(LzContext *lz, LzImageType to_type, uint8_t *buf);$/;"	p	signature:(LzContext *lz, LzImageType to_type, uint8_t *buf)
lz_decode_begin	lz.c	/^void lz_decode_begin(LzContext *lz, uint8_t *io_ptr, unsigned int num_io_bytes,$/;"	f	signature:(LzContext *lz, uint8_t *io_ptr, unsigned int num_io_bytes, LzImageType *out_type, int *out_width, int *out_height, int *out_n_pixels, int *out_top_down, const SpicePalette *palette)
lz_decode_begin	lz.h	/^void lz_decode_begin(LzContext *lz, uint8_t *io_ptr, unsigned int num_io_bytes,$/;"	p	signature:(LzContext *lz, uint8_t *io_ptr, unsigned int num_io_bytes, LzImageType *out_type, int *out_width, int *out_height, int *out_n_pixels, int *out_top_down, const SpicePalette *palette)
lz_destroy	lz.c	/^void lz_destroy(LzContext *lz)$/;"	f	signature:(LzContext *lz)
lz_destroy	lz.h	/^void lz_destroy(LzContext *lz);$/;"	p	signature:(LzContext *lz)
lz_encode	lz.c	/^int lz_encode(LzContext *lz, LzImageType type, int width, int height, int top_down,$/;"	f	signature:(LzContext *lz, LzImageType type, int width, int height, int top_down, uint8_t *lines, unsigned int num_lines, int stride, uint8_t *io_ptr, unsigned int num_io_bytes)
lz_encode	lz.h	/^int lz_encode(LzContext *lz, LzImageType type, int width, int height, int top_down,$/;"	p	signature:(LzContext *lz, LzImageType type, int width, int height, int top_down, uint8_t *lines, unsigned int num_lines, int stride, uint8_t *io_ptr, unsigned int num_io_bytes)
lz_plt	draw.h	/^        SpiceLZPLTData      lz_plt;$/;"	m	union:SpiceImage::__anon17	access:public
lz_read_image_segments	lz.c	/^static int lz_read_image_segments(Encoder *encoder, uint8_t *first_lines,$/;"	f	file:	signature:(Encoder *encoder, uint8_t *first_lines, unsigned int num_first_lines)
lz_read_image_segments	lz.c	/^static int lz_read_image_segments(Encoder *encoder, uint8_t *first_lines,$/;"	p	file:	signature:(Encoder *encoder, uint8_t *first_lines, unsigned int num_first_lines)
lz_reset_image_seg	lz.c	/^static void lz_reset_image_seg(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
lz_reset_image_seg	lz.c	/^static void lz_reset_image_seg(Encoder *encoder);$/;"	p	file:	signature:(Encoder *encoder)
lz_rgb	draw.h	/^        SpiceLZRGBData      lz_rgb;$/;"	m	union:SpiceImage::__anon17	access:public
lz_usr_error	canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void lz_usr_error(LzUsrContext *usr, const char *fmt, ...)$/;"	f	file:	signature:(LzUsrContext *usr, const char *fmt, ...)
lz_usr_free	canvas_base.c	/^static void lz_usr_free(LzUsrContext *usr, void *ptr)$/;"	f	file:	signature:(LzUsrContext *usr, void *ptr)
lz_usr_malloc	canvas_base.c	/^static void *lz_usr_malloc(LzUsrContext *usr, int size)$/;"	f	file:	signature:(LzUsrContext *usr, int size)
lz_usr_more_lines	canvas_base.c	/^static int lz_usr_more_lines(LzUsrContext *usr, uint8_t **lines)$/;"	f	file:	signature:(LzUsrContext *usr, uint8_t **lines)
lz_usr_more_space	canvas_base.c	/^static int lz_usr_more_space(LzUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:	signature:(LzUsrContext *usr, uint8_t **io_ptr)
lz_usr_warn	canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void lz_usr_warn(LzUsrContext *usr, const char *fmt, ...)$/;"	f	file:	signature:(LzUsrContext *usr, const char *fmt, ...)
lzeroes	quic.c	/^static const BYTE lzeroes[256] = {$/;"	v	file:
main	region.c	/^int main(void)$/;"	f	signature:(void)
malloc	lz.h	/^    void    *(*malloc)(LzUsrContext *usr, int size);$/;"	m	struct:LzUsrContext	access:public
malloc	quic.h	/^    void *(*malloc)(QuicUsrContext *usr, int size);$/;"	m	struct:QuicUsrContext	access:public
marshaller	marshaller.c	/^    SpiceMarshaller *marshaller;$/;"	m	struct:__anon35	file:	access:public
marshallers	marshaller.c	/^    SpiceMarshaller *marshallers;$/;"	m	struct:SpiceMarshallerData	file:	access:public
mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceBlackness	access:public
mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceCopy	access:public
mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceFill	access:public
mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceOpaque	access:public
mask	draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceRop3	access:public
mask_bitmap	draw.h	/^    SpiceImage *mask_bitmap;$/;"	m	struct:SpiceComposite	access:public
mask_origin	draw.h	/^    SpicePoint16 mask_origin;$/;"	m	struct:SpiceComposite	access:public
mask_transform	draw.h	/^    SpiceTransform mask_transform;$/;"	m	struct:SpiceComposite	access:public
max_allowed	messages.h	/^    uint16_t max_allowed;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig	access:public
max_num_of_sockets	messages.h	/^    uint16_t max_num_of_sockets;$/;"	m	struct:SpiceMsgTunnelInit	access:public
max_socket_data_size	messages.h	/^    uint32_t max_socket_data_size;$/;"	m	struct:SpiceMsgTunnelInit	access:public
max_texture_size	glc.c	/^    int max_texture_size;$/;"	m	struct:InternaCtx	file:	access:public
max_window_size	messages.h	/^    uint32_t max_window_size;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
melclen	quic.c	/^    int melclen;  \/* contents of the state array location$/;"	m	struct:CommonState	file:	access:public
melcorder	quic.c	/^    unsigned long melcorder;  \/* 2^ melclen *\/$/;"	m	struct:CommonState	file:	access:public
melcstate	quic.c	/^    int melcstate; \/* index to the state array *\/$/;"	m	struct:CommonState	file:	access:public
message	messages.h	/^    uint8_t message[0];$/;"	m	struct:SpiceMsgNotify	access:public
message_buf	canvas_base.c	/^    char message_buf[512];$/;"	m	struct:LzData	file:	access:public
message_buf	canvas_base.c	/^    char message_buf[512];$/;"	m	struct:QuicData	file:	access:public
message_destructor_t	client_demarshallers.h	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t
message_destructor_t	generated_client_demarshallers.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_destructor_t	generated_client_demarshallers1.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_destructor_t	generated_server_demarshallers.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_len	messages.h	/^    uint32_t message_len;$/;"	m	struct:SpiceMsgNotify	access:public
message_serial	messages.h	/^    uint64_t message_serial;$/;"	m	struct:SpiceWaitForChannel	access:public
miAppendSpans	lines.c	/^miAppendSpans (SpanGroup * spanGroup, SpanGroup * otherGroup, Spans * spans)$/;"	f	file:	signature:(SpanGroup * spanGroup, SpanGroup * otherGroup, Spans * spans)
miAppendSpans	lines.c	/^static void miAppendSpans (SpanGroup * \/*spanGroup *\/ ,$/;"	p	file:	signature:(SpanGroup * , SpanGroup * , Spans * )
miCleanupSpanData	lines.c	/^miCleanupSpanData (GCPtr pGC, SpanDataPtr spanData)$/;"	f	file:	signature:(GCPtr pGC, SpanDataPtr spanData)
miDisposeSpanGroup	lines.c	/^miDisposeSpanGroup (SpanGroup * spanGroup)$/;"	f	file:	signature:(SpanGroup * spanGroup)
miFillPolyHelper	lines.c	/^miFillPolyHelper (GCPtr pGC, Boolean foreground,$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int y, int overall_height, PolyEdgePtr left, PolyEdgePtr right, int left_count, int right_count)
miFillRectPolyHelper	lines.c	/^miFillRectPolyHelper (GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int x, int y, int w, int h)$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int x, int y, int w, int h)
miFillUniqueSpanGroup	lines.c	/^miFillUniqueSpanGroup (GCPtr pGC, SpanGroup * spanGroup, Boolean foreground)$/;"	f	file:	signature:(GCPtr pGC, SpanGroup * spanGroup, Boolean foreground)
miFillUniqueSpanGroup	lines.c	/^static void miFillUniqueSpanGroup (GCPtr \/*pGC *\/ ,$/;"	p	file:	signature:(GCPtr , SpanGroup * , Boolean )
miFreeSpanGroup	lines.c	/^miFreeSpanGroup (SpanGroup * spanGroup)$/;"	f	file:	signature:(SpanGroup * spanGroup)
miFreeSpanGroup	lines.c	/^static void miFreeSpanGroup (SpanGroup *        \/*spanGroup *\/$/;"	p	file:	signature:(SpanGroup * )
miGetZeroLineBias	lines.c	215;"	d	file:
miInitSpanGroup	lines.c	/^miInitSpanGroup (SpanGroup * spanGroup)$/;"	f	file:	signature:(SpanGroup * spanGroup)
miInitSpanGroup	lines.c	/^static void miInitSpanGroup (SpanGroup *        \/*spanGroup *\/$/;"	p	file:	signature:(SpanGroup * )
miLineArc	lines.c	/^miLineArc (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr leftFace, LineFacePtr rightFace, double xorg, double yorg, Boolean isInt)
miLineArc	lines.c	/^static void miLineArc (GCPtr pGC,$/;"	p	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr leftFace, LineFacePtr rightFace, double xorg, double yorg, Boolean isInt)
miLineArcD	lines.c	/^miLineArcD (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, double xorg, double yorg, DDXPointPtr points, int *widths, PolyEdgePtr edge1, int edgey1, Boolean edgeleft1, PolyEdgePtr edge2, int edgey2, Boolean edgeleft2)
miLineArcI	lines.c	/^miLineArcI (GCPtr pGC, int xorg, int yorg, DDXPointPtr points, int *widths)$/;"	f	file:	signature:(GCPtr pGC, int xorg, int yorg, DDXPointPtr points, int *widths)
miLineJoin	lines.c	/^miLineJoin (GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr pLeft, LineFacePtr pRight)$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr pLeft, LineFacePtr pRight)
miLineOnePoint	lines.c	/^miLineOnePoint (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SPICE_GNUC_UNUSED SpanDataPtr spanData, int x, int y)
miLineProjectingCap	lines.c	/^miLineProjectingCap (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr face, Boolean isLeft, SPICE_GNUC_UNUSED double xorg, SPICE_GNUC_UNUSED double yorg, Boolean isInt)
miPolyBuildEdge	lines.c	/^miPolyBuildEdge (SPICE_GNUC_UNUSED double x0, double y0, double k, \/* x0 * dy - y0 * dx *\/$/;"	f	file:	signature:(SPICE_GNUC_UNUSED double x0, double y0, double k, int dx, int dy, int xi, int yi, int left, PolyEdgePtr edge)
miPolyBuildEdge	lines.c	/^static int miPolyBuildEdge (double x0, double y0, double k, int dx, int dy,$/;"	p	file:	signature:(double x0, double y0, double k, int dx, int dy, int xi, int yi, int left, PolyEdgePtr edge)
miPolyBuildPoly	lines.c	/^miPolyBuildPoly (PolyVertexPtr vertices,$/;"	f	file:	signature:(PolyVertexPtr vertices, PolySlopePtr slopes, int count, int xi, int yi, PolyEdgePtr left, PolyEdgePtr right, int *pnleft, int *pnright, int *h)
miPolyBuildPoly	lines.c	/^static int miPolyBuildPoly (PolyVertexPtr vertices, PolySlopePtr slopes,$/;"	p	file:	signature:(PolyVertexPtr vertices, PolySlopePtr slopes, int count, int xi, int yi, PolyEdgePtr left, PolyEdgePtr right, int *pnleft, int *pnright, int *h)
miRoundCapClip	lines.c	/^miRoundCapClip (LineFacePtr face, Boolean isInt, PolyEdgePtr edge, Boolean * leftEdge)$/;"	f	file:	signature:(LineFacePtr face, Boolean isInt, PolyEdgePtr edge, Boolean * leftEdge)
miRoundCapClip	lines.c	/^static int miRoundCapClip (LineFacePtr \/*face *\/ ,$/;"	p	file:	signature:(LineFacePtr , Boolean , PolyEdgePtr , Boolean * )
miRoundJoinClip	lines.c	/^miRoundJoinClip (LineFacePtr pLeft, LineFacePtr pRight,$/;"	f	file:	signature:(LineFacePtr pLeft, LineFacePtr pRight, PolyEdgePtr edge1, PolyEdgePtr edge2, int *y1, int *y2, Boolean * left1, Boolean * left2)
miRoundJoinClip	lines.c	/^static void miRoundJoinClip (LineFacePtr \/*pLeft *\/ ,$/;"	p	file:	signature:(LineFacePtr , LineFacePtr , PolyEdgePtr , PolyEdgePtr , int * , int * , Boolean * , Boolean * )
miRoundJoinFace	lines.c	/^miRoundJoinFace (LineFacePtr face, PolyEdgePtr edge, Boolean * leftEdge)$/;"	f	file:	signature:(LineFacePtr face, PolyEdgePtr edge, Boolean * leftEdge)
miSetupSpanData	lines.c	/^miSetupSpanData (GCPtr pGC, SpanDataPtr spanData, int npt)$/;"	f	file:	signature:(GCPtr pGC, SpanDataPtr spanData, int npt)
miSpansCarefulRop	lines.c	127;"	d	file:
miSpansEasyRop	lines.c	128;"	d	file:
miStepDash	lines.c	/^miStepDash (int dist,           \/* distance to step *\/$/;"	f	file:	signature:(int dist, int *pDashIndex, unsigned char *pDash, int numInDashList, int *pDashOffset )
miSubtractSpans	lines.c	/^miSubtractSpans (SpanGroup * spanGroup, Spans * sub)$/;"	f	file:	signature:(SpanGroup * spanGroup, Spans * sub)
miWideDash	lines.c	/^miWideDash (GCPtr pGC, int mode, int npt, DDXPointPtr pPts)$/;"	f	signature:(GCPtr pGC, int mode, int npt, DDXPointPtr pPts)
miWideDash	lines.c	84;"	d	file:
miWideDashSegment	lines.c	/^miWideDashSegment (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, SpanDataPtr spanData, int *pDashOffset, int *pDashIndex, int x1, int y1, int x2, int y2, Boolean projectLeft, Boolean projectRight, LineFacePtr leftFace, LineFacePtr rightFace)
miWideLine	lines.c	/^miWideLine (GCPtr pGC, int mode, int npt, DDXPointPtr pPts)$/;"	f	signature:(GCPtr pGC, int mode, int npt, DDXPointPtr pPts)
miWideLine	lines.c	85;"	d	file:
miWideSegment	lines.c	/^miWideSegment (GCPtr pGC,$/;"	f	file:	signature:(GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int x1, int y1, int x2, int y2, Boolean projectLeft, Boolean projectRight, LineFacePtr leftFace, LineFacePtr rightFace)
miZeroClipLine	lines.c	/^miZeroClipLine (int xmin, int ymin, int xmax, int ymax,$/;"	f	file:	signature:(int xmin, int ymin, int xmax, int ymax, int *new_x1, int *new_y1, int *new_x2, int *new_y2, unsigned int adx, unsigned int ady, int *pt1_clipped, int *pt2_clipped, int octant, unsigned int bias, int oc1, int oc2)
miZeroClipLine	lines.c	/^static int miZeroClipLine (int \/*xmin *\/ ,$/;"	p	file:	signature:(int , int , int , int , int * , int * , int * , int * , unsigned int , unsigned int , int * , int * , int , unsigned int , int , int )
miZeroDashLine	lines.c	/^miZeroDashLine (GCPtr pgc, int mode, int nptInit,       \/* number of points in polyline *\/$/;"	f	signature:(GCPtr pgc, int mode, int nptInit, DDXPointRec * pptInit )
miZeroDashLine	lines.c	83;"	d	file:
miZeroLine	lines.c	/^miZeroLine (GCPtr pGC, int mode,        \/* Origin or Previous *\/$/;"	f	signature:(GCPtr pGC, int mode, int npt, DDXPointPtr pptInit)
miZeroLine	lines.c	82;"	d	file:
mode	messages.h	/^    uint32_t mode; \/\/SPICE_AUDIO_DATA_MODE_?$/;"	m	struct:SpiceMsgPlaybackMode	access:public
mode	messages.h	/^    uint32_t mode;$/;"	m	struct:SpiceMsgcMainMouseModeRequest	access:public
mode	snd_codec.c	/^    int mode;$/;"	m	struct:__anon16	file:	access:public
modifiers	messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgInputsKeyModifiers	access:public
modifiers	messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgcKeyModifiers	access:public
more_io_bytes	lz.c	/^static inline int more_io_bytes(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
more_io_words	quic.c	/^static void more_io_words(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
more_lines	lz.h	/^    int (*more_lines)(LzUsrContext *usr, uint8_t **lines);      \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext	access:public
more_lines	quic.h	/^    int (*more_lines)(QuicUsrContext *usr, uint8_t **lines); \/\/ on return the last line of previous$/;"	m	struct:QuicUsrContext	access:public
more_paths	glc.c	/^static void more_paths(InternalPath *path)$/;"	f	file:	signature:(InternalPath *path)
more_points	glc.c	/^static void more_points(InternalPath *path)$/;"	f	file:	signature:(InternalPath *path)
more_segments	glc.c	/^static void more_segments(InternalPath *path)$/;"	f	file:	signature:(InternalPath *path)
more_space	lz.h	/^    int (*more_space)(LzUsrContext *usr, uint8_t **io_ptr);     \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext	access:public
more_space	quic.h	/^    int (*more_space)(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed);$/;"	m	struct:QuicUsrContext	access:public
msg_SpiceMsgAudioMute	client_marshallers.h	/^    void (*msg_SpiceMsgAudioMute)(SpiceMarshaller *m, SpiceMsgAudioMute *msg);$/;"	m	struct:__anon31	access:public
msg_SpiceMsgAudioVolume	client_marshallers.h	/^    void (*msg_SpiceMsgAudioVolume)(SpiceMarshaller *m, SpiceMsgAudioVolume *msg);$/;"	m	struct:__anon31	access:public
msg_SpiceMsgData	client_marshallers.h	/^    void (*msg_SpiceMsgData)(SpiceMarshaller *m, SpiceMsgData *msg);$/;"	m	struct:__anon31	access:public
msg_SpiceMsgEmpty	client_marshallers.h	/^    void (*msg_SpiceMsgEmpty)(SpiceMarshaller *m, SpiceMsgEmpty *msg);$/;"	m	struct:__anon31	access:public
msgc_ack_sync	client_marshallers.h	/^    void (*msgc_ack_sync)(SpiceMarshaller *m, SpiceMsgcAckSync *msg);$/;"	m	struct:__anon31	access:public
msgc_disconnecting	client_marshallers.h	/^    void (*msgc_disconnecting)(SpiceMarshaller *m, SpiceMsgDisconnect *msg);$/;"	m	struct:__anon31	access:public
msgc_display_init	client_marshallers.h	/^    void (*msgc_display_init)(SpiceMarshaller *m, SpiceMsgcDisplayInit *msg);$/;"	m	struct:__anon31	access:public
msgc_display_stream_report	client_marshallers.h	/^    void (*msgc_display_stream_report)(SpiceMarshaller *m, SpiceMsgcDisplayStreamReport *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_key_down	client_marshallers.h	/^    void (*msgc_inputs_key_down)(SpiceMarshaller *m, SpiceMsgcKeyDown *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_key_modifiers	client_marshallers.h	/^    void (*msgc_inputs_key_modifiers)(SpiceMarshaller *m, SpiceMsgcKeyModifiers *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_key_up	client_marshallers.h	/^    void (*msgc_inputs_key_up)(SpiceMarshaller *m, SpiceMsgcKeyUp *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_mouse_motion	client_marshallers.h	/^    void (*msgc_inputs_mouse_motion)(SpiceMarshaller *m, SpiceMsgcMouseMotion *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_mouse_position	client_marshallers.h	/^    void (*msgc_inputs_mouse_position)(SpiceMarshaller *m, SpiceMsgcMousePosition *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_mouse_press	client_marshallers.h	/^    void (*msgc_inputs_mouse_press)(SpiceMarshaller *m, SpiceMsgcMousePress *msg);$/;"	m	struct:__anon31	access:public
msgc_inputs_mouse_release	client_marshallers.h	/^    void (*msgc_inputs_mouse_release)(SpiceMarshaller *m, SpiceMsgcMouseRelease *msg);$/;"	m	struct:__anon31	access:public
msgc_main_agent_start	client_marshallers.h	/^    void (*msgc_main_agent_start)(SpiceMarshaller *m, SpiceMsgcMainAgentStart *msg);$/;"	m	struct:__anon31	access:public
msgc_main_agent_token	client_marshallers.h	/^    void (*msgc_main_agent_token)(SpiceMarshaller *m, SpiceMsgcMainAgentTokens *msg);$/;"	m	struct:__anon31	access:public
msgc_main_client_info	client_marshallers.h	/^    void (*msgc_main_client_info)(SpiceMarshaller *m, SpiceMsgcClientInfo *msg);$/;"	m	struct:__anon31	access:public
msgc_main_migrate_dst_do_seamless	client_marshallers.h	/^    void (*msgc_main_migrate_dst_do_seamless)(SpiceMarshaller *m, SpiceMsgcMainMigrateDstDoSeamless *msg);$/;"	m	struct:__anon31	access:public
msgc_main_mouse_mode_request	client_marshallers.h	/^    void (*msgc_main_mouse_mode_request)(SpiceMarshaller *m, SpiceMsgcMainMouseModeRequest *msg);$/;"	m	struct:__anon31	access:public
msgc_pong	client_marshallers.h	/^    void (*msgc_pong)(SpiceMarshaller *m, SpiceMsgPing *msg);$/;"	m	struct:__anon31	access:public
msgc_port_event	client_marshallers.h	/^    void (*msgc_port_event)(SpiceMarshaller *m, SpiceMsgcPortEvent *msg);$/;"	m	struct:__anon31	access:public
msgc_record_data	client_marshallers.h	/^    void (*msgc_record_data)(SpiceMarshaller *m, SpiceMsgcRecordPacket *msg);$/;"	m	struct:__anon31	access:public
msgc_record_mode	client_marshallers.h	/^    void (*msgc_record_mode)(SpiceMarshaller *m, SpiceMsgcRecordMode *msg);$/;"	m	struct:__anon31	access:public
msgc_record_start_mark	client_marshallers.h	/^    void (*msgc_record_start_mark)(SpiceMarshaller *m, SpiceMsgcRecordStartMark *msg);$/;"	m	struct:__anon31	access:public
msgc_smartcard_atr	client_marshallers.h	/^    void (*msgc_smartcard_atr)(SpiceMarshaller *m, VSCMsgATR *msg);$/;"	m	struct:__anon31	access:public
msgc_smartcard_data	client_marshallers.h	/^    void (*msgc_smartcard_data)(SpiceMarshaller *m, SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out);$/;"	m	struct:__anon31	access:public
msgc_smartcard_error	client_marshallers.h	/^    void (*msgc_smartcard_error)(SpiceMarshaller *m, VSCMsgError *msg);$/;"	m	struct:__anon31	access:public
msgc_smartcard_header	client_marshallers.h	/^    void (*msgc_smartcard_header)(SpiceMarshaller *m, VSCMsgHeader *msg);$/;"	m	struct:__anon31	access:public
msgc_smartcard_reader_add	client_marshallers.h	/^    void (*msgc_smartcard_reader_add)(SpiceMarshaller *m, VSCMsgReaderAdd *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_service_add	client_marshallers.h	/^    void (*msgc_tunnel_service_add)(SpiceMarshaller *m, SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out);$/;"	m	struct:__anon31	access:public
msgc_tunnel_service_remove	client_marshallers.h	/^    void (*msgc_tunnel_service_remove)(SpiceMarshaller *m, SpiceMsgcTunnelRemoveService *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_closed	client_marshallers.h	/^    void (*msgc_tunnel_socket_closed)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosed *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_closed_ack	client_marshallers.h	/^    void (*msgc_tunnel_socket_closed_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosedAck *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_data	client_marshallers.h	/^    void (*msgc_tunnel_socket_data)(SpiceMarshaller *m, SpiceMsgcTunnelSocketData *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_fin	client_marshallers.h	/^    void (*msgc_tunnel_socket_fin)(SpiceMarshaller *m, SpiceMsgcTunnelSocketFin *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_open_ack	client_marshallers.h	/^    void (*msgc_tunnel_socket_open_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenAck *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_open_nack	client_marshallers.h	/^    void (*msgc_tunnel_socket_open_nack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenNack *msg);$/;"	m	struct:__anon31	access:public
msgc_tunnel_socket_token	client_marshallers.h	/^    void (*msgc_tunnel_socket_token)(SpiceMarshaller *m, SpiceMsgcTunnelSocketTokens *msg);$/;"	m	struct:__anon31	access:public
multi_media_time	messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceMsgMainInit	access:public
multi_media_time	messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceStreamDataHeader	access:public
mute	messages.h	/^    uint8_t mute;$/;"	m	struct:SpiceMsgAudioMute	access:public
mutex	canvas_utils.h	/^    HANDLE mutex;$/;"	m	struct:PixmanData	access:public
mutex_t	mutex.h	/^typedef CRITICAL_SECTION mutex_t;$/;"	t
nGRcodewords	quic.c	/^    unsigned int nGRcodewords[MAXNUMCODES];      \/* indexed by code number, contains number of$/;"	m	struct:QuicFamily	file:	access:public
n_buckets_5bpc	quic.c	/^    unsigned int n_buckets_5bpc;$/;"	m	struct:Encoder	file:	access:public
n_buckets_8bpc	quic.c	/^    unsigned int n_buckets_8bpc;$/;"	m	struct:Encoder	file:	access:public
n_items	marshaller.c	/^    int n_items;$/;"	m	struct:SpiceMarshaller	file:	access:public
name	messages.h	/^    uint64_t name;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
name	messages.h	/^    uint8_t *name;$/;"	m	struct:SpiceMsgPortInit	access:public
name	messages.h	/^    uint8_t name[0];$/;"	m	struct:SpiceMsgMainName	access:public
name_len	messages.h	/^    uint32_t name_len;$/;"	m	struct:SpiceMsgMainName	access:public
name_size	messages.h	/^    uint32_t name_size;$/;"	m	struct:SpiceMsgPortInit	access:public
nchannels	messages.h	/^    uint8_t nchannels;$/;"	m	struct:SpiceMsgAudioVolume	access:public
need_init	gdi_canvas.c	/^static int need_init = 1;$/;"	v	file:
need_init	gl_canvas.c	/^static int need_init = 1;$/;"	v	file:
need_init	quic.c	/^static int need_init = TRUE;$/;"	v	file:
need_init	sw_canvas.c	/^static int need_init = 1;$/;"	v	file:
nelements	generated_client_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
nelements	generated_client_demarshallers1.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
nelements	generated_server_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:	access:public
next	glc.c	/^    TassVertex *next;$/;"	m	struct:TassVertex	file:	access:public
next	glc.c	/^    TassVertexBuf *next;$/;"	m	struct:TassVertexBuf	file:	access:public
next	lz.c	/^    LzImageSegment    *next;$/;"	m	struct:LzImageSegment	file:	access:public
next	marshaller.c	/^    MarshallerBuffer *next;$/;"	m	struct:MarshallerBuffer	file:	access:public
next	marshaller.c	/^    SpiceMarshaller *next;$/;"	m	struct:SpiceMarshaller	file:	access:public
next	ring.h	/^    RingItem *next;$/;"	m	struct:Ring	access:public
nofree	generated_client_demarshallers.c	/^static void nofree(SPICE_GNUC_UNUSED uint8_t *data)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED uint8_t *data)
nofree	generated_client_demarshallers1.c	/^static void nofree(SPICE_GNUC_UNUSED uint8_t *data)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED uint8_t *data)
nofree	generated_server_demarshallers.c	/^static void nofree(SPICE_GNUC_UNUSED uint8_t *data)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED uint8_t *data)
notGRcwlen	quic.c	/^    unsigned int notGRcwlen[MAXNUMCODES];        \/* indexed by code number, contains codeword$/;"	m	struct:QuicFamily	file:	access:public
notGRprefixmask	quic.c	/^    unsigned int notGRprefixmask[MAXNUMCODES];   \/* indexed by code number, contains mask to$/;"	m	struct:QuicFamily	file:	access:public
notGRsuffixlen	quic.c	/^    unsigned int notGRsuffixlen[MAXNUMCODES];    \/* indexed by code number, contains suffix$/;"	m	struct:QuicFamily	file:	access:public
numInDashList	lines.h	/^    unsigned short numInDashList;$/;"	m	struct:lineGC	access:public
num_channels	quic.c	/^    unsigned int num_channels;$/;"	m	struct:Encoder	file:	access:public
num_chunks	mem.h	/^    uint32_t     num_chunks;$/;"	m	struct:SpiceChunks	access:public
num_dashes	glc.c	/^    int num_dashes;$/;"	m	struct:LineDash	file:	access:public
num_drops	messages.h	/^    uint32_t num_drops;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
num_ents	draw.h	/^    uint16_t num_ents;$/;"	m	struct:SpicePalette	access:public
num_frames	messages.h	/^    uint32_t num_frames;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
num_of_channels	messages.h	/^    uint32_t num_of_channels;$/;"	m	struct:SpiceMsgChannels	access:public
num_points	canvas_base.c	/^    int num_points;$/;"	m	struct:__anon30	file:	access:public
num_rects	draw.h	/^  uint32_t num_rects;$/;"	m	struct:SpiceClipRects	access:public
num_segments	draw.h	/^  uint32_t num_segments;$/;"	m	struct:SpicePath	access:public
num_segments	glc.c	/^    int num_segments;$/;"	m	struct:Pathpath	file:	access:public
num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgMainAgentTokens	access:public
num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgTunnelSocketTokens	access:public
num_tokens	messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgcTunnelSocketTokens	access:public
offset	generated_client_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
offset	generated_client_demarshallers1.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
offset	generated_server_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:	access:public
offset	glc.c	/^    double offset;$/;"	m	struct:LineDash	file:	access:public
offset	marshaller.c	/^    size_t offset;$/;"	m	struct:__anon35	file:	access:public
offset	mem.h	/^    size_t offset;$/;"	m	struct:SpiceBuffer	access:public
oglctx_destroy	ogl_ctx.c	/^void oglctx_destroy(OGLCtx *ctx)$/;"	f	signature:(OGLCtx *ctx)
oglctx_destroy	ogl_ctx.h	/^void oglctx_destroy(OGLCtx *ctx);$/;"	p	signature:(OGLCtx *ctx)
oglctx_make_current	ogl_ctx.c	/^void oglctx_make_current(OGLCtx *ctx)$/;"	f	signature:(OGLCtx *ctx)
oglctx_make_current	ogl_ctx.h	/^void oglctx_make_current(OGLCtx *ctx);$/;"	p	signature:(OGLCtx *ctx)
oglctx_type_str	ogl_ctx.c	/^const char *oglctx_type_str(OGLCtx *ctx)$/;"	f	signature:(OGLCtx *ctx)
oglctx_type_str	ogl_ctx.h	/^const char *oglctx_type_str(OGLCtx *ctx);$/;"	p	signature:(OGLCtx *ctx)
one_byte_pixel_t	lz.c	/^typedef struct ATTR_PACKED one_byte_pixel_t {$/;"	s	file:
one_byte_pixel_t	lz.c	/^} one_byte_pixel_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
one_byte_pixel_t	quic.c	/^typedef struct ATTR_PACKED one_byte_pixel_t {$/;"	s	file:
one_byte_pixel_t::a	lz.c	/^    uint8_t a;$/;"	m	struct:one_byte_pixel_t	file:	access:public
one_byte_pixel_t::a	quic.c	/^    BYTE a;$/;"	m	struct:one_byte_pixel_t	file:	access:public
one_byte_t	quic.c	/^} one_byte_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
opaque	marshaller.c	/^    void *opaque;$/;"	m	struct:__anon34	file:	access:public
opened	messages.h	/^    uint8_t opened;$/;"	m	struct:SpiceMsgPortInit	access:public
openssl_verify	ssl_verify.c	/^static int openssl_verify(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:	signature:(int preverify_ok, X509_STORE_CTX *ctx)
ops	canvas_base.h	/^    SpiceJpegDecoderOps *ops;$/;"	m	struct:_SpiceJpegDecoder	access:public
ops	canvas_base.h	/^  SpiceCanvasOps *ops;$/;"	m	struct:_SpiceCanvas	access:public
ops	canvas_base.h	/^  SpiceGlzDecoderOps *ops;$/;"	m	struct:_SpiceGlzDecoder	access:public
ops	canvas_base.h	/^  SpiceImageCacheOps *ops;$/;"	m	struct:_SpiceImageCache	access:public
ops	canvas_base.h	/^  SpicePaletteCacheOps *ops;$/;"	m	struct:_SpicePaletteCache	access:public
ops	canvas_base.h	/^  SpiceZlibDecoderOps *ops;$/;"	m	struct:_SpiceZlibDecoder	access:public
ops	canvas_base.h	/^ SpiceImageSurfacesOps *ops;$/;"	m	struct:_SpiceImageSurfaces	access:public
ops	lines.h	/^    lineGCOps *ops;$/;"	m	struct:lineGC	access:public
opus_decoder	snd_codec.c	/^    OpusDecoder *opus_decoder;$/;"	m	struct:__anon16	file:	access:public
opus_encoder	snd_codec.c	/^    OpusEncoder *opus_encoder;$/;"	m	struct:__anon16	file:	access:public
out_surface	canvas_utils.h	/^    pixman_image_t       *out_surface;$/;"	m	struct:LzDecodeUsrData	access:public
owner	glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPat	file:	access:public
owner	glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPath	file:	access:public
pad	lz.c	/^    uint8_t pad;$/;"	m	struct:rgb32_pixel_t	file:	access:public
pad	quic.c	/^    BYTE pad;$/;"	m	struct:rgb32_pixel_t	file:	access:public
padding	messages.h	/^    uint8_t padding;$/;"	m	struct:SpiceMsgEmpty	access:public
palette	draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceBitmap	access:public
palette	draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceLZPLTData	access:public
palette	lz.c	/^    const SpicePalette    *palette;    \/\/ for decoding images with palettes to rgb$/;"	m	struct:Encoder	file:	access:public
palette_cache	canvas_base.c	/^    SpicePaletteCache *palette_cache;$/;"	m	struct:CanvasBase	file:	access:public
palette_id	draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceBitmap	access:public
palette_id	draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceLZPLTData	access:public
pallet	glc.h	/^    uint32_t *pallet;$/;"	m	struct:GLCPImage	access:public
parent	canvas_base.c	/^    SpiceCanvas parent;$/;"	m	struct:CanvasBase	file:	access:public
parse	generated_client_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
parse	generated_client_demarshallers1.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
parse	generated_server_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:	access:public
parse_CursorChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_CursorChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_CursorChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_CursorChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_CursorChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_CursorChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_DisplayChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_DisplayChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_DisplayChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_DisplayChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_DisplayChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_DisplayChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_InputsChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_InputsChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_InputsChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_InputsChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_InputsChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_InputsChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_MainChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_MainChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_MainChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_MainChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_MainChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_MainChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_PlaybackChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_PlaybackChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_PlaybackChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_PlaybackChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_PlaybackChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_PlaybackChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_PortChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_PortChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_PortChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_PortChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_RecordChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_RecordChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_RecordChannel_msg	generated_client_demarshallers1.c	/^static uint8_t * parse_RecordChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_RecordChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_RecordChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_SmartcardChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_SmartcardChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_SmartcardChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_SmartcardChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_SpiceMsgAudioMute	generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgAudioMute(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgAudioVolume	generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgAudioVolume(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgData	generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgData	generated_client_demarshallers1.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgData	generated_server_demarshallers.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgEmpty	generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgEmpty	generated_client_demarshallers1.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_SpiceMsgEmpty	generated_server_demarshallers.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_TunnelChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_TunnelChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_TunnelChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_TunnelChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_UsbredirChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_UsbredirChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_UsbredirChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_UsbredirChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_WebDAVChannel_msg	generated_client_demarshallers.c	/^static uint8_t * parse_WebDAVChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_WebDAVChannel_msgc	generated_server_demarshallers.c	/^static uint8_t * parse_WebDAVChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
parse_array_int32	generated_client_demarshallers.c	/^static uint8_t * parse_array_int32(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_array_int32	generated_client_demarshallers1.c	/^static uint8_t * parse_array_int32(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_array_uint8	generated_client_demarshallers.c	/^static uint8_t * parse_array_uint8(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_func_t	generated_client_demarshallers.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_func_t	generated_client_demarshallers1.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_func_t	generated_server_demarshallers.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_msg_cursor_init	generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_init	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_inval_one	generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_inval_one(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_inval_one	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_inval_one(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_move	generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_move(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_move	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_move(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_set	generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_set(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_set	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_set(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_trail	generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_trail(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_cursor_trail	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_trail(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_disconnecting	generated_client_demarshallers.c	/^static uint8_t * parse_msg_disconnecting(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_disconnecting	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_disconnecting(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_copy_bits	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_copy_bits(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_copy_bits	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_copy_bits(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_alpha_blend	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_alpha_blend(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_alpha_blend	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_alpha_blend(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_blackness	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_blackness(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_blackness	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_blackness(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_blend	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_blend(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_blend	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_blend(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_composite	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_composite(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_copy	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_copy(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_copy	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_copy(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_fill	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_fill(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_fill	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_fill(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_invers	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_invers(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_invers	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_invers(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_opaque	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_opaque(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_opaque	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_opaque(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_rop3	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_rop3(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_rop3	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_rop3(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_stroke	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_stroke(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_stroke	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_stroke(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_text	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_text(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_text	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_text(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_transparent	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_transparent(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_transparent	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_transparent(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_whiteness	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_whiteness(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_draw_whiteness	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_whiteness(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_all_pixmaps	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_all_pixmaps(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_all_pixmaps	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_all_pixmaps(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_list	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_list(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_list	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_list(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_palette	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_palette(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_inval_palette	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_palette(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_mode	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_mode	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_monitors_config	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_monitors_config(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_activate_report	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_activate_report(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_clip	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_clip(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_clip	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_clip(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_create	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_create(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_create	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_create(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_data	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_data	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_data_sized	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_data_sized(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_destroy	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_destroy(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_stream_destroy	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_destroy(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_surface_create	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_surface_create(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_display_surface_destroy	generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_surface_destroy(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_func_t	generated_client_demarshallers.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_func_t	generated_client_demarshallers1.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_func_t	generated_server_demarshallers.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_inputs_init	generated_client_demarshallers.c	/^static uint8_t * parse_msg_inputs_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_inputs_init	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_inputs_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_inputs_key_modifiers	generated_client_demarshallers.c	/^static uint8_t * parse_msg_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_inputs_key_modifiers	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_agent_connected_tokens	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_connected_tokens(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_agent_disconnected	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_disconnected(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_agent_disconnected	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_agent_disconnected(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_agent_token	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_token(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_agent_token	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_agent_token(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_channels_list	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_channels_list(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_channels_list	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_channels_list(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_init	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_init	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_migrate_begin	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_begin(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_migrate_begin	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_migrate_begin(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_migrate_begin_seamless	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_begin_seamless(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_migrate_switch_host	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_switch_host(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_migrate_switch_host	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_migrate_switch_host(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_mouse_mode	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_mouse_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_mouse_mode	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_mouse_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_multi_media_time	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_multi_media_time(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_multi_media_time	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_multi_media_time(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_name	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_name(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_main_uuid	generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_uuid(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_migrate	generated_client_demarshallers.c	/^static uint8_t * parse_msg_migrate(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_migrate	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_migrate(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_notify	generated_client_demarshallers.c	/^static uint8_t * parse_msg_notify(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_notify	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_notify(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_ping	generated_client_demarshallers.c	/^static uint8_t * parse_msg_ping(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_ping	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_ping(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_data	generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_data	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_latency	generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_latency(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_mode	generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_mode	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_start	generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_start(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_playback_start	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_start(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_port_event	generated_client_demarshallers.c	/^static uint8_t * parse_msg_port_event(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_port_init	generated_client_demarshallers.c	/^static uint8_t * parse_msg_port_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_record_start	generated_client_demarshallers.c	/^static uint8_t * parse_msg_record_start(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_record_start	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_record_start(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_set_ack	generated_client_demarshallers.c	/^static uint8_t * parse_msg_set_ack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_set_ack	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_set_ack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_smartcard_data	generated_client_demarshallers.c	/^static uint8_t * parse_msg_smartcard_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_init	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_service_ip_map	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_service_ip_map(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_close	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_close(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_closed_ack	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_closed_ack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_data	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_fin	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_fin(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_open	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_open(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_tunnel_socket_token	generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_token(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_wait_for_channels	generated_client_demarshallers.c	/^static uint8_t * parse_msg_wait_for_channels(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msg_wait_for_channels	generated_client_demarshallers1.c	/^static uint8_t * parse_msg_wait_for_channels(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_ack_sync	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_ack_sync(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_disconnecting	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_disconnecting(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_display_init	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_display_init(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_display_stream_report	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_display_stream_report(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_key_down	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_down(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_key_modifiers	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_key_up	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_up(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_mouse_motion	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_motion(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_mouse_position	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_position(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_mouse_press	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_press(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_inputs_mouse_release	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_release(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_main_agent_start	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_agent_start(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_main_agent_token	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_agent_token(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_main_client_info	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_client_info(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_main_migrate_dst_do_seamless	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_migrate_dst_do_seamless(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_main_mouse_mode_request	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_mouse_mode_request(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_pong	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_pong(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_port_event	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_port_event(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_record_data	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_record_mode	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_mode(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_record_start_mark	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_start_mark(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_smartcard_reader_add	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_smartcard_reader_add(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_service_add	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_service_add(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_service_remove	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_service_remove(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_closed	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_closed(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_closed_ack	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_closed_ack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_data	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_data(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_fin	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_fin(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_open_ack	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_open_ack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_open_nack	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_open_nack(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_msgc_tunnel_socket_token	generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_token(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, SPICE_GNUC_UNUSED int minor, size_t *size, message_destructor_t *free_message)
parse_struct_SpiceClipRects	generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceClipRects(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpiceClipRects	generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceClipRects(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpiceImage	generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceImage(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpiceImage	generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceImage(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpicePalette	generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpicePalette(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpicePalette	generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpicePalette(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpicePath	generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpicePath(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpicePath	generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpicePath(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpiceString	generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceString(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
parse_struct_SpiceString	generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceString(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, SPICE_GNUC_UNUSED uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, SPICE_GNUC_UNUSED int minor)
pat	draw.h	/^    SpiceImage *pat;$/;"	m	struct:SpicePattern	access:public
pat	glc.c	/^    InternalPat *pat;$/;"	m	struct:InternaCtx	file:	access:public
pat	rop3.c	/^ROP3_HANDLERS(PSDPSanaxx, (~(*pat & *src) & *dest) ^ *src ^ *pat, 0x16);$/;"	v
pat	rop3.c	/^ROP3_HANDLERS(PSDPSaoxx, ((*src & *pat) | *dest) ^ *src ^ *pat, 0xd6);$/;"	v
pat	rop3.c	/^ROP3_HANDLERS(PSDPSoaxx, ((*src | *pat) & *dest) ^ *src ^ *pat, 0x94);$/;"	v
pat	rop3.c	/^ROP3_HANDLERS(PSDPSonoxx, (~(*src | *pat) | *dest) ^ *src ^ *pat, 0x97);$/;"	v
path	draw.h	/^    SpicePath *path;$/;"	m	struct:SpiceStroke	access:public
path_stroke	glc.c	/^    PathStroke path_stroke;$/;"	m	struct:InternaCtx	file:	access:public
paths	glc.c	/^    Path *paths;$/;"	m	struct:InternalPath	file:	access:public
paths_pos	glc.c	/^    int paths_pos;$/;"	m	struct:InternalPath	file:	access:public
paths_size	glc.c	/^    int paths_size;$/;"	m	struct:InternalPath	file:	access:public
pattern	draw.h	/^        SpicePattern pattern;$/;"	m	union:SpiceBrush::__anon18	access:public
pbuf_create	ogl_ctx.c	/^OGLCtx *pbuf_create(int width, int heigth)$/;"	f	signature:(int width, int heigth)
pbuf_create	ogl_ctx.h	/^OGLCtx *pbuf_create(int width, int heigth);$/;"	p	signature:(int width, int heigth)
pcounters	quic.c	/^    COUNTER *pcounters;     \/* pointer to array of counters *\/$/;"	m	struct:s_bucket	file:	access:public
pixels	glc.h	/^    uint8_t *pixels;$/;"	m	struct:GLCPImage	access:public
pixman_format_compatible	pixman_utils.c	/^static int pixman_format_compatible (pixman_format_code_t dest_format,$/;"	f	file:	signature:(pixman_format_code_t dest_format, pixman_format_code_t src_format)
pixman_image_add_data	canvas_utils.c	/^pixman_image_add_data(pixman_image_t *image)$/;"	f	file:	signature:(pixman_image_t *image)
pixmap	ogl_ctx.c	/^    Pixmap pixmap;$/;"	m	struct:OGLPixmapCtx	file:	access:public
pixmap_cache_id	messages.h	/^    uint8_t pixmap_cache_id;$/;"	m	struct:SpiceMsgcDisplayInit	access:public
pixmap_cache_size	messages.h	/^    int64_t pixmap_cache_size; \/\/in pixels$/;"	m	struct:SpiceMsgcDisplayInit	access:public
pixmap_create	ogl_ctx.c	/^OGLCtx *pixmap_create(int width, int heigth)$/;"	f	signature:(int width, int heigth)
pixmap_create	ogl_ctx.h	/^OGLCtx *pixmap_create(int width, int heigth);$/;"	p	signature:(int width, int heigth)
point	glc.c	/^    PathPoint point;$/;"	m	struct:TassVertex	file:	access:public
pointer_ref	marshaller.c	/^    MarshallerRef pointer_ref;$/;"	m	struct:SpiceMarshaller	file:	access:public
points	canvas_base.c	/^    SpicePoint *points;$/;"	m	struct:__anon30	file:	access:public
points	draw.h	/^    SpicePointFix points[0];$/;"	m	struct:SpicePathSeg	access:public
points	glc.c	/^    PathPoint *points;$/;"	m	struct:InternalPath	file:	access:public
points	lines.c	/^    DDXPointPtr points;         \/* pointer to list of start points  *\/$/;"	m	struct:__anon37	file:	access:public
points_pos	glc.c	/^    int points_pos;$/;"	m	struct:InternalPath	file:	access:public
points_size	glc.c	/^    int points_size;$/;"	m	struct:InternalPath	file:	access:public
port	messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMigrationDstInfo	access:public
port	messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
port	messages.h	/^    uint32_t port;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
pos	draw.h	/^    SpicePoint pos;$/;"	m	struct:SpicePattern	access:public
pos	draw.h	/^    SpicePoint pos;$/;"	m	struct:SpiceQMask	access:public
pos	gdi_canvas.c	/^    SpicePoint pos;$/;"	m	struct:BitmapData	file:	access:public
position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorInit	access:public
position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorMove	access:public
position	messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorSet	access:public
prev	ring.h	/^    RingItem *prev;$/;"	m	struct:Ring	access:public
prev_hbitmap	gdi_canvas.c	/^    HBITMAP prev_hbitmap;$/;"	m	struct:BitmapData	file:	access:public
private_data	gl_canvas.c	/^    void *private_data;$/;"	m	struct:GLCanvas	file:	access:public
private_data	sw_canvas.c	/^    uint32_t *private_data;$/;"	m	struct:SwCanvas	file:	access:public
private_data_size	gl_canvas.c	/^    int private_data_size;$/;"	m	struct:GLCanvas	file:	access:public
private_data_size	sw_canvas.c	/^    int private_data_size;$/;"	m	struct:SwCanvas	file:	access:public
private_tex	glc.c	/^    GLuint private_tex;$/;"	m	struct:InternaCtx	file:	access:public
private_tex_height	glc.c	/^    int private_tex_height;$/;"	m	struct:InternaCtx	file:	access:public
private_tex_width	glc.c	/^    int private_tex_width;$/;"	m	struct:InternaCtx	file:	access:public
pub_key_data	messages.h	/^    uint8_t *pub_key_data;$/;"	m	struct:SpiceMigrationDstInfo	access:public
pub_key_size	messages.h	/^    uint32_t pub_key_size;$/;"	m	struct:SpiceMigrationDstInfo	access:public
pub_key_type	messages.h	/^    uint16_t pub_key_type;$/;"	m	struct:SpiceMigrationDstInfo	access:public
pubkey	ssl_verify.h	/^    char                *pubkey;$/;"	m	struct:__anon2	access:public
pubkey_size	ssl_verify.h	/^    size_t              pubkey_size;$/;"	m	struct:__anon2	access:public
put	canvas_base.h	/^    void (*put)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
put	canvas_base.h	/^    void (*put)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
put_image	canvas_base.h	/^    void (*put_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
put_lossy	canvas_base.h	/^    void (*put_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
put_point	glc.c	/^static inline void put_point(InternalPath *path, double x, double y)$/;"	f	file:	signature:(InternalPath *path, double x, double y)
quic	canvas_base.c	/^    QuicContext *quic;$/;"	m	struct:QuicData	file:	access:public
quic	draw.h	/^        SpiceQUICData       quic;$/;"	m	union:SpiceImage::__anon17	access:public
quic_create	quic.c	/^QuicContext *quic_create(QuicUsrContext *usr)$/;"	f	signature:(QuicUsrContext *usr)
quic_create	quic.h	/^QuicContext *quic_create(QuicUsrContext *usr);$/;"	p	signature:(QuicUsrContext *usr)
quic_data	canvas_base.c	/^    QuicData quic_data;$/;"	m	struct:CanvasBase	file:	access:public
quic_decode	quic.c	/^int quic_decode(QuicContext *quic, QuicImageType type, uint8_t *buf, int stride)$/;"	f	signature:(QuicContext *quic, QuicImageType type, uint8_t *buf, int stride)
quic_decode	quic.h	/^int quic_decode(QuicContext *quic, QuicImageType type, uint8_t *buf, int stride);$/;"	p	signature:(QuicContext *quic, QuicImageType type, uint8_t *buf, int stride)
quic_decode_begin	quic.c	/^int quic_decode_begin(QuicContext *quic, uint32_t *io_ptr, unsigned int num_io_words,$/;"	f	signature:(QuicContext *quic, uint32_t *io_ptr, unsigned int num_io_words, QuicImageType *out_type, int *out_width, int *out_height)
quic_decode_begin	quic.h	/^int quic_decode_begin(QuicContext *quic, uint32_t *io_ptr, unsigned int num_io_words,$/;"	p	signature:(QuicContext *quic, uint32_t *io_ptr, unsigned int num_io_words, QuicImageType *type, int *width, int *height)
quic_destroy	quic.c	/^void quic_destroy(QuicContext *quic)$/;"	f	signature:(QuicContext *quic)
quic_destroy	quic.h	/^void quic_destroy(QuicContext *quic);$/;"	p	signature:(QuicContext *quic)
quic_encode	quic.c	/^int quic_encode(QuicContext *quic, QuicImageType type, int width, int height,$/;"	f	signature:(QuicContext *quic, QuicImageType type, int width, int height, uint8_t *line, unsigned int num_lines, int stride, uint32_t *io_ptr, unsigned int num_io_words)
quic_encode	quic.h	/^int quic_encode(QuicContext *quic, QuicImageType type, int width, int height,$/;"	p	signature:(QuicContext *quic, QuicImageType type, int width, int height, uint8_t *lines, unsigned int num_lines, int stride, uint32_t *io_ptr, unsigned int num_io_words)
quic_image_params	quic.c	/^static void quic_image_params(Encoder *encoder, QuicImageType type, int *channels, int *bpc)$/;"	f	file:	signature:(Encoder *encoder, QuicImageType type, int *channels, int *bpc)
quic_init	quic.c	/^void quic_init(void)$/;"	f	signature:(void)
quic_init	quic.h	/^void quic_init(void);$/;"	p	signature:(void)
quic_usr_error	canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void quic_usr_error(QuicUsrContext *usr, const char *fmt, ...)$/;"	f	file:	signature:(QuicUsrContext *usr, const char *fmt, ...)
quic_usr_free	canvas_base.c	/^static void quic_usr_free(QuicUsrContext *usr, void *ptr)$/;"	f	file:	signature:(QuicUsrContext *usr, void *ptr)
quic_usr_malloc	canvas_base.c	/^static void *quic_usr_malloc(QuicUsrContext *usr, int size)$/;"	f	file:	signature:(QuicUsrContext *usr, int size)
quic_usr_more_lines	canvas_base.c	/^static int quic_usr_more_lines(QuicUsrContext *usr, uint8_t **lines)$/;"	f	file:	signature:(QuicUsrContext *usr, uint8_t **lines)
quic_usr_more_space	canvas_base.c	/^static int quic_usr_more_space(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed)$/;"	f	file:	signature:(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed)
quic_usr_warn	canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void quic_usr_warn(QuicUsrContext *usr, const char *fmt, ...)$/;"	f	file:	signature:(QuicUsrContext *usr, const char *fmt, ...)
r	lz.c	/^    uint8_t r;$/;"	m	struct:rgb24_pixel_t	file:	access:public
r	lz.c	/^    uint8_t r;$/;"	m	struct:rgb32_pixel_t	file:	access:public
r	quic.c	/^    BYTE r;$/;"	m	struct:rgb24_pixel_t	file:	access:public
r	quic.c	/^    BYTE r;$/;"	m	struct:rgb32_pixel_t	file:	access:public
ram_hint	messages.h	/^    uint32_t ram_hint;$/;"	m	struct:SpiceMsgMainInit	access:public
random_region	region.c	/^static void random_region(QRegion *reg)$/;"	f	file:	signature:(QRegion *reg)
raster_ops	gdi_canvas.c	/^uint32_t raster_ops[] = {$/;"	v
read_bits	canvas_base.h	/^    void (*read_bits)(SpiceCanvas *canvas, uint8_t *dest, int dest_stride, const SpiceRect *area);$/;"	m	struct:__anon13	access:public
read_int16	generated_client_demarshallers.c	42;"	d	file:
read_int16	generated_client_demarshallers.c	59;"	d	file:
read_int16	generated_client_demarshallers1.c	42;"	d	file:
read_int16	generated_client_demarshallers1.c	59;"	d	file:
read_int16	generated_server_demarshallers.c	42;"	d	file:
read_int16	generated_server_demarshallers.c	59;"	d	file:
read_int32	generated_client_demarshallers.c	46;"	d	file:
read_int32	generated_client_demarshallers.c	63;"	d	file:
read_int32	generated_client_demarshallers1.c	46;"	d	file:
read_int32	generated_client_demarshallers1.c	63;"	d	file:
read_int32	generated_server_demarshallers.c	46;"	d	file:
read_int32	generated_server_demarshallers.c	63;"	d	file:
read_int64	generated_client_demarshallers.c	50;"	d	file:
read_int64	generated_client_demarshallers.c	67;"	d	file:
read_int64	generated_client_demarshallers1.c	50;"	d	file:
read_int64	generated_client_demarshallers1.c	67;"	d	file:
read_int64	generated_server_demarshallers.c	50;"	d	file:
read_int64	generated_server_demarshallers.c	67;"	d	file:
read_int8	generated_client_demarshallers.c	38;"	d	file:
read_int8	generated_client_demarshallers.c	55;"	d	file:
read_int8	generated_client_demarshallers1.c	38;"	d	file:
read_int8	generated_client_demarshallers1.c	55;"	d	file:
read_int8	generated_server_demarshallers.c	38;"	d	file:
read_int8	generated_server_demarshallers.c	55;"	d	file:
read_io_word	quic.c	/^static inline void read_io_word(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
read_uint16	generated_client_demarshallers.c	44;"	d	file:
read_uint16	generated_client_demarshallers.c	61;"	d	file:
read_uint16	generated_client_demarshallers1.c	44;"	d	file:
read_uint16	generated_client_demarshallers1.c	61;"	d	file:
read_uint16	generated_server_demarshallers.c	44;"	d	file:
read_uint16	generated_server_demarshallers.c	61;"	d	file:
read_uint32	generated_client_demarshallers.c	48;"	d	file:
read_uint32	generated_client_demarshallers.c	65;"	d	file:
read_uint32	generated_client_demarshallers1.c	48;"	d	file:
read_uint32	generated_client_demarshallers1.c	65;"	d	file:
read_uint32	generated_server_demarshallers.c	48;"	d	file:
read_uint32	generated_server_demarshallers.c	65;"	d	file:
read_uint64	generated_client_demarshallers.c	52;"	d	file:
read_uint64	generated_client_demarshallers.c	69;"	d	file:
read_uint64	generated_client_demarshallers1.c	52;"	d	file:
read_uint64	generated_client_demarshallers1.c	69;"	d	file:
read_uint64	generated_server_demarshallers.c	52;"	d	file:
read_uint64	generated_server_demarshallers.c	69;"	d	file:
read_uint8	generated_client_demarshallers.c	40;"	d	file:
read_uint8	generated_client_demarshallers.c	57;"	d	file:
read_uint8	generated_client_demarshallers1.c	40;"	d	file:
read_uint8	generated_client_demarshallers1.c	57;"	d	file:
read_uint8	generated_server_demarshallers.c	40;"	d	file:
read_uint8	generated_server_demarshallers.c	57;"	d	file:
reader_id	messages.h	/^    uint32_t reader_id;$/;"	m	struct:SpiceMsgSmartcard	access:public
reason	messages.h	/^    uint32_t reason; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgDisconnect	access:public
rect_contains	rect.h	/^static inline int rect_contains(const SpiceRect *big, const SpiceRect *small)$/;"	f	signature:(const SpiceRect *big, const SpiceRect *small)
rect_contains	rect.h	/^static inline int rect_contains(const SpiceRect& big, const SpiceRect& small)$/;"	f	signature:(const SpiceRect& big, const SpiceRect& small)
rect_debug	rect.h	/^static inline void rect_debug(const SpiceRect &r)$/;"	f	signature:(const SpiceRect &r)
rect_debug	rect.h	/^static inline void rect_debug(const SpiceRect *r)$/;"	f	signature:(const SpiceRect *r)
rect_get_area	rect.h	/^static inline int rect_get_area(const SpiceRect *r)$/;"	f	signature:(const SpiceRect *r)
rect_get_area	rect.h	/^static inline int rect_get_area(const SpiceRect& r)$/;"	f	signature:(const SpiceRect& r)
rect_intersects	rect.h	/^static inline int rect_intersects(const SpiceRect& r1, const SpiceRect& r2)$/;"	f	signature:(const SpiceRect& r1, const SpiceRect& r2)
rect_intersects	rect.h	/^static inline int rect_intersects(const SpiceRect* r1, const SpiceRect* r2)$/;"	f	signature:(const SpiceRect* r1, const SpiceRect* r2)
rect_is_empty	rect.h	/^static inline int rect_is_empty(const SpiceRect& r)$/;"	f	signature:(const SpiceRect& r)
rect_is_empty	rect.h	/^static inline int rect_is_empty(const SpiceRect* r)$/;"	f	signature:(const SpiceRect* r)
rect_is_equal	rect.h	/^static inline int rect_is_equal(const SpiceRect *r1, const SpiceRect *r2)$/;"	f	signature:(const SpiceRect *r1, const SpiceRect *r2)
rect_is_equal	rect.h	/^static inline int rect_is_equal(const SpiceRect& r1, const SpiceRect& r2)$/;"	f	signature:(const SpiceRect& r1, const SpiceRect& r2)
rect_is_same_size	rect.h	/^static inline int rect_is_same_size(const SpiceRect *r1, const SpiceRect *r2)$/;"	f	signature:(const SpiceRect *r1, const SpiceRect *r2)
rect_is_same_size	rect.h	/^static inline int rect_is_same_size(const SpiceRect& r1, const SpiceRect& r2)$/;"	f	signature:(const SpiceRect& r1, const SpiceRect& r2)
rect_is_valid	region.c	/^static int rect_is_valid(const SpiceRect *r)$/;"	f	file:	signature:(const SpiceRect *r)
rect_offset	rect.h	/^static inline void rect_offset(SpiceRect& r, int dx, int dy)$/;"	f	signature:(SpiceRect& r, int dx, int dy)
rect_offset	rect.h	/^static inline void rect_offset(SpiceRect* r, int dx, int dy)$/;"	f	signature:(SpiceRect* r, int dx, int dy)
rect_sect	rect.h	/^static inline void rect_sect(SpiceRect& r, const SpiceRect& bounds)$/;"	f	signature:(SpiceRect& r, const SpiceRect& bounds)
rect_sect	rect.h	/^static inline void rect_sect(SpiceRect* r, const SpiceRect* bounds)$/;"	f	signature:(SpiceRect* r, const SpiceRect* bounds)
rect_set	region.c	/^static void rect_set(SpiceRect *r, int32_t top, int32_t left, int32_t bottom, int32_t right)$/;"	f	file:	signature:(SpiceRect *r, int32_t top, int32_t left, int32_t bottom, int32_t right)
rect_union	rect.h	/^static inline void rect_union(SpiceRect *dest, const SpiceRect *r)$/;"	f	signature:(SpiceRect *dest, const SpiceRect *r)
rect_union	rect.h	/^static inline void rect_union(SpiceRect& dest, const SpiceRect& r)$/;"	f	signature:(SpiceRect& dest, const SpiceRect& r)
rects	draw.h	/^    SpiceClipRects *rects;$/;"	m	struct:SpiceClip	access:public
rects	draw.h	/^  SpiceRect rects[0];$/;"	m	struct:SpiceClipRects	access:public
ref	lz.c	/^    uint8_t            *ref;$/;"	m	struct:HashEntry	file:	access:public
ref_pat	glc.c	/^static inline InternalPat *ref_pat(InternalPat *pat)$/;"	f	file:	signature:(InternalPat *pat)
refs	glc.c	/^    int refs;$/;"	m	struct:InternalPat	file:	access:public
region_add	region.c	/^void region_add(QRegion *rgn, const SpiceRect *r)$/;"	f	signature:(QRegion *rgn, const SpiceRect *r)
region_add	region.h	/^void region_add(QRegion *rgn, const SpiceRect *r);$/;"	p	signature:(QRegion *rgn, const SpiceRect *r)
region_and	region.c	/^void region_and(QRegion *rgn, const QRegion *other_rgn)$/;"	f	signature:(QRegion *rgn, const QRegion *other_rgn)
region_and	region.h	/^void region_and(QRegion *rgn, const QRegion *other_rgn);$/;"	p	signature:(QRegion *rgn, const QRegion *other_rgn)
region_bounds_intersects	region.c	/^int region_bounds_intersects(const QRegion *rgn1, const QRegion *rgn2)$/;"	f	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_bounds_intersects	region.h	/^int region_bounds_intersects(const QRegion *rgn1, const QRegion *rgn2);$/;"	p	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_clear	region.c	/^void region_clear(QRegion *rgn)$/;"	f	signature:(QRegion *rgn)
region_clear	region.h	/^void region_clear(QRegion *rgn);$/;"	p	signature:(QRegion *rgn)
region_clone	region.c	/^void region_clone(QRegion *dest, const QRegion *src)$/;"	f	signature:(QRegion *dest, const QRegion *src)
region_clone	region.h	/^void region_clone(QRegion *dest, const QRegion *src);$/;"	p	signature:(QRegion *dest, const QRegion *src)
region_contains	region.c	/^int region_contains(const QRegion *rgn, const QRegion *other)$/;"	f	signature:(const QRegion *rgn, const QRegion *other)
region_contains	region.h	/^int region_contains(const QRegion *rgn, const QRegion *other);$/;"	p	signature:(const QRegion *rgn, const QRegion *other)
region_contains_point	region.c	/^int region_contains_point(const QRegion *rgn, int32_t x, int32_t y)$/;"	f	signature:(const QRegion *rgn, int32_t x, int32_t y)
region_contains_point	region.h	/^int region_contains_point(const QRegion *rgn, int32_t x, int32_t y);$/;"	p	signature:(const QRegion *rgn, int32_t x, int32_t y)
region_destroy	region.c	/^void region_destroy(QRegion *rgn)$/;"	f	signature:(QRegion *rgn)
region_destroy	region.h	/^void region_destroy(QRegion *rgn);$/;"	p	signature:(QRegion *rgn)
region_dump	region.c	/^void region_dump(const QRegion *rgn, const char *prefix)$/;"	f	signature:(const QRegion *rgn, const char *prefix)
region_dump	region.h	/^void region_dump(const QRegion *rgn, const char *prefix);$/;"	p	signature:(const QRegion *rgn, const char *prefix)
region_dup_rects	region.c	/^SpiceRect *region_dup_rects(const QRegion *rgn, uint32_t *num_rects)$/;"	f	signature:(const QRegion *rgn, uint32_t *num_rects)
region_dup_rects	region.h	/^SpiceRect *region_dup_rects(const QRegion *rgn, uint32_t *num_rects);$/;"	p	signature:(const QRegion *rgn, uint32_t *num_rects)
region_exclude	region.c	/^void region_exclude(QRegion *rgn, const QRegion *other_rgn)$/;"	f	signature:(QRegion *rgn, const QRegion *other_rgn)
region_exclude	region.h	/^void region_exclude(QRegion *rgn, const QRegion *other_rgn);$/;"	p	signature:(QRegion *rgn, const QRegion *other_rgn)
region_extents	region.c	/^void region_extents(const QRegion *rgn, SpiceRect *r)$/;"	f	signature:(const QRegion *rgn, SpiceRect *r)
region_extents	region.h	/^void region_extents(const QRegion *rgn, SpiceRect *r);$/;"	p	signature:(const QRegion *rgn, SpiceRect *r)
region_init	region.c	/^void region_init(QRegion *rgn)$/;"	f	signature:(QRegion *rgn)
region_init	region.h	/^void region_init(QRegion *rgn);$/;"	p	signature:(QRegion *rgn)
region_intersects	region.c	/^int region_intersects(const QRegion *rgn1, const QRegion *rgn2)$/;"	f	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_intersects	region.h	/^int region_intersects(const QRegion *rgn1, const QRegion *rgn2);$/;"	p	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_is_empty	region.c	/^int region_is_empty(const QRegion *rgn)$/;"	f	signature:(const QRegion *rgn)
region_is_empty	region.h	/^int region_is_empty(const QRegion *rgn);$/;"	p	signature:(const QRegion *rgn)
region_is_equal	region.c	/^int region_is_equal(const QRegion *rgn1, const QRegion *rgn2)$/;"	f	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_is_equal	region.h	/^int region_is_equal(const QRegion *rgn1, const QRegion *rgn2);$/;"	p	signature:(const QRegion *rgn1, const QRegion *rgn2)
region_is_valid	region.c	/^int region_is_valid(const QRegion *rgn)$/;"	f	signature:(const QRegion *rgn)
region_is_valid	region.h	/^int region_is_valid(const QRegion *rgn);$/;"	p	signature:(const QRegion *rgn)
region_offset	region.c	/^void region_offset(QRegion *rgn, int32_t dx, int32_t dy)$/;"	f	signature:(QRegion *rgn, int32_t dx, int32_t dy)
region_offset	region.h	/^void region_offset(QRegion *rgn, int32_t dx, int32_t dy);$/;"	p	signature:(QRegion *rgn, int32_t dx, int32_t dy)
region_or	region.c	/^void region_or(QRegion *rgn, const QRegion *other_rgn)$/;"	f	signature:(QRegion *rgn, const QRegion *other_rgn)
region_or	region.h	/^void region_or(QRegion *rgn, const QRegion *other_rgn);$/;"	p	signature:(QRegion *rgn, const QRegion *other_rgn)
region_remove	region.c	/^void region_remove(QRegion *rgn, const SpiceRect *r)$/;"	f	signature:(QRegion *rgn, const SpiceRect *r)
region_remove	region.h	/^void region_remove(QRegion *rgn, const SpiceRect *r);$/;"	p	signature:(QRegion *rgn, const SpiceRect *r)
region_ret_rects	region.c	/^void region_ret_rects(const QRegion *rgn, SpiceRect *rects, uint32_t num_rects)$/;"	f	signature:(const QRegion *rgn, SpiceRect *rects, uint32_t num_rects)
region_ret_rects	region.h	/^void region_ret_rects(const QRegion *rgn, SpiceRect *rects, uint32_t num_rects);$/;"	p	signature:(const QRegion *rgn, SpiceRect *rects, uint32_t num_rects)
region_test	region.c	/^int region_test(const QRegion *_reg1, const QRegion *_reg2, int query)$/;"	f	signature:(const QRegion *_reg1, const QRegion *_reg2, int query)
region_test	region.h	/^int region_test(const QRegion *rgn, const QRegion *other_rgn, int query);$/;"	p	signature:(const QRegion *rgn, const QRegion *other_rgn, int query)
region_xor	region.c	/^void region_xor(QRegion *rgn, const QRegion *other_rgn)$/;"	f	signature:(QRegion *rgn, const QRegion *other_rgn)
region_xor	region.h	/^void region_xor(QRegion *rgn, const QRegion *other_rgn);$/;"	p	signature:(QRegion *rgn, const QRegion *other_rgn)
release	canvas_base.h	/^    void (*release)(SpicePaletteCache *cache,$/;"	m	struct:__anon10	access:public
release_bitmap	gdi_canvas.c	/^static void release_bitmap(HDC dc, HBITMAP bitmap, HBITMAP prev_bitmap, int cache)$/;"	f	file:	signature:(HDC dc, HBITMAP bitmap, HBITMAP prev_bitmap, int cache)
release_data	canvas_utils.c	/^static void release_data(SPICE_GNUC_UNUSED pixman_image_t *image,$/;"	f	file:	signature:(SPICE_GNUC_UNUSED pixman_image_t *image, void *release_data)
remaining_buffer_size	marshaller.c	/^static size_t remaining_buffer_size(SpiceMarshallerData *d)$/;"	f	file:	signature:(SpiceMarshallerData *d)
remove_stencil_client	glc.c	/^static inline void remove_stencil_client(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
render_pos	draw.h	/^    SpicePoint render_pos;$/;"	m	struct:SpiceRasterGlyph	access:public
replace_lossy	canvas_base.h	/^    void (*replace_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8	access:public
reset_tass_vertex	glc.c	/^static void reset_tass_vertex(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
resources	messages.h	/^    SpiceResourceID resources[0];$/;"	m	struct:SpiceResourceList	access:public
revers_bits	canvas_base.c	/^static inline uint8_t revers_bits(uint8_t byte)$/;"	f	file:	signature:(uint8_t byte)
rgb16_pixel_t	lz.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb16_pixel_t	quic.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb24_pixel_t	lz.c	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	lz.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t	quic.c	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	quic.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t::b	lz.c	/^    uint8_t b;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb24_pixel_t::b	quic.c	/^    BYTE b;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb24_pixel_t::g	lz.c	/^    uint8_t g;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb24_pixel_t::g	quic.c	/^    BYTE g;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb24_pixel_t::r	lz.c	/^    uint8_t r;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb24_pixel_t::r	quic.c	/^    BYTE r;$/;"	m	struct:rgb24_pixel_t	file:	access:public
rgb32_pixel_t	lz.c	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	lz.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t	quic.c	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	quic.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t::b	lz.c	/^    uint8_t b;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::b	quic.c	/^    BYTE b;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::g	lz.c	/^    uint8_t g;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::g	quic.c	/^    BYTE g;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::pad	lz.c	/^    uint8_t pad;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::pad	quic.c	/^    BYTE pad;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::r	lz.c	/^    uint8_t r;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb32_pixel_t::r	quic.c	/^    BYTE r;$/;"	m	struct:rgb32_pixel_t	file:	access:public
rgb_16_555_to_32	pixman_utils.c	/^static inline uint32_t rgb_16_555_to_32(uint16_t color)$/;"	f	file:	signature:(uint16_t color)
rgb_32_to_16_555	canvas_base.c	/^static inline uint16_t rgb_32_to_16_555(uint32_t color)$/;"	f	file:	signature:(uint32_t color)
rgb_32_to_16_555	pixman_utils.c	/^static inline uint16_t rgb_32_to_16_555(uint32_t color)$/;"	f	file:	signature:(uint32_t color)
rgb_32_to_16_565	canvas_base.c	/^static inline uint16_t rgb_32_to_16_565(uint32_t color)$/;"	f	file:	signature:(uint32_t color)
rgb_state	quic.c	/^    CommonState rgb_state;$/;"	m	struct:Encoder	file:	access:public
right	draw.h	/^    int32_t right;$/;"	m	struct:SpiceRect	access:public
ring_add	ring.h	/^static inline void ring_add(Ring *ring, RingItem *item)$/;"	f	signature:(Ring *ring, RingItem *item)
ring_add_after	ring.h	/^static inline void ring_add_after(RingItem *item, RingItem *pos)$/;"	f	signature:(RingItem *item, RingItem *pos)
ring_add_before	ring.h	/^static inline void ring_add_before(RingItem *item, RingItem *pos)$/;"	f	signature:(RingItem *item, RingItem *pos)
ring_get_head	ring.h	/^static inline RingItem *ring_get_head(Ring *ring)$/;"	f	signature:(Ring *ring)
ring_get_length	ring.h	/^static inline unsigned int ring_get_length(Ring *ring)$/;"	f	signature:(Ring *ring)
ring_get_tail	ring.h	/^static inline RingItem *ring_get_tail(Ring *ring)$/;"	f	signature:(Ring *ring)
ring_init	ring.h	/^static inline void ring_init(Ring *ring)$/;"	f	signature:(Ring *ring)
ring_is_empty	ring.h	/^static inline int ring_is_empty(Ring *ring)$/;"	f	signature:(Ring *ring)
ring_item_init	ring.h	/^static inline void ring_item_init(RingItem *item)$/;"	f	signature:(RingItem *item)
ring_item_is_linked	ring.h	/^static inline int ring_item_is_linked(RingItem *item)$/;"	f	signature:(RingItem *item)
ring_next	ring.h	/^static inline RingItem *ring_next(Ring *ring, RingItem *pos)$/;"	f	signature:(Ring *ring, RingItem *pos)
ring_prev	ring.h	/^static inline RingItem *ring_prev(Ring *ring, RingItem *pos)$/;"	f	signature:(Ring *ring, RingItem *pos)
ring_remove	ring.h	/^static inline void ring_remove(RingItem *item)$/;"	f	signature:(RingItem *item)
rop3	draw.h	/^    uint8_t rop3;$/;"	m	struct:SpiceRop3	access:public
rop3_init	rop3.c	/^void rop3_init(void)$/;"	f	signature:(void)
rop3_init	rop3.h	/^void rop3_init(void);$/;"	p	signature:(void)
rop3_test_handler_t	rop3.c	/^typedef void (*rop3_test_handler_t)(void);$/;"	t	file:
rop3_test_handlers_16	rop3.c	/^static rop3_test_handler_t rop3_test_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_test_handlers_32	rop3.c	/^static rop3_test_handler_t rop3_test_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_color_handler_t	rop3.c	/^typedef void (*rop3_with_color_handler_t)(pixman_image_t *d, pixman_image_t *s,$/;"	t	file:
rop3_with_color_handlers_16	rop3.c	/^static rop3_with_color_handler_t rop3_with_color_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_color_handlers_32	rop3.c	/^static rop3_with_color_handler_t rop3_with_color_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_pattern_handler_t	rop3.c	/^typedef void (*rop3_with_pattern_handler_t)(pixman_image_t *d, pixman_image_t *s,$/;"	t	file:
rop3_with_pattern_handlers_16	rop3.c	/^static rop3_with_pattern_handler_t rop3_with_pattern_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_pattern_handlers_32	rop3.c	/^static rop3_with_pattern_handler_t rop3_with_pattern_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceCopy	access:public
rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceFill	access:public
rop_descriptor	draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceOpaque	access:public
ropd_descriptor_to_rop	canvas_base.c	/^static SpiceROP ropd_descriptor_to_rop(int desc,$/;"	f	file:	signature:(int desc, ROPInput src_input, ROPInput dest_input)
rows_completed	quic.c	/^    int rows_completed;$/;"	m	struct:Encoder	file:	access:public
s_bucket	quic.c	/^typedef struct s_bucket {$/;"	s	file:
s_bucket	quic.c	/^} s_bucket;$/;"	t	typeref:struct:s_bucket	file:
s_bucket::bestcode	quic.c	/^    unsigned int bestcode;  \/* best code so far *\/$/;"	m	struct:s_bucket	file:	access:public
s_bucket::pcounters	quic.c	/^    COUNTER *pcounters;     \/* pointer to array of counters *\/$/;"	m	struct:s_bucket	file:	access:public
scale	glc.c	/^static void scale(uint32_t *dest, uint32_t dest_width, uint32_t dest_height,$/;"	f	file:	signature:(uint32_t *dest, uint32_t dest_width, uint32_t dest_height, uint32_t *src, uint32_t src_width, uint32_t src_height, int src_stride)
scale_image	canvas_base.h	/^    void (*scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
scale_image	sw_canvas.c	/^static void scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode)
scale_image_from_surface	canvas_base.h	/^    void (*scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
scale_image_from_surface	sw_canvas.c	/^static void scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode)
scale_image_rop	canvas_base.h	/^    void (*scale_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
scale_image_rop	sw_canvas.c	/^static void scale_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, pixman_image_t *src, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, SpiceROP rop)
scale_image_rop_from_surface	canvas_base.h	/^    void (*scale_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13	access:public
scale_image_rop_from_surface	sw_canvas.c	/^static void scale_image_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:	signature:(SpiceCanvas *spice_canvas, pixman_region32_t *region, SpiceCanvas *surface_canvas, int src_x, int src_y, int src_width, int src_height, int dest_x, int dest_y, int dest_width, int dest_height, int scale_mode, SpiceROP rop)
scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceCopy	access:public
scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceOpaque	access:public
scale_mode	draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceRop3	access:public
segments	draw.h	/^  SpicePathSeg *segments[0];$/;"	m	struct:SpicePath	access:public
segments	glc.c	/^    PathSegment *segments;$/;"	m	struct:InternalPath	file:	access:public
segments_pos	glc.c	/^    int segments_pos;$/;"	m	struct:InternalPath	file:	access:public
segments_size	glc.c	/^    int segments_size;$/;"	m	struct:InternalPath	file:	access:public
service_id	messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelServiceIpMap	access:public
service_id	messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
session_id	messages.h	/^    uint32_t session_id;$/;"	m	struct:SpiceMsgMainInit	access:public
set_brush	gdi_canvas.c	/^static HBRUSH set_brush(HDC dc, HBRUSH hbrush, SpiceBrush *brush)$/;"	f	file:	signature:(HDC dc, HBRUSH hbrush, SpiceBrush *brush)
set_brush	gl_canvas.c	/^static void set_brush(GLCanvas *canvas, SpiceBrush *brush)$/;"	f	file:	signature:(GLCanvas *canvas, SpiceBrush *brush)
set_clip	gdi_canvas.c	/^static void set_clip(GdiCanvas *canvas, SpiceClip *clip)$/;"	f	file:	signature:(GdiCanvas *canvas, SpiceClip *clip)
set_clip	gl_canvas.c	/^static void set_clip(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip)$/;"	f	file:	signature:(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip)
set_mask	gl_canvas.c	/^static void set_mask(GLCanvas *canvas, SpiceQMask *mask, int x, int y)$/;"	f	file:	signature:(GLCanvas *canvas, SpiceQMask *mask, int x, int y)
set_op	gl_canvas.c	/^static void set_op(GLCanvas *canvas, uint16_t rop_decriptor)$/;"	f	file:	signature:(GLCanvas *canvas, uint16_t rop_decriptor)
set_pat	glc.c	/^static void set_pat(InternaCtx *ctx, InternalPat *pat)$/;"	f	file:	signature:(InternaCtx *ctx, InternalPat *pat)
set_pat	glc.c	/^static void set_pat(InternaCtx *ctx, InternalPat *pat);$/;"	p	file:	signature:(InternaCtx *ctx, InternalPat *pat)
set_path	gdi_canvas.c	/^static void set_path(GdiCanvas *canvas, SpicePath *s)$/;"	f	file:	signature:(GdiCanvas *canvas, SpicePath *s)
set_raster_pos	glc.c	/^static inline void set_raster_pos(InternaCtx *ctx, int x, int y)$/;"	f	file:	signature:(InternaCtx *ctx, int x, int y)
set_scale_mode	gdi_canvas.c	/^static void set_scale_mode(GdiCanvas *canvas, uint8_t scale_mode)$/;"	f	file:	signature:(GdiCanvas *canvas, uint8_t scale_mode)
set_wm_trigger	quic.c	/^static void set_wm_trigger(CommonState *state)$/;"	f	file:	signature:(CommonState *state)
severity	messages.h	/^    uint32_t severity;$/;"	m	struct:SpiceMsgNotify	access:public
signdx	lines.c	/^    int signdx;                 \/* variable dx sign *\/$/;"	m	struct:_PolyEdge	file:	access:public
size	canvas_base.c	/^    int size;$/;"	m	struct:__anon30	file:	access:public
size	lines.c	/^    int size;                   \/* Total number of *Spans allocated     *\/$/;"	m	struct:__anon38	file:	access:public
size_delta	lz.c	/^    unsigned int size_delta;    \/\/ total size of the previous segments in units of$/;"	m	struct:LzImageSegment	file:	access:public
slow_region_test	region.c	/^static int slow_region_test(const QRegion *rgn, const QRegion *other_rgn, int query)$/;"	f	file:	signature:(const QRegion *rgn, const QRegion *other_rgn, int query)
snd_codec_create	snd_codec.c	/^int snd_codec_create(SndCodec *codec, int mode, int frequency, int purpose)$/;"	f	signature:(SndCodec *codec, int mode, int frequency, int purpose)
snd_codec_create	snd_codec.h	/^int  snd_codec_create(SndCodec *codec, int mode, int frequency, int purpose);$/;"	p	signature:(SndCodec *codec, int mode, int frequency, int purpose)
snd_codec_create_celt051	snd_codec.c	/^static int snd_codec_create_celt051(SndCodecInternal *codec, int purpose)$/;"	f	file:	signature:(SndCodecInternal *codec, int purpose)
snd_codec_create_opus	snd_codec.c	/^static int snd_codec_create_opus(SndCodecInternal *codec, int purpose)$/;"	f	file:	signature:(SndCodecInternal *codec, int purpose)
snd_codec_decode	snd_codec.c	/^int snd_codec_decode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	signature:(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_decode	snd_codec.h	/^int  snd_codec_decode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size);$/;"	p	signature:(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_decode_celt051	snd_codec.c	/^static int snd_codec_decode_celt051(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:	signature:(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_decode_opus	snd_codec.c	/^static int snd_codec_decode_opus(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:	signature:(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_destroy	snd_codec.c	/^void snd_codec_destroy(SndCodec *codec)$/;"	f	signature:(SndCodec *codec)
snd_codec_destroy	snd_codec.h	/^void snd_codec_destroy(SndCodec *codec);$/;"	p	signature:(SndCodec *codec)
snd_codec_destroy_celt051	snd_codec.c	/^static void snd_codec_destroy_celt051(SndCodecInternal *codec)$/;"	f	file:	signature:(SndCodecInternal *codec)
snd_codec_destroy_opus	snd_codec.c	/^static void snd_codec_destroy_opus(SndCodecInternal *codec)$/;"	f	file:	signature:(SndCodecInternal *codec)
snd_codec_encode	snd_codec.c	/^int snd_codec_encode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	signature:(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_encode	snd_codec.h	/^int  snd_codec_encode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size);$/;"	p	signature:(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_encode_celt051	snd_codec.c	/^static int snd_codec_encode_celt051(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:	signature:(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_encode_opus	snd_codec.c	/^static int snd_codec_encode_opus(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:	signature:(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)
snd_codec_frame_size	snd_codec.c	/^int snd_codec_frame_size(SndCodec codec)$/;"	f	signature:(SndCodec codec)
snd_codec_frame_size	snd_codec.h	/^int  snd_codec_frame_size(SndCodec codec);$/;"	p	signature:(SndCodec codec)
snd_codec_is_capable	snd_codec.c	/^int snd_codec_is_capable(int mode, int frequency)$/;"	f	signature:(int mode, int frequency)
snd_codec_is_capable	snd_codec.h	/^int  snd_codec_is_capable(int mode, int frequency);$/;"	p	signature:(int mode, int frequency)
solid	canvas_base.c	/^    int solid;$/;"	m	struct:__anon28	file:	access:public
solid_rop_16_func_t	pixman_utils.c	/^typedef void (*solid_rop_16_func_t)(uint16_t *ptr, int len, uint16_t src);$/;"	t	file:
solid_rop_32_func_t	pixman_utils.c	/^typedef void (*solid_rop_32_func_t)(uint32_t *ptr, int len, uint32_t src);$/;"	t	file:
solid_rop_8_func_t	pixman_utils.c	/^typedef void (*solid_rop_8_func_t)(uint8_t *ptr, int len, uint8_t src);$/;"	t	file:
spice_abort	spice_common.h	32;"	d
spice_abort	spice_common.h	34;"	d
spice_assert	log.h	135;"	d
spice_backtrace	backtrace.c	/^void spice_backtrace(void)$/;"	f	signature:(void)
spice_backtrace	backtrace.h	27;"	d
spice_backtrace_backtrace	backtrace.c	/^static void spice_backtrace_backtrace(void)$/;"	f	file:	signature:(void)
spice_backtrace_gstack	backtrace.c	/^static int spice_backtrace_gstack(void)$/;"	f	file:	signature:(void)
spice_bit_find_msb	bitops.h	/^static inline int spice_bit_find_msb(unsigned int val)$/;"	f	signature:(unsigned int val)
spice_bit_next_pow2	bitops.h	/^static inline int spice_bit_next_pow2(unsigned int val)$/;"	f	signature:(unsigned int val)
spice_bitmap_convert_to_pixman	pixman_utils.c	/^pixman_image_t *spice_bitmap_convert_to_pixman(pixman_format_code_t dest_format,$/;"	f	signature:(pixman_format_code_t dest_format, pixman_image_t *dest_image, int src_format, int flags, int width, int height, uint8_t *src, int src_stride, uint32_t palette_surface_format, SpicePalette *palette)
spice_bitmap_convert_to_pixman	pixman_utils.h	/^pixman_image_t *spice_bitmap_convert_to_pixman(pixman_format_code_t dest_format,$/;"	p	signature:(pixman_format_code_t dest_format, pixman_image_t *dest_image, int src_format, int flags, int width, int height, uint8_t *src, int src_stride, uint32_t palette_surface_format, SpicePalette *palette)
spice_bitmap_format_to_pixman	pixman_utils.c	/^pixman_format_code_t spice_bitmap_format_to_pixman(int bitmap_format,$/;"	f	signature:(int bitmap_format, uint32_t palette_surface_format)
spice_bitmap_format_to_pixman	pixman_utils.h	/^pixman_format_code_t spice_bitmap_format_to_pixman(int bitmap_format,$/;"	p	signature:(int bitmap_format, uint32_t palette_surface_format)
spice_bitmap_to_pixman	pixman_utils.c	/^pixman_image_t *spice_bitmap_to_pixman(pixman_image_t *dest_image,$/;"	f	signature:(pixman_image_t *dest_image, int src_format, int flags, int width, int height, uint8_t *src, int src_stride, uint32_t palette_surface_format, SpicePalette *palette)
spice_bitmap_to_pixman	pixman_utils.h	/^pixman_image_t *spice_bitmap_to_pixman(pixman_image_t *dest_image,$/;"	p	signature:(pixman_image_t *dest_image, int src_format, int flags, int width, int height, uint8_t *src, int src_stride, uint32_t palette_surface_format, SpicePalette *palette)
spice_bitmap_try_as_pixman	pixman_utils.c	/^pixman_image_t *spice_bitmap_try_as_pixman(int src_format,$/;"	f	signature:(int src_format, int flags, int width, int height, uint8_t *data, int stride)
spice_bitmap_try_as_pixman	pixman_utils.h	/^pixman_image_t *spice_bitmap_try_as_pixman(int src_format, int flags,$/;"	p	signature:(int src_format, int flags, int width, int height, uint8_t *data, int stride)
spice_buffer_append	mem.c	/^void spice_buffer_append(SpiceBuffer *buffer, const void *data, size_t len)$/;"	f	signature:(SpiceBuffer *buffer, const void *data, size_t len)
spice_buffer_append	mem.h	/^void spice_buffer_append(SpiceBuffer *buffer, const void *data, size_t len);$/;"	p	signature:(SpiceBuffer *buffer, const void *data, size_t len)
spice_buffer_copy	mem.c	/^size_t spice_buffer_copy(SpiceBuffer *buffer, void *dest, size_t len)$/;"	f	signature:(SpiceBuffer *buffer, void *dest, size_t len)
spice_buffer_copy	mem.h	/^size_t spice_buffer_copy(SpiceBuffer *buffer, void *dest, size_t len);$/;"	p	signature:(SpiceBuffer *buffer, void *dest, size_t len)
spice_buffer_empty	mem.c	/^int spice_buffer_empty(SpiceBuffer *buffer)$/;"	f	signature:(SpiceBuffer *buffer)
spice_buffer_empty	mem.h	/^int spice_buffer_empty(SpiceBuffer *buffer);$/;"	p	signature:(SpiceBuffer *buffer)
spice_buffer_end	mem.c	/^uint8_t *spice_buffer_end(SpiceBuffer *buffer)$/;"	f	signature:(SpiceBuffer *buffer)
spice_buffer_end	mem.h	/^uint8_t *spice_buffer_end(SpiceBuffer *buffer);$/;"	p	signature:(SpiceBuffer *buffer)
spice_buffer_free	mem.c	/^void spice_buffer_free(SpiceBuffer *buffer)$/;"	f	signature:(SpiceBuffer *buffer)
spice_buffer_free	mem.h	/^void spice_buffer_free(SpiceBuffer *buffer);$/;"	p	signature:(SpiceBuffer *buffer)
spice_buffer_remove	mem.c	/^size_t spice_buffer_remove(SpiceBuffer *buffer, size_t len)$/;"	f	signature:(SpiceBuffer *buffer, size_t len)
spice_buffer_remove	mem.h	/^size_t spice_buffer_remove(SpiceBuffer *buffer, size_t len);$/;"	p	signature:(SpiceBuffer *buffer, size_t len)
spice_buffer_reserve	mem.c	/^void spice_buffer_reserve(SpiceBuffer *buffer, size_t len)$/;"	f	signature:(SpiceBuffer *buffer, size_t len)
spice_buffer_reserve	mem.h	/^void spice_buffer_reserve(SpiceBuffer *buffer, size_t len);$/;"	p	signature:(SpiceBuffer *buffer, size_t len)
spice_buffer_reset	mem.c	/^void spice_buffer_reset(SpiceBuffer *buffer)$/;"	f	signature:(SpiceBuffer *buffer)
spice_buffer_reset	mem.h	/^void spice_buffer_reset(SpiceBuffer *buffer);$/;"	p	signature:(SpiceBuffer *buffer)
spice_canvas_clip_spans	lines.c	/^int spice_canvas_clip_spans(pixman_region32_t *prgnDst,$/;"	f	signature:(pixman_region32_t *prgnDst, DDXPointPtr ppt, int *pwidth, int nspans, DDXPointPtr pptNew, int *pwidthNew, int fSorted)
spice_canvas_clip_spans	lines.h	/^extern int spice_canvas_clip_spans(pixman_region32_t *clip_region,$/;"	p	signature:(pixman_region32_t *clip_region, SpicePoint *points, int *widths, int num_spans, SpicePoint *new_points, int *new_widths, int sorted)
spice_canvas_get_usr_data	canvas_base.c	/^void *spice_canvas_get_usr_data(SpiceCanvas *spice_canvas)$/;"	f	signature:(SpiceCanvas *spice_canvas)
spice_canvas_get_usr_data	canvas_base.h	/^void *spice_canvas_get_usr_data(SpiceCanvas *canvas);$/;"	p	signature:(SpiceCanvas *canvas)
spice_canvas_set_usr_data	canvas_base.c	/^void spice_canvas_set_usr_data(SpiceCanvas *spice_canvas,$/;"	f	signature:(SpiceCanvas *spice_canvas, void *data, spice_destroy_fn_t destroy_fn)
spice_canvas_set_usr_data	canvas_base.h	/^void spice_canvas_set_usr_data(SpiceCanvas *canvas, void *data, spice_destroy_fn_t destroy_fn);$/;"	p	signature:(SpiceCanvas *canvas, void *data, spice_destroy_fn_t destroy_fn)
spice_canvas_wide_dash_line	lines.h	/^extern void spice_canvas_wide_dash_line(lineGC * pGC,$/;"	p	signature:(lineGC * pGC, int mode, int num_points, SpicePoint * points)
spice_canvas_wide_line	lines.h	/^extern void spice_canvas_wide_line(lineGC *pGC,$/;"	p	signature:(lineGC *pGC, int mode, int num_points, SpicePoint * points)
spice_canvas_zero_dash_line	lines.h	/^extern void spice_canvas_zero_dash_line(lineGC * pgc,$/;"	p	signature:(lineGC * pgc, int mode, int n_points, SpicePoint * points)
spice_canvas_zero_line	lines.h	/^extern void spice_canvas_zero_line(lineGC *pgc,$/;"	p	signature:(lineGC *pgc, int mode, int num_points, SpicePoint * points)
spice_chunks_destroy	mem.c	/^void spice_chunks_destroy(SpiceChunks *chunks)$/;"	f	signature:(SpiceChunks *chunks)
spice_chunks_destroy	mem.h	/^void spice_chunks_destroy(SpiceChunks *chunks);$/;"	p	signature:(SpiceChunks *chunks)
spice_chunks_linearize	mem.c	/^void spice_chunks_linearize(SpiceChunks *chunks)$/;"	f	signature:(SpiceChunks *chunks)
spice_chunks_linearize	mem.h	/^void spice_chunks_linearize(SpiceChunks *chunks);$/;"	p	signature:(SpiceChunks *chunks)
spice_chunks_new	mem.c	/^SpiceChunks *spice_chunks_new(uint32_t count)$/;"	f	signature:(uint32_t count)
spice_chunks_new_linear	mem.c	/^SpiceChunks *spice_chunks_new_linear(uint8_t *data, uint32_t len)$/;"	f	signature:(uint8_t *data, uint32_t len)
spice_critical	log.h	107;"	d
spice_debug	log.h	95;"	d
spice_destroy_fn_t	canvas_base.h	/^typedef void (*spice_destroy_fn_t)(void *data);$/;"	t
spice_error	log.h	113;"	d
spice_get_client_channel_parser	generated_server_demarshallers.c	/^spice_parse_channel_func_t spice_get_client_channel_parser(uint32_t channel, unsigned int *max_message_type)$/;"	f	signature:(uint32_t channel, unsigned int *max_message_type)
spice_get_server_channel_parser	client_demarshallers.h	/^spice_parse_channel_func_t spice_get_server_channel_parser(uint32_t channel, unsigned int *max_message_type);$/;"	p	signature:(uint32_t channel, unsigned int *max_message_type)
spice_get_server_channel_parser	generated_client_demarshallers.c	/^spice_parse_channel_func_t spice_get_server_channel_parser(uint32_t channel, unsigned int *max_message_type)$/;"	f	signature:(uint32_t channel, unsigned int *max_message_type)
spice_get_server_channel_parser1	client_demarshallers.h	/^spice_parse_channel_func_t spice_get_server_channel_parser1(uint32_t channel, unsigned int *max_message_type);$/;"	p	signature:(uint32_t channel, unsigned int *max_message_type)
spice_get_server_channel_parser1	generated_client_demarshallers1.c	/^spice_parse_channel_func_t spice_get_server_channel_parser1(uint32_t channel, unsigned int *max_message_type)$/;"	f	signature:(uint32_t channel, unsigned int *max_message_type)
spice_info	log.h	89;"	d
spice_log	log.c	/^void spice_log(const char *log_domain,$/;"	f	signature:(const char *log_domain, SpiceLogLevel log_level, const char *strloc, const char *function, const char *format, ...)
spice_log_level_to_string	log.c	/^static const char * spice_log_level_to_string(SpiceLogLevel level)$/;"	f	file:	signature:(SpiceLogLevel level)
spice_logv	log.c	/^void spice_logv(const char *log_domain,$/;"	f	signature:(const char *log_domain, SpiceLogLevel log_level, const char *strloc, const char *function, const char *format, va_list args)
spice_malloc	mem.c	/^void *spice_malloc(size_t n_bytes)$/;"	f	signature:(size_t n_bytes)
spice_malloc0	mem.c	/^void *spice_malloc0(size_t n_bytes)$/;"	f	signature:(size_t n_bytes)
spice_malloc0_n	mem.c	/^void *spice_malloc0_n(size_t n_blocks, size_t n_block_bytes)$/;"	f	signature:(size_t n_blocks, size_t n_block_bytes)
spice_malloc_n	mem.c	/^void *spice_malloc_n(size_t n_blocks, size_t n_block_bytes)$/;"	f	signature:(size_t n_blocks, size_t n_block_bytes)
spice_malloc_n_m	mem.c	/^void *spice_malloc_n_m(size_t n_blocks, size_t n_block_bytes, size_t extra_size)$/;"	f	signature:(size_t n_blocks, size_t n_block_bytes, size_t extra_size)
spice_marshall_AlphaBlend	generated_server_marshallers.c	/^void spice_marshall_AlphaBlend(SpiceMarshaller *m, SpiceAlphaBlend *ptr, SpiceMarshaller **src_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceAlphaBlend *ptr, SpiceMarshaller **src_bitmap_out)
spice_marshall_AlphaBlend	generated_server_marshallers.h	/^void spice_marshall_AlphaBlend(SpiceMarshaller *m, SpiceAlphaBlend *msg, SpiceMarshaller **src_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceAlphaBlend *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_Blackness	generated_server_marshallers.c	/^void spice_marshall_Blackness(SpiceMarshaller *m, SpiceBlackness *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceBlackness *ptr, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Blackness	generated_server_marshallers.h	/^void spice_marshall_Blackness(SpiceMarshaller *m, SpiceBlackness *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceBlackness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Blend	generated_server_marshallers.c	/^void spice_marshall_Blend(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Blend	generated_server_marshallers.h	/^void spice_marshall_Blend(SpiceMarshaller *m, SpiceCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Composite	generated_server_marshallers.c	/^void spice_marshall_Composite(SpiceMarshaller *m, SpiceComposite *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceComposite *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Composite	generated_server_marshallers.h	/^void spice_marshall_Composite(SpiceMarshaller *m, SpiceComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Copy	generated_server_marshallers.c	/^void spice_marshall_Copy(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Copy	generated_server_marshallers.h	/^void spice_marshall_Copy(SpiceMarshaller *m, SpiceCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_DisplayBase	generated_server_marshallers.c	/^void spice_marshall_DisplayBase(SpiceMarshaller *m, SpiceMsgDisplayBase *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpiceMsgDisplayBase *ptr)
spice_marshall_DisplayBase	generated_server_marshallers.h	/^void spice_marshall_DisplayBase(SpiceMarshaller *m, SpiceMsgDisplayBase *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayBase *msg)
spice_marshall_Fill	generated_server_marshallers.c	/^void spice_marshall_Fill(SpiceMarshaller *m, SpiceFill *ptr, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceFill *ptr, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Fill	generated_server_marshallers.h	/^void spice_marshall_Fill(SpiceMarshaller *m, SpiceFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Image	generated_server_marshallers.c	/^void spice_marshall_Image(SpiceMarshaller *m, SpiceImage *ptr, SpiceMarshaller **bitmap_palette_out, SpiceMarshaller **lzplt_palette_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceImage *ptr, SpiceMarshaller **bitmap_palette_out, SpiceMarshaller **lzplt_palette_out)
spice_marshall_Image	generated_server_marshallers.h	/^void spice_marshall_Image(SpiceMarshaller *m, SpiceImage *msg, SpiceMarshaller **bitmap_palette_out, SpiceMarshaller **lzplt_palette_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceImage *msg, SpiceMarshaller **bitmap_palette_out, SpiceMarshaller **lzplt_palette_out)
spice_marshall_Invers	generated_server_marshallers.c	/^void spice_marshall_Invers(SpiceMarshaller *m, SpiceInvers *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceInvers *ptr, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Invers	generated_server_marshallers.h	/^void spice_marshall_Invers(SpiceMarshaller *m, SpiceInvers *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceInvers *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Opaque	generated_server_marshallers.c	/^void spice_marshall_Opaque(SpiceMarshaller *m, SpiceOpaque *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceOpaque *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Opaque	generated_server_marshallers.h	/^void spice_marshall_Opaque(SpiceMarshaller *m, SpiceOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Palette	generated_server_marshallers.c	/^void spice_marshall_Palette(SpiceMarshaller *m, SpicePalette *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpicePalette *ptr)
spice_marshall_Palette	generated_server_marshallers.h	/^void spice_marshall_Palette(SpiceMarshaller *m, SpicePalette *msg);$/;"	p	signature:(SpiceMarshaller *m, SpicePalette *msg)
spice_marshall_Path	generated_server_marshallers.c	/^void spice_marshall_Path(SpiceMarshaller *m, SpicePath *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpicePath *ptr)
spice_marshall_Path	generated_server_marshallers.h	/^void spice_marshall_Path(SpiceMarshaller *m, SpicePath *msg);$/;"	p	signature:(SpiceMarshaller *m, SpicePath *msg)
spice_marshall_Point	generated_server_marshallers.c	/^void spice_marshall_Point(SpiceMarshaller *m, SpicePoint *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpicePoint *ptr)
spice_marshall_Point	generated_server_marshallers.h	/^void spice_marshall_Point(SpiceMarshaller *m, SpicePoint *msg);$/;"	p	signature:(SpiceMarshaller *m, SpicePoint *msg)
spice_marshall_Rect	generated_server_marshallers.c	/^void spice_marshall_Rect(SpiceMarshaller *m, SpiceRect *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpiceRect *ptr)
spice_marshall_Rect	generated_server_marshallers.h	/^void spice_marshall_Rect(SpiceMarshaller *m, SpiceRect *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceRect *msg)
spice_marshall_Rop3	generated_server_marshallers.c	/^void spice_marshall_Rop3(SpiceMarshaller *m, SpiceRop3 *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceRop3 *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Rop3	generated_server_marshallers.h	/^void spice_marshall_Rop3(SpiceMarshaller *m, SpiceRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_SpiceMsgAudioMute	generated_server_marshallers.c	/^void spice_marshall_SpiceMsgAudioMute(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgAudioMute *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgAudioMute *msg)
spice_marshall_SpiceMsgAudioMute	generated_server_marshallers.h	/^void spice_marshall_SpiceMsgAudioMute(SpiceMarshaller *m, SpiceMsgAudioMute *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgAudioMute *msg)
spice_marshall_SpiceMsgAudioVolume	generated_server_marshallers.c	/^void spice_marshall_SpiceMsgAudioVolume(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgAudioVolume *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgAudioVolume *msg)
spice_marshall_SpiceMsgAudioVolume	generated_server_marshallers.h	/^void spice_marshall_SpiceMsgAudioVolume(SpiceMarshaller *m, SpiceMsgAudioVolume *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgAudioVolume *msg)
spice_marshall_SpiceMsgData	generated_client_marshallers.c	/^static void spice_marshall_SpiceMsgData(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)
spice_marshall_SpiceMsgData	generated_client_marshallers1.c	/^static void spice_marshall_SpiceMsgData(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)
spice_marshall_SpiceMsgData	generated_server_marshallers.c	/^void spice_marshall_SpiceMsgData(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgData *msg)
spice_marshall_SpiceMsgData	generated_server_marshallers.h	/^void spice_marshall_SpiceMsgData(SpiceMarshaller *m, SpiceMsgData *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgData *msg)
spice_marshall_SpiceMsgEmpty	generated_client_marshallers.c	/^static void spice_marshall_SpiceMsgEmpty(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)
spice_marshall_SpiceMsgEmpty	generated_client_marshallers1.c	/^static void spice_marshall_SpiceMsgEmpty(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)
spice_marshall_SpiceMsgEmpty	generated_server_marshallers.c	/^void spice_marshall_SpiceMsgEmpty(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgEmpty *msg)
spice_marshall_SpiceMsgEmpty	generated_server_marshallers.h	/^void spice_marshall_SpiceMsgEmpty(SpiceMarshaller *m, SpiceMsgEmpty *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgEmpty *msg)
spice_marshall_String	generated_server_marshallers.c	/^void spice_marshall_String(SpiceMarshaller *m, SpiceString *ptr)$/;"	f	signature:(SpiceMarshaller *m, SpiceString *ptr)
spice_marshall_String	generated_server_marshallers.h	/^void spice_marshall_String(SpiceMarshaller *m, SpiceString *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceString *msg)
spice_marshall_Stroke	generated_server_marshallers.c	/^void spice_marshall_Stroke(SpiceMarshaller *m, SpiceStroke *ptr, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceStroke *ptr, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)
spice_marshall_Stroke	generated_server_marshallers.h	/^void spice_marshall_Stroke(SpiceMarshaller *m, SpiceStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)
spice_marshall_Text	generated_server_marshallers.c	/^void spice_marshall_Text(SpiceMarshaller *m, SpiceText *ptr, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceText *ptr, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)
spice_marshall_Text	generated_server_marshallers.h	/^void spice_marshall_Text(SpiceMarshaller *m, SpiceText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)
spice_marshall_Transparent	generated_server_marshallers.c	/^void spice_marshall_Transparent(SpiceMarshaller *m, SpiceTransparent *ptr, SpiceMarshaller **src_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceTransparent *ptr, SpiceMarshaller **src_bitmap_out)
spice_marshall_Transparent	generated_server_marshallers.h	/^void spice_marshall_Transparent(SpiceMarshaller *m, SpiceTransparent *msg, SpiceMarshaller **src_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceTransparent *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_Whiteness	generated_server_marshallers.c	/^void spice_marshall_Whiteness(SpiceMarshaller *m, SpiceWhiteness *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SpiceMarshaller *m, SpiceWhiteness *ptr, SpiceMarshaller **mask_bitmap_out)
spice_marshall_Whiteness	generated_server_marshallers.h	/^void spice_marshall_Whiteness(SpiceMarshaller *m, SpiceWhiteness *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceWhiteness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_array_int32	generated_server_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_int32(SpiceMarshaller *m, int32_t *ptr, unsigned count)$/;"	f	file:	signature:(SpiceMarshaller *m, int32_t *ptr, unsigned count)
spice_marshall_array_uint8	generated_client_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_uint8(SpiceMarshaller *m, uint8_t *ptr, unsigned count)$/;"	f	file:	signature:(SpiceMarshaller *m, uint8_t *ptr, unsigned count)
spice_marshall_array_uint8	generated_server_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_uint8(SpiceMarshaller *m, uint8_t *ptr, unsigned count)$/;"	f	file:	signature:(SpiceMarshaller *m, uint8_t *ptr, unsigned count)
spice_marshall_msg_cursor_init	generated_server_marshallers.c	/^void spice_marshall_msg_cursor_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorInit *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorInit *msg)
spice_marshall_msg_cursor_init	generated_server_marshallers.h	/^void spice_marshall_msg_cursor_init(SpiceMarshaller *m, SpiceMsgCursorInit *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgCursorInit *msg)
spice_marshall_msg_cursor_inval_one	generated_server_marshallers.c	/^void spice_marshall_msg_cursor_inval_one(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayInvalOne *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayInvalOne *msg)
spice_marshall_msg_cursor_inval_one	generated_server_marshallers.h	/^void spice_marshall_msg_cursor_inval_one(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg)
spice_marshall_msg_cursor_move	generated_server_marshallers.c	/^void spice_marshall_msg_cursor_move(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorMove *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorMove *msg)
spice_marshall_msg_cursor_move	generated_server_marshallers.h	/^void spice_marshall_msg_cursor_move(SpiceMarshaller *m, SpiceMsgCursorMove *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgCursorMove *msg)
spice_marshall_msg_cursor_set	generated_server_marshallers.c	/^void spice_marshall_msg_cursor_set(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorSet *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorSet *msg)
spice_marshall_msg_cursor_set	generated_server_marshallers.h	/^void spice_marshall_msg_cursor_set(SpiceMarshaller *m, SpiceMsgCursorSet *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgCursorSet *msg)
spice_marshall_msg_cursor_trail	generated_server_marshallers.c	/^void spice_marshall_msg_cursor_trail(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorTrail *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgCursorTrail *msg)
spice_marshall_msg_cursor_trail	generated_server_marshallers.h	/^void spice_marshall_msg_cursor_trail(SpiceMarshaller *m, SpiceMsgCursorTrail *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgCursorTrail *msg)
spice_marshall_msg_disconnecting	generated_server_marshallers.c	/^void spice_marshall_msg_disconnecting(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)
spice_marshall_msg_disconnecting	generated_server_marshallers.h	/^void spice_marshall_msg_disconnecting(SpiceMarshaller *m, SpiceMsgDisconnect *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisconnect *msg)
spice_marshall_msg_display_copy_bits	generated_server_marshallers.c	/^void spice_marshall_msg_display_copy_bits(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayCopyBits *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayCopyBits *msg)
spice_marshall_msg_display_copy_bits	generated_server_marshallers.h	/^void spice_marshall_msg_display_copy_bits(SpiceMarshaller *m, SpiceMsgDisplayCopyBits *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayCopyBits *msg)
spice_marshall_msg_display_draw_alpha_blend	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_alpha_blend(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawAlphaBlend *msg, SpiceMarshaller **src_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawAlphaBlend *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_msg_display_draw_alpha_blend	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_alpha_blend(SpiceMarshaller *m, SpiceMsgDisplayDrawAlphaBlend *msg, SpiceMarshaller **src_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawAlphaBlend *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_msg_display_draw_blackness	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_blackness(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawBlackness *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawBlackness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_blackness	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_blackness(SpiceMarshaller *m, SpiceMsgDisplayDrawBlackness *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawBlackness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_blend	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_blend(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawBlend *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawBlend *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_blend	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_blend(SpiceMarshaller *m, SpiceMsgDisplayDrawBlend *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawBlend *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_composite	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_composite(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_composite	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_composite(SpiceMarshaller *m, SpiceMsgDisplayDrawComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_copy	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_copy(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_copy	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_copy(SpiceMarshaller *m, SpiceMsgDisplayDrawCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_fill	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_fill(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_fill	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_fill(SpiceMarshaller *m, SpiceMsgDisplayDrawFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_invers	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_invers(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawInvers *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawInvers *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_invers	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_invers(SpiceMarshaller *m, SpiceMsgDisplayDrawInvers *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawInvers *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_opaque	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_opaque(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_opaque	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_opaque(SpiceMarshaller *m, SpiceMsgDisplayDrawOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_rop3	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_rop3(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_rop3	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_rop3(SpiceMarshaller *m, SpiceMsgDisplayDrawRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_stroke	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_stroke(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)
spice_marshall_msg_display_draw_stroke	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_stroke(SpiceMarshaller *m, SpiceMsgDisplayDrawStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)
spice_marshall_msg_display_draw_text	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_text(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)
spice_marshall_msg_display_draw_text	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_text(SpiceMarshaller *m, SpiceMsgDisplayDrawText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)
spice_marshall_msg_display_draw_transparent	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_transparent(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawTransparent *msg, SpiceMarshaller **src_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawTransparent *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_msg_display_draw_transparent	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_transparent(SpiceMarshaller *m, SpiceMsgDisplayDrawTransparent *msg, SpiceMarshaller **src_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawTransparent *msg, SpiceMarshaller **src_bitmap_out)
spice_marshall_msg_display_draw_whiteness	generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_whiteness(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawWhiteness *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayDrawWhiteness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_draw_whiteness	generated_server_marshallers.h	/^void spice_marshall_msg_display_draw_whiteness(SpiceMarshaller *m, SpiceMsgDisplayDrawWhiteness *msg, SpiceMarshaller **mask_bitmap_out);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayDrawWhiteness *msg, SpiceMarshaller **mask_bitmap_out)
spice_marshall_msg_display_inval_all_pixmaps	generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_all_pixmaps(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgWaitForChannels *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgWaitForChannels *msg)
spice_marshall_msg_display_inval_all_pixmaps	generated_server_marshallers.h	/^void spice_marshall_msg_display_inval_all_pixmaps(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg)
spice_marshall_msg_display_inval_list	generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_list(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceResourceList *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceResourceList *msg)
spice_marshall_msg_display_inval_list	generated_server_marshallers.h	/^void spice_marshall_msg_display_inval_list(SpiceMarshaller *m, SpiceResourceList *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceResourceList *msg)
spice_marshall_msg_display_inval_palette	generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_palette(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayInvalOne *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayInvalOne *msg)
spice_marshall_msg_display_inval_palette	generated_server_marshallers.h	/^void spice_marshall_msg_display_inval_palette(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg)
spice_marshall_msg_display_mode	generated_server_marshallers.c	/^void spice_marshall_msg_display_mode(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayMode *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayMode *msg)
spice_marshall_msg_display_mode	generated_server_marshallers.h	/^void spice_marshall_msg_display_mode(SpiceMarshaller *m, SpiceMsgDisplayMode *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayMode *msg)
spice_marshall_msg_display_monitors_config	generated_server_marshallers.c	/^void spice_marshall_msg_display_monitors_config(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayMonitorsConfig *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayMonitorsConfig *msg)
spice_marshall_msg_display_monitors_config	generated_server_marshallers.h	/^void spice_marshall_msg_display_monitors_config(SpiceMarshaller *m, SpiceMsgDisplayMonitorsConfig *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayMonitorsConfig *msg)
spice_marshall_msg_display_stream_activate_report	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_activate_report(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamActivateReport *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamActivateReport *msg)
spice_marshall_msg_display_stream_activate_report	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_activate_report(SpiceMarshaller *m, SpiceMsgDisplayStreamActivateReport *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamActivateReport *msg)
spice_marshall_msg_display_stream_clip	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_clip(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamClip *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamClip *msg)
spice_marshall_msg_display_stream_clip	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_clip(SpiceMarshaller *m, SpiceMsgDisplayStreamClip *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamClip *msg)
spice_marshall_msg_display_stream_create	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_create(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamCreate *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamCreate *msg)
spice_marshall_msg_display_stream_create	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_create(SpiceMarshaller *m, SpiceMsgDisplayStreamCreate *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamCreate *msg)
spice_marshall_msg_display_stream_data	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamData *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamData *msg)
spice_marshall_msg_display_stream_data	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_data(SpiceMarshaller *m, SpiceMsgDisplayStreamData *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamData *msg)
spice_marshall_msg_display_stream_data_sized	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_data_sized(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamDataSized *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamDataSized *msg)
spice_marshall_msg_display_stream_data_sized	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_data_sized(SpiceMarshaller *m, SpiceMsgDisplayStreamDataSized *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamDataSized *msg)
spice_marshall_msg_display_stream_destroy	generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_destroy(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamDestroy *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisplayStreamDestroy *msg)
spice_marshall_msg_display_stream_destroy	generated_server_marshallers.h	/^void spice_marshall_msg_display_stream_destroy(SpiceMarshaller *m, SpiceMsgDisplayStreamDestroy *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgDisplayStreamDestroy *msg)
spice_marshall_msg_display_surface_create	generated_server_marshallers.c	/^void spice_marshall_msg_display_surface_create(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSurfaceCreate *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSurfaceCreate *msg)
spice_marshall_msg_display_surface_create	generated_server_marshallers.h	/^void spice_marshall_msg_display_surface_create(SpiceMarshaller *m, SpiceMsgSurfaceCreate *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgSurfaceCreate *msg)
spice_marshall_msg_display_surface_destroy	generated_server_marshallers.c	/^void spice_marshall_msg_display_surface_destroy(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSurfaceDestroy *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSurfaceDestroy *msg)
spice_marshall_msg_display_surface_destroy	generated_server_marshallers.h	/^void spice_marshall_msg_display_surface_destroy(SpiceMarshaller *m, SpiceMsgSurfaceDestroy *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgSurfaceDestroy *msg)
spice_marshall_msg_inputs_init	generated_server_marshallers.c	/^void spice_marshall_msg_inputs_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgInputsInit *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgInputsInit *msg)
spice_marshall_msg_inputs_init	generated_server_marshallers.h	/^void spice_marshall_msg_inputs_init(SpiceMarshaller *m, SpiceMsgInputsInit *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgInputsInit *msg)
spice_marshall_msg_inputs_key_modifiers	generated_server_marshallers.c	/^void spice_marshall_msg_inputs_key_modifiers(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgInputsKeyModifiers *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgInputsKeyModifiers *msg)
spice_marshall_msg_inputs_key_modifiers	generated_server_marshallers.h	/^void spice_marshall_msg_inputs_key_modifiers(SpiceMarshaller *m, SpiceMsgInputsKeyModifiers *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgInputsKeyModifiers *msg)
spice_marshall_msg_main_agent_connected_tokens	generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_connected_tokens(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentConnectedTokens *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentConnectedTokens *msg)
spice_marshall_msg_main_agent_connected_tokens	generated_server_marshallers.h	/^void spice_marshall_msg_main_agent_connected_tokens(SpiceMarshaller *m, SpiceMsgMainAgentConnectedTokens *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainAgentConnectedTokens *msg)
spice_marshall_msg_main_agent_disconnected	generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_disconnected(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentDisconnect *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentDisconnect *msg)
spice_marshall_msg_main_agent_disconnected	generated_server_marshallers.h	/^void spice_marshall_msg_main_agent_disconnected(SpiceMarshaller *m, SpiceMsgMainAgentDisconnect *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainAgentDisconnect *msg)
spice_marshall_msg_main_agent_token	generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_token(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentTokens *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainAgentTokens *msg)
spice_marshall_msg_main_agent_token	generated_server_marshallers.h	/^void spice_marshall_msg_main_agent_token(SpiceMarshaller *m, SpiceMsgMainAgentTokens *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainAgentTokens *msg)
spice_marshall_msg_main_channels_list	generated_server_marshallers.c	/^void spice_marshall_msg_main_channels_list(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgChannels *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgChannels *msg)
spice_marshall_msg_main_channels_list	generated_server_marshallers.h	/^void spice_marshall_msg_main_channels_list(SpiceMarshaller *m, SpiceMsgChannels *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgChannels *msg)
spice_marshall_msg_main_init	generated_server_marshallers.c	/^void spice_marshall_msg_main_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainInit *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainInit *msg)
spice_marshall_msg_main_init	generated_server_marshallers.h	/^void spice_marshall_msg_main_init(SpiceMarshaller *m, SpiceMsgMainInit *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainInit *msg)
spice_marshall_msg_main_migrate_begin	generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_begin(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrationBegin *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrationBegin *msg)
spice_marshall_msg_main_migrate_begin	generated_server_marshallers.h	/^void spice_marshall_msg_main_migrate_begin(SpiceMarshaller *m, SpiceMsgMainMigrationBegin *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainMigrationBegin *msg)
spice_marshall_msg_main_migrate_begin_seamless	generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_begin_seamless(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrateBeginSeamless *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrateBeginSeamless *msg)
spice_marshall_msg_main_migrate_begin_seamless	generated_server_marshallers.h	/^void spice_marshall_msg_main_migrate_begin_seamless(SpiceMarshaller *m, SpiceMsgMainMigrateBeginSeamless *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainMigrateBeginSeamless *msg)
spice_marshall_msg_main_migrate_switch_host	generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_switch_host(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrationSwitchHost *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMigrationSwitchHost *msg)
spice_marshall_msg_main_migrate_switch_host	generated_server_marshallers.h	/^void spice_marshall_msg_main_migrate_switch_host(SpiceMarshaller *m, SpiceMsgMainMigrationSwitchHost *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainMigrationSwitchHost *msg)
spice_marshall_msg_main_mouse_mode	generated_server_marshallers.c	/^void spice_marshall_msg_main_mouse_mode(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMouseMode *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMouseMode *msg)
spice_marshall_msg_main_mouse_mode	generated_server_marshallers.h	/^void spice_marshall_msg_main_mouse_mode(SpiceMarshaller *m, SpiceMsgMainMouseMode *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainMouseMode *msg)
spice_marshall_msg_main_multi_media_time	generated_server_marshallers.c	/^void spice_marshall_msg_main_multi_media_time(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMultiMediaTime *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainMultiMediaTime *msg)
spice_marshall_msg_main_multi_media_time	generated_server_marshallers.h	/^void spice_marshall_msg_main_multi_media_time(SpiceMarshaller *m, SpiceMsgMainMultiMediaTime *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainMultiMediaTime *msg)
spice_marshall_msg_main_name	generated_server_marshallers.c	/^void spice_marshall_msg_main_name(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainName *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainName *msg)
spice_marshall_msg_main_name	generated_server_marshallers.h	/^void spice_marshall_msg_main_name(SpiceMarshaller *m, SpiceMsgMainName *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainName *msg)
spice_marshall_msg_main_uuid	generated_server_marshallers.c	/^void spice_marshall_msg_main_uuid(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainUuid *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMainUuid *msg)
spice_marshall_msg_main_uuid	generated_server_marshallers.h	/^void spice_marshall_msg_main_uuid(SpiceMarshaller *m, SpiceMsgMainUuid *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMainUuid *msg)
spice_marshall_msg_migrate	generated_server_marshallers.c	/^void spice_marshall_msg_migrate(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMigrate *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgMigrate *msg)
spice_marshall_msg_migrate	generated_server_marshallers.h	/^void spice_marshall_msg_migrate(SpiceMarshaller *m, SpiceMsgMigrate *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgMigrate *msg)
spice_marshall_msg_notify	generated_server_marshallers.c	/^void spice_marshall_msg_notify(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgNotify *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgNotify *msg)
spice_marshall_msg_notify	generated_server_marshallers.h	/^void spice_marshall_msg_notify(SpiceMarshaller *m, SpiceMsgNotify *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgNotify *msg)
spice_marshall_msg_ping	generated_server_marshallers.c	/^void spice_marshall_msg_ping(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)
spice_marshall_msg_ping	generated_server_marshallers.h	/^void spice_marshall_msg_ping(SpiceMarshaller *m, SpiceMsgPing *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPing *msg)
spice_marshall_msg_playback_data	generated_server_marshallers.c	/^void spice_marshall_msg_playback_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackPacket *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackPacket *msg)
spice_marshall_msg_playback_data	generated_server_marshallers.h	/^void spice_marshall_msg_playback_data(SpiceMarshaller *m, SpiceMsgPlaybackPacket *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPlaybackPacket *msg)
spice_marshall_msg_playback_latency	generated_server_marshallers.c	/^void spice_marshall_msg_playback_latency(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackLatency *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackLatency *msg)
spice_marshall_msg_playback_latency	generated_server_marshallers.h	/^void spice_marshall_msg_playback_latency(SpiceMarshaller *m, SpiceMsgPlaybackLatency *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPlaybackLatency *msg)
spice_marshall_msg_playback_mode	generated_server_marshallers.c	/^void spice_marshall_msg_playback_mode(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackMode *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackMode *msg)
spice_marshall_msg_playback_mode	generated_server_marshallers.h	/^void spice_marshall_msg_playback_mode(SpiceMarshaller *m, SpiceMsgPlaybackMode *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPlaybackMode *msg)
spice_marshall_msg_playback_start	generated_server_marshallers.c	/^void spice_marshall_msg_playback_start(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackStart *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPlaybackStart *msg)
spice_marshall_msg_playback_start	generated_server_marshallers.h	/^void spice_marshall_msg_playback_start(SpiceMarshaller *m, SpiceMsgPlaybackStart *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPlaybackStart *msg)
spice_marshall_msg_port_event	generated_server_marshallers.c	/^void spice_marshall_msg_port_event(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPortEvent *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPortEvent *msg)
spice_marshall_msg_port_event	generated_server_marshallers.h	/^void spice_marshall_msg_port_event(SpiceMarshaller *m, SpiceMsgPortEvent *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPortEvent *msg)
spice_marshall_msg_port_init	generated_server_marshallers.c	/^void spice_marshall_msg_port_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPortInit *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPortInit *msg)
spice_marshall_msg_port_init	generated_server_marshallers.h	/^void spice_marshall_msg_port_init(SpiceMarshaller *m, SpiceMsgPortInit *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgPortInit *msg)
spice_marshall_msg_record_start	generated_server_marshallers.c	/^void spice_marshall_msg_record_start(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgRecordStart *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgRecordStart *msg)
spice_marshall_msg_record_start	generated_server_marshallers.h	/^void spice_marshall_msg_record_start(SpiceMarshaller *m, SpiceMsgRecordStart *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgRecordStart *msg)
spice_marshall_msg_set_ack	generated_server_marshallers.c	/^void spice_marshall_msg_set_ack(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSetAck *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSetAck *msg)
spice_marshall_msg_set_ack	generated_server_marshallers.h	/^void spice_marshall_msg_set_ack(SpiceMarshaller *m, SpiceMsgSetAck *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgSetAck *msg)
spice_marshall_msg_smartcard_data	generated_server_marshallers.c	/^void spice_marshall_msg_smartcard_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSmartcard *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgSmartcard *msg)
spice_marshall_msg_smartcard_data	generated_server_marshallers.h	/^void spice_marshall_msg_smartcard_data(SpiceMarshaller *m, SpiceMsgSmartcard *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgSmartcard *msg)
spice_marshall_msg_tunnel_init	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelInit *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelInit *msg)
spice_marshall_msg_tunnel_init	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_init(SpiceMarshaller *m, SpiceMsgTunnelInit *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelInit *msg)
spice_marshall_msg_tunnel_service_ip_map	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_service_ip_map(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelServiceIpMap *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelServiceIpMap *msg)
spice_marshall_msg_tunnel_service_ip_map	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_service_ip_map(SpiceMarshaller *m, SpiceMsgTunnelServiceIpMap *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelServiceIpMap *msg)
spice_marshall_msg_tunnel_socket_close	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_close(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketClose *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketClose *msg)
spice_marshall_msg_tunnel_socket_close	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_close(SpiceMarshaller *m, SpiceMsgTunnelSocketClose *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketClose *msg)
spice_marshall_msg_tunnel_socket_closed_ack	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_closed_ack(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketClosedAck *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketClosedAck *msg)
spice_marshall_msg_tunnel_socket_closed_ack	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_closed_ack(SpiceMarshaller *m, SpiceMsgTunnelSocketClosedAck *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketClosedAck *msg)
spice_marshall_msg_tunnel_socket_data	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketData *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketData *msg)
spice_marshall_msg_tunnel_socket_data	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_data(SpiceMarshaller *m, SpiceMsgTunnelSocketData *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketData *msg)
spice_marshall_msg_tunnel_socket_fin	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_fin(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketFin *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketFin *msg)
spice_marshall_msg_tunnel_socket_fin	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_fin(SpiceMarshaller *m, SpiceMsgTunnelSocketFin *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketFin *msg)
spice_marshall_msg_tunnel_socket_open	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_open(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketOpen *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketOpen *msg)
spice_marshall_msg_tunnel_socket_open	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_open(SpiceMarshaller *m, SpiceMsgTunnelSocketOpen *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketOpen *msg)
spice_marshall_msg_tunnel_socket_token	generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_token(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketTokens *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgTunnelSocketTokens *msg)
spice_marshall_msg_tunnel_socket_token	generated_server_marshallers.h	/^void spice_marshall_msg_tunnel_socket_token(SpiceMarshaller *m, SpiceMsgTunnelSocketTokens *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgTunnelSocketTokens *msg)
spice_marshall_msg_wait_for_channels	generated_server_marshallers.c	/^void spice_marshall_msg_wait_for_channels(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgWaitForChannels *msg)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgWaitForChannels *msg)
spice_marshall_msg_wait_for_channels	generated_server_marshallers.h	/^void spice_marshall_msg_wait_for_channels(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg);$/;"	p	signature:(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg)
spice_marshall_msgc_ack_sync	generated_client_marshallers.c	/^static void spice_marshall_msgc_ack_sync(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcAckSync *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcAckSync *msg)
spice_marshall_msgc_ack_sync	generated_client_marshallers1.c	/^static void spice_marshall_msgc_ack_sync(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcAckSync *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcAckSync *msg)
spice_marshall_msgc_disconnecting	generated_client_marshallers.c	/^static void spice_marshall_msgc_disconnecting(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)
spice_marshall_msgc_disconnecting	generated_client_marshallers1.c	/^static void spice_marshall_msgc_disconnecting(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgDisconnect *msg)
spice_marshall_msgc_display_init	generated_client_marshallers.c	/^static void spice_marshall_msgc_display_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayInit *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayInit *msg)
spice_marshall_msgc_display_init	generated_client_marshallers1.c	/^static void spice_marshall_msgc_display_init(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayInit *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayInit *msg)
spice_marshall_msgc_display_stream_report	generated_client_marshallers.c	/^static void spice_marshall_msgc_display_stream_report(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayStreamReport *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcDisplayStreamReport *msg)
spice_marshall_msgc_inputs_key_down	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_down(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyDown *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyDown *msg)
spice_marshall_msgc_inputs_key_down	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_down(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyDown *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyDown *msg)
spice_marshall_msgc_inputs_key_modifiers	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_modifiers(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyModifiers *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyModifiers *msg)
spice_marshall_msgc_inputs_key_modifiers	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_modifiers(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyModifiers *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyModifiers *msg)
spice_marshall_msgc_inputs_key_up	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_up(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyUp *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyUp *msg)
spice_marshall_msgc_inputs_key_up	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_up(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyUp *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcKeyUp *msg)
spice_marshall_msgc_inputs_mouse_motion	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_motion(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseMotion *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseMotion *msg)
spice_marshall_msgc_inputs_mouse_motion	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_motion(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseMotion *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseMotion *msg)
spice_marshall_msgc_inputs_mouse_position	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_position(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePosition *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePosition *msg)
spice_marshall_msgc_inputs_mouse_position	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_position(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePosition *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePosition *msg)
spice_marshall_msgc_inputs_mouse_press	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_press(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePress *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePress *msg)
spice_marshall_msgc_inputs_mouse_press	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_press(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePress *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMousePress *msg)
spice_marshall_msgc_inputs_mouse_release	generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_release(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseRelease *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseRelease *msg)
spice_marshall_msgc_inputs_mouse_release	generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_release(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseRelease *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMouseRelease *msg)
spice_marshall_msgc_main_agent_start	generated_client_marshallers.c	/^static void spice_marshall_msgc_main_agent_start(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentStart *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentStart *msg)
spice_marshall_msgc_main_agent_start	generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_agent_start(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentStart *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentStart *msg)
spice_marshall_msgc_main_agent_token	generated_client_marshallers.c	/^static void spice_marshall_msgc_main_agent_token(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentTokens *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentTokens *msg)
spice_marshall_msgc_main_agent_token	generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_agent_token(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentTokens *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainAgentTokens *msg)
spice_marshall_msgc_main_client_info	generated_client_marshallers.c	/^static void spice_marshall_msgc_main_client_info(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcClientInfo *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcClientInfo *msg)
spice_marshall_msgc_main_client_info	generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_client_info(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcClientInfo *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcClientInfo *msg)
spice_marshall_msgc_main_migrate_dst_do_seamless	generated_client_marshallers.c	/^static void spice_marshall_msgc_main_migrate_dst_do_seamless(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMigrateDstDoSeamless *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMigrateDstDoSeamless *msg)
spice_marshall_msgc_main_mouse_mode_request	generated_client_marshallers.c	/^static void spice_marshall_msgc_main_mouse_mode_request(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMouseModeRequest *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMouseModeRequest *msg)
spice_marshall_msgc_main_mouse_mode_request	generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_mouse_mode_request(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMouseModeRequest *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcMainMouseModeRequest *msg)
spice_marshall_msgc_pong	generated_client_marshallers.c	/^static void spice_marshall_msgc_pong(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)
spice_marshall_msgc_pong	generated_client_marshallers1.c	/^static void spice_marshall_msgc_pong(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgPing *msg)
spice_marshall_msgc_port_event	generated_client_marshallers.c	/^static void spice_marshall_msgc_port_event(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcPortEvent *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcPortEvent *msg)
spice_marshall_msgc_record_data	generated_client_marshallers.c	/^static void spice_marshall_msgc_record_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordPacket *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordPacket *msg)
spice_marshall_msgc_record_data	generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordPacket *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordPacket *msg)
spice_marshall_msgc_record_mode	generated_client_marshallers.c	/^static void spice_marshall_msgc_record_mode(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordMode *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordMode *msg)
spice_marshall_msgc_record_mode	generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_mode(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordMode *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordMode *msg)
spice_marshall_msgc_record_start_mark	generated_client_marshallers.c	/^static void spice_marshall_msgc_record_start_mark(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordStartMark *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordStartMark *msg)
spice_marshall_msgc_record_start_mark	generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_start_mark(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordStartMark *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcRecordStartMark *msg)
spice_marshall_msgc_smartcard_atr	generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_atr(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgATR *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgATR *msg)
spice_marshall_msgc_smartcard_data	generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out)
spice_marshall_msgc_smartcard_error	generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_error(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgError *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgError *msg)
spice_marshall_msgc_smartcard_header	generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_header(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgHeader *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgHeader *msg)
spice_marshall_msgc_smartcard_reader_add	generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_reader_add(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgReaderAdd *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED VSCMsgReaderAdd *msg)
spice_marshall_msgc_tunnel_service_add	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_service_add(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out)
spice_marshall_msgc_tunnel_service_remove	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_service_remove(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelRemoveService *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelRemoveService *msg)
spice_marshall_msgc_tunnel_socket_closed	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_closed(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketClosed *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketClosed *msg)
spice_marshall_msgc_tunnel_socket_closed_ack	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_closed_ack(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketClosedAck *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketClosedAck *msg)
spice_marshall_msgc_tunnel_socket_data	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_data(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketData *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketData *msg)
spice_marshall_msgc_tunnel_socket_fin	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_fin(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketFin *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketFin *msg)
spice_marshall_msgc_tunnel_socket_open_ack	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_open_ack(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketOpenAck *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketOpenAck *msg)
spice_marshall_msgc_tunnel_socket_open_nack	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_open_nack(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketOpenNack *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketOpenNack *msg)
spice_marshall_msgc_tunnel_socket_token	generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_token(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketTokens *msg)$/;"	f	file:	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, SPICE_GNUC_UNUSED SpiceMsgcTunnelSocketTokens *msg)
spice_marshaller_add	marshaller.c	/^uint8_t *spice_marshaller_add(SpiceMarshaller *m, const uint8_t *data, size_t size)$/;"	f	signature:(SpiceMarshaller *m, const uint8_t *data, size_t size)
spice_marshaller_add	marshaller.h	/^uint8_t *spice_marshaller_add(SpiceMarshaller *m, const uint8_t *data, size_t size);$/;"	p	signature:(SpiceMarshaller *m, const uint8_t *data, size_t size)
spice_marshaller_add_int16	marshaller.c	/^void *spice_marshaller_add_int16(SpiceMarshaller *m, int16_t v)$/;"	f	signature:(SpiceMarshaller *m, int16_t v)
spice_marshaller_add_int16	marshaller.h	/^void *spice_marshaller_add_int16(SpiceMarshaller *m, int16_t v);$/;"	p	signature:(SpiceMarshaller *m, int16_t v)
spice_marshaller_add_int32	marshaller.c	/^void *spice_marshaller_add_int32(SpiceMarshaller *m, int32_t v)$/;"	f	signature:(SpiceMarshaller *m, int32_t v)
spice_marshaller_add_int32	marshaller.h	/^void *spice_marshaller_add_int32(SpiceMarshaller *m, int32_t v);$/;"	p	signature:(SpiceMarshaller *m, int32_t v)
spice_marshaller_add_int64	marshaller.c	/^void *spice_marshaller_add_int64(SpiceMarshaller *m, int64_t v)$/;"	f	signature:(SpiceMarshaller *m, int64_t v)
spice_marshaller_add_int64	marshaller.h	/^void *spice_marshaller_add_int64(SpiceMarshaller *m, int64_t v);$/;"	p	signature:(SpiceMarshaller *m, int64_t v)
spice_marshaller_add_int8	marshaller.c	/^void *spice_marshaller_add_int8(SpiceMarshaller *m, int8_t v)$/;"	f	signature:(SpiceMarshaller *m, int8_t v)
spice_marshaller_add_int8	marshaller.h	/^void *spice_marshaller_add_int8(SpiceMarshaller *m, int8_t v);$/;"	p	signature:(SpiceMarshaller *m, int8_t v)
spice_marshaller_add_item	marshaller.c	/^static MarshallerItem *spice_marshaller_add_item(SpiceMarshaller *m)$/;"	f	file:	signature:(SpiceMarshaller *m)
spice_marshaller_add_ref	marshaller.c	/^uint8_t *spice_marshaller_add_ref(SpiceMarshaller *m, uint8_t *data, size_t size)$/;"	f	signature:(SpiceMarshaller *m, uint8_t *data, size_t size)
spice_marshaller_add_ref	marshaller.h	/^uint8_t *spice_marshaller_add_ref(SpiceMarshaller *m, uint8_t *data, size_t size);$/;"	p	signature:(SpiceMarshaller *m, uint8_t *data, size_t size)
spice_marshaller_add_ref_chunks	marshaller.c	/^void spice_marshaller_add_ref_chunks(SpiceMarshaller *m, SpiceChunks *chunks)$/;"	f	signature:(SpiceMarshaller *m, SpiceChunks *chunks)
spice_marshaller_add_ref_chunks	marshaller.h	/^void     spice_marshaller_add_ref_chunks(SpiceMarshaller *m, SpiceChunks *chunks);$/;"	p	signature:(SpiceMarshaller *m, SpiceChunks *chunks)
spice_marshaller_add_ref_full	marshaller.c	/^uint8_t *spice_marshaller_add_ref_full(SpiceMarshaller *m, uint8_t *data, size_t size,$/;"	f	signature:(SpiceMarshaller *m, uint8_t *data, size_t size, spice_marshaller_item_free_func free_data, void *opaque)
spice_marshaller_add_ref_full	marshaller.h	/^uint8_t *spice_marshaller_add_ref_full(SpiceMarshaller *m, uint8_t *data, size_t size,$/;"	p	signature:(SpiceMarshaller *m, uint8_t *data, size_t size, spice_marshaller_item_free_func free_data, void *opaque)
spice_marshaller_add_uint16	marshaller.c	/^void *spice_marshaller_add_uint16(SpiceMarshaller *m, uint16_t v)$/;"	f	signature:(SpiceMarshaller *m, uint16_t v)
spice_marshaller_add_uint16	marshaller.h	/^void *spice_marshaller_add_uint16(SpiceMarshaller *m, uint16_t v);$/;"	p	signature:(SpiceMarshaller *m, uint16_t v)
spice_marshaller_add_uint32	marshaller.c	/^void *spice_marshaller_add_uint32(SpiceMarshaller *m, uint32_t v)$/;"	f	signature:(SpiceMarshaller *m, uint32_t v)
spice_marshaller_add_uint32	marshaller.h	/^void *spice_marshaller_add_uint32(SpiceMarshaller *m, uint32_t v);$/;"	p	signature:(SpiceMarshaller *m, uint32_t v)
spice_marshaller_add_uint64	marshaller.c	/^void *spice_marshaller_add_uint64(SpiceMarshaller *m, uint64_t v)$/;"	f	signature:(SpiceMarshaller *m, uint64_t v)
spice_marshaller_add_uint64	marshaller.h	/^void *spice_marshaller_add_uint64(SpiceMarshaller *m, uint64_t v);$/;"	p	signature:(SpiceMarshaller *m, uint64_t v)
spice_marshaller_add_uint8	marshaller.c	/^void *spice_marshaller_add_uint8(SpiceMarshaller *m, uint8_t v)$/;"	f	signature:(SpiceMarshaller *m, uint8_t v)
spice_marshaller_add_uint8	marshaller.h	/^void *spice_marshaller_add_uint8(SpiceMarshaller *m, uint8_t v);$/;"	p	signature:(SpiceMarshaller *m, uint8_t v)
spice_marshaller_destroy	marshaller.c	/^void spice_marshaller_destroy(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_destroy	marshaller.h	/^void spice_marshaller_destroy(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_fill_iovec	marshaller.c	/^int spice_marshaller_fill_iovec(SpiceMarshaller *m, struct iovec *vec,$/;"	f	signature:(SpiceMarshaller *m, struct iovec *vec, int n_vec, size_t skip_bytes)
spice_marshaller_fill_iovec	marshaller.h	/^int spice_marshaller_fill_iovec(SpiceMarshaller *m, struct iovec *vec,$/;"	p	signature:(SpiceMarshaller *m, struct iovec *vec, int n_vec, size_t skip_bytes)
spice_marshaller_flush	marshaller.c	/^void spice_marshaller_flush(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_flush	marshaller.h	/^void spice_marshaller_flush(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_get_offset	marshaller.c	/^size_t spice_marshaller_get_offset(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_get_offset	marshaller.h	/^size_t spice_marshaller_get_offset(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_get_ptr	marshaller.c	/^uint8_t *spice_marshaller_get_ptr(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_get_ptr	marshaller.h	/^uint8_t *spice_marshaller_get_ptr(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_get_ptr_submarshaller	marshaller.c	/^SpiceMarshaller *spice_marshaller_get_ptr_submarshaller(SpiceMarshaller *m, int is_64bit)$/;"	f	signature:(SpiceMarshaller *m, int is_64bit)
spice_marshaller_get_ptr_submarshaller	marshaller.h	/^SpiceMarshaller *spice_marshaller_get_ptr_submarshaller(SpiceMarshaller *m, int is_64bit);$/;"	p	signature:(SpiceMarshaller *m, int is_64bit)
spice_marshaller_get_size	marshaller.c	/^size_t spice_marshaller_get_size(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_get_size	marshaller.h	/^size_t spice_marshaller_get_size(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_get_submarshaller	marshaller.c	/^SpiceMarshaller *spice_marshaller_get_submarshaller(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_get_submarshaller	marshaller.h	/^SpiceMarshaller *spice_marshaller_get_submarshaller(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_get_total_size	marshaller.c	/^size_t spice_marshaller_get_total_size(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_get_total_size	marshaller.h	/^size_t spice_marshaller_get_total_size(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_init	marshaller.c	/^static void spice_marshaller_init(SpiceMarshaller *m,$/;"	f	file:	signature:(SpiceMarshaller *m, SpiceMarshallerData *data)
spice_marshaller_item_free_func	marshaller.h	/^typedef void (*spice_marshaller_item_free_func)(uint8_t *data, void *opaque);$/;"	t
spice_marshaller_linearize	marshaller.c	/^uint8_t *spice_marshaller_linearize(SpiceMarshaller *m, size_t skip_bytes,$/;"	f	signature:(SpiceMarshaller *m, size_t skip_bytes, size_t *len, int *free_res)
spice_marshaller_linearize	marshaller.h	/^uint8_t *spice_marshaller_linearize(SpiceMarshaller *m, size_t skip,$/;"	p	signature:(SpiceMarshaller *m, size_t skip, size_t *len, int *free_res)
spice_marshaller_new	marshaller.c	/^SpiceMarshaller *spice_marshaller_new(void)$/;"	f	signature:(void)
spice_marshaller_new	marshaller.h	/^SpiceMarshaller *spice_marshaller_new(void);$/;"	p	signature:(void)
spice_marshaller_reserve_space	marshaller.c	/^uint8_t *spice_marshaller_reserve_space(SpiceMarshaller *m, size_t size)$/;"	f	signature:(SpiceMarshaller *m, size_t size)
spice_marshaller_reserve_space	marshaller.h	/^uint8_t *spice_marshaller_reserve_space(SpiceMarshaller *m, size_t size);$/;"	p	signature:(SpiceMarshaller *m, size_t size)
spice_marshaller_reset	marshaller.c	/^void spice_marshaller_reset(SpiceMarshaller *m)$/;"	f	signature:(SpiceMarshaller *m)
spice_marshaller_reset	marshaller.h	/^void spice_marshaller_reset(SpiceMarshaller *m);$/;"	p	signature:(SpiceMarshaller *m)
spice_marshaller_set_base	marshaller.c	/^void spice_marshaller_set_base(SpiceMarshaller *m, size_t base)$/;"	f	signature:(SpiceMarshaller *m, size_t base)
spice_marshaller_set_base	marshaller.h	/^void spice_marshaller_set_base(SpiceMarshaller *m, size_t base);$/;"	p	signature:(SpiceMarshaller *m, size_t base)
spice_marshaller_set_uint32	marshaller.c	/^void spice_marshaller_set_uint32(SPICE_GNUC_UNUSED SpiceMarshaller *m, void *ref, uint32_t v)$/;"	f	signature:(SPICE_GNUC_UNUSED SpiceMarshaller *m, void *ref, uint32_t v)
spice_marshaller_set_uint32	marshaller.h	/^void  spice_marshaller_set_uint32(SpiceMarshaller *m, void *ref, uint32_t v);$/;"	p	signature:(SpiceMarshaller *m, void *ref, uint32_t v)
spice_marshaller_unreserve_space	marshaller.c	/^void spice_marshaller_unreserve_space(SpiceMarshaller *m, size_t size)$/;"	f	signature:(SpiceMarshaller *m, size_t size)
spice_marshaller_unreserve_space	marshaller.h	/^void spice_marshaller_unreserve_space(SpiceMarshaller *m, size_t size);$/;"	p	signature:(SpiceMarshaller *m, size_t size)
spice_memdup	mem.c	/^void *spice_memdup(const void *mem, size_t n_bytes)$/;"	f	signature:(const void *mem, size_t n_bytes)
spice_message_marshallers_get	client_marshallers.h	/^SpiceMessageMarshallers *spice_message_marshallers_get(void);$/;"	p	signature:(void)
spice_message_marshallers_get	generated_client_marshallers.c	/^SpiceMessageMarshallers * spice_message_marshallers_get(void)$/;"	f	signature:(void)
spice_message_marshallers_get1	client_marshallers.h	/^SpiceMessageMarshallers *spice_message_marshallers_get1(void);$/;"	p	signature:(void)
spice_message_marshallers_get1	generated_client_marshallers1.c	/^SpiceMessageMarshallers * spice_message_marshallers_get1(void)$/;"	f	signature:(void)
spice_new	mem.h	143;"	d
spice_new0	mem.h	144;"	d
spice_openssl_verify_free	ssl_verify.c	/^void spice_openssl_verify_free(SpiceOpenSSLVerify* verify)$/;"	f	signature:(SpiceOpenSSLVerify* verify)
spice_openssl_verify_free	ssl_verify.h	/^void spice_openssl_verify_free(SpiceOpenSSLVerify* verify);$/;"	p	signature:(SpiceOpenSSLVerify* verify)
spice_openssl_verify_new	ssl_verify.c	/^SpiceOpenSSLVerify* spice_openssl_verify_new(SSL *ssl, SPICE_SSL_VERIFY_OP verifyop,$/;"	f	signature:(SSL *ssl, SPICE_SSL_VERIFY_OP verifyop, const char *hostname, const char *pubkey, size_t pubkey_size, const char *subject)
spice_openssl_verify_new	ssl_verify.h	/^SpiceOpenSSLVerify* spice_openssl_verify_new(SSL *ssl, SPICE_SSL_VERIFY_OP verifyop,$/;"	p	signature:(SSL *ssl, SPICE_SSL_VERIFY_OP verifyop, const char *hostname, const char *pubkey, size_t pubkey_size, const char *subject)
spice_parse_channel_func_t	client_demarshallers.h	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor,$/;"	t
spice_parse_channel_func_t	generated_client_demarshallers.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_channel_func_t	generated_client_demarshallers1.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_channel_func_t	generated_server_demarshallers.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_msg	generated_client_demarshallers.c	/^uint8_t * spice_parse_msg(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	signature:(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
spice_parse_msg1	generated_client_demarshallers1.c	/^uint8_t * spice_parse_msg1(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	signature:(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
spice_parse_reply	generated_server_demarshallers.c	/^uint8_t * spice_parse_reply(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	signature:(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, SPICE_GNUC_UNUSED int minor, size_t *size_out, message_destructor_t *free_message)
spice_pixman_blit	pixman_utils.c	/^void spice_pixman_blit(pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height)
spice_pixman_blit	pixman_utils.h	/^void spice_pixman_blit(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int w, int h)
spice_pixman_blit_colorkey	pixman_utils.c	/^void spice_pixman_blit_colorkey (pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height, uint32_t transparent_color)
spice_pixman_blit_colorkey	pixman_utils.h	/^void spice_pixman_blit_colorkey(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height, uint32_t transparent_color)
spice_pixman_blit_rop	pixman_utils.c	/^void spice_pixman_blit_rop (pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int width, int height, SpiceROP rop)
spice_pixman_blit_rop	pixman_utils.h	/^void spice_pixman_blit_rop(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, pixman_image_t *src, int src_x, int src_y, int dest_x, int dest_y, int w, int h, SpiceROP rop)
spice_pixman_copy_rect	pixman_utils.c	/^void spice_pixman_copy_rect (pixman_image_t *image,$/;"	f	signature:(pixman_image_t *image, int src_x, int src_y, int width, int height, int dest_x, int dest_y)
spice_pixman_copy_rect	pixman_utils.h	/^void spice_pixman_copy_rect(pixman_image_t *image,$/;"	p	signature:(pixman_image_t *image, int src_x, int src_y, int w, int h, int dest_x, int dest_y)
spice_pixman_fill_rect	pixman_utils.c	/^void spice_pixman_fill_rect(pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, int x, int y, int width, int height, uint32_t value)
spice_pixman_fill_rect	pixman_utils.h	/^void spice_pixman_fill_rect(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, int x, int y, int w, int h, uint32_t value)
spice_pixman_fill_rect_rop	pixman_utils.c	/^void spice_pixman_fill_rect_rop(pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, int x, int y, int width, int height, uint32_t value, SpiceROP rop)
spice_pixman_fill_rect_rop	pixman_utils.h	/^void spice_pixman_fill_rect_rop(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, int x, int y, int w, int h, uint32_t value, SpiceROP rop)
spice_pixman_image_get_bpp	pixman_utils.c	/^int spice_pixman_image_get_bpp(pixman_image_t *image)$/;"	f	signature:(pixman_image_t *image)
spice_pixman_image_get_bpp	pixman_utils.h	/^int spice_pixman_image_get_bpp(pixman_image_t *image);$/;"	p	signature:(pixman_image_t *image)
spice_pixman_image_get_format	canvas_utils.c	/^int spice_pixman_image_get_format(pixman_image_t *image, pixman_format_code_t *format)$/;"	f	signature:(pixman_image_t *image, pixman_format_code_t *format)
spice_pixman_image_get_format	canvas_utils.h	/^int spice_pixman_image_get_format(pixman_image_t *image, pixman_format_code_t *format);$/;"	p	signature:(pixman_image_t *image, pixman_format_code_t *format)
spice_pixman_image_set_format	canvas_utils.c	/^spice_pixman_image_set_format(pixman_image_t *image,$/;"	f	signature:(pixman_image_t *image, pixman_format_code_t format)
spice_pixman_image_set_format	canvas_utils.h	/^void spice_pixman_image_set_format(pixman_image_t *image,$/;"	p	signature:(pixman_image_t *image, pixman_format_code_t format)
spice_pixman_region32_init_from_bitmap	pixman_utils.h	/^void spice_pixman_region32_init_from_bitmap(pixman_region32_t *region,$/;"	p	signature:(pixman_region32_t *region, uint32_t *data, int width, int height, int stride)
spice_pixman_region32_init_rects	pixman_utils.c	/^pixman_bool_t spice_pixman_region32_init_rects (pixman_region32_t *region,$/;"	f	signature:(pixman_region32_t *region, const SpiceRect *rects, int count)
spice_pixman_region32_init_rects	pixman_utils.h	/^pixman_bool_t spice_pixman_region32_init_rects(pixman_region32_t *region,$/;"	p	signature:(pixman_region32_t *region, const SpiceRect *rects, int count)
spice_pixman_tile_rect	pixman_utils.c	/^void spice_pixman_tile_rect(pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, int x, int y, int width, int height, pixman_image_t *tile, int offset_x, int offset_y)
spice_pixman_tile_rect	pixman_utils.h	/^void spice_pixman_tile_rect(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, int x, int y, int w, int h, pixman_image_t *tile, int offset_x, int offset_y)
spice_pixman_tile_rect_rop	pixman_utils.c	/^void spice_pixman_tile_rect_rop(pixman_image_t *dest,$/;"	f	signature:(pixman_image_t *dest, int x, int y, int width, int height, pixman_image_t *tile, int offset_x, int offset_y, SpiceROP rop)
spice_pixman_tile_rect_rop	pixman_utils.h	/^void spice_pixman_tile_rect_rop(pixman_image_t *dest,$/;"	p	signature:(pixman_image_t *dest, int x, int y, int w, int h, pixman_image_t *tile, int offset_x, int offset_y, SpiceROP rop)
spice_printerr	log.h	83;"	d
spice_realloc	mem.c	/^void *spice_realloc(void *mem, size_t n_bytes)$/;"	f	signature:(void *mem, size_t n_bytes)
spice_realloc_n	mem.c	/^void *spice_realloc_n(void *mem, size_t n_blocks, size_t n_block_bytes)$/;"	f	signature:(void *mem, size_t n_blocks, size_t n_block_bytes)
spice_renew	mem.h	145;"	d
spice_return_if_fail	log.h	59;"	d
spice_return_val_if_fail	log.h	68;"	d
spice_static_assert	log.h	144;"	d
spice_strdup	mem.c	/^char *spice_strdup(const char *str)$/;"	f	signature:(const char *str)
spice_strndup	mem.c	/^char *spice_strndup(const char *str, size_t n_bytes)$/;"	f	signature:(const char *str, size_t n_bytes)
spice_strnlen	mem.c	/^size_t spice_strnlen(const char *str, size_t max_len)$/;"	f	signature:(const char *str, size_t max_len)
spice_strnlen	mem.h	/^size_t spice_strnlen(const char *str, size_t max_len);$/;"	p	signature:(const char *str, size_t max_len)
spice_surface_format_to_pixman	pixman_utils.c	/^pixman_format_code_t spice_surface_format_to_pixman(uint32_t surface_format)$/;"	f	signature:(uint32_t surface_format)
spice_surface_format_to_pixman	pixman_utils.h	/^pixman_format_code_t spice_surface_format_to_pixman(uint32_t surface_format);$/;"	p	signature:(uint32_t surface_format)
spice_warn_if	log.h	127;"	d
spice_warn_if_fail	log.h	119;"	d
spice_warn_if_reached	log.h	77;"	d
spice_warning	log.h	101;"	d
sport	messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMigrationDstInfo	access:public
sport	messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost	access:public
src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceAlphaBlend	access:public
src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceCopy	access:public
src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceOpaque	access:public
src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceRop3	access:public
src_area	draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceTransparent	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceAlphaBlend	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceComposite	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceCopy	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceOpaque	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceRop3	access:public
src_bitmap	draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceTransparent	access:public
src_color	draw.h	/^    uint32_t src_color;$/;"	m	struct:SpiceTransparent	access:public
src_height	messages.h	/^    uint32_t src_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
src_mig_version	messages.h	/^    uint32_t src_mig_version;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless	access:public
src_origin	draw.h	/^    SpicePoint16 src_origin;$/;"	m	struct:SpiceComposite	access:public
src_pos	messages.h	/^    SpicePoint src_pos;$/;"	m	struct:SpiceMsgDisplayCopyBits	access:public
src_transform	draw.h	/^    SpiceTransform src_transform;$/;"	m	struct:SpiceComposite	access:public
src_version	messages.h	/^    uint32_t src_version;$/;"	m	struct:SpiceMsgcMainMigrateDstDoSeamless	access:public
src_width	messages.h	/^    uint32_t src_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
ssl	ssl_verify.h	/^    SSL                 *ssl;$/;"	m	struct:__anon2	access:public
stabrand	quic.c	/^static unsigned int stabrand(void)$/;"	f	file:	signature:(void)
stamp	messages.h	/^    uint64_t stamp;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
start_draw	glc.c	/^static inline void start_draw(InternaCtx *ctx)$/;"	f	file:	signature:(InternaCtx *ctx)
start_frame_mm_time	messages.h	/^    uint32_t start_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
start_point	glc.c	/^    int start_point;$/;"	m	struct:Pathpath	file:	access:public
state	glc.c	/^    int state;$/;"	m	struct:PathStroke	file:	access:public
state	quic.c	/^    CommonState state;$/;"	m	struct:Channel	file:	access:public
static_assert	verify.h	210;"	d
static_buffer	marshaller.c	/^    MarshallerBuffer static_buffer;$/;"	m	struct:SpiceMarshallerData	file:	access:public
static_items	marshaller.c	/^    MarshallerItem static_items[N_STATIC_ITEMS];$/;"	m	struct:SpiceMarshaller	file:	access:public
static_marshaller	marshaller.c	/^    SpiceMarshaller static_marshaller;$/;"	m	struct:SpiceMarshallerData	file:	access:public
stencil_mask	glc.c	/^    int stencil_mask;$/;"	m	struct:InternaCtx	file:	access:public
stencil_refs	glc.c	/^    int stencil_refs;$/;"	m	struct:InternaCtx	file:	access:public
stepx	lines.c	/^    int stepx;                  \/* fixed integral dx *\/$/;"	m	struct:_PolyEdge	file:	access:public
str	draw.h	/^    SpiceString *str;$/;"	m	struct:SpiceText	access:public
stream_height	messages.h	/^    uint32_t stream_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
stream_id	messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
stream_id	messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
stream_width	messages.h	/^    uint32_t stream_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
stride	draw.h	/^    uint32_t stride;$/;"	m	struct:SpiceBitmap	access:public
stride	glc.c	/^    int stride;$/;"	m	struct:FillMaskInfo	file:	access:public
stride	glc.h	/^    int stride;$/;"	m	struct:GLCPImage	access:public
stride	lz.c	/^    int stride;                       \/\/ stride is in bytes. For rgb must be equal to$/;"	m	struct:Encoder	file:	access:public
stroke_fill_rects	canvas_base.c	/^static void stroke_fill_rects(lineGC * pGC,$/;"	f	file:	signature:(lineGC * pGC, int num_rects, pixman_rectangle32_t *rects, int foreground)
stroke_fill_spans	canvas_base.c	/^static void stroke_fill_spans(lineGC * pGC,$/;"	f	file:	signature:(lineGC * pGC, int num_spans, SpicePoint *points, int *widths, int sorted, int foreground)
stroke_lines_append	canvas_base.c	/^static void stroke_lines_append(StrokeLines *lines,$/;"	f	file:	signature:(StrokeLines *lines, int x, int y)
stroke_lines_append_bezier	canvas_base.c	/^static void stroke_lines_append_bezier(StrokeLines *lines,$/;"	f	file:	signature:(StrokeLines *lines, SpicePointFix *point1, SpicePointFix *point2, SpicePointFix *point3)
stroke_lines_append_fix	canvas_base.c	/^static void stroke_lines_append_fix(StrokeLines *lines,$/;"	f	file:	signature:(StrokeLines *lines, SpicePointFix *point)
stroke_lines_draw	canvas_base.c	/^static void stroke_lines_draw(StrokeLines *lines,$/;"	f	file:	signature:(StrokeLines *lines, lineGC *gc, int dashed)
stroke_lines_free	canvas_base.c	/^static void stroke_lines_free(StrokeLines *lines)$/;"	f	file:	signature:(StrokeLines *lines)
stroke_lines_init	canvas_base.c	/^static void stroke_lines_init(StrokeLines *lines)$/;"	f	file:	signature:(StrokeLines *lines)
style	draw.h	/^    SPICE_FIXED28_4 *style;$/;"	m	struct:SpiceLineAttr	access:public
style_nseg	draw.h	/^    uint8_t style_nseg;$/;"	m	struct:SpiceLineAttr	access:public
subdivide_bezier	canvas_base.c	/^static void subdivide_bezier(StrokeLines *lines,$/;"	f	file:	signature:(StrokeLines *lines, SpicePointFix point0, SpicePointFix point1, SpicePointFix point2, SpicePointFix point3)
subject	ssl_verify.h	/^    char                *subject;$/;"	m	struct:__anon2	access:public
subject_to_x509_name	ssl_verify.c	/^static X509_NAME* subject_to_x509_name(const char *subject, int *nentries)$/;"	f	file:	signature:(const char *subject, int *nentries)
supported_modes	messages.h	/^    uint32_t supported_modes;$/;"	m	struct:SpiceMsgMainMouseMode	access:public
supported_mouse_modes	messages.h	/^    uint32_t supported_mouse_modes;$/;"	m	struct:SpiceMsgMainInit	access:public
surface	draw.h	/^        SpiceSurface        surface;$/;"	m	union:SpiceImage::__anon17	access:public
surface_canvas	canvas_base.c	/^        SpiceCanvas *surface_canvas;$/;"	m	union:__anon28::__anon29	file:	access:public
surface_create	canvas_utils.c	/^pixman_image_t *surface_create(HDC dc, pixman_format_code_t format,$/;"	f	signature:(HDC dc, pixman_format_code_t format, int width, int height, int top_down)
surface_create	canvas_utils.h	/^pixman_image_t *surface_create(HDC dc, pixman_format_code_t format,$/;"	p	signature:(HDC dc, pixman_format_code_t format, int width, int height, int top_down)
surface_create	canvas_utils.h	/^pixman_image_t *surface_create(pixman_format_code_t format, int width, int height, int top_down);$/;"	p	signature:(pixman_format_code_t format, int width, int height, int top_down)
surface_create_stride	canvas_utils.c	/^pixman_image_t *surface_create_stride(HDC dc, pixman_format_code_t format, int width, int height,$/;"	f	signature:(HDC dc, pixman_format_code_t format, int width, int height, int stride)
surface_create_stride	canvas_utils.h	/^pixman_image_t *surface_create_stride(HDC dc, pixman_format_code_t format, int width, int height,$/;"	p	signature:(HDC dc, pixman_format_code_t format, int width, int height, int stride)
surface_create_stride	canvas_utils.h	/^pixman_image_t *surface_create_stride(pixman_format_code_t format, int width, int height,$/;"	p	signature:(pixman_format_code_t format, int width, int height, int stride)
surface_id	draw.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceSurface	access:public
surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayBase	access:public
surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayHead	access:public
surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayStreamCreate	access:public
surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
surface_id	messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceDestroy	access:public
surface_to_image	gl_canvas.c	/^static inline void surface_to_image(GLCanvas *canvas, pixman_image_t *surface, GLCImage *image,$/;"	f	file:	signature:(GLCanvas *canvas, pixman_image_t *surface, GLCImage *image, int ignore_stride)
surfaces	canvas_base.c	/^    SpiceImageSurfaces *surfaces;$/;"	m	struct:CanvasBase	file:	access:public
sw_canvas_init	sw_canvas.c	/^void sw_canvas_init(void) \/\/unsafe global function$/;"	f	signature:(void)
sw_canvas_init	sw_canvas.h	/^void sw_canvas_init(void);$/;"	p	signature:(void)
sw_canvas_ops	sw_canvas.c	/^static SpiceCanvasOps sw_canvas_ops;$/;"	v	file:
t00	draw.h	/^    uint32_t t00;$/;"	m	struct:SpiceTransform	access:public
t01	draw.h	/^    uint32_t t01;$/;"	m	struct:SpiceTransform	access:public
t02	draw.h	/^    uint32_t t02;$/;"	m	struct:SpiceTransform	access:public
t10	draw.h	/^    uint32_t t10;$/;"	m	struct:SpiceTransform	access:public
t11	draw.h	/^    uint32_t t11;$/;"	m	struct:SpiceTransform	access:public
t12	draw.h	/^    uint32_t t12;$/;"	m	struct:SpiceTransform	access:public
tabrand	quic.c	/^static unsigned int tabrand(unsigned int *tabrand_seed)$/;"	f	file:	signature:(unsigned int *tabrand_seed)
tabrand_chaos	quic.c	/^static const unsigned int tabrand_chaos[TABRAND_TABSIZE] = {$/;"	v	file:
tabrand_seed	quic.c	/^    unsigned int tabrand_seed;$/;"	m	struct:CommonState	file:	access:public
tail_image_segs	lz.c	/^    LzImageSegment *tail_image_segs;$/;"	m	struct:Encoder	file:	access:public
tesselator	glc.c	/^    GLUtesselator* tesselator;$/;"	m	struct:InternaCtx	file:	access:public
tessellation_combine	glc.c	/^static void tessellation_combine(GLdouble coords[3], GLdouble *vertex_data[4], GLfloat weight[4],$/;"	f	file:	signature:(GLdouble coords[3], GLdouble *vertex_data[4], GLfloat weight[4], GLdouble **data_out, void *usr_data)
tessellation_error	glc.c	/^static void tessellation_error(GLenum errorCode)$/;"	f	file:	signature:(GLenum errorCode)
test	region.c	/^static void test(const QRegion *r1, const QRegion *r2, int *expected)$/;"	f	file:	signature:(const QRegion *r1, const QRegion *r2, int *expected)
test_band	region.c	/^static int test_band(int query,$/;"	f	file:	signature:(int query, int res, pixman_box32_t *r1, pixman_box32_t *r1_end, pixman_box32_t *r2, pixman_box32_t *r2_end)
test_bit_be	pixman_utils.c	/^static inline int test_bit_be(void* addr, int bit)$/;"	f	file:	signature:(void* addr, int bit)
test_generic	region.c	/^static int test_generic (pixman_region32_t *reg1,$/;"	f	file:	signature:(pixman_region32_t *reg1, pixman_region32_t *reg2, int query)
texture	glc.c	/^    GLuint texture;$/;"	m	struct:InternalPat	file:	access:public
textures_lost	gl_canvas.c	/^    int textures_lost;$/;"	m	struct:GLCanvas	file:	access:public
three_bytes_pixel_t	quic.c	/^typedef struct ATTR_PACKED three_bytes_pixel_t {$/;"	s	file:
three_bytes_pixel_t::a	quic.c	/^    BYTE a;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
three_bytes_pixel_t::b	quic.c	/^    BYTE b;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
three_bytes_pixel_t::c	quic.c	/^    BYTE c;$/;"	m	struct:three_bytes_pixel_t	file:	access:public
three_bytes_t	quic.c	/^} three_bytes_t;$/;"	t	typeref:struct:three_bytes_pixel_t	file:
tile	canvas_base.c	/^        pixman_image_t *tile;$/;"	m	union:__anon28::__anon29	file:	access:public
tile_offset_x	canvas_base.c	/^    int tile_offset_x;$/;"	m	struct:__anon28	file:	access:public
tile_offset_y	canvas_base.c	/^    int tile_offset_y;$/;"	m	struct:__anon28	file:	access:public
tiled_rop_16_func_t	pixman_utils.c	/^typedef void (*tiled_rop_16_func_t)(uint16_t *ptr, int len,$/;"	t	file:
tiled_rop_32_func_t	pixman_utils.c	/^typedef void (*tiled_rop_32_func_t)(uint32_t *ptr, int len,$/;"	t	file:
tiled_rop_8_func_t	pixman_utils.c	/^typedef void (*tiled_rop_8_func_t)(uint8_t *ptr, int len,$/;"	t	file:
time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgMainMultiMediaTime	access:public
time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackMode	access:public
time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackPacket	access:public
time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackStart	access:public
time	messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgcRecordStartMark	access:public
time_stamp	messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgDisconnect	access:public
time_stamp	messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgNotify	access:public
timeout_ms	messages.h	/^    uint32_t timeout_ms;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
timestamp	messages.h	/^    uint64_t timestamp;$/;"	m	struct:SpiceMsgPing	access:public
tokens	messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgTunnelSocketOpen	access:public
tokens	messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck	access:public
top	draw.h	/^    int32_t top;$/;"	m	struct:SpiceRect	access:public
total_size	marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshaller	file:	access:public
total_size	marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshallerData	file:	access:public
touch_brush	canvas_base.c	/^static void touch_brush(CanvasBase *canvas, SpiceBrush *brush)$/;"	f	file:	signature:(CanvasBase *canvas, SpiceBrush *brush)
trail_frequency	messages.h	/^    uint16_t trail_frequency;$/;"	m	struct:SpiceMsgCursorInit	access:public
trail_length	messages.h	/^    uint16_t trail_length;$/;"	m	struct:SpiceMsgCursorInit	access:public
transform_to_pixman_transform	canvas_base.c	/^static void transform_to_pixman_transform(SpiceTransform *transform,$/;"	f	file:	signature:(SpiceTransform *transform, pixman_transform_t *p)
true_color	draw.h	/^    uint32_t true_color;$/;"	m	struct:SpiceTransparent	access:public
type	draw.h	/^    uint16_t type;$/;"	m	struct:SpiceCursorHeader	access:public
type	draw.h	/^    uint32_t type;$/;"	m	struct:SpiceBrush	access:public
type	draw.h	/^    uint8_t type;$/;"	m	struct:SpiceClip	access:public
type	draw.h	/^    uint8_t type;$/;"	m	struct:SpiceImageDescriptor	access:public
type	glc.c	/^    int type;$/;"	m	struct:PathSegment	file:	access:public
type	lz.c	/^    LzImageType type;$/;"	m	struct:Encoder	file:	access:public
type	messages.h	/^    VSCMsgType type;$/;"	m	struct:SpiceMsgSmartcard	access:public
type	messages.h	/^    uint16_t type;$/;"	m	struct:SpiceMsgTunnelIpInfo	access:public
type	messages.h	/^    uint32_t type;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	access:public
type	messages.h	/^    uint8_t type;$/;"	m	struct:SpiceChannelId	access:public
type	messages.h	/^    uint8_t type;$/;"	m	struct:SpiceResourceID	access:public
type	ogl_ctx.c	/^    int type;$/;"	m	struct:OGLCtx	file:	access:public
type	quic.c	/^    QuicImageType type;$/;"	m	struct:Encoder	file:	access:public
u	draw.h	/^    } u;$/;"	m	struct:SpiceBrush	typeref:union:SpiceBrush::__anon18	access:public
u	draw.h	/^    } u;$/;"	m	struct:SpiceImage	typeref:union:SpiceImage::__anon17	access:public
u	messages.h	/^    } u;$/;"	m	struct:SpiceMsgTunnelIpInfo	typeref:union:SpiceMsgTunnelIpInfo::__anon21	access:public
u	messages.h	/^    } u;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	typeref:union:SpiceMsgcTunnelAddGenericService::__anon22	access:public
uncompress_gray	quic.c	/^static void uncompress_gray(Encoder *encoder, uint8_t *buf, int stride)$/;"	f	file:	signature:(Encoder *encoder, uint8_t *buf, int stride)
uncompress_rgba	quic.c	/^static void uncompress_rgba(Encoder *encoder, uint8_t *buf, int stride)$/;"	f	file:	signature:(Encoder *encoder, uint8_t *buf, int stride)
uncompress_row	quic_rgb_tmpl.c	/^static void FNAME(uncompress_row)(Encoder *encoder,$/;"	f	file:	signature:(Encoder *encoder, const PIXEL * const prev_row, PIXEL * const cur_row, unsigned int width)
uncompress_row	quic_tmpl.c	/^static void FNAME(uncompress_row)(Encoder *encoder, Channel *channel,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, const PIXEL * const prev_row, PIXEL * const cur_row, unsigned int width)
uncompress_row0	quic_rgb_tmpl.c	/^static void FNAME(uncompress_row0)(Encoder *encoder,$/;"	f	file:	signature:(Encoder *encoder, PIXEL * const cur_row, unsigned int width)
uncompress_row0	quic_tmpl.c	/^static void FNAME(uncompress_row0)(Encoder *encoder, Channel *channel,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, PIXEL * const cur_row, unsigned int width)
uncompress_row0_seg	quic_rgb_tmpl.c	/^static void FNAME(uncompress_row0_seg)(Encoder *encoder, int i,$/;"	f	file:	signature:(Encoder *encoder, int i, PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
uncompress_row0_seg	quic_tmpl.c	/^static void FNAME(uncompress_row0_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, int i, BYTE * const correlate_row, PIXEL * const cur_row, const int end, const unsigned int waitmask, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
uncompress_row_seg	quic_rgb_tmpl.c	/^static void FNAME(uncompress_row_seg)(Encoder *encoder,$/;"	f	file:	signature:(Encoder *encoder, const PIXEL * const prev_row, PIXEL * const cur_row, int i, const int end, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
uncompress_row_seg	quic_tmpl.c	/^static void FNAME(uncompress_row_seg)(Encoder *encoder, Channel *channel,$/;"	f	file:	signature:(Encoder *encoder, Channel *channel, BYTE *correlate_row, const PIXEL * const prev_row, PIXEL * const cur_row, int i, const int end, SPICE_GNUC_UNUSED const unsigned int bpc, const unsigned int bpc_mask)
unimplemented_op	canvas_base.c	/^static void unimplemented_op(SpiceCanvas *canvas)$/;"	f	file:	signature:(SpiceCanvas *canvas)
unique	draw.h	/^    uint64_t unique;$/;"	m	struct:SpiceCursorHeader	access:public
unique	draw.h	/^    uint64_t unique;$/;"	m	struct:SpicePalette	access:public
unique_id	messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport	access:public
unique_id	messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport	access:public
unref_pat	glc.c	/^static inline void unref_pat(InternalPat *pat)$/;"	f	file:	signature:(InternalPat *pat)
unset_brush	gdi_canvas.c	/^static void unset_brush(HDC dc, HBRUSH prev_hbrush)$/;"	f	file:	signature:(HDC dc, HBRUSH prev_hbrush)
update_copy_count	lz.c	/^static inline void update_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:	signature:(Encoder *encoder, uint8_t copy_count)
update_model	quic_family_tmpl.c	/^static void FNAME(update_model)(CommonState *state, s_bucket * const bucket,$/;"	f	file:	signature:(CommonState *state, s_bucket * const bucket, const BYTE curval)
update_model	quic_rgb_tmpl.c	28;"	d	file:
update_model	quic_rgb_tmpl.c	49;"	d	file:
update_model	quic_rgb_tmpl.c	70;"	d	file:
update_model	quic_rgb_tmpl.c	753;"	d	file:
update_model	quic_rgb_tmpl.c	91;"	d	file:
update_model	quic_tmpl.c	42;"	d	file:
update_model	quic_tmpl.c	631;"	d	file:
use_surface_canvas	canvas_base.c	/^    int use_surface_canvas;$/;"	m	struct:__anon28	file:	access:public
used_tess_vertex	glc.c	/^    TassVertex *used_tess_vertex;$/;"	m	struct:InternaCtx	file:	access:public
usr	canvas_base.c	/^    LzUsrContext usr;$/;"	m	struct:LzData	file:	access:public
usr	canvas_base.c	/^    QuicUsrContext usr;$/;"	m	struct:QuicData	file:	access:public
usr	lz.c	/^    LzUsrContext    *usr;$/;"	m	struct:Encoder	file:	access:public
usr	quic.c	/^    QuicUsrContext *usr;$/;"	m	struct:Encoder	file:	access:public
usr_data	canvas_base.c	/^    void *usr_data;$/;"	m	struct:CanvasBase	file:	access:public
usr_data_destroy	canvas_base.c	/^    spice_destroy_fn_t usr_data_destroy;$/;"	m	struct:CanvasBase	file:	access:public
uuid	messages.h	/^    uint8_t uuid[16];$/;"	m	struct:SpiceMsgMainUuid	access:public
validate_SpiceClipRects	generated_client_demarshallers1.c	/^static intptr_t validate_SpiceClipRects(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpiceImage	generated_client_demarshallers.c	/^static intptr_t validate_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpiceImage	generated_client_demarshallers1.c	/^static intptr_t validate_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpicePalette	generated_client_demarshallers.c	/^static intptr_t validate_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpicePalette	generated_client_demarshallers1.c	/^static intptr_t validate_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpicePath	generated_client_demarshallers.c	/^static intptr_t validate_SpicePath(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpicePath	generated_client_demarshallers1.c	/^static intptr_t validate_SpicePath(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpiceString	generated_client_demarshallers.c	/^static intptr_t validate_SpiceString(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
validate_SpiceString	generated_client_demarshallers1.c	/^static intptr_t validate_SpiceString(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)$/;"	f	file:	signature:(uint8_t *message_start, uint8_t *message_end, uint64_t offset, SPICE_GNUC_UNUSED int minor)
verify	verify.h	241;"	d
verify_expr	verify.h	235;"	d
verify_hostname	ssl_verify.c	/^static int verify_hostname(X509* cert, const char *hostname)$/;"	f	file:	signature:(X509* cert, const char *hostname)
verify_pubkey	ssl_verify.c	/^static int verify_pubkey(X509* cert, const char *key, size_t key_size)$/;"	f	file:	signature:(X509* cert, const char *key, size_t key_size)
verify_subject	ssl_verify.c	/^static int verify_subject(X509* cert, SpiceOpenSSLVerify* verify)$/;"	f	file:	signature:(X509* cert, SpiceOpenSSLVerify* verify)
verify_true	verify.h	230;"	d
verifyop	ssl_verify.h	/^    SPICE_SSL_VERIFY_OP verifyop;$/;"	m	struct:__anon2	access:public
vertex_bufs	glc.c	/^    TassVertexBuf *vertex_bufs;$/;"	m	struct:InternaCtx	file:	access:public
vertexs	glc.c	/^    TassVertex vertexs[0];$/;"	m	struct:TassVertexBuf	file:	access:public
virtual_ip	messages.h	/^    SpiceMsgTunnelIpInfo virtual_ip;$/;"	m	struct:SpiceMsgTunnelServiceIpMap	access:public
visibilty	messages.h	/^    uint32_t visibilty;$/;"	m	struct:SpiceMsgNotify	access:public
visible	messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorInit	access:public
visible	messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorSet	access:public
volume	messages.h	/^    uint16_t volume[0];$/;"	m	struct:SpiceMsgAudioVolume	access:public
wait_count	messages.h	/^    uint8_t wait_count;$/;"	m	struct:SpiceMsgWaitForChannels	access:public
wait_list	messages.h	/^    SpiceWaitForChannel wait_list[0];$/;"	m	struct:SpiceMsgWaitForChannels	access:public
waitcnt	quic.c	/^    unsigned int waitcnt;$/;"	m	struct:CommonState	file:	access:public
warn	lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext	access:public
warn	quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext	access:public
what	messages.h	/^    uint32_t what;$/;"	m	struct:SpiceMsgNotify	access:public
width	canvas_base.c	/^    int width;$/;"	m	struct:CanvasBase	file:	access:public
width	draw.h	/^    uint16_t width;$/;"	m	struct:SpiceCursorHeader	access:public
width	draw.h	/^    uint16_t width;$/;"	m	struct:SpiceRasterGlyph	access:public
width	draw.h	/^    uint32_t width;$/;"	m	struct:SpiceImageDescriptor	access:public
width	glc.c	/^    int width;$/;"	m	struct:FillMaskInfo	file:	access:public
width	glc.c	/^    int width;$/;"	m	struct:InternaCtx	file:	access:public
width	glc.c	/^    int width;$/;"	m	struct:InternalPat	file:	access:public
width	glc.h	/^    double width;$/;"	m	struct:GLCRect	access:public
width	glc.h	/^    int width;$/;"	m	struct:GLCPImage	access:public
width	glc.h	/^    int width;$/;"	m	struct:GLCRecti	access:public
width	lines.h	/^    int width;$/;"	m	struct:lineGC	access:public
width	lz.c	/^    int width;                       \/\/ the original width (in pixels)$/;"	m	struct:Encoder	file:	access:public
width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayHead	access:public
width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayStreamDataSized	access:public
width	messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgSurfaceCreate	access:public
width	quic.c	/^    unsigned int width;$/;"	m	struct:Encoder	file:	access:public
widths	lines.c	/^    int *widths;                \/* pointer to list of widths        *\/$/;"	m	struct:__anon37	file:	access:public
window	messages.h	/^    uint32_t window;$/;"	m	struct:SpiceMsgSetAck	access:public
wm_trigger	quic.c	/^    unsigned int wm_trigger;$/;"	m	struct:CommonState	file:	access:public
wmidx	quic.c	/^    unsigned int wmidx;$/;"	m	struct:CommonState	file:	access:public
wmileft	quic.c	/^    unsigned int wmileft;$/;"	m	struct:CommonState	file:	access:public
wmimax	quic.c	/^static int wmimax = DEFwmimax;$/;"	v	file:
wminext	quic.c	/^static int wminext = DEFwminext;$/;"	v	file:
write_int16	generated_client_demarshallers.c	43;"	d	file:
write_int16	generated_client_demarshallers.c	60;"	d	file:
write_int16	generated_client_demarshallers1.c	43;"	d	file:
write_int16	generated_client_demarshallers1.c	60;"	d	file:
write_int16	generated_server_demarshallers.c	43;"	d	file:
write_int16	generated_server_demarshallers.c	60;"	d	file:
write_int16	marshaller.c	31;"	d	file:
write_int16	marshaller.c	40;"	d	file:
write_int32	generated_client_demarshallers.c	47;"	d	file:
write_int32	generated_client_demarshallers.c	64;"	d	file:
write_int32	generated_client_demarshallers1.c	47;"	d	file:
write_int32	generated_client_demarshallers1.c	64;"	d	file:
write_int32	generated_server_demarshallers.c	47;"	d	file:
write_int32	generated_server_demarshallers.c	64;"	d	file:
write_int32	marshaller.c	33;"	d	file:
write_int32	marshaller.c	42;"	d	file:
write_int64	generated_client_demarshallers.c	51;"	d	file:
write_int64	generated_client_demarshallers.c	68;"	d	file:
write_int64	generated_client_demarshallers1.c	51;"	d	file:
write_int64	generated_client_demarshallers1.c	68;"	d	file:
write_int64	generated_server_demarshallers.c	51;"	d	file:
write_int64	generated_server_demarshallers.c	68;"	d	file:
write_int64	marshaller.c	35;"	d	file:
write_int64	marshaller.c	44;"	d	file:
write_int8	generated_client_demarshallers.c	39;"	d	file:
write_int8	generated_client_demarshallers.c	56;"	d	file:
write_int8	generated_client_demarshallers1.c	39;"	d	file:
write_int8	generated_client_demarshallers1.c	56;"	d	file:
write_int8	generated_server_demarshallers.c	39;"	d	file:
write_int8	generated_server_demarshallers.c	56;"	d	file:
write_int8	marshaller.c	29;"	d	file:
write_int8	marshaller.c	38;"	d	file:
write_io_word	quic.c	/^static inline void write_io_word(Encoder *encoder)$/;"	f	file:	signature:(Encoder *encoder)
write_uint16	generated_client_demarshallers.c	45;"	d	file:
write_uint16	generated_client_demarshallers.c	62;"	d	file:
write_uint16	generated_client_demarshallers1.c	45;"	d	file:
write_uint16	generated_client_demarshallers1.c	62;"	d	file:
write_uint16	generated_server_demarshallers.c	45;"	d	file:
write_uint16	generated_server_demarshallers.c	62;"	d	file:
write_uint16	marshaller.c	32;"	d	file:
write_uint16	marshaller.c	41;"	d	file:
write_uint32	generated_client_demarshallers.c	49;"	d	file:
write_uint32	generated_client_demarshallers.c	66;"	d	file:
write_uint32	generated_client_demarshallers1.c	49;"	d	file:
write_uint32	generated_client_demarshallers1.c	66;"	d	file:
write_uint32	generated_server_demarshallers.c	49;"	d	file:
write_uint32	generated_server_demarshallers.c	66;"	d	file:
write_uint32	marshaller.c	34;"	d	file:
write_uint32	marshaller.c	43;"	d	file:
write_uint64	generated_client_demarshallers.c	53;"	d	file:
write_uint64	generated_client_demarshallers.c	70;"	d	file:
write_uint64	generated_client_demarshallers1.c	53;"	d	file:
write_uint64	generated_client_demarshallers1.c	70;"	d	file:
write_uint64	generated_server_demarshallers.c	53;"	d	file:
write_uint64	generated_server_demarshallers.c	70;"	d	file:
write_uint64	marshaller.c	36;"	d	file:
write_uint64	marshaller.c	45;"	d	file:
write_uint8	generated_client_demarshallers.c	41;"	d	file:
write_uint8	generated_client_demarshallers.c	58;"	d	file:
write_uint8	generated_client_demarshallers1.c	41;"	d	file:
write_uint8	generated_client_demarshallers1.c	58;"	d	file:
write_uint8	generated_server_demarshallers.c	41;"	d	file:
write_uint8	generated_server_demarshallers.c	58;"	d	file:
write_uint8	marshaller.c	30;"	d	file:
write_uint8	marshaller.c	39;"	d	file:
x	draw.h	/^    SPICE_FIXED28_4 x;$/;"	m	struct:SpicePointFix	access:public
x	draw.h	/^    int16_t x;$/;"	m	struct:SpicePoint16	access:public
x	draw.h	/^    int32_t x;$/;"	m	struct:SpicePoint	access:public
x	draw.h	/^    uint32_t x;$/;"	m	struct:SpiceBitmap	access:public
x	glc.c	/^    double x;$/;"	m	struct:PathPoint	file:	access:public
x	glc.c	/^    double x;$/;"	m	struct:PathStroke	file:	access:public
x	glc.h	/^    double x;$/;"	m	struct:GLCRect	access:public
x	glc.h	/^    int x;$/;"	m	struct:GLCRecti	access:public
x	lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:	access:public
x	lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:	access:public
x	lines.c	/^    int x;                      \/* starting x coordinate *\/$/;"	m	struct:_PolyEdge	file:	access:public
x	messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgDisplayHead	access:public
x	messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgcMousePosition	access:public
x16	rop3.c	/^ROP3_HANDLERS(PSDPSanaxx, (~(*pat & *src) & *dest) ^ *src ^ *pat, 0x16);$/;"	v
x86	rop3.c	/^ROP3_HANDLERS(DSPDSoaxx, ((*src | *dest) & *pat) ^ *src ^ *dest, 0x86);$/;"	v
x92	rop3.c	/^ROP3_HANDLERS(DPSDPoaxx, ((*pat | *dest) & *src) ^ *pat ^ *dest, 0x92);$/;"	v
x94	rop3.c	/^ROP3_HANDLERS(PSDPSoaxx, ((*src | *pat) & *dest) ^ *src ^ *pat, 0x94);$/;"	v
x97	rop3.c	/^ROP3_HANDLERS(PSDPSonoxx, (~(*src | *pat) | *dest) ^ *src ^ *pat, 0x97);$/;"	v
x9e	rop3.c	/^ROP3_HANDLERS(DSPDSaoxx, ((*src & *dest) | *pat) ^ *src ^ *dest, 0x9e);$/;"	v
xRectangle	lines.c	/^typedef pixman_rectangle32_t xRectangle;$/;"	t	file:
x_dest	glc.c	/^    int x_dest;$/;"	m	struct:FillMaskInfo	file:	access:public
x_display	ogl_ctx.c	/^    Display *x_display;$/;"	m	struct:OGLCtx	file:	access:public
x_orign	glc.c	/^    int x_orign;$/;"	m	struct:InternalPat	file:	access:public
x_res	messages.h	/^    uint32_t x_res;$/;"	m	struct:SpiceMsgDisplayMode	access:public
xa	lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:	access:public
xalloc	lines.c	64;"	d	file:
xb6	rop3.c	/^ROP3_HANDLERS(DPSDPaoxx, ((*pat & *dest) | *src) ^ *pat ^ *dest, 0xb6);$/;"	v
xd6	rop3.c	/^ROP3_HANDLERS(PSDPSaoxx, ((*src & *pat) | *dest) ^ *src ^ *pat, 0xd6);$/;"	v
xfree	lines.c	66;"	d	file:
xlatL2U	quic.c	/^    unsigned int xlatL2U[256];$/;"	m	struct:QuicFamily	file:	access:public
xlatU2L	quic.c	/^    BYTE xlatU2L[256];$/;"	m	struct:QuicFamily	file:	access:public
xrealloc	lines.c	65;"	d	file:
y	draw.h	/^    SPICE_FIXED28_4 y;$/;"	m	struct:SpicePointFix	access:public
y	draw.h	/^    int16_t y;$/;"	m	struct:SpicePoint16	access:public
y	draw.h	/^    int32_t y;$/;"	m	struct:SpicePoint	access:public
y	draw.h	/^    uint32_t y;$/;"	m	struct:SpiceBitmap	access:public
y	glc.c	/^    double y;$/;"	m	struct:PathPoint	file:	access:public
y	glc.c	/^    double y;$/;"	m	struct:PathStroke	file:	access:public
y	glc.h	/^    double y;$/;"	m	struct:GLCRect	access:public
y	glc.h	/^    int y;$/;"	m	struct:GLCRecti	access:public
y	lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:	access:public
y	lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:	access:public
y	messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgDisplayHead	access:public
y	messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgcMousePosition	access:public
y_dest	glc.c	/^    int y_dest;$/;"	m	struct:FillMaskInfo	file:	access:public
y_orign	glc.c	/^    int y_orign;$/;"	m	struct:InternalPat	file:	access:public
y_res	messages.h	/^    uint32_t y_res;$/;"	m	struct:SpiceMsgDisplayMode	access:public
ya	lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:	access:public
ymax	lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon38	file:	access:public
ymin	lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon38	file:	access:public
z	glc.c	/^    double z;$/;"	m	struct:PathPoint	file:	access:public
zeroLUT	quic.c	/^static int zeroLUT[256]; \/* table to find out number of leading zeros *\/$/;"	v	file:
zlib	canvas_base.c	/^    SpiceZlibDecoder* zlib;$/;"	m	struct:CanvasBase	file:	access:public
zlib_glz	draw.h	/^        SpiceZlibGlzRGBData zlib_glz;$/;"	m	union:SpiceImage::__anon17	access:public
