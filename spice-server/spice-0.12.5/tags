!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A1	client/red_drawable.h	/^        A1,$/;"	e	enum:RedDrawable::Format
A2X	Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
A2X	client/Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
A2X	docs/Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
A2X	docs/manual/Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
A2X	server/Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
A2X	server/tests/Makefile	/^A2X = \/usr\/bin\/a2x$/;"	m
ABS	spice-common/spice-protocol/spice/macros.h	118;"	d
ABS	spice-common/spice-protocol/spice/macros.h	119;"	d
ACK	server/dispatcher.c	42;"	d	file:
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	client/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	docs/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	docs/manual/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	server/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	server/tests/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing aclocal-1.14$/;"	m
ACLOCAL	spice-common/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing aclocal-1.14$/;"	m
ACLOCAL	spice-common/common/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing aclocal-1.14$/;"	m
ACLOCAL	spice-common/python_modules/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing aclocal-1.14$/;"	m
ACLOCAL	spice-common/spice-protocol/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing aclocal-1.14$/;"	m
ACLOCAL	spice-common/spice-protocol/spice/Makefile	/^ACLOCAL = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing aclocal-1.14$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_AMFLAGS	spice-common/Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	client/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	docs/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	docs/manual/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	server/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	server/tests/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	spice-common/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	spice-common/common/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	spice-common/python_modules/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	spice-common/spice-protocol/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	spice-common/spice-protocol/spice/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AGENT_MSG_FILTER_DISCARD	server/agent-msg-filter.h	/^    AGENT_MSG_FILTER_DISCARD,$/;"	e	enum:__anon127
AGENT_MSG_FILTER_END	server/agent-msg-filter.h	/^    AGENT_MSG_FILTER_END$/;"	e	enum:__anon127
AGENT_MSG_FILTER_MONITORS_CONFIG	server/agent-msg-filter.h	/^    AGENT_MSG_FILTER_MONITORS_CONFIG,$/;"	e	enum:__anon127
AGENT_MSG_FILTER_OK	server/agent-msg-filter.h	/^    AGENT_MSG_FILTER_OK,$/;"	e	enum:__anon127
AGENT_MSG_FILTER_PROTO_ERROR	server/agent-msg-filter.h	/^    AGENT_MSG_FILTER_PROTO_ERROR,$/;"	e	enum:__anon127
AGENT_TIMEOUT	client/red_client.cpp	368;"	d	file:
ALLOCA	Makefile	/^ALLOCA = $/;"	m
ALLOCA	client/Makefile	/^ALLOCA = $/;"	m
ALLOCA	docs/Makefile	/^ALLOCA = $/;"	m
ALLOCA	docs/manual/Makefile	/^ALLOCA = $/;"	m
ALLOCA	server/Makefile	/^ALLOCA = $/;"	m
ALLOCA	server/tests/Makefile	/^ALLOCA = $/;"	m
ALLOCA	spice-common/Makefile	/^ALLOCA = $/;"	m
ALLOCA	spice-common/common/Makefile	/^ALLOCA = $/;"	m
ALLOCA	spice-common/python_modules/Makefile	/^ALLOCA = $/;"	m
ALSA_CFLAGS	Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_CFLAGS	client/Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_CFLAGS	docs/Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_CFLAGS	docs/manual/Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_CFLAGS	server/Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_CFLAGS	server/tests/Makefile	/^ALSA_CFLAGS = $/;"	m
ALSA_LIBS	Makefile	/^ALSA_LIBS = $/;"	m
ALSA_LIBS	client/Makefile	/^ALSA_LIBS = $/;"	m
ALSA_LIBS	docs/Makefile	/^ALSA_LIBS = $/;"	m
ALSA_LIBS	docs/manual/Makefile	/^ALSA_LIBS = $/;"	m
ALSA_LIBS	server/Makefile	/^ALSA_LIBS = $/;"	m
ALSA_LIBS	server/tests/Makefile	/^ALSA_LIBS = $/;"	m
ALT_IMAGE_RES_ID	client/windows/resource.h	7;"	d
ALT_IMAGE_RES_ID	client/x11/resource.h	22;"	d
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	client/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	docs/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	docs/manual/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	server/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	server/tests/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	spice-common/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	spice-common/common/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	spice-common/python_modules/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	spice-common/spice-protocol/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	spice-common/spice-protocol/spice/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	client/Makefile	/^AM_CPPFLAGS = \\$/;"	m
AM_CPPFLAGS	server/Makefile	/^AM_CPPFLAGS = \\$/;"	m
AM_CPPFLAGS	server/tests/Makefile	/^AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)\/common \\$/;"	m
AM_CPPFLAGS	spice-common/common/Makefile	/^AM_CPPFLAGS = \\$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	client/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	docs/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	docs/manual/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	server/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	server/tests/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	spice-common/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	spice-common/common/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	spice-common/python_modules/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	spice-common/spice-protocol/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	spice-common/spice-protocol/spice/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	docs/Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	server/Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	spice-common/Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	spice-common/spice-protocol/Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_V_CC	client/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	server/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	server/tests/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	spice-common/common/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	client/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	server/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	server/tests/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	spice-common/common/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	client/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	client/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	client/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	docs/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	docs/manual/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	server/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	server/tests/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	spice-common/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	spice-common/common/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	spice-common/python_modules/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	spice-common/spice-protocol/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	spice-common/spice-protocol/spice/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	client/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	docs/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	docs/manual/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	server/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	server/tests/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	spice-common/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	spice-common/common/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	spice-common/python_modules/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	spice-common/spice-protocol/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	spice-common/spice-protocol/spice/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	client/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	docs/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	docs/manual/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	server/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	server/tests/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	spice-common/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	spice-common/common/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	spice-common/python_modules/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	spice-common/spice-protocol/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	spice-common/spice-protocol/spice/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	client/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	server/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	server/tests/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	spice-common/common/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
APDUBufSize	client/smartcard_channel.cpp	35;"	d	file:
APDUBufSize	server/smartcard.h	24;"	d
APP_CMD_CONNECT	client/application.cpp	/^    APP_CMD_CONNECT,$/;"	e	enum:AppCommands	file:
APP_CMD_DISCONNECT	client/application.cpp	/^    APP_CMD_DISCONNECT,$/;"	e	enum:AppCommands	file:
APP_CMD_EXTERNAL_BEGIN	client/application.cpp	/^    APP_CMD_EXTERNAL_BEGIN = 0x400,$/;"	e	enum:AppCommands	file:
APP_CMD_EXTERNAL_END	client/application.cpp	/^    APP_CMD_EXTERNAL_END = 0x800,$/;"	e	enum:AppCommands	file:
APP_CMD_INVALID	client/application.cpp	/^    APP_CMD_INVALID,$/;"	e	enum:AppCommands	file:
APP_CMD_RELEASE_CAPTURE	client/application.cpp	/^    APP_CMD_RELEASE_CAPTURE,$/;"	e	enum:AppCommands	file:
APP_CMD_SEND_CTL_ALT_DEL	client/application.cpp	/^    APP_CMD_SEND_CTL_ALT_DEL,$/;"	e	enum:AppCommands	file:
APP_CMD_SEND_CTL_ALT_END	client/application.cpp	/^    APP_CMD_SEND_CTL_ALT_END,$/;"	e	enum:AppCommands	file:
APP_CMD_SEND_RELEASE_KEYS	client/application.cpp	/^    APP_CMD_SEND_RELEASE_KEYS,$/;"	e	enum:AppCommands	file:
APP_CMD_SEND_TOGGLE_KEYS	client/application.cpp	/^    APP_CMD_SEND_TOGGLE_KEYS,$/;"	e	enum:AppCommands	file:
APP_CMD_SHOW_GUI	client/application.cpp	/^    APP_CMD_SHOW_GUI,$/;"	e	enum:AppCommands	file:
APP_CMD_SMARTCARD_INSERT	client/application.cpp	/^    APP_CMD_SMARTCARD_INSERT,$/;"	e	enum:AppCommands	file:
APP_CMD_SMARTCARD_REMOVE	client/application.cpp	/^    APP_CMD_SMARTCARD_REMOVE,$/;"	e	enum:AppCommands	file:
APP_CMD_TOGGLE_FULL_SCREEN	client/application.cpp	/^    APP_CMD_TOGGLE_FULL_SCREEN,$/;"	e	enum:AppCommands	file:
APP_MENU_ITEM_TYPE_CONTROLLER	client/application.h	/^    APP_MENU_ITEM_TYPE_CONTROLLER,$/;"	e	enum:AppMenuItemType
APP_MENU_ITEM_TYPE_FOREIGN	client/application.h	/^    APP_MENU_ITEM_TYPE_FOREIGN,$/;"	e	enum:AppMenuItemType
APP_MENU_ITEM_TYPE_INVALID	client/application.h	/^    APP_MENU_ITEM_TYPE_INVALID,$/;"	e	enum:AppMenuItemType
AR	Makefile	/^AR = ar$/;"	m
AR	client/Makefile	/^AR = ar$/;"	m
AR	docs/Makefile	/^AR = ar$/;"	m
AR	docs/manual/Makefile	/^AR = ar$/;"	m
AR	server/Makefile	/^AR = ar$/;"	m
AR	server/tests/Makefile	/^AR = ar$/;"	m
AR	spice-common/Makefile	/^AR = ar$/;"	m
AR	spice-common/common/Makefile	/^AR = ar$/;"	m
AR	spice-common/python_modules/Makefile	/^AR = ar$/;"	m
ARGB32	client/red_drawable.h	/^        ARGB32,$/;"	e	enum:RedDrawable::Format
ASCIIDOC	Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC	client/Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC	docs/Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC	docs/manual/Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC	server/Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC	server/tests/Makefile	/^ASCIIDOC = \/usr\/bin\/asciidoc$/;"	m
ASCIIDOC_FLAGS	docs/manual/Makefile	/^ASCIIDOC_FLAGS = -a icons -a toc$/;"	m
ASSERT	client/debug.h	40;"	d
ASSERT	client/debug.h	47;"	d
ASSERT	server/tests/test_util.h	5;"	d
ASSERT	server/tests/test_util.h	7;"	d
ASSERTBREAK	client/debug.h	35;"	d
ASSERTBREAK	client/debug.h	37;"	d
ATTR_PACKED	client/glz_decoder.cpp	123;"	d	file:
ATTR_PACKED	client/glz_decoder.cpp	125;"	d	file:
ATTR_PACKED	client/glz_decoder.cpp	157;"	d	file:
ATTR_PACKED	server/red_worker.c	6070;"	d	file:
ATTR_PACKED	server/red_worker.c	6072;"	d	file:
ATTR_PACKED	server/red_worker.c	6097;"	d	file:
ATTR_PACKED	spice-common/common/lz.c	386;"	d	file:
ATTR_PACKED	spice-common/common/lz.c	388;"	d	file:
ATTR_PACKED	spice-common/common/lz.c	420;"	d	file:
ATTR_PACKED	spice-common/common/quic.c	771;"	d	file:
ATTR_PACKED	spice-common/common/quic.c	773;"	d	file:
ATTR_PACKED	spice-common/common/quic.c	814;"	d	file:
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	client/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	docs/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	docs/manual/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	server/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	server/tests/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoconf$/;"	m
AUTOCONF	spice-common/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoconf$/;"	m
AUTOCONF	spice-common/common/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoconf$/;"	m
AUTOCONF	spice-common/python_modules/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoconf$/;"	m
AUTOCONF	spice-common/spice-protocol/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing autoconf$/;"	m
AUTOCONF	spice-common/spice-protocol/spice/Makefile	/^AUTOCONF = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	client/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	docs/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	docs/manual/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	server/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	server/tests/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing autoheader$/;"	m
AUTOHEADER	spice-common/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	spice-common/common/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	spice-common/python_modules/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	spice-common/spice-protocol/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing autoheader$/;"	m
AUTOHEADER	spice-common/spice-protocol/spice/Makefile	/^AUTOHEADER = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	client/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	docs/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	docs/manual/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	server/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	server/tests/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing automake-1.14$/;"	m
AUTOMAKE	spice-common/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing automake-1.14$/;"	m
AUTOMAKE	spice-common/common/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing automake-1.14$/;"	m
AUTOMAKE	spice-common/python_modules/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing automake-1.14$/;"	m
AUTOMAKE	spice-common/spice-protocol/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing automake-1.14$/;"	m
AUTOMAKE	spice-common/spice-protocol/spice/Makefile	/^AUTOMAKE = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing automake-1.14$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AWK	client/Makefile	/^AWK = gawk$/;"	m
AWK	docs/Makefile	/^AWK = gawk$/;"	m
AWK	docs/manual/Makefile	/^AWK = gawk$/;"	m
AWK	server/Makefile	/^AWK = gawk$/;"	m
AWK	server/tests/Makefile	/^AWK = gawk$/;"	m
AWK	spice-common/Makefile	/^AWK = gawk$/;"	m
AWK	spice-common/common/Makefile	/^AWK = gawk$/;"	m
AWK	spice-common/python_modules/Makefile	/^AWK = gawk$/;"	m
AWK	spice-common/spice-protocol/Makefile	/^AWK = gawk$/;"	m
AWK	spice-common/spice-protocol/spice/Makefile	/^AWK = gawk$/;"	m
AbortTrigger	client/red_channel.h	/^class AbortTrigger: public EventSources::Trigger {$/;"	c
AbstractProcessLoop	client/process_loop.h	/^class AbstractProcessLoop {$/;"	c
ActivateTimerEvent	client/display_channel.cpp	/^    ActivateTimerEvent(DisplayChannel& channel)$/;"	f	class:ActivateTimerEvent
ActivateTimerEvent	client/display_channel.cpp	/^class ActivateTimerEvent: public Event {$/;"	c	file:
AddBufInfo	server/red_worker.c	/^} AddBufInfo;$/;"	t	typeref:struct:__anon192	file:
AgentDataPipeItem	server/main_channel.c	/^typedef struct AgentDataPipeItem {$/;"	s	file:
AgentDataPipeItem	server/main_channel.c	/^} AgentDataPipeItem;$/;"	t	typeref:struct:AgentDataPipeItem	file:
AgentMsgFilter	server/agent-msg-filter.h	/^typedef struct AgentMsgFilter {$/;"	s
AgentMsgFilter	server/agent-msg-filter.h	/^} AgentMsgFilter;$/;"	t	typeref:struct:AgentMsgFilter
AgentTimer	client/red_client.h	/^    AgentTimer(RedClient *client) : _client(client) {};$/;"	f	class:AgentTimer
AgentTimer	client/red_client.h	/^class AgentTimer: public Timer {$/;"	c
AlphaCursor	client/cursor_channel.cpp	/^AlphaCursor::AlphaCursor(const SpiceCursorHeader& header, const uint8_t* data)$/;"	f	class:AlphaCursor
AlphaCursor	client/cursor_channel.cpp	/^class AlphaCursor: public NaitivCursor {$/;"	c	file:
AlphaImageFromRes	client/pixels_source.h	/^class AlphaImageFromRes: public PixelsSource {$/;"	c
AlphaImageFromRes	client/windows/pixels_source.cpp	/^AlphaImageFromRes::AlphaImageFromRes(int res_id)$/;"	f	class:AlphaImageFromRes
AlphaImageFromRes	client/x11/pixels_source.cpp	/^AlphaImageFromRes::AlphaImageFromRes(int res_id)$/;"	f	class:AlphaImageFromRes
AppCommands	client/application.cpp	/^enum AppCommands {$/;"	g	file:
AppMenuItem	client/application.h	/^typedef struct AppMenuItem {$/;"	s
AppMenuItem	client/application.h	/^} AppMenuItem;$/;"	t	typeref:struct:AppMenuItem
AppMenuItemMap	client/application.h	/^typedef std::map<int, AppMenuItem> AppMenuItemMap;$/;"	t
AppMenuItemType	client/application.h	/^enum AppMenuItemType {$/;"	g
AppendSpanGroup	spice-common/common/lines.c	268;"	d	file:
Application	client/application.cpp	/^Application::Application()$/;"	f	class:Application
Application	client/application.h	/^class Application : public ProcessLoop,$/;"	c
ArrayType	spice-common/python_modules/ptypes.py	/^class ArrayType(Type):$/;"	c
AsyncCommand	server/red_dispatcher.c	/^struct AsyncCommand {$/;"	s	file:
AsyncCommand	server/red_dispatcher.h	/^typedef struct AsyncCommand AsyncCommand;$/;"	t	typeref:struct:AsyncCommand
AsyncRead	server/reds_stream.c	/^struct AsyncRead {$/;"	s	file:
AsyncRead	server/reds_stream.c	/^typedef struct AsyncRead AsyncRead;$/;"	t	typeref:struct:AsyncRead	file:
AsyncReadDone	server/reds_stream.h	/^typedef void (*AsyncReadDone)(void *opaque);$/;"	t
AsyncReadError	server/reds_stream.h	/^typedef void (*AsyncReadError)(void *opaque, int err);$/;"	t
AtomicCount	client/windows/atomic_count.h	/^    AtomicCount(uint32_t count = 0) : _count (count) {}$/;"	f	class:AtomicCount
AtomicCount	client/windows/atomic_count.h	/^class AtomicCount {$/;"	c
AtomicCount	client/x11/atomic_count.h	/^    AtomicCount(uint32_t count = 0) : _count (count) {}$/;"	f	class:AtomicCount
AtomicCount	client/x11/atomic_count.h	/^class AtomicCount {$/;"	c
AttachChannels	client/display_channel.cpp	/^        AttachChannels(DisplayChannel& channel)$/;"	f	class:AttachChannelsEvent::AttachChannels
AttachChannels	client/display_channel.cpp	/^    class AttachChannels: public ForEachChannelFunc {$/;"	c	class:AttachChannelsEvent	file:
AttachChannelsEvent	client/display_channel.cpp	/^    AttachChannelsEvent(DisplayChannel& channel) : Event(), _channel (channel) {}$/;"	f	class:AttachChannelsEvent
AttachChannelsEvent	client/display_channel.cpp	/^class AttachChannelsEvent : public Event {$/;"	c	file:
AttachDispayEvent	client/cursor_channel.cpp	/^    AttachDispayEvent(CursorChannel& channel)$/;"	f	class:AttachDispayEvent
AttachDispayEvent	client/cursor_channel.cpp	/^class AttachDispayEvent: public Event {$/;"	c	file:
AttachFunc	client/inputs_channel.cpp	/^        AttachFunc(InputsChannel& channel)$/;"	f	class:SetInputsHandlerEvent::AttachFunc
AttachFunc	client/inputs_channel.cpp	/^    class AttachFunc: public ForEachChannelFunc {$/;"	c	class:SetInputsHandlerEvent	file:
AttachLayerEvent	client/screen_layer.cpp	/^    AttachLayerEvent(ScreenLayer& layer, int screen_id)$/;"	f	class:AttachLayerEvent
AttachLayerEvent	client/screen_layer.cpp	/^class AttachLayerEvent: public SyncEvent {$/;"	c	file:
AudioFrame	server/snd_worker.c	/^struct AudioFrame {$/;"	s	file:
AudioFrame	server/snd_worker.c	/^typedef struct AudioFrame AudioFrame;$/;"	t	typeref:struct:AudioFrame	file:
AutoAbort	client/application.cpp	/^    AutoAbort(Application& app) : _app(app) {}$/;"	f	class:AutoAbort
AutoAbort	client/application.cpp	/^class AutoAbort {$/;"	c	file:
AutoArray	client/utils.h	/^    AutoArray() : _array (NULL) {}$/;"	f	class:AutoArray
AutoArray	client/utils.h	/^    AutoArray(T* array) : _array (array) {}$/;"	f	class:AutoArray
AutoArray	client/utils.h	/^class AutoArray {$/;"	c
AutoCrtcInfo	client/x11/platform.cpp	/^typedef _AutoRes<XRRCrtcInfo, FreeCrtcInfo> AutoCrtcInfo;$/;"	t	file:
AutoDC	client/windows/platform_utils.h	/^typedef AutoRes<HDC, Delete_DC> AutoDC;$/;"	t
AutoGDIObject	client/windows/platform_utils.h	/^typedef AutoRes<HGDIOBJ, Delete_Object> AutoGDIObject;$/;"	t
AutoMessage	client/red_channel.cpp	/^    AutoMessage(RedChannel::OutMessage* message) : _message (message) {}$/;"	f	class:AutoMessage
AutoMessage	client/red_channel.cpp	/^class AutoMessage {$/;"	c	file:
AutoOGLCtx	client/windows/platform_utils.h	/^typedef AutoRes<HGLRC, DeleteOGLContext> AutoOGLCtx;$/;"	t
AutoOutputInfo	client/x11/platform.cpp	/^typedef _AutoRes<XRROutputInfo, FreeOutputInfo> AutoOutputInfo;$/;"	t	file:
AutoRef	client/utils.h	/^    AutoRef() : _obj (NULL) {}$/;"	f	class:AutoRef
AutoRef	client/utils.h	/^    AutoRef(T* obj) : _obj (obj) {}$/;"	f	class:AutoRef
AutoRef	client/utils.h	/^class AutoRef {$/;"	c
AutoReleaseDC	client/windows/platform_utils.h	/^typedef AutoRes<HDC, Delete_DC> AutoReleaseDC;$/;"	t
AutoRes	client/windows/platform_utils.h	/^    AutoRes() : res(invalid) {}$/;"	f	class:AutoRes
AutoRes	client/windows/platform_utils.h	/^    AutoRes(T inRes) : res(inRes) {}$/;"	f	class:AutoRes
AutoRes	client/windows/platform_utils.h	/^class AutoRes {$/;"	c
AutoScreenRes	client/x11/platform.cpp	/^typedef _AutoRes<XRRScreenResources, FreeScreenResources> AutoScreenRes;$/;"	t	file:
AutoXErrorHandler	client/x11/red_window.cpp	/^    AutoXErrorHandler()$/;"	f	class:AutoXErrorHandler
AutoXErrorHandler	client/x11/red_window.cpp	/^class AutoXErrorHandler {$/;"	c	file:
BACKTRACE_H	spice-common/common/backtrace.h	20;"	d
BITMAP_DATA_TYPE_BITMAP	server/red_worker.c	/^    BITMAP_DATA_TYPE_BITMAP,$/;"	e	enum:__anon191	file:
BITMAP_DATA_TYPE_BITMAP_TO_CACHE	server/red_worker.c	/^    BITMAP_DATA_TYPE_BITMAP_TO_CACHE,$/;"	e	enum:__anon191	file:
BITMAP_DATA_TYPE_CACHE	server/red_worker.c	/^    BITMAP_DATA_TYPE_CACHE,$/;"	e	enum:__anon191	file:
BITMAP_DATA_TYPE_INVALID	server/red_worker.c	/^    BITMAP_DATA_TYPE_INVALID,$/;"	e	enum:__anon191	file:
BITMAP_DATA_TYPE_SURFACE	server/red_worker.c	/^    BITMAP_DATA_TYPE_SURFACE,$/;"	e	enum:__anon191	file:
BITMAP_FMP_BYTES_PER_PIXEL	server/red_worker.c	/^static const int BITMAP_FMP_BYTES_PER_PIXEL[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 1};$/;"	v	file:
BITMAP_FMT_HAS_GRADUALITY	server/red_worker.c	532;"	d	file:
BITMAP_FMT_IS_PLT	server/red_worker.c	/^static const int BITMAP_FMT_IS_PLT[] = {0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};$/;"	v	file:
BITMAP_FMT_IS_RGB	server/red_parse_qxl.c	/^static const int BITMAP_FMT_IS_RGB[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1};$/;"	v	file:
BITMAP_GRADUAL_HIGH	server/red_worker.c	/^    BITMAP_GRADUAL_HIGH,$/;"	e	enum:__anon188	file:
BITMAP_GRADUAL_INVALID	server/red_worker.c	/^    BITMAP_GRADUAL_INVALID,$/;"	e	enum:__anon188	file:
BITMAP_GRADUAL_LOW	server/red_worker.c	/^    BITMAP_GRADUAL_LOW,$/;"	e	enum:__anon188	file:
BITMAP_GRADUAL_MEDIUM	server/red_worker.c	/^    BITMAP_GRADUAL_MEDIUM,$/;"	e	enum:__anon188	file:
BITMAP_GRADUAL_NOT_AVAIL	server/red_worker.c	/^    BITMAP_GRADUAL_NOT_AVAIL,$/;"	e	enum:__anon188	file:
BITOPS_H	spice-common/common/bitops.h	22;"	d
BITS_CACHE_HASH_KEY	server/red_worker.c	410;"	d	file:
BITS_CACHE_HASH_MASK	server/red_worker.c	409;"	d	file:
BITS_CACHE_HASH_SHIFT	server/red_worker.c	407;"	d	file:
BITS_CACHE_HASH_SIZE	server/red_worker.c	408;"	d	file:
BIT_RATE	server/red_worker.c	111;"	d	file:
BOOL	client/x11/platform.cpp	68;"	d	file:
BOUND_OFFSET	server/glz_encoder.c	191;"	d	file:
BOUND_OFFSET	spice-common/common/lz.c	425;"	d	file:
BPC	spice-common/common/quic_family_tmpl.c	113;"	d	file:
BPC	spice-common/common/quic_family_tmpl.c	26;"	d	file:
BPC	spice-common/common/quic_family_tmpl.c	34;"	d	file:
BPC	spice-common/common/quic_rgb_tmpl.c	31;"	d	file:
BPC	spice-common/common/quic_rgb_tmpl.c	52;"	d	file:
BPC	spice-common/common/quic_rgb_tmpl.c	73;"	d	file:
BPC	spice-common/common/quic_rgb_tmpl.c	756;"	d	file:
BPC	spice-common/common/quic_rgb_tmpl.c	94;"	d	file:
BPC	spice-common/common/quic_tmpl.c	46;"	d	file:
BPC	spice-common/common/quic_tmpl.c	634;"	d	file:
BPC_MASK	spice-common/common/quic_rgb_tmpl.c	32;"	d	file:
BPC_MASK	spice-common/common/quic_rgb_tmpl.c	53;"	d	file:
BPC_MASK	spice-common/common/quic_rgb_tmpl.c	74;"	d	file:
BPC_MASK	spice-common/common/quic_rgb_tmpl.c	757;"	d	file:
BPC_MASK	spice-common/common/quic_rgb_tmpl.c	95;"	d	file:
BPC_MASK	spice-common/common/quic_tmpl.c	47;"	d	file:
BPC_MASK	spice-common/common/quic_tmpl.c	635;"	d	file:
BUF_SIZE	server/spicevmc.c	43;"	d	file:
BUF_TYPE_RAW	server/red_worker.c	/^    BUF_TYPE_RAW = 1,$/;"	e	enum:__anon171	file:
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = $(top_srcdir)\/.version$/;"	m
BUILT_SOURCES	server/Makefile	/^BUILT_SOURCES = $(spice_built_sources)$/;"	m
BUILT_SOURCES	spice-common/common/Makefile	/^BUILT_SOURCES = $(CLIENT_MARSHALLERS) $(SERVER_MARSHALLERS) $(top_srcdir)\/spice-protocol\/spice\/enums.h$/;"	m
BUTTON_HEIGHT	client/gui/gui.cpp	49;"	d	file:
BUTTON_WIDTH	client/gui/gui.cpp	48;"	d	file:
BYTE	server/glz_encoder.c	/^typedef uint8_t BYTE;$/;"	t	file:
BYTE	spice-common/common/quic.c	/^typedef uint8_t BYTE;$/;"	t	file:
BYTES_TO_16	spice-common/common/lz_compress_tmpl.c	533;"	d	file:
BitmapData	server/red_worker.c	/^typedef struct BitmapData {$/;"	s	file:
BitmapData	server/red_worker.c	/^} BitmapData;$/;"	t	typeref:struct:BitmapData	file:
BitmapData	spice-common/common/gdi_canvas.c	/^struct BitmapData {$/;"	s	file:
BitmapDataType	server/red_worker.c	/^} BitmapDataType;$/;"	t	typeref:enum:__anon191	file:
BitmapGradualType	server/red_worker.c	/^} BitmapGradualType;$/;"	t	typeref:enum:__anon188	file:
Block	spice-common/python_modules/codegen.py	/^    class Block:$/;"	c	class:CodeWriter
Boolean	spice-common/common/lines.c	/^typedef int Boolean;$/;"	t	file:
BottomVariant	client/x11/platform.cpp	/^class BottomVariant {$/;"	c	file:
BottonAction	client/gui/gui.cpp	/^        BottonAction(Dialog& dialog, int id)$/;"	f	class:GUI::Dialog::BottonAction
BottonAction	client/gui/gui.cpp	/^    class BottonAction {$/;"	c	class:GUI::Dialog	file:
BoxAbortEvent	client/gui/gui.cpp	/^    BoxAbortEvent(GUI::BoxResponse* box_response)$/;"	f	class:BoxAbortEvent
BoxAbortEvent	client/gui/gui.cpp	/^class BoxAbortEvent: public Event {$/;"	c	file:
BoxResponse	client/gui/gui.h	/^    class BoxResponse {$/;"	c	class:GUI
BoxResponseEvent	client/gui/gui.cpp	/^    BoxResponseEvent(GUI::BoxResponse* box_response, int id)$/;"	f	class:BoxResponseEvent
BoxResponseEvent	client/gui/gui.cpp	/^class BoxResponseEvent: public Event {$/;"	c	file:
BufDescriptor	server/red_channel.h	/^typedef struct BufDescriptor {$/;"	s
BufDescriptor	server/red_channel.h	/^} BufDescriptor;$/;"	t	typeref:struct:BufDescriptor
ButtonInfo	client/gui/gui.h	/^    struct ButtonInfo {$/;"	s	class:GUI
ButtonsList	client/gui/gui.h	/^    typedef std::vector<ButtonInfo> ButtonsList;$/;"	t	class:GUI
CACHE	server/red_client_shared_cache.h	20;"	d
CACHE_HASH_KEY	server/red_client_cache.h	131;"	d
CACHE_HASH_KEY	server/red_client_cache.h	21;"	d
CACHE_HASH_KEY	server/red_client_cache.h	32;"	d
CACHE_HASH_KEY	server/red_client_shared_cache.h	228;"	d
CACHE_HASH_KEY	server/red_client_shared_cache.h	23;"	d
CACHE_HASH_SIZE	server/red_client_cache.h	132;"	d
CACHE_HASH_SIZE	server/red_client_cache.h	22;"	d
CACHE_HASH_SIZE	server/red_client_cache.h	33;"	d
CACHE_HASH_SIZE	server/red_client_shared_cache.h	229;"	d
CACHE_HASH_SIZE	server/red_client_shared_cache.h	24;"	d
CACHE_INVAL_TYPE	server/red_client_cache.h	133;"	d
CACHE_INVAL_TYPE	server/red_client_cache.h	23;"	d
CACHE_INVAL_TYPE	server/red_client_cache.h	34;"	d
CACHE_INVAL_TYPE	server/red_client_shared_cache.h	230;"	d
CACHE_MAX_CLIENT_SIZE	server/red_client_cache.h	134;"	d
CACHE_MAX_CLIENT_SIZE	server/red_client_shared_cache.h	231;"	d
CACHE_NAME	server/red_client_cache.h	130;"	d
CACHE_NAME	server/red_client_cache.h	20;"	d
CACHE_NAME	server/red_client_cache.h	31;"	d
CACHE_NAME	server/red_client_shared_cache.h	227;"	d
CACHE_NAME	server/red_client_shared_cache.h	22;"	d
CACH_GENERATION	server/red_client_shared_cache.h	29;"	d
CAC_CARD_CFLAGS	Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_CFLAGS	client/Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_CFLAGS	docs/Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_CFLAGS	docs/manual/Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_CFLAGS	server/Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_CFLAGS	server/tests/Makefile	/^CAC_CARD_CFLAGS = $/;"	m
CAC_CARD_LIBS	Makefile	/^CAC_CARD_LIBS = $/;"	m
CAC_CARD_LIBS	client/Makefile	/^CAC_CARD_LIBS = $/;"	m
CAC_CARD_LIBS	docs/Makefile	/^CAC_CARD_LIBS = $/;"	m
CAC_CARD_LIBS	docs/manual/Makefile	/^CAC_CARD_LIBS = $/;"	m
CAC_CARD_LIBS	server/Makefile	/^CAC_CARD_LIBS = $/;"	m
CAC_CARD_LIBS	server/tests/Makefile	/^CAC_CARD_LIBS = $/;"	m
CANVAS_OPTION_GDI	client/application.h	/^    CANVAS_OPTION_GDI,$/;"	e	enum:CanvasOption
CANVAS_OPTION_INVALID	client/application.h	/^    CANVAS_OPTION_INVALID,$/;"	e	enum:CanvasOption
CANVAS_OPTION_OGL_FBO	client/application.h	/^    CANVAS_OPTION_OGL_FBO,$/;"	e	enum:CanvasOption
CANVAS_OPTION_OGL_PBUFF	client/application.h	/^    CANVAS_OPTION_OGL_PBUFF,$/;"	e	enum:CanvasOption
CANVAS_OPTION_SW	client/application.h	/^    CANVAS_OPTION_SW,$/;"	e	enum:CanvasOption
CANVAS_SINGLE_INSTANCE	spice-common/common/sw_canvas.c	28;"	d	file:
CANVAS_TYPE_GDI	client/canvas.h	/^    CANVAS_TYPE_GDI,$/;"	e	enum:CanvasType
CANVAS_TYPE_GL	client/canvas.h	/^    CANVAS_TYPE_GL,$/;"	e	enum:CanvasType
CANVAS_TYPE_INVALID	client/canvas.h	/^    CANVAS_TYPE_INVALID,$/;"	e	enum:CanvasType
CANVAS_TYPE_SW	client/canvas.h	/^    CANVAS_TYPE_SW,$/;"	e	enum:CanvasType
CANVAS_USE_PIXMAN	spice-common/common/sw_canvas.c	27;"	d	file:
CAPS_LOCK_MODIFIER	client/platform.h	/^        CAPS_LOCK_MODIFIER = (1 << CAPS_LOCK_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon105
CAPS_LOCK_MODIFIER_SHIFT	client/platform.h	/^        CAPS_LOCK_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon105
CAPS_LOCK_SCAN_CODE	server/inputs_channel.c	118;"	d	file:
CARD32	spice-common/common/lines.c	/^typedef unsigned int CARD32;$/;"	t	file:
CAST_PLT_DISTANCE	client/glz_decode_tmpl.c	101;"	d	file:
CAST_PLT_DISTANCE	client/glz_decode_tmpl.c	119;"	d	file:
CAST_PLT_DISTANCE	client/glz_decode_tmpl.c	337;"	d	file:
CAST_PLT_DISTANCE	client/glz_decode_tmpl.c	71;"	d	file:
CAST_PLT_DISTANCE	client/glz_decode_tmpl.c	83;"	d	file:
CAST_PLT_DISTANCE	spice-common/common/lz_decompress_tmpl.c	103;"	d	file:
CAST_PLT_DISTANCE	spice-common/common/lz_decompress_tmpl.c	115;"	d	file:
CAST_PLT_DISTANCE	spice-common/common/lz_decompress_tmpl.c	133;"	d	file:
CAST_PLT_DISTANCE	spice-common/common/lz_decompress_tmpl.c	151;"	d	file:
CAST_PLT_DISTANCE	spice-common/common/lz_decompress_tmpl.c	343;"	d	file:
CA_FILE_NAME	client/application.cpp	61;"	d	file:
CA_file	client/red_peer.h	/^        std::string CA_file;$/;"	m	class:RedPeer::HostAuthOptions
CC	Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	client/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	docs/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	docs/manual/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	server/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	server/tests/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	spice-common/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	spice-common/common/Makefile	/^CC = gcc -std=gnu99$/;"	m
CC	spice-common/python_modules/Makefile	/^CC = gcc -std=gnu99$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	client/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	docs/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	docs/manual/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	server/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	server/tests/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	spice-common/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	spice-common/common/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	spice-common/python_modules/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	client/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	server/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	server/tests/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	spice-common/common/Makefile	/^CCLD = $(CC)$/;"	m
CEGUI	client/gui/softrenderer.cpp	/^namespace CEGUI {$/;"	n	file:
CEGUI	client/gui/softrenderer.h	/^namespace CEGUI$/;"	n
CEGUI	client/gui/softtexture.cpp	/^namespace CEGUI$/;"	n	file:
CEGUI	client/gui/softtexture.h	/^namespace CEGUI$/;"	n
CEGUI06_CFLAGS	Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_CFLAGS	client/Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_CFLAGS	docs/Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_CFLAGS	docs/manual/Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_CFLAGS	server/Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_CFLAGS	server/tests/Makefile	/^CEGUI06_CFLAGS = $/;"	m
CEGUI06_LIBS	Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUI06_LIBS	client/Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUI06_LIBS	docs/Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUI06_LIBS	docs/manual/Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUI06_LIBS	server/Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUI06_LIBS	server/tests/Makefile	/^CEGUI06_LIBS = $/;"	m
CEGUIResourceProvider	client/gui/resource_provider.h	/^class CEGUIResourceProvider: public CEGUI::ResourceProvider {$/;"	c
CEGUI_CFLAGS	Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_CFLAGS	client/Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_CFLAGS	docs/Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_CFLAGS	docs/manual/Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_CFLAGS	server/Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_CFLAGS	server/tests/Makefile	/^CEGUI_CFLAGS = $/;"	m
CEGUI_LIBS	Makefile	/^CEGUI_LIBS = $/;"	m
CEGUI_LIBS	client/Makefile	/^CEGUI_LIBS = $/;"	m
CEGUI_LIBS	docs/Makefile	/^CEGUI_LIBS = $/;"	m
CEGUI_LIBS	docs/manual/Makefile	/^CEGUI_LIBS = $/;"	m
CEGUI_LIBS	server/Makefile	/^CEGUI_LIBS = $/;"	m
CEGUI_LIBS	server/tests/Makefile	/^CEGUI_LIBS = $/;"	m
CELT051_CFLAGS	Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	client/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	docs/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	docs/manual/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	server/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	server/tests/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	spice-common/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	spice-common/common/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_CFLAGS	spice-common/python_modules/Makefile	/^CELT051_CFLAGS =  $/;"	m
CELT051_LIBDIR	spice-common/Makefile	/^CELT051_LIBDIR = $/;"	m
CELT051_LIBDIR	spice-common/common/Makefile	/^CELT051_LIBDIR = $/;"	m
CELT051_LIBDIR	spice-common/python_modules/Makefile	/^CELT051_LIBDIR = $/;"	m
CELT051_LIBS	Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	client/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	docs/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	docs/manual/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	server/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	server/tests/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	spice-common/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	spice-common/common/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CELT051_LIBS	spice-common/python_modules/Makefile	/^CELT051_LIBS = -lcelt051 -lm  $/;"	m
CERTIFICATES_ARGS_TEMPLATE	client/smartcard_channel.cpp	346;"	d	file:
CERTIFICATES_DEFAULT_DB	client/smartcard_channel.cpp	345;"	d	file:
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	client/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	docs/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	docs/manual/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	server/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	server/tests/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	spice-common/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	spice-common/common/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	spice-common/python_modules/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS_CFLAGS	Makefile	/^CFLAGS_CFLAGS = $/;"	m
CFLAGS_CFLAGS	client/Makefile	/^CFLAGS_CFLAGS = $/;"	m
CFLAGS_CFLAGS	docs/Makefile	/^CFLAGS_CFLAGS = $/;"	m
CFLAGS_CFLAGS	docs/manual/Makefile	/^CFLAGS_CFLAGS = $/;"	m
CFLAGS_CFLAGS	server/Makefile	/^CFLAGS_CFLAGS = $/;"	m
CFLAGS_CFLAGS	server/tests/Makefile	/^CFLAGS_CFLAGS = $/;"	m
CHANNEL	server/red_client_cache.h	137;"	d
CHANNEL	server/red_client_cache.h	26;"	d
CHANNEL	server/red_client_cache.h	37;"	d
CHANNEL	server/red_client_shared_cache.h	234;"	d
CHANNEL	server/red_client_shared_cache.h	28;"	d
CHANNELCLIENT	server/red_client_cache.h	138;"	d
CHANNELCLIENT	server/red_client_cache.h	27;"	d
CHANNELCLIENT	server/red_client_cache.h	38;"	d
CHANNEL_BLOCKED_SLEEP_DURATION	server/red_channel.c	55;"	d	file:
CHANNEL_FROM_RCC	server/red_client_cache.h	139;"	d
CHANNEL_FROM_RCC	server/red_client_cache.h	45;"	d
CHANNEL_FROM_RCC	server/red_client_shared_cache.h	235;"	d
CHANNEL_FROM_RCC	server/red_client_shared_cache.h	37;"	d
CHANNEL_RECEIVE_BUF_SIZE	server/red_worker.c	402;"	d	file:
CHAR_DEVICE_WRITE_TO_TIMEOUT	server/char_device.c	28;"	d	file:
CLEAR_CAP	server/red_worker.c	11237;"	d	file:
CLIENT_ACK_WINDOW	server/red_channel.h	37;"	d
CLIENT_CONNECTIVITY_TIMEOUT	server/main_channel.c	58;"	d	file:
CLIENT_CURSOR_CACHE	server/red_worker.c	1643;"	d	file:
CLIENT_CURSOR_CACHE	server/red_worker.c	1645;"	d	file:
CLIENT_CURSOR_CACHE_SIZE	server/red_worker.c	412;"	d	file:
CLIENT_MARSHALLERS	spice-common/common/Makefile	/^CLIENT_MARSHALLERS = \\$/;"	m
CLIENT_MONITORS_CONFIG_CRC32_POLY	spice-common/spice-protocol/spice/qxl_dev.h	169;"	d
CLIENT_PALETTE_CACHE	server/red_worker.c	1647;"	d	file:
CLIENT_PALETTE_CACHE	server/red_worker.c	1649;"	d	file:
CLIENT_PALETTE_CACHE_SIZE	server/red_worker.c	419;"	d	file:
CLIENT_PIXMAPS_CACHE	server/red_worker.c	1639;"	d	file:
CLIENT_PIXMAPS_CACHE	server/red_worker.c	1641;"	d	file:
CLIPBOARD_FORMAT_MAX_TYPES	client/windows/platform.cpp	/^static const int CLIPBOARD_FORMAT_MAX_TYPES = 16;$/;"	v	file:
CLIPBOARD_TIMEOUT_MS	client/windows/platform.cpp	/^static const int CLIPBOARD_TIMEOUT_MS = 10000;$/;"	v	file:
CLIPSTEPEDGE	spice-common/common/lines.c	2157;"	d	file:
CMD_RING_POLL_RETRIES	server/red_worker.c	118;"	d	file:
CMD_RING_POLL_TIMEOUT	server/red_worker.c	117;"	d	file:
COMMANDS_SIZE	server/tests/test_display_base.c	446;"	d	file:
COMMON_BASE	server/tests/Makefile	/^COMMON_BASE = \\$/;"	m
COMMON_CFLAGS	Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMMON_CFLAGS	client/Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMMON_CFLAGS	docs/Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMMON_CFLAGS	docs/manual/Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMMON_CFLAGS	server/Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMMON_CFLAGS	server/tests/Makefile	/^COMMON_CFLAGS = -I ${top_srcdir}\/spice-common\/ -I ${top_builddir}\/spice-common\/ -I ${top_srcdir}\/spice-common\/spice-protocol\/$/;"	m
COMPILE	client/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	server/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	server/tests/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	spice-common/common/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPRESS_IMP	spice-common/common/quic_rgb_tmpl.c	33;"	d	file:
COMPRESS_IMP	spice-common/common/quic_rgb_tmpl.c	54;"	d	file:
COMPRESS_IMP	spice-common/common/quic_rgb_tmpl.c	758;"	d	file:
COMPRESS_IMP	spice-common/common/quic_rgb_tmpl.c	75;"	d	file:
COMPRESS_ONE	spice-common/common/quic_rgb_tmpl.c	321;"	d	file:
COMPRESS_ONE	spice-common/common/quic_rgb_tmpl.c	744;"	d	file:
COMPRESS_ONE_0	spice-common/common/quic_rgb_tmpl.c	313;"	d	file:
COMPRESS_ONE_0	spice-common/common/quic_rgb_tmpl.c	743;"	d	file:
COMPRESS_ONE_ROW0	spice-common/common/quic_rgb_tmpl.c	172;"	d	file:
COMPRESS_ONE_ROW0	spice-common/common/quic_rgb_tmpl.c	742;"	d	file:
COMPRESS_ONE_ROW0_0	spice-common/common/quic_rgb_tmpl.c	165;"	d	file:
COMPRESS_ONE_ROW0_0	spice-common/common/quic_rgb_tmpl.c	741;"	d	file:
COMP_LEVEL_SIZE_LIMIT	spice-common/common/lz.c	428;"	d	file:
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES = spice-server.pc$/;"	m
CONFIG_CLEAN_FILES	client/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	docs/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	docs/manual/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	server/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	server/tests/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	spice-common/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	spice-common/common/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	spice-common/python_modules/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	spice-common/spice-protocol/Makefile	/^CONFIG_CLEAN_FILES = spice-protocol.pc$/;"	m
CONFIG_CLEAN_FILES	spice-common/spice-protocol/spice/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	client/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	docs/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	docs/manual/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	server/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	server/tests/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	spice-common/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	spice-common/common/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	spice-common/python_modules/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	spice-common/spice-protocol/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	spice-common/spice-protocol/spice/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_HEADER	client/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	docs/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	docs/manual/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	server/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	server/tests/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	spice-common/Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_HEADER	spice-common/common/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	spice-common/python_modules/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	spice-common/spice-protocol/Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_HEADER	spice-common/spice-protocol/spice/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONNECTED	client/application.h	/^        CONNECTED,$/;"	e	enum:Application::State
CONNECTED_STATE	client/red_channel.h	/^    CONNECTED_STATE,$/;"	e	enum:__anon110
CONNECTING	client/application.h	/^        CONNECTING,$/;"	e	enum:Application::State
CONNECTING_DIALOG_HEIGHT	client/gui/gui.cpp	61;"	d	file:
CONNECTING_DIALOG_WIDTH	client/gui/gui.cpp	60;"	d	file:
CONNECTING_STATE	client/red_channel.h	/^    CONNECTING_STATE,$/;"	e	enum:__anon110
CONNECTIVITY_STATE_BLOCKED	server/red_channel.c	/^    CONNECTIVITY_STATE_BLOCKED,$/;"	e	enum:ConnectivityState	file:
CONNECTIVITY_STATE_CONNECTED	server/red_channel.c	/^    CONNECTIVITY_STATE_CONNECTED,$/;"	e	enum:ConnectivityState	file:
CONNECTIVITY_STATE_DISCONNECTED	server/red_channel.c	/^    CONNECTIVITY_STATE_DISCONNECTED,$/;"	e	enum:ConnectivityState	file:
CONNECTIVITY_STATE_WAIT_PONG	server/red_channel.c	/^    CONNECTIVITY_STATE_WAIT_PONG,$/;"	e	enum:ConnectivityState	file:
CONNECT_ACTION	client/red_channel.h	/^    CONNECT_ACTION,$/;"	e	enum:__anon111
CONNECT_OPTION_DIALOG_HEIGHT	client/gui/gui.cpp	67;"	d	file:
CONNECT_OPTION_DIALOG_WIDTH	client/gui/gui.cpp	66;"	d	file:
CONTRAST_PIXELS_WEIGHT	server/red_bitmap_utils.h	45;"	d
CONTRAST_TH	server/red_bitmap_utils.h	159;"	d
CONTRAST_TH	server/red_bitmap_utils.h	48;"	d
CONTRAST_TH	server/red_bitmap_utils.h	50;"	d
CONTROLLER_AUTO_DISPLAY_RES	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_AUTO_DISPLAY_RES = 1 << 1,$/;"	e	enum:__anon62
CONTROLLER_BUF_SIZE	client/controller.h	80;"	d
CONTROLLER_CA_FILE	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_CA_FILE,$/;"	e	enum:__anon61
CONTROLLER_COLOR_DEPTH	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_COLOR_DEPTH,$/;"	e	enum:__anon61
CONTROLLER_CONNECT	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_CONNECT,$/;"	e	enum:__anon61
CONTROLLER_CREATE_MENU	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_CREATE_MENU,$/;"	e	enum:__anon61
CONTROLLER_DELETE_MENU	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_DELETE_MENU,$/;"	e	enum:__anon61
CONTROLLER_DISABLE_CHANNELS	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_DISABLE_CHANNELS,$/;"	e	enum:__anon61
CONTROLLER_DISABLE_EFFECTS	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_DISABLE_EFFECTS,$/;"	e	enum:__anon61
CONTROLLER_ENABLE_SMARTCARD	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_ENABLE_SMARTCARD,$/;"	e	enum:__anon61
CONTROLLER_ENABLE_USB	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_ENABLE_USB,$/;"	e	enum:__anon61
CONTROLLER_ENABLE_USB_AUTOSHARE	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_ENABLE_USB_AUTOSHARE,$/;"	e	enum:__anon61
CONTROLLER_FLAG_EXCLUSIVE	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_FLAG_EXCLUSIVE = 1 << 0,$/;"	e	enum:__anon60
CONTROLLER_FULL_SCREEN	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_FULL_SCREEN,$/;"	e	enum:__anon61
CONTROLLER_HIDE	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_HIDE,$/;"	e	enum:__anon61
CONTROLLER_HOST	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_HOST = 1,$/;"	e	enum:__anon61
CONTROLLER_HOST_SUBJECT	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_HOST_SUBJECT,$/;"	e	enum:__anon61
CONTROLLER_HOTKEYS	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_HOTKEYS,$/;"	e	enum:__anon61
CONTROLLER_MAGIC	spice-common/spice-protocol/spice/controller_prot.h	24;"	d
CONTROLLER_MENU_FLAGS_CHECKED	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_FLAGS_CHECKED      = 1 << 3,$/;"	e	enum:__anon63
CONTROLLER_MENU_FLAGS_DISABLED	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_FLAGS_DISABLED     = 1 << 1,$/;"	e	enum:__anon63
CONTROLLER_MENU_FLAGS_GRAYED	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_FLAGS_GRAYED       = 1 << 4,$/;"	e	enum:__anon63
CONTROLLER_MENU_FLAGS_POPUP	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_FLAGS_POPUP        = 1 << 2,$/;"	e	enum:__anon63
CONTROLLER_MENU_FLAGS_SEPARATOR	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_FLAGS_SEPARATOR    = 1 << 0,$/;"	e	enum:__anon63
CONTROLLER_MENU_ITEM_CLICK	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_MENU_ITEM_CLICK = 1001,$/;"	e	enum:__anon61
CONTROLLER_MENU_ITEM_DELIMITER	spice-common/spice-protocol/spice/controller_prot.h	108;"	d
CONTROLLER_MENU_PARAM_DELIMITER	spice-common/spice-protocol/spice/controller_prot.h	109;"	d
CONTROLLER_PASSWORD	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_PASSWORD,$/;"	e	enum:__anon61
CONTROLLER_PORT	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_PORT,$/;"	e	enum:__anon61
CONTROLLER_PROXY	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_PROXY,$/;"	e	enum:__anon61
CONTROLLER_SECURE_CHANNELS	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SECURE_CHANNELS,$/;"	e	enum:__anon61
CONTROLLER_SEND_CAD	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SEND_CAD,$/;"	e	enum:__anon61
CONTROLLER_SET_FULL_SCREEN	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SET_FULL_SCREEN  = CONTROLLER_TRUE,$/;"	e	enum:__anon62
CONTROLLER_SET_TITLE	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SET_TITLE,$/;"	e	enum:__anon61
CONTROLLER_SHOW	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SHOW,$/;"	e	enum:__anon61
CONTROLLER_SPORT	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_SPORT,$/;"	e	enum:__anon61
CONTROLLER_TLS_CIPHERS	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_TLS_CIPHERS,$/;"	e	enum:__anon61
CONTROLLER_TRUE	spice-common/spice-protocol/spice/controller_prot.h	91;"	d
CONTROLLER_USB_FILTER	spice-common/spice-protocol/spice/controller_prot.h	/^    CONTROLLER_USB_FILTER,$/;"	e	enum:__anon61
CONTROLLER_VERSION	spice-common/spice-protocol/spice/controller_prot.h	25;"	d
CON_OP_BOTH	client/red_peer.h	/^            CON_OP_BOTH,$/;"	e	enum:RedPeer::ConnectionOptions::Type
CON_OP_INVALID	client/red_peer.h	/^            CON_OP_INVALID,$/;"	e	enum:RedPeer::ConnectionOptions::Type
CON_OP_SECURE	client/red_peer.h	/^            CON_OP_SECURE,$/;"	e	enum:RedPeer::ConnectionOptions::Type
CON_OP_UNSECURE	client/red_peer.h	/^            CON_OP_UNSECURE,$/;"	e	enum:RedPeer::ConnectionOptions::Type
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	104;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	128;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	132;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	146;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	157;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	171;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	335;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	48;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	55;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	62;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	74;"	d	file:
COPY_COMP_PIXEL	client/glz_decode_tmpl.c	86;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	106;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	118;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	136;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	160;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	164;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	176;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	180;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	196;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	202;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	216;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	341;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	77;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	88;"	d	file:
COPY_COMP_PIXEL	spice-common/common/lz_decompress_tmpl.c	94;"	d	file:
COPY_PIXEL	client/glz_decode_tmpl.c	169;"	d	file:
COPY_PIXEL	client/glz_decode_tmpl.c	333;"	d	file:
COPY_PIXEL	client/glz_decode_tmpl.c	39;"	d	file:
COPY_PIXEL	spice-common/common/lz_decompress_tmpl.c	214;"	d	file:
COPY_PIXEL	spice-common/common/lz_decompress_tmpl.c	339;"	d	file:
COPY_PIXEL	spice-common/common/lz_decompress_tmpl.c	67;"	d	file:
COPY_PLT_ENTRY	client/glz_decode_tmpl.c	336;"	d	file:
COPY_PLT_ENTRY	client/glz_decode_tmpl.c	51;"	d	file:
COPY_PLT_ENTRY	spice-common/common/lz_decompress_tmpl.c	342;"	d	file:
COPY_PLT_ENTRY	spice-common/common/lz_decompress_tmpl.c	80;"	d	file:
COPY_RASTER_OP	spice-common/common/pixman_utils.c	60;"	d	file:
COPY_REF_PIXEL	client/glz_decode_tmpl.c	170;"	d	file:
COPY_REF_PIXEL	client/glz_decode_tmpl.c	334;"	d	file:
COPY_REF_PIXEL	client/glz_decode_tmpl.c	40;"	d	file:
COPY_REF_PIXEL	spice-common/common/lz_decompress_tmpl.c	215;"	d	file:
COPY_REF_PIXEL	spice-common/common/lz_decompress_tmpl.c	340;"	d	file:
COPY_REF_PIXEL	spice-common/common/lz_decompress_tmpl.c	68;"	d	file:
CORELATE	spice-common/common/quic_rgb_tmpl.c	130;"	d	file:
CORELATE	spice-common/common/quic_rgb_tmpl.c	149;"	d	file:
CORELATE	spice-common/common/quic_rgb_tmpl.c	746;"	d	file:
CORELATE_0	spice-common/common/quic_rgb_tmpl.c	120;"	d	file:
CORELATE_0	spice-common/common/quic_rgb_tmpl.c	745;"	d	file:
COUNT	server/tests/test_display_base.h	7;"	d
COUNTER	spice-common/common/quic.c	/^typedef unsigned COUNTER;   \/* counter in the array of counters in bucket of the data model *\/$/;"	t	file:
CPP	Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	client/Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	docs/Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	docs/manual/Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	server/Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	server/tests/Makefile	/^CPP = gcc -std=gnu99 -E$/;"	m
CPP	spice-common/Makefile	/^CPP = gcc -E$/;"	m
CPP	spice-common/common/Makefile	/^CPP = gcc -E$/;"	m
CPP	spice-common/python_modules/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	client/Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	docs/Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	docs/manual/Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	server/Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	server/tests/Makefile	/^CPPFLAGS =   -pthread -lm -lrt$/;"	m
CPPFLAGS	spice-common/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	spice-common/common/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	spice-common/python_modules/Makefile	/^CPPFLAGS = $/;"	m
CREATE_PRIMARY	server/tests/test_display_base.h	/^    CREATE_PRIMARY,$/;"	e	enum:__anon130
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	spice-common/Makefile	/^CSCOPE = cscope$/;"	m
CSCOPE	spice-common/spice-protocol/Makefile	/^CSCOPE = cscope$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	client/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	docs/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	server/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	server/tests/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	spice-common/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	spice-common/common/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	spice-common/spice-protocol/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	spice-common/spice-protocol/spice/Makefile	/^CTAGS = ctags$/;"	m
CURSOR_CACHE_HASH_KEY	server/red_worker.c	417;"	d	file:
CURSOR_CACHE_HASH_MASK	server/red_worker.c	416;"	d	file:
CURSOR_CACHE_HASH_SHIFT	server/red_worker.c	414;"	d	file:
CURSOR_CACHE_HASH_SIZE	server/red_worker.c	415;"	d	file:
CURSOR_HEIGHT	server/tests/test_display_base.c	645;"	d	file:
CURSOR_WIDTH	server/tests/test_display_base.c	644;"	d	file:
CXIMAGE_CFLAGS	Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXIMAGE_CFLAGS	client/Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXIMAGE_CFLAGS	docs/Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXIMAGE_CFLAGS	docs/manual/Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXIMAGE_CFLAGS	server/Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXIMAGE_CFLAGS	server/tests/Makefile	/^CXIMAGE_CFLAGS = $/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXX	client/Makefile	/^CXX = g++$/;"	m
CXX	docs/Makefile	/^CXX = g++$/;"	m
CXX	docs/manual/Makefile	/^CXX = g++$/;"	m
CXX	server/Makefile	/^CXX = g++$/;"	m
CXX	server/tests/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	client/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	client/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	docs/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	docs/manual/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	server/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	server/tests/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	client/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	docs/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	docs/manual/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	server/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	server/tests/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	client/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	docs/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	docs/manual/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	server/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	server/tests/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	client/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	client/Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	client/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	docs/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	docs/manual/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	server/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	server/tests/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	spice-common/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	spice-common/common/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	spice-common/python_modules/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	spice-common/spice-protocol/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	spice-common/spice-protocol/spice/Makefile	/^CYGPATH_W = echo$/;"	m
Cache	client/cache.hpp	/^    Cache()$/;"	f	class:Cache
Cache	client/cache.hpp	/^class Cache : public Base {$/;"	c
CacheItem	server/red_worker.c	/^struct CacheItem {$/;"	s	file:
CacheItem	server/red_worker.c	/^typedef struct CacheItem CacheItem;$/;"	t	typeref:struct:CacheItem	file:
CachedPalette	client/canvas.h	/^    CachedPalette(SpicePalette* palette)$/;"	f	class:CachedPalette
CachedPalette	client/canvas.h	/^class CachedPalette {$/;"	c
CalcLineDeltas	spice-common/common/lines.c	217;"	d	file:
Canvas	client/canvas.cpp	/^Canvas::Canvas(PixmapCache& pixmap_cache, PaletteCache& palette_cache,$/;"	f	class:Canvas
Canvas	client/canvas.h	/^class Canvas {$/;"	c
CanvasBase	spice-common/common/canvas_base.c	/^typedef struct CanvasBase {$/;"	s	file:
CanvasBase	spice-common/common/canvas_base.c	/^} CanvasBase;$/;"	t	typeref:struct:CanvasBase	file:
CanvasOption	client/application.h	/^enum CanvasOption {$/;"	g
CanvasType	client/canvas.h	/^enum CanvasType {$/;"	g
CapButt	spice-common/common/lines.h	100;"	d
CapNotLast	spice-common/common/lines.h	99;"	d
CapProjecting	spice-common/common/lines.h	102;"	d
CapRound	spice-common/common/lines.h	101;"	d
CardInsertEvent	client/smartcard_channel.h	/^    CardInsertEvent(SmartCardChannel* smartcard_channel, VEvent* vevent)$/;"	f	class:CardInsertEvent
CardInsertEvent	client/smartcard_channel.h	/^class CardInsertEvent: public VEventEvent {$/;"	c
CardRemoveEvent	client/smartcard_channel.h	/^    CardRemoveEvent(SmartCardChannel* smartcard_channel, VEvent* vevent)$/;"	f	class:CardRemoveEvent
CardRemoveEvent	client/smartcard_channel.h	/^class CardRemoveEvent: public VEventEvent {$/;"	c
CaselessLiteral	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
CertFieldValueList	client/red_peer.h	/^        typedef std::list<CertFieldValuePair> CertFieldValueList;$/;"	t	class:RedPeer::HostAuthOptions
CertFieldValuePair	client/red_peer.h	/^        typedef std::pair<std::string, std::string> CertFieldValuePair;$/;"	t	class:RedPeer::HostAuthOptions
Channel	spice-common/common/quic.c	/^typedef struct Channel {$/;"	s	file:
Channel	spice-common/common/quic.c	/^} Channel;$/;"	t	typeref:struct:Channel	file:
ChannelCaps	client/red_channel.h	/^typedef std::vector<uint32_t> ChannelCaps;$/;"	t
ChannelCbs	server/red_channel.h	/^} ChannelCbs;$/;"	t	typeref:struct:__anon145
ChannelFactory	client/red_client.h	/^    ChannelFactory(uint32_t type) : _type (type) {}$/;"	f	class:ChannelFactory
ChannelFactory	client/red_client.h	/^class ChannelFactory {$/;"	c
ChannelMember	spice-common/python_modules/ptypes.py	/^class ChannelMember(Containee):$/;"	c
ChannelSecurityOptions	server/reds.c	/^struct ChannelSecurityOptions {$/;"	s	file:
ChannelSecurityOptions	server/reds.c	/^typedef struct ChannelSecurityOptions ChannelSecurityOptions;$/;"	t	typeref:struct:ChannelSecurityOptions	file:
ChannelType	spice-common/python_modules/ptypes.py	/^class ChannelType(Type):$/;"	c
Channels	client/red_client.h	/^    typedef std::list<RedChannel*> Channels;$/;"	t	class:RedClient
ChunkHeader	client/playback_channel.cpp	/^typedef struct __attribute__ ((__packed__)) ChunkHeader {$/;"	s	file:
ChunkHeader	client/playback_channel.cpp	/^} ChunkHeader;$/;"	t	typeref:struct:ChunkHeader	file:
ClientCbs	server/red_channel.h	/^} ClientCbs;$/;"	t	typeref:struct:__anon146
ClientNetSocket	client/client_net_socket.cpp	/^ClientNetSocket::ClientNetSocket(uint16_t id, const struct in_addr& dst_addr, uint16_t dst_port,$/;"	f	class:ClientNetSocket
ClientNetSocket	client/client_net_socket.h	/^class ClientNetSocket: public EventSources::Socket {$/;"	c
ClipboardFormat	client/windows/platform.cpp	/^typedef struct ClipboardFormat {$/;"	s	file:
ClipboardFormat	client/windows/platform.cpp	/^} ClipboardFormat;$/;"	t	typeref:struct:ClipboardFormat	file:
ClipboardGrabEvent	client/red_client.h	/^    ClipboardGrabEvent(uint32_t *types, uint32_t type_count)$/;"	f	class:ClipboardGrabEvent
ClipboardGrabEvent	client/red_client.h	/^class ClipboardGrabEvent : public Event {$/;"	c
ClipboardListener	client/platform.h	/^class Platform::ClipboardListener {$/;"	c	class:Platform
ClipboardNotifyEvent	client/red_client.h	/^    ClipboardNotifyEvent(uint32_t type, uint8_t *data, uint32_t size)$/;"	f	class:ClipboardNotifyEvent
ClipboardNotifyEvent	client/red_client.h	/^class ClipboardNotifyEvent : public Event {$/;"	c
ClipboardReleaseEvent	client/red_client.h	/^    ClipboardReleaseEvent() {}$/;"	f	class:ClipboardReleaseEvent
ClipboardReleaseEvent	client/red_client.h	/^class ClipboardReleaseEvent : public Event {$/;"	c
ClipboardRequestEvent	client/red_client.h	/^    ClipboardRequestEvent(uint32_t type) : _type (type) {}$/;"	f	class:ClipboardRequestEvent
ClipboardRequestEvent	client/red_client.h	/^class ClipboardRequestEvent : public Event {$/;"	c
CmdLineParser	client/cmd_line_parser.cpp	/^CmdLineParser::CmdLineParser(std::string description, bool allow_positional_args)$/;"	f	class:CmdLineParser
CmdLineParser	client/cmd_line_parser.h	/^class CmdLineParser {$/;"	c
CodeWriter	spice-common/python_modules/codegen.py	/^class CodeWriter:$/;"	c
ColorCursor	client/cursor_channel.cpp	/^ColorCursor::ColorCursor(const SpiceCursorHeader& header)$/;"	f	class:ColorCursor
ColorCursor	client/cursor_channel.cpp	/^class ColorCursor: public NaitivCursor {$/;"	c	file:
ColorCursor16	client/cursor_channel.cpp	/^    ColorCursor16(const SpiceCursorHeader& header, const uint8_t* data)$/;"	f	class:ColorCursor16
ColorCursor16	client/cursor_channel.cpp	/^class ColorCursor16: public ColorCursor {$/;"	c	file:
ColorCursor32	client/cursor_channel.cpp	/^    ColorCursor32(const SpiceCursorHeader& header, const uint8_t* data)$/;"	f	class:ColorCursor32
ColorCursor32	client/cursor_channel.cpp	/^class ColorCursor32: public ColorCursor {$/;"	c	file:
ColorCursor4	client/cursor_channel.cpp	/^    ColorCursor4(const SpiceCursorHeader& header, const uint8_t* data)$/;"	f	class:ColorCursor4
ColorCursor4	client/cursor_channel.cpp	/^class ColorCursor4: public ColorCursor {$/;"	c	file:
ColourI	client/gui/softrenderer.h	/^        class ColourI {$/;"	c	class:CEGUI::SoftRenderer
ColourIRect	client/gui/softrenderer.h	/^        struct ColourIRect {$/;"	s	class:CEGUI::SoftRenderer
Combine	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
CombineOP	client/red_drawable.h	/^    enum CombineOP {$/;"	g	class:RedDrawable
Command	server/tests/test_display_base.h	/^struct Command {$/;"	s
Command	server/tests/test_display_base.h	/^typedef struct Command Command;$/;"	t	typeref:struct:Command
CommandCreatePrimary	server/tests/test_display_base.h	/^typedef struct CommandCreatePrimary {$/;"	s
CommandCreatePrimary	server/tests/test_display_base.h	/^} CommandCreatePrimary;$/;"	t	typeref:struct:CommandCreatePrimary
CommandCreateSurface	server/tests/test_display_base.h	/^typedef struct CommandCreateSurface {$/;"	s
CommandCreateSurface	server/tests/test_display_base.h	/^} CommandCreateSurface;$/;"	t	typeref:struct:CommandCreateSurface
CommandDrawBitmap	server/tests/test_display_base.h	/^typedef struct CommandDrawBitmap {$/;"	s
CommandDrawBitmap	server/tests/test_display_base.h	/^} CommandDrawBitmap;$/;"	t	typeref:struct:CommandDrawBitmap
CommandDrawSolid	server/tests/test_display_base.h	/^typedef struct CommandDrawSolid {$/;"	s
CommandDrawSolid	server/tests/test_display_base.h	/^} CommandDrawSolid;$/;"	t	typeref:struct:CommandDrawSolid
CommandInfo	client/windows/red_window_p.h	/^    CommandInfo() : menu (0), command (0) {}$/;"	f	class:CommandInfo
CommandInfo	client/windows/red_window_p.h	/^    CommandInfo(Menu* in_menu, int in_command) : menu (in_menu), command (in_command) {}$/;"	f	class:CommandInfo
CommandInfo	client/windows/red_window_p.h	/^class CommandInfo {$/;"	c
CommandMap	client/windows/red_window_p.h	/^typedef std::map<int, CommandInfo> CommandMap;$/;"	t
CommandSleep	server/tests/test_display_base.h	/^typedef struct CommandSleep {$/;"	s
CommandSleep	server/tests/test_display_base.h	/^} CommandSleep;$/;"	t	typeref:struct:CommandSleep
CommandTarget	client/menu.h	/^class CommandTarget {$/;"	c
CommandType	server/tests/test_display_base.h	/^} CommandType;$/;"	t	typeref:enum:__anon130
CommandsMap	client/hot_keys.h	/^typedef std::map<std::string, int> CommandsMap;$/;"	t
CommonChannel	server/red_worker.c	/^typedef struct CommonChannel {$/;"	s	file:
CommonChannel	server/red_worker.c	/^} CommonChannel;$/;"	t	typeref:struct:CommonChannel	file:
CommonChannelClient	server/red_worker.c	/^typedef struct CommonChannelClient {$/;"	s	file:
CommonChannelClient	server/red_worker.c	/^} CommonChannelClient;$/;"	t	typeref:struct:CommonChannelClient	file:
CommonState	spice-common/common/quic.c	/^typedef struct CommonState {$/;"	s	file:
CommonState	spice-common/common/quic.c	/^} CommonState;$/;"	t	typeref:struct:CommonState	file:
Compare	client/process_loop.h	/^    class Compare {$/;"	c	class:Timer
CompoundInMessage	client/red_peer.h	/^    CompoundInMessage(uint64_t _serial, uint16_t type, uint32_t size, uint32_t sub_list)$/;"	f	class:RedPeer::CompoundInMessage
CompoundInMessage	client/red_peer.h	/^class RedPeer::CompoundInMessage: public RedPeer::InMessage {$/;"	c	class:RedPeer
Condition	client/threads.cpp	/^Condition::Condition()$/;"	f	class:Condition
Condition	client/threads.h	/^class Condition {$/;"	c
ConnectedEvent	client/application.h	/^class ConnectedEvent: public Event {$/;"	c
ConnectingDialog	client/gui/gui.cpp	/^ConnectingDialog::ConnectingDialog(GUI& gui)$/;"	f	class:ConnectingDialog
ConnectingDialog	client/gui/gui.cpp	/^class ConnectingDialog : public GUI::Dialog {$/;"	c	file:
ConnectionInterface	client/platform.h	/^        ConnectionInterface() : _opaque (INVALID_CONNECTION) {}$/;"	f	class:NamedPipe::ConnectionInterface
ConnectionInterface	client/platform.h	/^    class ConnectionInterface {$/;"	c	class:NamedPipe
ConnectionOptions	client/red_peer.h	/^        ConnectionOptions(Type in_type, int in_port, int in_sport,$/;"	f	class:RedPeer::ConnectionOptions
ConnectionOptions	client/red_peer.h	/^    class ConnectionOptions {$/;"	c	class:RedPeer
ConnectionRef	client/platform.h	/^    typedef unsigned long ConnectionRef;$/;"	t	class:NamedPipe
ConnectivityState	server/red_channel.c	/^enum ConnectivityState {$/;"	g	file:
ConsoleWait	client/windows/platform.cpp	/^class ConsoleWait {$/;"	c	file:
Containee	spice-common/python_modules/ptypes.py	/^class Containee:$/;"	c
Container	server/red_worker.c	/^typedef struct Container {$/;"	s	file:
Container	server/red_worker.c	/^} Container;$/;"	t	typeref:struct:Container	file:
ContainerType	spice-common/python_modules/ptypes.py	/^class ContainerType(Type):$/;"	c
Controller	client/controller.cpp	/^Controller::Controller(ControllerInterface *handler)$/;"	f	class:Controller
Controller	client/controller.h	/^class Controller : public NamedPipe::ListenerInterface {$/;"	c
ControllerConnection	client/controller.cpp	/^ControllerConnection::ControllerConnection(ControllerInterface *handler, Controller& parent)$/;"	f	class:ControllerConnection
ControllerConnection	client/controller.h	/^class ControllerConnection : public NamedPipe::ConnectionInterface {$/;"	c
ControllerData	spice-common/spice-protocol/spice/controller_prot.h	/^typedef struct SPICE_ATTR_PACKED ControllerData {$/;"	s
ControllerData	spice-common/spice-protocol/spice/controller_prot.h	/^} ControllerData;$/;"	t	typeref:struct:ControllerData
ControllerInit	spice-common/spice-protocol/spice/controller_prot.h	/^typedef struct SPICE_ATTR_PACKED ControllerInit {$/;"	s
ControllerInit	spice-common/spice-protocol/spice/controller_prot.h	/^} ControllerInit;$/;"	t	typeref:struct:ControllerInit
ControllerInitHeader	spice-common/spice-protocol/spice/controller_prot.h	/^typedef struct SPICE_ATTR_PACKED ControllerInitHeader {$/;"	s
ControllerInitHeader	spice-common/spice-protocol/spice/controller_prot.h	/^} ControllerInitHeader;$/;"	t	typeref:struct:ControllerInitHeader
ControllerInterface	client/controller.h	/^class ControllerInterface {$/;"	c
ControllerMsg	spice-common/spice-protocol/spice/controller_prot.h	/^typedef struct SPICE_ATTR_PACKED ControllerMsg {$/;"	s
ControllerMsg	spice-common/spice-protocol/spice/controller_prot.h	/^} ControllerMsg;$/;"	t	typeref:struct:ControllerMsg
ControllerValue	spice-common/spice-protocol/spice/controller_prot.h	/^typedef struct SPICE_ATTR_PACKED ControllerValue {$/;"	s
ControllerValue	spice-common/spice-protocol/spice/controller_prot.h	/^} ControllerValue;$/;"	t	typeref:struct:ControllerValue
CoordModeOrigin	spice-common/common/lines.h	88;"	d
CoordModePrevious	spice-common/common/lines.h	89;"	d
CreatePrimarySurfaceEvent	client/display_channel.cpp	/^   CreatePrimarySurfaceEvent(DisplayChannel& channel, int width, int height, uint32_t format)$/;"	f	class:CreatePrimarySurfaceEvent
CreatePrimarySurfaceEvent	client/display_channel.cpp	/^class CreatePrimarySurfaceEvent: public SyncEvent {$/;"	c	file:
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	spice-common/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	spice-common/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateSurfaceEvent	client/display_channel.cpp	/^   CreateSurfaceEvent(DisplayChannel& channel, int surface_id, int width, int height,$/;"	f	class:CreateSurfaceEvent
CreateSurfaceEvent	client/display_channel.cpp	/^class CreateSurfaceEvent: public SyncEvent {$/;"	c	file:
CursorCache	client/cursor_channel.h	/^typedef Cache<CursorData, CursorCacheTreat, 1024> CursorCache;$/;"	t
CursorCacheTreat	client/cursor_channel.h	/^class CursorCacheTreat {$/;"	c
CursorChannel	client/cursor_channel.cpp	/^CursorChannel::CursorChannel(RedClient& client, uint32_t id)$/;"	f	class:CursorChannel
CursorChannel	client/cursor_channel.h	/^class CursorChannel: public RedChannel, public ScreenLayer {$/;"	c
CursorChannel	server/red_worker.c	/^typedef struct CursorChannel {$/;"	s	file:
CursorChannel	server/red_worker.c	/^} CursorChannel;$/;"	t	typeref:struct:CursorChannel	file:
CursorChannelClient	server/red_worker.c	/^typedef struct CursorChannelClient {$/;"	s	file:
CursorChannelClient	server/red_worker.c	/^} CursorChannelClient;$/;"	t	typeref:struct:CursorChannelClient	file:
CursorData	client/cursor.cpp	/^CursorData::CursorData(SpiceCursor& cursor, int data_size)$/;"	f	class:CursorData
CursorData	client/cursor.h	/^class CursorData {$/;"	c
CursorData	server/red_worker.c	/^typedef struct __attribute__ ((__packed__)) CursorData {$/;"	s	file:
CursorData	server/red_worker.c	/^} CursorData;$/;"	t	typeref:struct:CursorData	file:
CursorFactory	client/cursor_channel.cpp	/^    CursorFactory() : ChannelFactory(SPICE_CHANNEL_CURSOR) {}$/;"	f	class:CursorFactory
CursorFactory	client/cursor_channel.cpp	/^class CursorFactory: public ChannelFactory {$/;"	c	file:
CursorHandler	client/cursor_channel.cpp	/^    CursorHandler(CursorChannel& channel)$/;"	f	class:CursorHandler
CursorHandler	client/cursor_channel.cpp	/^class CursorHandler: public MessageHandlerImp<CursorChannel, SPICE_CHANNEL_CURSOR> {$/;"	c	file:
CursorItem	server/red_worker.c	/^typedef struct CursorItem {$/;"	s	file:
CursorItem	server/red_worker.c	/^} CursorItem;$/;"	t	typeref:struct:CursorItem	file:
CursorOpaque	client/cursor.h	/^    CursorOpaque() {}$/;"	f	class:CursorOpaque
CursorOpaque	client/cursor.h	/^class CursorOpaque {$/;"	c
CursorPipeItem	server/red_worker.c	/^typedef struct CursorPipeItem {$/;"	s	file:
CursorPipeItem	server/red_worker.c	/^} CursorPipeItem;$/;"	t	typeref:struct:CursorPipeItem	file:
CursorUpdateEvent	client/cursor_channel.cpp	/^    CursorUpdateEvent(CursorChannel& channel)$/;"	f	class:CursorUpdateEvent
CursorUpdateEvent	client/cursor_channel.cpp	/^class CursorUpdateEvent: public Event {$/;"	c	file:
DATA	Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATA	spice-common/spice-protocol/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DBG	client/debug.h	86;"	d
DBGLEVEL	client/debug.h	84;"	d
DCC_FOREACH_SAFE	server/red_worker.c	1133;"	d	file:
DCC_TO_DC	server/red_worker.c	1162;"	d	file:
DCC_TO_WORKER	server/red_worker.c	1154;"	d	file:
DDXPointPtr	spice-common/common/lines.c	/^typedef DDXPointRec *DDXPointPtr;$/;"	t	file:
DDXPointRec	spice-common/common/lines.c	/^typedef SpicePoint DDXPointRec;$/;"	t	file:
DEBUG_PRINT_BYTE_ARRAY	client/smartcard_channel.cpp	51;"	d	file:
DEBUG_PRINT_BYTE_ARRAY	client/smartcard_channel.cpp	53;"	d	file:
DECODE_TO_RGB32	client/glz_decoder.cpp	/^const decode_function DECODE_TO_RGB32[] = {$/;"	v
DECODE_TO_SAME	client/glz_decoder.cpp	/^const decode_function DECODE_TO_SAME[] = {$/;"	v
DECORELATE	spice-common/common/quic_rgb_tmpl.c	126;"	d	file:
DECORELATE	spice-common/common/quic_rgb_tmpl.c	138;"	d	file:
DECORELATE	spice-common/common/quic_rgb_tmpl.c	740;"	d	file:
DECORELATE_0	spice-common/common/quic_rgb_tmpl.c	117;"	d	file:
DECORELATE_0	spice-common/common/quic_rgb_tmpl.c	739;"	d	file:
DEFAULTZEROLINEBIAS	spice-common/common/lines.c	151;"	d	file:
DEFAULT_HEIGHT	server/tests/test_display_base.c	53;"	d	file:
DEFAULT_INCLUDES	client/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	server/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	server/tests/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	spice-common/common/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_SCREEN	client/red_window.h	/^        DEFAULT_SCREEN = -1,$/;"	e	enum:RedWindow::__anon108
DEFAULT_WIDTH	server/tests/test_display_base.c	52;"	d	file:
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	client/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	docs/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	docs/manual/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	server/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	server/tests/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	spice-common/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	spice-common/common/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	spice-common/python_modules/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	spice-common/spice-protocol/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	spice-common/spice-protocol/spice/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFevol	spice-common/common/quic.c	49;"	d	file:
DEFmaxclen	spice-common/common/quic.c	58;"	d	file:
DEFwmimax	spice-common/common/quic.c	61;"	d	file:
DEFwminext	spice-common/common/quic.c	64;"	d	file:
DEFwmistart	spice-common/common/quic.c	54;"	d	file:
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	client/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	docs/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	docs/manual/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	server/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	server/tests/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	spice-common/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	spice-common/common/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	spice-common/python_modules/Makefile	/^DEPDIR = .deps$/;"	m
DESTROY_PRIMARY	server/tests/test_display_base.h	/^    DESTROY_PRIMARY,$/;"	e	enum:__anon130
DISABLE_ABBREVIATE	client/cmd_line_parser.cpp	30;"	d	file:
DISCONECTING	client/application.h	/^        DISCONECTING,$/;"	e	enum:Application::State
DISCONNECTED	client/application.h	/^        DISCONNECTED,$/;"	e	enum:Application::State
DISCONNECTED_STATE	client/red_channel.h	/^    DISCONNECTED_STATE,$/;"	e	enum:__anon110
DISCONNECT_ACTION	client/red_channel.h	/^    DISCONNECT_ACTION,$/;"	e	enum:__anon111
DISPATCHER_ACK	server/dispatcher.h	/^    DISPATCHER_ACK,$/;"	e	enum:__anon132
DISPATCHER_ASYNC	server/dispatcher.h	/^    DISPATCHER_ASYNC$/;"	e	enum:__anon132
DISPATCHER_H	server/dispatcher.h	2;"	d
DISPATCHER_NONE	server/dispatcher.h	/^    DISPATCHER_NONE = 0,$/;"	e	enum:__anon132
DISPLAY_CLIENT_MIGRATE_DATA_TIMEOUT	server/red_worker.c	122;"	d	file:
DISPLAY_CLIENT_RETRY_INTERVAL	server/red_worker.c	123;"	d	file:
DISPLAY_CLIENT_SHORT_TIMEOUT	server/red_worker.c	120;"	d	file:
DISPLAY_CLIENT_TIMEOUT	server/red_worker.c	121;"	d	file:
DISPLAY_FREE_LIST_DEFAULT_SIZE	server/red_worker.c	125;"	d	file:
DISTCHECK_CONFIGURE_FLAGS	Makefile	/^DISTCHECK_CONFIGURE_FLAGS = \\$/;"	m
DISTCLEANFILES	spice-common/Makefile	/^DISTCLEANFILES = *.pyc$/;"	m
DISTCLEANFILES	spice-common/python_modules/Makefile	/^DISTCLEANFILES = *.pyc$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	client/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	docs/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	docs/manual/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	server/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	server/tests/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	spice-common/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	spice-common/common/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	spice-common/python_modules/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	spice-common/spice-protocol/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	spice-common/spice-protocol/spice/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.bz2$/;"	m
DIST_ARCHIVES	spice-common/Makefile	/^DIST_ARCHIVES = $(distdir).tar.xz$/;"	m
DIST_ARCHIVES	spice-common/spice-protocol/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = INSTALL NEWS README AUTHORS ChangeLog \\$/;"	m
DIST_COMMON	client/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	docs/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am$/;"	m
DIST_COMMON	docs/manual/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am$/;"	m
DIST_COMMON	server/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	server/tests/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	spice-common/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	spice-common/common/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	spice-common/python_modules/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am$/;"	m
DIST_COMMON	spice-common/spice-protocol/Makefile	/^DIST_COMMON = INSTALL NEWS README AUTHORS ChangeLog \\$/;"	m
DIST_COMMON	spice-common/spice-protocol/spice/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	client/Makefile	/^DIST_SOURCES = $(am__spicec_SOURCES_DIST)$/;"	m
DIST_SOURCES	docs/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	docs/manual/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	server/Makefile	/^DIST_SOURCES = $(am__libspice_server_la_SOURCES_DIST)$/;"	m
DIST_SOURCES	server/tests/Makefile	/^DIST_SOURCES = $(test_display_no_ssl_SOURCES) \\$/;"	m
DIST_SOURCES	spice-common/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	spice-common/common/Makefile	/^DIST_SOURCES = $(libspice_common_client_la_SOURCES) \\$/;"	m
DIST_SOURCES	spice-common/python_modules/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	spice-common/spice-protocol/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	spice-common/spice-protocol/spice/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = spice-common server docs client$/;"	m
DIST_SUBDIRS	docs/Makefile	/^DIST_SUBDIRS = manual$/;"	m
DIST_SUBDIRS	server/Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_SUBDIRS	spice-common/Makefile	/^DIST_SUBDIRS = spice-protocol $(SUBDIRS)$/;"	m
DIST_SUBDIRS	spice-common/spice-protocol/Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-bzip2$/;"	m
DIST_TARGETS	spice-common/Makefile	/^DIST_TARGETS = dist-xz$/;"	m
DIST_TARGETS	spice-common/spice-protocol/Makefile	/^DIST_TARGETS = dist-bzip2 dist-gzip$/;"	m
DJB2_HASH	server/glz_encode_tmpl.c	22;"	d	file:
DJB2_HASH	spice-common/common/lz_compress_tmpl.c	48;"	d	file:
DJB2_START	server/glz_encode_tmpl.c	21;"	d	file:
DJB2_START	spice-common/common/lz_compress_tmpl.c	47;"	d	file:
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	client/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	docs/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	docs/manual/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	server/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	server/tests/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	spice-common/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	spice-common/common/Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	spice-common/python_modules/Makefile	/^DLLTOOL = false$/;"	m
DPRINTF	server/tests/basic_event_loop.c	15;"	d	file:
DRAW	client/display_channel.cpp	1644;"	d	file:
DRAWABLE_FOREACH_DPI_SAFE	server/red_worker.c	1144;"	d	file:
DRAWABLE_FOREACH_GLZ_SAFE	server/red_worker.c	1150;"	d	file:
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	client/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	docs/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	docs/manual/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	server/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	server/tests/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	spice-common/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	spice-common/common/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	spice-common/python_modules/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	client/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	docs/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	docs/manual/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	server/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	server/tests/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	spice-common/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	spice-common/common/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	spice-common/python_modules/Makefile	/^DUMPBIN = $/;"	m
DWORD	client/x11/platform.cpp	67;"	d	file:
DecodedImageWinId	client/glz_decoder_window.h	/^typedef int DecodedImageWinId;$/;"	t
DefaultClipboardListener	client/windows/platform.cpp	/^class DefaultClipboardListener: public Platform::ClipboardListener {$/;"	c	file:
DefaultClipboardListener	client/x11/platform.cpp	/^class DefaultClipboardListener: public Platform::ClipboardListener {$/;"	c	file:
DefaultDisplayModeListener	client/x11/platform.cpp	/^class DefaultDisplayModeListener: public Platform::DisplayModeListener {$/;"	c	file:
DefaultEventListener	client/windows/platform.cpp	/^class DefaultEventListener: public Platform::EventListener {$/;"	c	file:
DefaultEventListener	client/x11/platform.cpp	/^class DefaultEventListener: public Platform::EventListener {$/;"	c	file:
DeleteOGLContext	client/windows/platform_utils.h	/^class DeleteOGLContext {$/;"	c
Delete_DC	client/windows/platform_utils.h	/^class Delete_DC {$/;"	c
Delete_Object	client/windows/platform_utils.h	/^class Delete_Object {$/;"	c
DemarshallingDestination	spice-common/python_modules/demarshal.py	/^class DemarshallingDestination:$/;"	c
DependItem	server/red_worker.c	/^typedef struct DependItem {$/;"	s	file:
DependItem	server/red_worker.c	/^} DependItem;$/;"	t	typeref:struct:DependItem	file:
DestroyAllSurfacesEvent	client/display_channel.cpp	/^    DestroyAllSurfacesEvent(DisplayChannel& channel, bool include_primary = true)$/;"	f	class:DestroyAllSurfacesEvent
DestroyAllSurfacesEvent	client/display_channel.cpp	/^class DestroyAllSurfacesEvent: public SyncEvent {$/;"	c	file:
DestroyPrimarySurfaceEvent	client/display_channel.cpp	/^    DestroyPrimarySurfaceEvent(DisplayChannel& channel)$/;"	f	class:DestroyPrimarySurfaceEvent
DestroyPrimarySurfaceEvent	client/display_channel.cpp	/^class DestroyPrimarySurfaceEvent: public SyncEvent {$/;"	c	file:
DestroySurfaceEvent	client/display_channel.cpp	/^    DestroySurfaceEvent(DisplayChannel& channel, int surface_id)$/;"	f	class:DestroySurfaceEvent
DestroySurfaceEvent	client/display_channel.cpp	/^class DestroySurfaceEvent: public SyncEvent {$/;"	c	file:
DetachChannelsEvent	client/display_channel.cpp	/^    DetachChannelsEvent(DisplayChannel& channel) : Event(), _channel (channel) {}$/;"	f	class:DetachChannelsEvent
DetachChannelsEvent	client/display_channel.cpp	/^class DetachChannelsEvent : public Event {$/;"	c	file:
DetachFunc	client/inputs_channel.cpp	/^    class DetachFunc: public ForEachChannelFunc {$/;"	c	class:RemoveInputsHandlerEvent	file:
DetachLayerEvent	client/screen_layer.cpp	/^    DetachLayerEvent(ScreenLayer& _layer) : _layer (_layer) {}$/;"	f	class:DetachLayerEvent
DetachLayerEvent	client/screen_layer.cpp	/^class DetachLayerEvent: public SyncEvent {$/;"	c	file:
DetatchChannels	client/display_channel.cpp	/^        DetatchChannels(DisplayChannel& channel)$/;"	f	class:DetachChannelsEvent::DetatchChannels
DetatchChannels	client/display_channel.cpp	/^    class DetatchChannels: public ForEachChannelFunc {$/;"	c	class:DetachChannelsEvent	file:
Dialog	client/gui/gui.cpp	/^    Dialog(GUI& gui, bool close_on_message_click = false)$/;"	f	class:GUI::Dialog
Dialog	client/gui/gui.cpp	/^class GUI::Dialog {$/;"	c	class:GUI	file:
DisconnectedEvent	client/application.h	/^    DisconnectedEvent() : _error_code (SPICEC_ERROR_CODE_SUCCESS) {}$/;"	f	class:DisconnectedEvent
DisconnectedEvent	client/application.h	/^    DisconnectedEvent(int error_code) : _error_code (error_code) {}$/;"	f	class:DisconnectedEvent
DisconnectedEvent	client/application.h	/^class DisconnectedEvent: public Event {$/;"	c
DisconnectedException	client/red_peer.h	/^    class DisconnectedException {};$/;"	c	class:RedPeer
Dispatcher	server/dispatcher.h	/^struct Dispatcher {$/;"	s
Dispatcher	server/dispatcher.h	/^typedef struct Dispatcher Dispatcher;$/;"	t	typeref:struct:Dispatcher
DispatcherMessage	server/dispatcher.h	/^typedef struct DispatcherMessage {$/;"	s
DispatcherMessage	server/dispatcher.h	/^} DispatcherMessage;$/;"	t	typeref:struct:DispatcherMessage
DisplayChannel	client/display_channel.cpp	/^DisplayChannel::DisplayChannel(RedClient& client, uint32_t id,$/;"	f	class:DisplayChannel
DisplayChannel	client/display_channel.h	/^class DisplayChannel: public RedChannel, public ScreenLayer {$/;"	c
DisplayChannel	server/red_worker.c	/^struct DisplayChannel {$/;"	s	file:
DisplayChannel	server/red_worker.c	/^typedef struct DisplayChannel DisplayChannel;$/;"	t	typeref:struct:DisplayChannel	file:
DisplayChannelClient	server/red_worker.c	/^struct DisplayChannelClient {$/;"	s	file:
DisplayChannelClient	server/red_worker.c	/^typedef struct DisplayChannelClient DisplayChannelClient;$/;"	t	typeref:struct:DisplayChannelClient	file:
DisplayFactory	client/display_channel.cpp	/^    DisplayFactory() : ChannelFactory(SPICE_CHANNEL_DISPLAY) {}$/;"	f	class:DisplayFactory
DisplayFactory	client/display_channel.cpp	/^class DisplayFactory: public ChannelFactory {$/;"	c	file:
DisplayHandler	client/display_channel.cpp	/^    DisplayHandler(DisplayChannel& channel)$/;"	f	class:DisplayHandler
DisplayHandler	client/display_channel.cpp	/^class DisplayHandler: public MessageHandlerImp<DisplayChannel, SPICE_CHANNEL_DISPLAY> {$/;"	c	file:
DisplayModeListener	client/platform.h	/^class Platform::DisplayModeListener {$/;"	c	class:Platform
DisplaySetting	client/red_client.h	/^    DisplaySetting() : _disable_wallpaper (false)$/;"	f	class:DisplaySetting
DisplaySetting	client/red_client.h	/^class DisplaySetting {$/;"	c
DrawContext	server/red_worker.c	/^typedef struct DrawContext {$/;"	s	file:
DrawContext	server/red_worker.c	/^} DrawContext;$/;"	t	typeref:struct:DrawContext	file:
DrawItem	server/red_worker.c	/^typedef struct DrawItem {$/;"	s	file:
DrawItem	server/red_worker.c	/^} DrawItem;$/;"	t	typeref:struct:DrawItem	file:
Drawable	server/red_worker.c	/^struct Drawable {$/;"	s	file:
Drawable	server/red_worker.c	/^typedef struct Drawable Drawable;$/;"	t	typeref:struct:Drawable	file:
DrawablePipeItem	server/red_worker.c	/^typedef struct DrawablePipeItem {$/;"	s	file:
DrawablePipeItem	server/red_worker.c	/^} DrawablePipeItem;$/;"	t	typeref:struct:DrawablePipeItem	file:
DynamicScreen	client/x11/platform.cpp	/^DynamicScreen::DynamicScreen(Display* display, int screen, int& next_mon_id)$/;"	f	class:DynamicScreen
DynamicScreen	client/x11/platform.cpp	/^class DynamicScreen: public XScreen, public Monitor {$/;"	c	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	client/Makefile	/^ECHO_C = $/;"	m
ECHO_C	docs/Makefile	/^ECHO_C = $/;"	m
ECHO_C	docs/manual/Makefile	/^ECHO_C = $/;"	m
ECHO_C	server/Makefile	/^ECHO_C = $/;"	m
ECHO_C	server/tests/Makefile	/^ECHO_C = $/;"	m
ECHO_C	spice-common/Makefile	/^ECHO_C = $/;"	m
ECHO_C	spice-common/common/Makefile	/^ECHO_C = $/;"	m
ECHO_C	spice-common/python_modules/Makefile	/^ECHO_C = $/;"	m
ECHO_C	spice-common/spice-protocol/Makefile	/^ECHO_C = $/;"	m
ECHO_C	spice-common/spice-protocol/spice/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	client/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	docs/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	docs/manual/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	server/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	server/tests/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	spice-common/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	spice-common/common/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	spice-common/python_modules/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	spice-common/spice-protocol/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	spice-common/spice-protocol/spice/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	client/Makefile	/^ECHO_T = $/;"	m
ECHO_T	docs/Makefile	/^ECHO_T = $/;"	m
ECHO_T	docs/manual/Makefile	/^ECHO_T = $/;"	m
ECHO_T	server/Makefile	/^ECHO_T = $/;"	m
ECHO_T	server/tests/Makefile	/^ECHO_T = $/;"	m
ECHO_T	spice-common/Makefile	/^ECHO_T = $/;"	m
ECHO_T	spice-common/common/Makefile	/^ECHO_T = $/;"	m
ECHO_T	spice-common/python_modules/Makefile	/^ECHO_T = $/;"	m
ECHO_T	spice-common/spice-protocol/Makefile	/^ECHO_T = $/;"	m
ECHO_T	spice-common/spice-protocol/spice/Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	client/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	docs/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	docs/manual/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	server/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	server/tests/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	spice-common/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	spice-common/common/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	spice-common/python_modules/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ENCODE_PIXEL	server/glz_encode_tmpl.c	100;"	d	file:
ENCODE_PIXEL	server/glz_encode_tmpl.c	36;"	d	file:
ENCODE_PIXEL	server/glz_encode_tmpl.c	54;"	d	file:
ENCODE_PIXEL	server/glz_encode_tmpl.c	561;"	d	file:
ENCODE_PIXEL	server/glz_encode_tmpl.c	74;"	d	file:
ENCODE_PIXEL	server/glz_encode_tmpl.c	92;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	111;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	128;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	134;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	529;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	62;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	77;"	d	file:
ENCODE_PIXEL	spice-common/common/lz_compress_tmpl.c	93;"	d	file:
EQN1	spice-common/common/lines.c	1198;"	d	file:
EQN1B	spice-common/common/lines.c	1199;"	d	file:
EQN2	spice-common/common/lines.c	1200;"	d	file:
EQN2B	spice-common/common/lines.c	1201;"	d	file:
EQN3	spice-common/common/lines.c	1203;"	d	file:
EQN3B	spice-common/common/lines.c	1204;"	d	file:
EQN4	spice-common/common/lines.c	1205;"	d	file:
EQN4B	spice-common/common/lines.c	1206;"	d	file:
EQN5	spice-common/common/lines.c	1208;"	d	file:
EQN5B	spice-common/common/lines.c	1209;"	d	file:
EQN6	spice-common/common/lines.c	1210;"	d	file:
EQN6B	spice-common/common/lines.c	1211;"	d	file:
EQN7	spice-common/common/lines.c	1213;"	d	file:
EQN7B	spice-common/common/lines.c	1214;"	d	file:
EQN8	spice-common/common/lines.c	1215;"	d	file:
EQN8B	spice-common/common/lines.c	1216;"	d	file:
ERROR_MSG	client/gui/gui.h	/^        ERROR_MSG$/;"	e	enum:GUI::MessageType
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGS	client/Makefile	/^ETAGS = etags$/;"	m
ETAGS	docs/Makefile	/^ETAGS = etags$/;"	m
ETAGS	server/Makefile	/^ETAGS = etags$/;"	m
ETAGS	server/tests/Makefile	/^ETAGS = etags$/;"	m
ETAGS	spice-common/Makefile	/^ETAGS = etags$/;"	m
ETAGS	spice-common/common/Makefile	/^ETAGS = etags$/;"	m
ETAGS	spice-common/spice-protocol/Makefile	/^ETAGS = etags$/;"	m
ETAGS	spice-common/spice-protocol/spice/Makefile	/^ETAGS = etags$/;"	m
EVDEV_KEYCODE_0	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_0,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_1	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_1,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_2	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_2,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_3	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_3,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_4	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_4,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_5	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_5,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_6	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_6,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_7	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_7,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_8	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_8,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_9	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_9,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_A	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_A,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_APOSTROPH	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_APOSTROPH,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_B	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_B,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_BACKQUAT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_BACKQUAT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_BACKSLASH	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_BACKSLASH,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_BACK_SPACE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_BACK_SPACE,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_C	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_C,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_CAPS_LOCK	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_CAPS_LOCK,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_COMMA	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_COMMA,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_D	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_D,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_DELETE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_DELETE,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_DOWN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_DOWN,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_E	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_E,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_END	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_END,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_EQUAL	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_EQUAL,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_ESCAPE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_ESCAPE = 9,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_EUROPEAN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_EUROPEAN = 94,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F1	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F1,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F10	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F10,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F11	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F11,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F12	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F12,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F2	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F2,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F3	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F3,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F4	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F4,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F5	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F5,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F6	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F6,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F7	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F7,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F8	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F8,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_F9	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_F9,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_G	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_G,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_H	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_H,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_HANGUL	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_HANGUL = 130,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_HANGUL_HANJA	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_HANGUL_HANJA,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_HOME	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_HOME = 110,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_I	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_I,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_INSERT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_INSERT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_J	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_J,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_JAPANESE_BACKSLASH	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_JAPANESE_BACKSLASH,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_JAPANESE_HENKAN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_JAPANESE_HENKAN = 100,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_JAPANESE_HIRAGANA_KATAKANA	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_JAPANESE_HIRAGANA_KATAKANA,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_JAPANESE_MUHENKAN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_JAPANESE_MUHENKAN,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_K	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_K,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_LEFT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_LEFT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L_ALT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L_ALT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L_BRACKET	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L_BRACKET,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L_COMMAND	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L_COMMAND,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L_CONTROL	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L_CONTROL,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_L_SHIFT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_L_SHIFT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_M	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_M,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_MENU	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_MENU,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_MINUS	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_MINUS,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_MUTE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_MUTE = 121,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_N	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_N,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_NUM_LOCK	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_NUM_LOCK,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_O	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_O,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_P	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_P,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_0	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_0,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_1	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_1,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_2	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_2,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_3	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_3,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_4	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_4,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_5	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_5,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_6	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_6,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_7	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_7,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_8	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_8,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_9	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_9,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_ADD	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_ADD,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_DEL	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_DEL,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_DEVIDE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_DEVIDE,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_ENTER	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_ENTER = 104,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_MULTIPLY	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_MULTIPLY,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAD_SUBTRACT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAD_SUBTRACT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAGE_DOWN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAGE_DOWN,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAGE_UP	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAGE_UP,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PAUSE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PAUSE = 127,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PERIOD	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PERIOD,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_PRINT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_PRINT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_Q	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_Q,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_RETURN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_RETURN,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_RIGHT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_RIGHT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R_ALT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R_ALT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R_BRACKET	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R_BRACKET,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R_COMMAND	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R_COMMAND,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R_CONTROL	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R_CONTROL,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_R_SHIFT	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_R_SHIFT,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_S	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_S,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_SCROLL_LOCK	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_SCROLL_LOCK,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_SEMICOLON	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_SEMICOLON,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_SLASH	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_SLASH,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_SPACE	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_SPACE,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_T	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_T,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_TAB	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_TAB,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_U	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_U,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_UP	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_UP,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_V	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_V,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_VOLUME_DOWN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_VOLUME_DOWN = 122,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_VOLUME_UP	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_VOLUME_UP = 123,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_W	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_W,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_X	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_X,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_Y	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_Y,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_YEN	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_YEN,$/;"	e	enum:EvdevKeyCode	file:
EVDEV_KEYCODE_Z	client/x11/red_window.cpp	/^    EVDEV_KEYCODE_Z,$/;"	e	enum:EvdevKeyCode	file:
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	client/Makefile	/^EXEEXT = $/;"	m
EXEEXT	docs/Makefile	/^EXEEXT = $/;"	m
EXEEXT	docs/manual/Makefile	/^EXEEXT = $/;"	m
EXEEXT	server/Makefile	/^EXEEXT = $/;"	m
EXEEXT	server/tests/Makefile	/^EXEEXT = $/;"	m
EXEEXT	spice-common/Makefile	/^EXEEXT = $/;"	m
EXEEXT	spice-common/common/Makefile	/^EXEEXT = $/;"	m
EXEEXT	spice-common/python_modules/Makefile	/^EXEEXT = $/;"	m
EXPECT_CONT	spice-common/common/region.c	/^    EXPECT_CONT,$/;"	e	enum:__anon25	file:
EXPECT_EQUAL	spice-common/common/region.c	/^    EXPECT_EQUAL,$/;"	e	enum:__anon25	file:
EXPECT_R1_EMPTY	spice-common/common/region.c	/^    EXPECT_R1_EMPTY,$/;"	e	enum:__anon25	file:
EXPECT_R2_EMPTY	spice-common/common/region.c	/^    EXPECT_R2_EMPTY,$/;"	e	enum:__anon25	file:
EXPECT_SECT	spice-common/common/region.c	/^    EXPECT_SECT,$/;"	e	enum:__anon25	file:
EXTENTCHECK	spice-common/common/region.c	32;"	d	file:
EXTRA	spice-common/common/lines.c	511;"	d	file:
EXTRACT	spice-common/common/canvas_base.c	3324;"	d	file:
EXTRA_DIST	Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	client/Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	docs/manual/Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	server/Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	spice-common/Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	spice-common/common/Makefile	/^EXTRA_DIST = \\$/;"	m
EXTRA_DIST	spice-common/python_modules/Makefile	/^EXTRA_DIST = $(PYTHON_MODULES)$/;"	m
EmptyBase	client/utils.h	/^class EmptyBase {$/;"	c
EmptyMsgPipeItem	server/red_channel.c	/^typedef struct EmptyMsgPipeItem {$/;"	s	file:
EmptyMsgPipeItem	server/red_channel.c	/^} EmptyMsgPipeItem;$/;"	t	typeref:struct:EmptyMsgPipeItem	file:
Encoder	server/glz_encoder.c	/^typedef struct Encoder {$/;"	s	file:
Encoder	server/glz_encoder.c	/^} Encoder;$/;"	t	typeref:struct:Encoder	file:
Encoder	spice-common/common/lz.c	/^typedef struct Encoder {$/;"	s	file:
Encoder	spice-common/common/lz.c	/^} Encoder;$/;"	t	typeref:struct:Encoder	file:
Encoder	spice-common/common/quic.c	/^struct Encoder {$/;"	s	file:
Encoder	spice-common/common/quic.c	/^typedef struct Encoder Encoder;$/;"	t	typeref:struct:Encoder	file:
EncoderData	server/red_worker.c	/^} EncoderData;$/;"	t	typeref:struct:__anon177	file:
EnumBaseType	spice-common/python_modules/ptypes.py	/^class EnumBaseType(Type):$/;"	c
EnumType	spice-common/python_modules/ptypes.py	/^class EnumType(EnumBaseType):$/;"	c
ErrorItem	server/smartcard.c	/^typedef struct ErrorItem {$/;"	s	file:
ErrorItem	server/smartcard.c	/^} ErrorItem;$/;"	t	typeref:struct:ErrorItem	file:
EvdevKeyCode	client/x11/red_window.cpp	/^enum EvdevKeyCode {$/;"	g	file:
Event	client/process_loop.h	/^    Event() : _process_loop (NULL) {}$/;"	f	class:Event
Event	client/process_loop.h	/^class Event: public EventBase {$/;"	c
EventBase	client/process_loop.h	/^    EventBase() : _refs (1) {}$/;"	f	class:EventBase
EventBase	client/process_loop.h	/^class EventBase {$/;"	c
EventHandler	client/client_net_socket.h	/^    EventHandler() {}$/;"	f	class:ClientNetSocket::EventHandler
EventHandler	client/client_net_socket.h	/^class ClientNetSocket::EventHandler {$/;"	c	class:ClientNetSocket
EventListener	client/platform.h	/^class Platform::EventListener {$/;"	c	class:Platform
EventSource	client/event_sources.h	/^class EventSource {$/;"	c
EventSources	client/event_sources.h	/^class EventSources: public EventSources_p {$/;"	c
EventSources	client/windows/event_sources_p.cpp	/^EventSources::EventSources()$/;"	f	class:EventSources
EventSources	client/x11/event_sources_p.cpp	/^EventSources::EventSources()$/;"	f	class:EventSources
EventSources_p	client/x11/event_sources_p.h	/^class EventSources_p {$/;"	c
EventTrigger	client/x11/record.cpp	/^WaveRecorder::EventTrigger::EventTrigger(WaveRecorder& recorder, int fd)$/;"	f	class:WaveRecorder::EventTrigger
EventTrigger	client/x11/record.cpp	/^class WaveRecorder::EventTrigger: public EventSources::File {$/;"	c	class:WaveRecorder	file:
EventsQueue	client/process_loop.cpp	/^EventsQueue::EventsQueue(AbstractProcessLoop& owner)$/;"	f	class:EventsQueue
EventsQueue	client/process_loop.h	/^class EventsQueue {$/;"	c
Exception	client/utils.h	/^    Exception(const std::string& str) : _mess (str) { _erro_code = SPICEC_ERROR_CODE_ERROR;}$/;"	f	class:Exception
Exception	client/utils.h	/^    Exception(const std::string& str, int error_code) : _mess (str), _erro_code (error_code) {}$/;"	f	class:Exception
Exception	client/utils.h	/^class Exception: public std::exception {$/;"	c
ExchangeSpans	spice-common/common/lines.c	3395;"	d	file:
ExchangeSpans	spice-common/common/lines.c	3396;"	d	file:
ExchangeSpans	spice-common/common/lines.c	594;"	d	file:
FAIL_ON_BAD_WINDOW	client/x11/red_window.cpp	1903;"	d	file:
FALSE	spice-common/spice-protocol/spice/macros.h	105;"	d
FAR	client/jpeg_decoder.h	28;"	d
FAR	client/mjpeg_decoder.h	27;"	d
FAR_PIX_IMAGE_DIST_LEVEL_1	server/glz_encode_match_tmpl.c	24;"	d	file:
FAR_PIX_IMAGE_DIST_LEVEL_2	server/glz_encode_match_tmpl.c	25;"	d	file:
FAR_PIX_IMAGE_DIST_LEVEL_3	server/glz_encode_match_tmpl.c	26;"	d	file:
FFMPEG_CFLAGS	server/Makefile	/^FFMPEG_CFLAGS = -I\/home\/lichenxiang\/opt\/include$/;"	m
FFMPEG_LIBS	server/Makefile	/^FFMPEG_LIBS = -L\/home\/lichenxiang\/opt\/lib -lavutil -lavformat -lavcodec -lswscale -lx264 -lswresample$/;"	m
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	client/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	docs/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	docs/manual/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	server/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	server/tests/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	spice-common/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	spice-common/common/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	spice-common/python_modules/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FILL_BITS_TYPE_BITMAP	server/red_worker.c	/^    FILL_BITS_TYPE_BITMAP,$/;"	e	enum:__anon193	file:
FILL_BITS_TYPE_CACHE	server/red_worker.c	/^    FILL_BITS_TYPE_CACHE,$/;"	e	enum:__anon193	file:
FILL_BITS_TYPE_COMPRESS_LOSSLESS	server/red_worker.c	/^    FILL_BITS_TYPE_COMPRESS_LOSSLESS,$/;"	e	enum:__anon193	file:
FILL_BITS_TYPE_COMPRESS_LOSSY	server/red_worker.c	/^    FILL_BITS_TYPE_COMPRESS_LOSSY,$/;"	e	enum:__anon193	file:
FILL_BITS_TYPE_INVALID	server/red_worker.c	/^    FILL_BITS_TYPE_INVALID,$/;"	e	enum:__anon193	file:
FILL_BITS_TYPE_SURFACE	server/red_worker.c	/^    FILL_BITS_TYPE_SURFACE,$/;"	e	enum:__anon193	file:
FILL_LINES	server/jpeg_encoder.c	166;"	d	file:
FILL_LINES	spice-common/common/quic.c	1219;"	d	file:
FIND_BAND	spice-common/common/region.c	68;"	d	file:
FIXUP_ERROR	spice-common/common/lines.c	234;"	d	file:
FNAME	client/glz_decode_tmpl.c	103;"	d	file:
FNAME	client/glz_decode_tmpl.c	127;"	d	file:
FNAME	client/glz_decode_tmpl.c	131;"	d	file:
FNAME	client/glz_decode_tmpl.c	145;"	d	file:
FNAME	client/glz_decode_tmpl.c	156;"	d	file:
FNAME	client/glz_decode_tmpl.c	168;"	d	file:
FNAME	client/glz_decode_tmpl.c	332;"	d	file:
FNAME	client/glz_decode_tmpl.c	47;"	d	file:
FNAME	client/glz_decode_tmpl.c	54;"	d	file:
FNAME	client/glz_decode_tmpl.c	61;"	d	file:
FNAME	client/glz_decode_tmpl.c	73;"	d	file:
FNAME	client/glz_decode_tmpl.c	85;"	d	file:
FNAME	server/glz_encode_tmpl.c	35;"	d	file:
FNAME	server/glz_encode_tmpl.c	53;"	d	file:
FNAME	server/glz_encode_tmpl.c	557;"	d	file:
FNAME	server/glz_encode_tmpl.c	70;"	d	file:
FNAME	server/glz_encode_tmpl.c	91;"	d	file:
FNAME	server/glz_encode_tmpl.c	99;"	d	file:
FNAME	server/red_bitmap_utils.h	150;"	d
FNAME	server/red_bitmap_utils.h	20;"	d
FNAME	server/red_bitmap_utils.h	34;"	d
FNAME	server/red_bitmap_utils.h	39;"	d
FNAME	spice-common/common/lz_compress_tmpl.c	107;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	127;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	133;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	526;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	61;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	76;"	d	file:
FNAME	spice-common/common/lz_compress_tmpl.c	92;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	105;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	117;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	135;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	159;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	163;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	175;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	179;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	195;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	201;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	213;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	338;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	76;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	87;"	d	file:
FNAME	spice-common/common/lz_decompress_tmpl.c	93;"	d	file:
FNAME	spice-common/common/quic_family_tmpl.c	111;"	d	file:
FNAME	spice-common/common/quic_family_tmpl.c	24;"	d	file:
FNAME	spice-common/common/quic_family_tmpl.c	32;"	d	file:
FNAME	spice-common/common/quic_rgb_tmpl.c	25;"	d	file:
FNAME	spice-common/common/quic_rgb_tmpl.c	46;"	d	file:
FNAME	spice-common/common/quic_rgb_tmpl.c	67;"	d	file:
FNAME	spice-common/common/quic_rgb_tmpl.c	730;"	d	file:
FNAME	spice-common/common/quic_rgb_tmpl.c	88;"	d	file:
FNAME	spice-common/common/quic_tmpl.c	24;"	d	file:
FNAME	spice-common/common/quic_tmpl.c	30;"	d	file:
FNAME	spice-common/common/quic_tmpl.c	36;"	d	file:
FNAME	spice-common/common/quic_tmpl.c	622;"	d	file:
FOREIGN_MENU_ADD_ITEM	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_ADD_ITEM,$/;"	e	enum:__anon101
FOREIGN_MENU_APP_ACTIVATED	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_APP_ACTIVATED,$/;"	e	enum:__anon101
FOREIGN_MENU_APP_DEACTIVATED	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_APP_DEACTIVATED,$/;"	e	enum:__anon101
FOREIGN_MENU_BUF_SIZE	client/foreign_menu.h	66;"	d
FOREIGN_MENU_CLEAR	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_CLEAR,$/;"	e	enum:__anon101
FOREIGN_MENU_EVENT_CHECKED	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_EVENT_CHECKED,$/;"	e	enum:__anon103
FOREIGN_MENU_EVENT_CLICK	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_EVENT_CLICK,$/;"	e	enum:__anon103
FOREIGN_MENU_EVENT_UNCHECKED	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_EVENT_UNCHECKED$/;"	e	enum:__anon103
FOREIGN_MENU_INVALID_ID	spice-common/spice-protocol/spice/foreign_menu_prot.h	69;"	d
FOREIGN_MENU_ITEM_EVENT	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_ITEM_EVENT = 1001,$/;"	e	enum:__anon101
FOREIGN_MENU_ITEM_TYPE_CHECKED	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_ITEM_TYPE_CHECKED      = 1 << 0,$/;"	e	enum:__anon102
FOREIGN_MENU_ITEM_TYPE_DIM	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_ITEM_TYPE_DIM          = 1 << 1,$/;"	e	enum:__anon102
FOREIGN_MENU_ITEM_TYPE_SEPARATOR	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_ITEM_TYPE_SEPARATOR    = 1 << 2$/;"	e	enum:__anon102
FOREIGN_MENU_MAGIC	spice-common/spice-protocol/spice/foreign_menu_prot.h	24;"	d
FOREIGN_MENU_MODIFY_ITEM	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_MODIFY_ITEM,$/;"	e	enum:__anon101
FOREIGN_MENU_REMOVE_ITEM	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_REMOVE_ITEM,$/;"	e	enum:__anon101
FOREIGN_MENU_SET_TITLE	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FOREIGN_MENU_SET_TITLE = 1,$/;"	e	enum:__anon101
FOREIGN_MENU_VERSION	spice-common/spice-protocol/spice/foreign_menu_prot.h	25;"	d
FOUR_BYTE	spice-common/common/quic.c	819;"	d	file:
FOUR_BYTE	spice-common/common/quic_tmpl.c	35;"	d	file:
FPS_TEST_INTERVAL	server/red_worker.c	142;"	d	file:
FUNC_NAME	server/red_client_cache.h	135;"	d
FUNC_NAME	server/red_client_cache.h	24;"	d
FUNC_NAME	server/red_client_cache.h	35;"	d
FUNC_NAME	server/red_client_shared_cache.h	232;"	d
FUNC_NAME	server/red_client_shared_cache.h	26;"	d
Factory	client/cursor_channel.cpp	/^ChannelFactory& CursorChannel::Factory()$/;"	f	class:CursorChannel
Factory	client/display_channel.cpp	/^ChannelFactory& DisplayChannel::Factory()$/;"	f	class:DisplayChannel
Factory	client/inputs_channel.cpp	/^ChannelFactory& InputsChannel::Factory()$/;"	f	class:InputsChannel
Factory	client/playback_channel.cpp	/^ChannelFactory& PlaybackChannel::Factory()$/;"	f	class:PlaybackChannel
Factory	client/record_channel.cpp	/^ChannelFactory& RecordChannel::Factory()$/;"	f	class:RecordChannel
Factory	client/smartcard_channel.cpp	/^ChannelFactory& SmartCardChannel::Factory()$/;"	f	class:SmartCardChannel
Factorys	client/red_client.h	/^    typedef std::list<ChannelFactory*> Factorys;$/;"	t	class:RedClient
FamilyStat	spice-common/common/quic.c	/^typedef struct FamilyStat {$/;"	s	file:
FamilyStat	spice-common/common/quic.c	/^} FamilyStat;$/;"	t	typeref:struct:FamilyStat	file:
File	client/event_sources.h	/^class EventSources::File: public EventSource {$/;"	c	class:EventSources
FillBitsType	server/red_worker.c	/^} FillBitsType;$/;"	t	typeref:enum:__anon193	file:
FillMaskInfo	spice-common/common/glc.c	/^typedef struct FillMaskInfo {$/;"	s	file:
FillMaskInfo	spice-common/common/glc.c	/^} FillMaskInfo;$/;"	t	typeref:struct:FillMaskInfo	file:
FillRects	spice-common/common/lines.h	/^    void (*FillRects)(lineGC * pGC,$/;"	m	struct:__anon20
FillSpans	spice-common/common/lines.h	/^    void (*FillSpans)(lineGC * pGC,$/;"	m	struct:__anon20
FixedSize	spice-common/python_modules/ptypes.py	/^class FixedSize:$/;"	c
FlagsType	spice-common/python_modules/ptypes.py	/^class FlagsType(EnumBaseType):$/;"	c
ForEachChannelFunc	client/red_client.h	/^class ForEachChannelFunc {$/;"	c
ForeignMenu	client/foreign_menu.cpp	/^ForeignMenu::ForeignMenu(ForeignMenuInterface *handler, bool active)$/;"	f	class:ForeignMenu
ForeignMenu	client/foreign_menu.h	/^class ForeignMenu : public NamedPipe::ListenerInterface {$/;"	c
ForeignMenuConnection	client/foreign_menu.cpp	/^ForeignMenuConnection::ForeignMenuConnection(ForeignMenuInterface *handler, ForeignMenu& parent)$/;"	f	class:ForeignMenuConnection
ForeignMenuConnection	client/foreign_menu.h	/^class ForeignMenuConnection : public NamedPipe::ConnectionInterface {$/;"	c
ForeignMenuInterface	client/foreign_menu.h	/^class ForeignMenuInterface : public CommandTarget {$/;"	c
Format	client/red_drawable.h	/^    enum Format {$/;"	g	class:RedDrawable
FormatInfo	client/playback_channel.cpp	/^typedef struct __attribute__ ((__packed__)) FormatInfo {$/;"	s	file:
FormatInfo	client/playback_channel.cpp	/^} FormatInfo;$/;"	t	typeref:struct:FormatInfo	file:
Forward	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
FreeCrtcInfo	client/x11/platform.cpp	/^class FreeCrtcInfo {$/;"	c	file:
FreeList	server/red_worker.c	/^typedef struct FreeList {$/;"	s	file:
FreeList	server/red_worker.c	/^} FreeList;$/;"	t	typeref:struct:FreeList	file:
FreeObject	client/utils.h	/^class FreeObject {$/;"	c
FreeOutputInfo	client/x11/platform.cpp	/^class FreeOutputInfo {$/;"	c	file:
FreeScreenResources	client/x11/platform.cpp	/^class FreeScreenResources {$/;"	c	file:
FrgMenuActivate	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct FrgMenuMsg FrgMenuActivate;$/;"	t	typeref:struct:FrgMenuMsg
FrgMenuAddItem	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuAddItem {$/;"	s
FrgMenuAddItem	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuAddItem, FrgMenuModItem;$/;"	t	typeref:struct:FrgMenuAddItem
FrgMenuDeactivate	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct FrgMenuMsg FrgMenuDeactivate;$/;"	t	typeref:struct:FrgMenuMsg
FrgMenuDelete	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct FrgMenuMsg FrgMenuDelete;$/;"	t	typeref:struct:FrgMenuMsg
FrgMenuEvent	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuEvent {$/;"	s
FrgMenuEvent	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuEvent;$/;"	t	typeref:struct:FrgMenuEvent
FrgMenuInit	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuInit {$/;"	s
FrgMenuInit	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuInit;$/;"	t	typeref:struct:FrgMenuInit
FrgMenuInitHeader	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuInitHeader {$/;"	s
FrgMenuInitHeader	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuInitHeader;$/;"	t	typeref:struct:FrgMenuInitHeader
FrgMenuModItem	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuAddItem, FrgMenuModItem;$/;"	t	typeref:struct:FrgMenuAddItem
FrgMenuMsg	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuMsg {$/;"	s
FrgMenuMsg	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuMsg;$/;"	t	typeref:struct:FrgMenuMsg
FrgMenuRmItem	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuRmItem {$/;"	s
FrgMenuRmItem	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuRmItem;$/;"	t	typeref:struct:FrgMenuRmItem
FrgMenuRmItems	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct FrgMenuMsg FrgMenuRmItems;$/;"	t	typeref:struct:FrgMenuMsg
FrgMenuSetTitle	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^typedef struct SPICE_ATTR_PACKED FrgMenuSetTitle {$/;"	s
FrgMenuSetTitle	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^} FrgMenuSetTitle;$/;"	t	typeref:struct:FrgMenuSetTitle
GCPtr	spice-common/common/lines.c	/^typedef struct lineGC *GCPtr;$/;"	t	typeref:struct:lineGC	file:
GCanvas	client/red_gl_canvas.cpp	/^GCanvas::GCanvas(int width, int height, uint32_t format, RedWindow *win,$/;"	f	class:GCanvas
GCanvas	client/red_gl_canvas.h	/^class GCanvas: public Canvas {$/;"	c
GDICanvas	client/red_gdi_canvas.cpp	/^GDICanvas::GDICanvas(int width, int height, uint32_t format,$/;"	f	class:GDICanvas
GDICanvas	client/red_gdi_canvas.h	/^class GDICanvas: public Canvas {$/;"	c
GDI_CANVAS	spice-common/common/gdi_canvas.c	28;"	d	file:
GET_CODE	server/glz_encode_tmpl.c	567;"	d	file:
GET_CODE	spice-common/common/lz_compress_tmpl.c	538;"	d	file:
GET_FORMAT_BITS	server/h264_type.h	36;"	d
GET_FORMAT_BYTES	server/h264_type.h	60;"	d
GET_POSITION_RETRIES	client/x11/red_window.cpp	56;"	d	file:
GET_VIS_REGION_RETRIES	client/x11/red_window.cpp	57;"	d	file:
GET_b	server/glz_encode_tmpl.c	109;"	d	file:
GET_b	server/glz_encode_tmpl.c	566;"	d	file:
GET_b	server/glz_encode_tmpl.c	73;"	d	file:
GET_b	server/red_bitmap_utils.h	154;"	d
GET_b	server/red_bitmap_utils.h	23;"	d
GET_b	server/red_bitmap_utils.h	29;"	d
GET_b	spice-common/common/lz_compress_tmpl.c	110;"	d	file:
GET_b	spice-common/common/lz_compress_tmpl.c	141;"	d	file:
GET_b	spice-common/common/lz_compress_tmpl.c	537;"	d	file:
GET_b	spice-common/common/quic_rgb_tmpl.c	102;"	d	file:
GET_b	spice-common/common/quic_rgb_tmpl.c	39;"	d	file:
GET_b	spice-common/common/quic_rgb_tmpl.c	60;"	d	file:
GET_b	spice-common/common/quic_rgb_tmpl.c	764;"	d	file:
GET_b	spice-common/common/quic_rgb_tmpl.c	81;"	d	file:
GET_g	server/glz_encode_tmpl.c	108;"	d	file:
GET_g	server/glz_encode_tmpl.c	565;"	d	file:
GET_g	server/glz_encode_tmpl.c	72;"	d	file:
GET_g	server/red_bitmap_utils.h	153;"	d
GET_g	server/red_bitmap_utils.h	22;"	d
GET_g	server/red_bitmap_utils.h	28;"	d
GET_g	spice-common/common/lz_compress_tmpl.c	109;"	d	file:
GET_g	spice-common/common/lz_compress_tmpl.c	140;"	d	file:
GET_g	spice-common/common/lz_compress_tmpl.c	536;"	d	file:
GET_g	spice-common/common/quic_rgb_tmpl.c	100;"	d	file:
GET_g	spice-common/common/quic_rgb_tmpl.c	37;"	d	file:
GET_g	spice-common/common/quic_rgb_tmpl.c	58;"	d	file:
GET_g	spice-common/common/quic_rgb_tmpl.c	762;"	d	file:
GET_g	spice-common/common/quic_rgb_tmpl.c	79;"	d	file:
GET_r	server/glz_encode_tmpl.c	107;"	d	file:
GET_r	server/glz_encode_tmpl.c	564;"	d	file:
GET_r	server/glz_encode_tmpl.c	71;"	d	file:
GET_r	server/red_bitmap_utils.h	152;"	d
GET_r	server/red_bitmap_utils.h	21;"	d
GET_r	server/red_bitmap_utils.h	27;"	d
GET_r	spice-common/common/lz_compress_tmpl.c	108;"	d	file:
GET_r	spice-common/common/lz_compress_tmpl.c	139;"	d	file:
GET_r	spice-common/common/lz_compress_tmpl.c	535;"	d	file:
GET_r	spice-common/common/quic_rgb_tmpl.c	35;"	d	file:
GET_r	spice-common/common/quic_rgb_tmpl.c	56;"	d	file:
GET_r	spice-common/common/quic_rgb_tmpl.c	760;"	d	file:
GET_r	spice-common/common/quic_rgb_tmpl.c	77;"	d	file:
GET_r	spice-common/common/quic_rgb_tmpl.c	98;"	d	file:
GLCClipOp	spice-common/common/glc.h	/^} GLCClipOp;$/;"	t	typeref:enum:__anon34
GLCCtx	spice-common/common/glc.h	/^typedef void * GLCCtx;$/;"	t
GLCFillMode	spice-common/common/glc.h	/^} GLCFillMode;$/;"	t	typeref:enum:__anon32
GLCImage	spice-common/common/glc.h	/^} GLCImage;$/;"	t	typeref:struct:GLCPImage
GLCImageFormat	spice-common/common/glc.h	/^} GLCImageFormat;$/;"	t	typeref:enum:__anon30
GLCMaskID	spice-common/common/glc.h	/^} GLCMaskID;$/;"	t	typeref:enum:__anon33
GLCOp	spice-common/common/glc.h	/^} GLCOp;$/;"	t	typeref:enum:__anon31
GLCPImage	spice-common/common/glc.h	/^typedef struct GLCPImage {$/;"	s
GLCPath	spice-common/common/glc.h	/^typedef void * GLCPath;$/;"	t
GLCPattern	spice-common/common/glc.h	/^typedef void * GLCPattern;$/;"	t
GLCRect	spice-common/common/glc.h	/^typedef struct GLCRect {$/;"	s
GLCRect	spice-common/common/glc.h	/^} GLCRect;$/;"	t	typeref:struct:GLCRect
GLCRecti	spice-common/common/glc.h	/^typedef struct GLCRecti {$/;"	s
GLCRecti	spice-common/common/glc.h	/^} GLCRecti;$/;"	t	typeref:struct:GLCRecti
GLC_CLIP_OP_AND	spice-common/common/glc.h	/^    GLC_CLIP_OP_AND,$/;"	e	enum:__anon34
GLC_CLIP_OP_EXCLUDE	spice-common/common/glc.h	/^    GLC_CLIP_OP_EXCLUDE,$/;"	e	enum:__anon34
GLC_CLIP_OP_OR	spice-common/common/glc.h	/^    GLC_CLIP_OP_OR,$/;"	e	enum:__anon34
GLC_CLIP_OP_SET	spice-common/common/glc.h	/^    GLC_CLIP_OP_SET,$/;"	e	enum:__anon34
GLC_ERROR_TEST_FINISH	spice-common/common/gl_utils.h	39;"	d
GLC_ERROR_TEST_FLUSH	spice-common/common/gl_utils.h	30;"	d
GLC_FILL_MODE_WINDING_NONZERO	spice-common/common/glc.h	/^    GLC_FILL_MODE_WINDING_NONZERO,$/;"	e	enum:__anon32
GLC_FILL_MODE_WINDING_ODD	spice-common/common/glc.h	/^    GLC_FILL_MODE_WINDING_ODD,$/;"	e	enum:__anon32
GLC_IMAGE_ARGB32	spice-common/common/glc.h	/^    GLC_IMAGE_ARGB32,$/;"	e	enum:__anon30
GLC_IMAGE_RGB32	spice-common/common/glc.h	/^    GLC_IMAGE_RGB32,$/;"	e	enum:__anon30
GLC_MASK_A	spice-common/common/glc.h	/^    GLC_MASK_A,$/;"	e	enum:__anon33
GLC_MASK_B	spice-common/common/glc.h	/^    GLC_MASK_B,$/;"	e	enum:__anon33
GLC_OP_AND	spice-common/common/glc.h	/^    GLC_OP_AND = 0x1501,$/;"	e	enum:__anon31
GLC_OP_AND_INVERTED	spice-common/common/glc.h	/^    GLC_OP_AND_INVERTED = 0x1504,$/;"	e	enum:__anon31
GLC_OP_AND_REVERSE	spice-common/common/glc.h	/^    GLC_OP_AND_REVERSE = 0x1502,$/;"	e	enum:__anon31
GLC_OP_CLEAR	spice-common/common/glc.h	/^    GLC_OP_CLEAR = 0x1500,$/;"	e	enum:__anon31
GLC_OP_COPY	spice-common/common/glc.h	/^    GLC_OP_COPY = 0x1503,$/;"	e	enum:__anon31
GLC_OP_COPY_INVERTED	spice-common/common/glc.h	/^    GLC_OP_COPY_INVERTED = 0x150C,$/;"	e	enum:__anon31
GLC_OP_EQUIV	spice-common/common/glc.h	/^    GLC_OP_EQUIV = 0x1509,$/;"	e	enum:__anon31
GLC_OP_INVERT	spice-common/common/glc.h	/^    GLC_OP_INVERT = 0x150A,$/;"	e	enum:__anon31
GLC_OP_NAND	spice-common/common/glc.h	/^    GLC_OP_NAND = 0x150E,$/;"	e	enum:__anon31
GLC_OP_NOOP	spice-common/common/glc.h	/^    GLC_OP_NOOP = 0x1505,$/;"	e	enum:__anon31
GLC_OP_NOR	spice-common/common/glc.h	/^    GLC_OP_NOR = 0x1508,$/;"	e	enum:__anon31
GLC_OP_OR	spice-common/common/glc.h	/^    GLC_OP_OR = 0x1507,$/;"	e	enum:__anon31
GLC_OP_OR_INVERTED	spice-common/common/glc.h	/^    GLC_OP_OR_INVERTED = 0x150D,$/;"	e	enum:__anon31
GLC_OP_OR_REVERSE	spice-common/common/glc.h	/^    GLC_OP_OR_REVERSE = 0x150B,$/;"	e	enum:__anon31
GLC_OP_SET	spice-common/common/glc.h	/^    GLC_OP_SET = 0x150F,$/;"	e	enum:__anon31
GLC_OP_XOR	spice-common/common/glc.h	/^    GLC_OP_XOR = 0x1506,$/;"	e	enum:__anon31
GLC_PATH_SEG_BEIZER	spice-common/common/glc.c	/^    GLC_PATH_SEG_BEIZER,$/;"	e	enum:__anon6	file:
GLC_PATH_SEG_LINES	spice-common/common/glc.c	/^    GLC_PATH_SEG_LINES,$/;"	e	enum:__anon6	file:
GLC_STROKE_ACTIVE	spice-common/common/glc.c	/^    GLC_STROKE_ACTIVE,$/;"	e	enum:__anon7	file:
GLC_STROKE_FIRST	spice-common/common/glc.c	/^    GLC_STROKE_FIRST,$/;"	e	enum:__anon7	file:
GLC_STROKE_NONACTIVE	spice-common/common/glc.c	/^    GLC_STROKE_NONACTIVE,$/;"	e	enum:__anon7	file:
GLCanvas	spice-common/common/gl_canvas.c	/^struct GLCanvas {$/;"	s	file:
GLCanvas	spice-common/common/gl_canvas.c	/^typedef struct GLCanvas GLCanvas;$/;"	t	typeref:struct:GLCanvas	file:
GLIB2_CFLAGS	Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_CFLAGS	client/Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_CFLAGS	docs/Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_CFLAGS	docs/manual/Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_CFLAGS	server/Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_CFLAGS	server/tests/Makefile	/^GLIB2_CFLAGS = -I\/usr\/include\/glib-2.0 -I\/usr\/lib64\/glib-2.0\/include  $/;"	m
GLIB2_LIBS	Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLIB2_LIBS	client/Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLIB2_LIBS	docs/Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLIB2_LIBS	docs/manual/Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLIB2_LIBS	server/Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLIB2_LIBS	server/tests/Makefile	/^GLIB2_LIBS = -lglib-2.0  $/;"	m
GLInterruptRecreate	client/display_channel.cpp	/^GLInterruptRecreate::GLInterruptRecreate(DisplayChannel& channel)$/;"	f	class:GLInterruptRecreate
GLInterruptRecreate	client/display_channel.h	/^class GLInterruptRecreate: public EventSources::Trigger {$/;"	c
GLZ_ASSERT	client/glz_decoder_config.h	49;"	d
GLZ_ASSERT	client/glz_decoder_config.h	58;"	d
GLZ_ASSERT	server/glz_encoder_config.h	49;"	d
GLZ_ASSERT	server/glz_encoder_config.h	54;"	d
GLZ_DECODE_TO_RGB32	client/glz_decoder_config.h	62;"	d
GLZ_ENCODE_MATCH	server/glz_encode_match_tmpl.c	154;"	d	file:
GLZ_ENCODE_MATCH	server/glz_encoder.c	206;"	d	file:
GLZ_ENCODE_SIZE	server/glz_encode_match_tmpl.c	153;"	d	file:
GLZ_ENCODE_SIZE	server/glz_encoder.c	204;"	d	file:
GL_CANVAS	spice-common/common/gl_canvas.c	32;"	d	file:
GL_CFLAGS	Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	client/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	docs/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	docs/manual/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	server/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	server/tests/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	spice-common/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	spice-common/common/Makefile	/^GL_CFLAGS = $/;"	m
GL_CFLAGS	spice-common/python_modules/Makefile	/^GL_CFLAGS = $/;"	m
GL_LIBS	Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	client/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	docs/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	docs/manual/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	server/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	server/tests/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	spice-common/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	spice-common/common/Makefile	/^GL_LIBS = $/;"	m
GL_LIBS	spice-common/python_modules/Makefile	/^GL_LIBS = $/;"	m
GL_UTILS_H	spice-common/common/gl_utils.h	22;"	d
GNULIB_defined_struct__gl_verify_type	spice-common/common/verify.h	174;"	d
GOP_SIZE	server/red_worker.c	113;"	d	file:
GRADUAL_HIGH_RGB16_TH	server/red_worker.c	6107;"	d	file:
GRADUAL_HIGH_RGB24_TH	server/red_worker.c	6106;"	d	file:
GRADUAL_MEDIUM_SCORE_TH	server/red_worker.c	6112;"	d	file:
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	client/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	docs/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	docs/manual/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	server/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	server/tests/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	spice-common/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	spice-common/common/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	spice-common/python_modules/Makefile	/^GREP = \/bin\/grep$/;"	m
GSTACK_PATH	spice-common/common/backtrace.c	40;"	d	file:
GUI	client/gui/gui.cpp	/^GUI::GUI(Application& app, Application::State state)$/;"	f	class:GUI
GUI	client/gui/gui.h	/^class GUI : public ScreenLayer, public KeyHandler {$/;"	c
GUIBarrier	client/application.cpp	/^    GUIBarrier(int id)$/;"	f	class:GUIBarrier
GUIBarrier	client/application.cpp	/^class GUIBarrier: public ScreenLayer {$/;"	c	file:
GUIBarriers	client/application.h	/^typedef std::list<GUIBarrier*> GUIBarriers;$/;"	t
GUITimer	client/application.cpp	/^    GUITimer(GUI& gui)$/;"	f	class:GUITimer
GUITimer	client/application.cpp	/^class GUITimer: public Timer {$/;"	c	file:
GUI_LABEL_HEIGHT	client/gui/gui.cpp	52;"	d	file:
GUI_LABEL_WIDTH	client/gui/gui.cpp	51;"	d	file:
GUI_MODE_ACTIVE_SESSION	client/application.h	/^        GUI_MODE_ACTIVE_SESSION,$/;"	e	enum:Application::GuiMode
GUI_MODE_FULL	client/application.h	/^        GUI_MODE_FULL,$/;"	e	enum:Application::GuiMode
GUI_MODE_MINIMAL	client/application.h	/^        GUI_MODE_MINIMAL,$/;"	e	enum:Application::GuiMode
GUI_PORT_WIDTH	client/gui/gui.cpp	53;"	d	file:
GUI_SPACE	client/gui/gui.cpp	50;"	d	file:
GUI_TEXT_BOX_HEIGHT	client/gui/gui.cpp	54;"	d	file:
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	spice-common/Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	spice-common/spice-protocol/Makefile	/^GZIP_ENV = --best$/;"	m
GdiCanvas	spice-common/common/gdi_canvas.c	/^struct GdiCanvas {$/;"	s	file:
GdiCanvas	spice-common/common/gdi_canvas.c	/^typedef struct GdiCanvas GdiCanvas;$/;"	t	typeref:struct:GdiCanvas	file:
GlzData	server/red_worker.c	/^} GlzData;$/;"	t	typeref:struct:__anon183	file:
GlzData	spice-common/common/canvas_base.c	/^typedef struct GlzData {$/;"	s	file:
GlzData	spice-common/common/canvas_base.c	/^} GlzData;$/;"	t	typeref:struct:GlzData	file:
GlzDecodeHandler	client/glz_decoder.h	/^    GlzDecodeHandler() {}$/;"	f	class:GlzDecodeHandler
GlzDecodeHandler	client/glz_decoder.h	/^class GlzDecodeHandler {$/;"	c
GlzDecodeSurfaceHandler	client/canvas.h	/^class GlzDecodeSurfaceHandler: public GlzDecodeHandler {$/;"	c
GlzDecodedImage	client/glz_decoded_image.h	/^    GlzDecodedImage(uint64_t id, uint64_t win_head_id, uint8_t *data, int size,$/;"	f	class:GlzDecodedImage
GlzDecodedImage	client/glz_decoded_image.h	/^class GlzDecodedImage {$/;"	c
GlzDecodedSurface	client/canvas.h	/^    GlzDecodedSurface(uint64_t id, uint64_t win_head_id, uint8_t *data, int size,$/;"	f	class:GlzDecodedSurface
GlzDecodedSurface	client/canvas.h	/^class GlzDecodedSurface: public GlzDecodedImage {$/;"	c
GlzDecoder	client/glz_decoder.cpp	/^GlzDecoder::GlzDecoder(GlzDecoderWindow &images_window,$/;"	f	class:GlzDecoder
GlzDecoder	client/glz_decoder.h	/^class GlzDecoder : public SpiceGlzDecoder$/;"	c
GlzDecoderCanvasDebug	client/canvas.h	/^class GlzDecoderCanvasDebug: public GlzDecoderDebug {$/;"	c
GlzDecoderDebug	client/glz_decoder_config.h	/^class GlzDecoderDebug {$/;"	c
GlzDecoderWindow	client/glz_decoder_window.cpp	/^GlzDecoderWindow::GlzDecoderWindow(GlzDecoderDebug &debug_calls)$/;"	f	class:GlzDecoderWindow
GlzDecoderWindow	client/glz_decoder_window.h	/^class GlzDecoderWindow {$/;"	c
GlzDecoderWindowDebug	client/red_client.h	/^class GlzDecoderWindowDebug: public GlzDecoderDebug {$/;"	c
GlzDrawableInstanceItem	server/red_worker.c	/^typedef struct GlzDrawableInstanceItem {$/;"	s	file:
GlzDrawableInstanceItem	server/red_worker.c	/^} GlzDrawableInstanceItem;$/;"	t	typeref:struct:GlzDrawableInstanceItem	file:
GlzEncDictContext	server/glz_encoder_dictionary.h	/^typedef void GlzEncDictContext;$/;"	t
GlzEncDictImageContext	server/glz_encoder_dictionary.h	/^typedef void GlzEncDictImageContext;$/;"	t
GlzEncDictRestoreData	server/glz_encoder_dictionary.h	/^typedef struct GlzEncDictRestoreData {$/;"	s
GlzEncDictRestoreData	server/glz_encoder_dictionary.h	/^} GlzEncDictRestoreData;$/;"	t	typeref:struct:GlzEncDictRestoreData
GlzEncoderContext	server/glz_encoder.h	/^typedef void GlzEncoderContext;$/;"	t
GlzEncoderUsrContext	server/glz_encoder_config.h	/^struct GlzEncoderUsrContext {$/;"	s
GlzEncoderUsrContext	server/glz_encoder_config.h	/^typedef struct GlzEncoderUsrContext GlzEncoderUsrContext;$/;"	t	typeref:struct:GlzEncoderUsrContext
GlzException	client/glz_decoder_config.h	/^    GlzException(const std::string& str) : _mess (str) {}$/;"	f	class:GlzException
GlzException	client/glz_decoder_config.h	/^class GlzException: public std::exception {$/;"	c
GlzSharedDictionary	server/red_worker.c	/^typedef struct GlzSharedDictionary {$/;"	s	file:
GlzSharedDictionary	server/red_worker.c	/^} GlzSharedDictionary;$/;"	t	typeref:struct:GlzSharedDictionary	file:
GlzUsrImageContext	server/glz_encoder_config.h	/^typedef void GlzUsrImageContext;$/;"	t
Group	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
GuiMode	client/application.h	/^    enum GuiMode {$/;"	g	class:Application
H264Encoder	server/h264_encoder.h	/^}H264Encoder;$/;"	t	typeref:struct:_H264Encoder
H264StreamInfo	server/h264_type.h	/^}H264StreamInfo;$/;"	t	typeref:struct:_H264StreamInfo
H264_DECODER_ERROR	server/h264_type.h	17;"	d
H264_DECODER_OK	server/h264_type.h	20;"	d
H264_ENCODER_ERROR	server/h264_type.h	14;"	d
H264_ENCODER_OK	server/h264_type.h	19;"	d
H264_ENV_INIT	server/h264_type.h	29;"	d
H264_ERROR	server/h264_type.h	23;"	d
H264_NOT_GET_PIC	server/h264_type.h	15;"	d
H264_NOT_GET_SLICE	server/h264_type.h	16;"	d
H264_OK	server/h264_type.h	22;"	d
H264_VERSION	server/h264_type.h	25;"	d
HASH_CHAIN_SIZE	server/glz_encoder_dictionary_protected.h	32;"	d
HASH_CHAIN_SIZE	server/glz_encoder_dictionary_protected.h	35;"	d
HASH_FUNC	server/glz_encode_tmpl.c	110;"	d	file:
HASH_FUNC	server/glz_encode_tmpl.c	41;"	d	file:
HASH_FUNC	server/glz_encode_tmpl.c	563;"	d	file:
HASH_FUNC	server/glz_encode_tmpl.c	58;"	d	file:
HASH_FUNC	server/glz_encode_tmpl.c	77;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	113;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	142;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	532;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	65;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	80;"	d	file:
HASH_FUNC	spice-common/common/lz_compress_tmpl.c	95;"	d	file:
HASH_FUNC2	spice-common/common/lz_compress_tmpl.c	545;"	d	file:
HASH_FUNC_16	spice-common/common/lz_compress_tmpl.c	534;"	d	file:
HASH_LOG	spice-common/common/lz.c	53;"	d	file:
HASH_MASK	server/glz_encoder_dictionary_protected.h	39;"	d
HASH_MASK	spice-common/common/lz.c	55;"	d	file:
HASH_SIZE	server/glz_encoder_dictionary_protected.h	38;"	d
HASH_SIZE	spice-common/common/lz.c	54;"	d	file:
HASH_SIZE_LOG	server/glz_encoder_dictionary_protected.h	31;"	d
HASH_SIZE_LOG	server/glz_encoder_dictionary_protected.h	34;"	d
HAVE_ALLOCA	config.h	25;"	d
HAVE_ALLOCA	spice-common/config.h	16;"	d
HAVE_ALLOCA_H	config.h	29;"	d
HAVE_ALLOCA_H	spice-common/config.h	20;"	d
HAVE_ARPA_INET_H	spice-common/config.h	23;"	d
HAVE_CELT051	spice-common/config.h	26;"	d
HAVE_CLOCK_GETTIME	config.h	32;"	d
HAVE_DLFCN_H	config.h	35;"	d
HAVE_DLFCN_H	spice-common/config.h	29;"	d
HAVE_DUP2	spice-common/config.h	32;"	d
HAVE_EXECINFO_H	config.h	38;"	d
HAVE_FORK	spice-common/config.h	38;"	d
HAVE_INET_NTOA	spice-common/config.h	41;"	d
HAVE_INTTYPES_H	config.h	41;"	d
HAVE_INTTYPES_H	spice-common/config.h	44;"	d
HAVE_LINUX_SOCKIOS_H	config.h	44;"	d
HAVE_MALLOC_H	spice-common/config.h	47;"	d
HAVE_MEMMOVE	spice-common/config.h	50;"	d
HAVE_MEMORY_H	config.h	47;"	d
HAVE_MEMORY_H	spice-common/config.h	53;"	d
HAVE_MEMSET	spice-common/config.h	56;"	d
HAVE_NETINET_IN_H	spice-common/config.h	59;"	d
HAVE_SASL	config.h	50;"	d
HAVE_STDDEF_H	spice-common/config.h	71;"	d
HAVE_STDINT_H	config.h	53;"	d
HAVE_STDINT_H	spice-common/config.h	74;"	d
HAVE_STDLIB_H	client/jpeg_decoder.h	36;"	d
HAVE_STDLIB_H	client/red_gdi_canvas.cpp	19;"	d	file:
HAVE_STDLIB_H	config.h	56;"	d
HAVE_STDLIB_H	spice-common/common/gdi_canvas.c	20;"	d	file:
HAVE_STDLIB_H	spice-common/common/sw_canvas.c	20;"	d	file:
HAVE_STDLIB_H	spice-common/config.h	77;"	d
HAVE_STRINGS_H	config.h	59;"	d
HAVE_STRINGS_H	spice-common/config.h	80;"	d
HAVE_STRING_H	config.h	62;"	d
HAVE_STRING_H	spice-common/config.h	83;"	d
HAVE_SYS_SOCKET_H	spice-common/config.h	86;"	d
HAVE_SYS_STAT_H	config.h	65;"	d
HAVE_SYS_STAT_H	spice-common/config.h	89;"	d
HAVE_SYS_TIME_H	config.h	68;"	d
HAVE_SYS_TYPES_H	config.h	71;"	d
HAVE_SYS_TYPES_H	spice-common/config.h	92;"	d
HAVE_UNISTD_H	config.h	74;"	d
HAVE_UNISTD_H	spice-common/config.h	95;"	d
HAVE_VFORK	spice-common/config.h	98;"	d
HAVE_WORKING_FORK	spice-common/config.h	104;"	d
HAVE_WORKING_VFORK	spice-common/config.h	107;"	d
HAVE_XINERAMA	config.h	77;"	d
HEADERS	server/Makefile	/^HEADERS = $(libspice_serverinclude_HEADERS)$/;"	m
HEADERS	spice-common/spice-protocol/spice/Makefile	/^HEADERS = $(spice_protocol_include_HEADERS)$/;"	m
H_RED_TIME	server/red_time.h	2;"	d
H_SPICE_BITMAP_UTILS	server/spice_bitmap_utils.h	2;"	d
H_SPICE_COMMON	spice-common/common/spice_common.h	19;"	d
H_SPICE_IMAGE_CACHE	server/spice_image_cache.h	2;"	d
H_SPICE_LOG	spice-common/common/log.h	19;"	d
H_SPICE_SERVER_UTIL	server/spice_server_utils.h	2;"	d
Handle	client/event_sources.h	/^class EventSources::Handle: public EventSource, public Handle_p {$/;"	c	class:EventSources
Handle_p	client/windows/event_sources_p.cpp	/^Handle_p::Handle_p()$/;"	f	class:Handle_p
Handle_p	client/x11/event_sources_p.h	/^class Handle_p {$/;"	c
Handler	client/red_channel.h	/^    typedef void (HandlerClass::*Handler)(RedPeer::InMessage* message);$/;"	t	class:MessageHandlerImp
HashEntry	server/glz_encoder_dictionary_protected.h	/^struct  __attribute__ ((__packed__)) HashEntry {$/;"	s
HashEntry	server/glz_encoder_dictionary_protected.h	/^typedef struct HashEntry HashEntry;$/;"	t	typeref:struct:HashEntry
HashEntry	spice-common/common/lz.c	/^typedef struct HashEntry {$/;"	s	file:
HashEntry	spice-common/common/lz.c	/^} HashEntry;$/;"	t	typeref:struct:HashEntry	file:
HostAuthOptions	client/red_peer.h	/^        HostAuthOptions() : type_flags(SPICE_SSL_VERIFY_OP_NONE) {}$/;"	f	class:RedPeer::HostAuthOptions
HostAuthOptions	client/red_peer.h	/^    class HostAuthOptions {$/;"	c	class:RedPeer
HotKeys	client/hot_keys.h	/^typedef std::map<int, HotkeySet> HotKeys;$/;"	t
HotKeysParser	client/hot_keys.cpp	/^HotKeysParser::HotKeysParser(const std::string& hotkeys, const CommandsMap& commands_map)$/;"	f	class:HotKeysParser
HotKeysParser	client/hot_keys.h	/^class HotKeysParser {$/;"	c
HotkeyKey	client/hot_keys.h	/^struct HotkeyKey {$/;"	s
HotkeySet	client/hot_keys.h	/^typedef std::vector<HotkeyKey> HotkeySet;$/;"	t
ICEIL	spice-common/common/lines.c	/^static inline int ICEIL (double x)$/;"	f	file:
IDI_ICON_APPLICATION	client/windows/resource.h	6;"	d
IMAGE_CACHE_DEPTH	server/spice_image_cache.c	122;"	d	file:
IMAGE_CACHE_HASH_SIZE	server/spice_image_cache.h	21;"	d
IMAGE_CACHE_MAX_ITEMS	server/spice_image_cache.c	51;"	d	file:
IMAGE_SEG_IS_EARLIER	server/glz_encoder_dictionary_protected.h	153;"	d
INFINITE	client/x11/event_sources_p.h	24;"	d
INFINITY	client/red_client.cpp	33;"	d	file:
INFO	client/gui/gui.h	/^        INFO,$/;"	e	enum:GUI::MessageType
INF_EVENT_WAIT	server/red_worker.c	286;"	d	file:
INIT_IMAGES_CAPACITY	client/glz_decoder_window.cpp	26;"	d	file:
INIT_IMAGE_SEGS_NUM	server/glz_encoder_dictionary_protected.h	57;"	d
INIT_KEY	client/x11/red_window.cpp	505;"	d	file:
INIT_KEY	client/x11/red_window.cpp	585;"	d	file:
INIT_KEY	client/x11/red_window.cpp	586;"	d	file:
INIT_KEY	client/x11/red_window.cpp	645;"	d	file:
INIT_KEY	client/x11/red_window.cpp	646;"	d	file:
INIT_MAP	client/x11/red_window.cpp	344;"	d	file:
INLINE	server/glz_encoder_config.h	58;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	client/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	docs/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	docs/manual/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	server/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	server/tests/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	spice-common/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	spice-common/common/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	spice-common/python_modules/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	spice-common/spice-protocol/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	spice-common/spice-protocol/spice/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	client/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	docs/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	docs/manual/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	server/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	server/tests/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	spice-common/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	spice-common/common/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	spice-common/python_modules/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	spice-common/spice-protocol/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	spice-common/spice-protocol/spice/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	client/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	docs/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	docs/manual/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	server/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	server/tests/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	spice-common/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	spice-common/common/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	spice-common/python_modules/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	spice-common/spice-protocol/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	spice-common/spice-protocol/spice/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	client/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	docs/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	docs/manual/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	server/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	server/tests/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	spice-common/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	spice-common/common/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	spice-common/python_modules/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	spice-common/spice-protocol/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	spice-common/spice-protocol/spice/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	client/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	docs/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	docs/manual/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	server/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	server/tests/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	spice-common/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	spice-common/common/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	spice-common/python_modules/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	spice-common/spice-protocol/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	spice-common/spice-protocol/spice/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	client/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	docs/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	docs/manual/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	server/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	server/tests/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	spice-common/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	spice-common/common/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	spice-common/python_modules/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	spice-common/spice-protocol/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	spice-common/spice-protocol/spice/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INT16_C	client/windows/stdint.h	365;"	d
INT16_MAX	client/windows/stdint.h	179;"	d
INT16_MIN	client/windows/stdint.h	169;"	d
INT32_C	client/windows/stdint.h	371;"	d
INT32_MAX	client/windows/stdint.h	181;"	d
INT32_MIN	client/windows/stdint.h	171;"	d
INT64_C	client/windows/stdint.h	375;"	d
INT64_MAX	client/windows/stdint.h	183;"	d
INT64_MIN	client/windows/stdint.h	173;"	d
INT8_C	client/windows/stdint.h	361;"	d
INT8_MAX	client/windows/stdint.h	177;"	d
INT8_MIN	client/windows/stdint.h	167;"	d
INTERRUPTED_ERR	client/windows/platform_utils.h	94;"	d
INTERRUPTED_ERR	client/x11/platform_utils.h	33;"	d
INTMAX_C	client/windows/stdint.h	383;"	d
INTMAX_MAX	client/windows/stdint.h	277;"	d
INTMAX_MIN	client/windows/stdint.h	275;"	d
INTPTR_MAX	client/windows/stdint.h	267;"	d
INTPTR_MIN	client/windows/stdint.h	265;"	d
INT_FAST16_MAX	client/windows/stdint.h	243;"	d
INT_FAST16_MIN	client/windows/stdint.h	233;"	d
INT_FAST32_MAX	client/windows/stdint.h	245;"	d
INT_FAST32_MIN	client/windows/stdint.h	235;"	d
INT_FAST64_MAX	client/windows/stdint.h	247;"	d
INT_FAST64_MIN	client/windows/stdint.h	237;"	d
INT_FAST8_MAX	client/windows/stdint.h	241;"	d
INT_FAST8_MIN	client/windows/stdint.h	231;"	d
INT_LEAST16_MAX	client/windows/stdint.h	211;"	d
INT_LEAST16_MIN	client/windows/stdint.h	201;"	d
INT_LEAST32_MAX	client/windows/stdint.h	213;"	d
INT_LEAST32_MIN	client/windows/stdint.h	203;"	d
INT_LEAST64_MAX	client/windows/stdint.h	215;"	d
INT_LEAST64_MIN	client/windows/stdint.h	205;"	d
INT_LEAST8_MAX	client/windows/stdint.h	209;"	d
INT_LEAST8_MIN	client/windows/stdint.h	199;"	d
INVALID_CONNECTION	client/platform.h	/^    static const ConnectionRef INVALID_CONNECTION = ~0;$/;"	m	class:NamedPipe
INVALID_SOCKET	client/x11/platform_utils.h	29;"	d
INVALID_STAT_REF	server/stat.h	24;"	d
INVAL_ALL_VERB	server/red_client_shared_cache.h	30;"	d
IOV_MAX	server/red_channel.h	40;"	d
IOV_MAX	server/snd_worker.c	42;"	d	file:
IS_DRAW_ITEM	server/red_worker.c	800;"	d	file:
IS_IMAGE_LOSSY	spice-common/common/canvas_base.c	45;"	d	file:
IS_IMAGE_TYPE_PLT	spice-common/common/lz_common.h	/^static const int IS_IMAGE_TYPE_PLT[] = {0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0};$/;"	v
IS_IMAGE_TYPE_RGB	spice-common/common/lz_common.h	/^static const int IS_IMAGE_TYPE_RGB[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1};$/;"	v
ITEMS_TRACE_MASK	server/red_worker.c	938;"	d	file:
Icon	client/icon.h	/^    Icon() : _refs (1) {}$/;"	f	class:Icon
Icon	client/icon.h	/^class Icon {$/;"	c
IconHeader	client/red_types.h	/^struct IconHeader {$/;"	s
IconsMap	client/x11/x_icon.cpp	/^typedef std::map<int, XIcon*> IconsMap;$/;"	t	file:
ImageCache	server/spice_image_cache.h	/^typedef struct ImageCache {$/;"	s
ImageCache	server/spice_image_cache.h	/^} ImageCache;$/;"	t	typeref:struct:ImageCache
ImageCacheItem	server/spice_image_cache.h	/^typedef struct ImageCacheItem {$/;"	s
ImageCacheItem	server/spice_image_cache.h	/^} ImageCacheItem;$/;"	t	typeref:struct:ImageCacheItem
ImageFromRes	client/pixels_source.h	/^class ImageFromRes: public PixelsSource {$/;"	c
ImageFromRes	client/windows/pixels_source.cpp	/^ImageFromRes::ImageFromRes(int res_id)$/;"	f	class:ImageFromRes
ImageFromRes	client/x11/pixels_source.cpp	/^ImageFromRes::ImageFromRes(int res_id)$/;"	f	class:ImageFromRes
ImageItem	server/red_worker.c	/^typedef struct ImageItem {$/;"	s	file:
ImageItem	server/red_worker.c	/^} ImageItem;$/;"	t	typeref:struct:ImageItem	file:
ImageType	client/windows/platform.cpp	/^typedef struct ImageType {$/;"	s	file:
ImageType	client/windows/platform.cpp	/^} ImageType;$/;"	t	typeref:struct:ImageType	file:
InMessage	client/red_peer.h	/^    InMessage(uint16_t type, uint32_t size, uint8_t * data)$/;"	f	class:RedPeer::InMessage
InMessage	client/red_peer.h	/^class RedPeer::InMessage {$/;"	c	class:RedPeer
IncomingHandler	server/red_channel.h	/^typedef struct IncomingHandler {$/;"	s
IncomingHandler	server/red_channel.h	/^} IncomingHandler;$/;"	t	typeref:struct:IncomingHandler
IncomingHandlerInterface	server/red_channel.h	/^typedef struct IncomingHandlerInterface {$/;"	s
IncomingHandlerInterface	server/red_channel.h	/^} IncomingHandlerInterface;$/;"	t	typeref:struct:IncomingHandlerInterface
Index	spice-common/python_modules/codegen.py	/^    class Index:$/;"	c	class:CodeWriter
InfoLayer	client/application.cpp	/^InfoLayer::InfoLayer()$/;"	f	class:InfoLayer
InfoLayer	client/application.cpp	/^class InfoLayer: public ScreenLayer {$/;"	c	file:
InitGlobals	client/inputs_channel.cpp	/^    InitGlobals()$/;"	f	class:InitGlobals
InitGlobals	client/inputs_channel.cpp	/^class InitGlobals {$/;"	c	file:
InitPipeItem	server/main_channel.c	/^typedef struct InitPipeItem {$/;"	s	file:
InitPipeItem	server/main_channel.c	/^} InitPipeItem;$/;"	t	typeref:struct:InitPipeItem	file:
InputsChannel	client/inputs_channel.cpp	/^InputsChannel::InputsChannel(RedClient& client, uint32_t id)$/;"	f	class:InputsChannel
InputsChannel	client/inputs_channel.h	/^class InputsChannel: public RedChannel, public KeyHandler, public MouseHandler {$/;"	c
InputsChannel	server/inputs_channel.c	/^typedef struct InputsChannel {$/;"	s	file:
InputsChannel	server/inputs_channel.c	/^} InputsChannel;$/;"	t	typeref:struct:InputsChannel	file:
InputsChannelClient	server/inputs_channel.c	/^typedef struct InputsChannelClient {$/;"	s	file:
InputsChannelClient	server/inputs_channel.c	/^} InputsChannelClient;$/;"	t	typeref:struct:InputsChannelClient	file:
InputsFactory	client/inputs_channel.cpp	/^    InputsFactory() : ChannelFactory(SPICE_CHANNEL_INPUTS) {}$/;"	f	class:InputsFactory
InputsFactory	client/inputs_channel.cpp	/^class InputsFactory: public ChannelFactory {$/;"	c	file:
InputsInitPipeItem	server/inputs_channel.c	/^typedef struct InputsInitPipeItem {$/;"	s	file:
InputsInitPipeItem	server/inputs_channel.c	/^} InputsInitPipeItem;$/;"	t	typeref:struct:InputsInitPipeItem	file:
InputsMessHandler	client/inputs_channel.cpp	/^    InputsMessHandler(InputsChannel& channel)$/;"	f	class:InputsMessHandler
InputsMessHandler	client/inputs_channel.cpp	/^class InputsMessHandler: public MessageHandlerImp<InputsChannel, SPICE_CHANNEL_INPUTS> {$/;"	c	file:
InputsPipeItem	server/inputs_channel.c	/^typedef struct InputsPipeItem {$/;"	s	file:
InputsPipeItem	server/inputs_channel.c	/^} InputsPipeItem;$/;"	t	typeref:struct:InputsPipeItem	file:
IntegerType	spice-common/python_modules/ptypes.py	/^class IntegerType(Type):$/;"	c
InternaCtx	spice-common/common/glc.c	/^struct InternaCtx {$/;"	s	file:
InternaCtx	spice-common/common/glc.c	/^typedef struct InternaCtx InternaCtx;$/;"	t	typeref:struct:InternaCtx	file:
InternalPat	spice-common/common/glc.c	/^typedef struct InternalPat {$/;"	s	file:
InternalPat	spice-common/common/glc.c	/^} InternalPat;$/;"	t	typeref:struct:InternalPat	file:
InternalPath	spice-common/common/glc.c	/^typedef struct InternalPath {$/;"	s	file:
InternalPath	spice-common/common/glc.c	/^} InternalPath;$/;"	t	typeref:struct:InternalPath	file:
InterruptUpdate	client/display_channel.cpp	/^InterruptUpdate::InterruptUpdate(DisplayChannel& channel)$/;"	f	class:InterruptUpdate
InterruptUpdate	client/display_channel.h	/^class InterruptUpdate: public EventSources::Trigger {$/;"	c
IsXDecreasingOctant	spice-common/common/lines.c	239;"	d	file:
IsXMajorOctant	spice-common/common/lines.c	237;"	d	file:
IsYDecreasingOctant	spice-common/common/lines.c	240;"	d	file:
IsYMajorOctant	spice-common/common/lines.c	238;"	d	file:
Item	client/cache.hpp	/^        Item(uint64_t in_id, T* data)$/;"	f	class:Cache::Item
Item	client/cache.hpp	/^    class Item {$/;"	c	class:Cache
Item	client/shared_cache.hpp	/^        Item(uint64_t in_id, T* data, bool is_lossy = FALSE)$/;"	f	class:SharedCache::Item
Item	client/shared_cache.hpp	/^    class Item {$/;"	c	class:SharedCache
ItemInfo	spice-common/python_modules/demarshal.py	/^class ItemInfo:$/;"	c
ItemState	client/menu.h	/^    enum ItemState {$/;"	g	class:Menu
ItemTrace	server/red_worker.c	/^typedef struct ItemTrace {$/;"	s	file:
ItemTrace	server/red_worker.c	/^} ItemTrace;$/;"	t	typeref:struct:ItemTrace	file:
ItemType	client/menu.h	/^    enum ItemType {$/;"	g	class:Menu
J	spice-common/common/quic.c	/^static int J[MELCSTATES] = {$/;"	v	file:
JPEG_IMAGE_TYPE_BGR24	server/jpeg_encoder.h	/^    JPEG_IMAGE_TYPE_BGR24,$/;"	e	enum:__anon169
JPEG_IMAGE_TYPE_BGRX32	server/jpeg_encoder.h	/^    JPEG_IMAGE_TYPE_BGRX32,$/;"	e	enum:__anon169
JPEG_IMAGE_TYPE_INVALID	server/jpeg_encoder.h	/^    JPEG_IMAGE_TYPE_INVALID,$/;"	e	enum:__anon169
JPEG_IMAGE_TYPE_RGB16	server/jpeg_encoder.h	/^    JPEG_IMAGE_TYPE_RGB16,$/;"	e	enum:__anon169
JPEG_IMAGE_TYPE_RGB24	server/jpeg_encoder.h	/^    JPEG_IMAGE_TYPE_RGB24,$/;"	e	enum:__anon169
JPEG_LIBS	Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JPEG_LIBS	client/Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JPEG_LIBS	docs/Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JPEG_LIBS	docs/manual/Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JPEG_LIBS	server/Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JPEG_LIBS	server/tests/Makefile	/^JPEG_LIBS = -ljpeg$/;"	m
JoinBevel	spice-common/common/lines.h	108;"	d
JoinMiter	spice-common/common/lines.h	106;"	d
JoinRound	spice-common/common/lines.h	107;"	d
JpegData	server/red_worker.c	/^} JpegData;$/;"	t	typeref:struct:__anon184	file:
JpegDecoder	client/jpeg_decoder.cpp	/^JpegDecoder::JpegDecoder()$/;"	f	class:JpegDecoder
JpegDecoder	client/jpeg_decoder.h	/^class JpegDecoder : public SpiceJpegDecoder {$/;"	c
JpegEncoder	server/jpeg_encoder.c	/^typedef struct JpegEncoder {$/;"	s	file:
JpegEncoder	server/jpeg_encoder.c	/^} JpegEncoder;$/;"	t	typeref:struct:JpegEncoder	file:
JpegEncoderContext	server/jpeg_encoder.h	/^typedef void* JpegEncoderContext;$/;"	t
JpegEncoderImageType	server/jpeg_encoder.h	/^} JpegEncoderImageType;$/;"	t	typeref:enum:__anon169
JpegEncoderUsrContext	server/jpeg_encoder.h	/^struct JpegEncoderUsrContext {$/;"	s
JpegEncoderUsrContext	server/jpeg_encoder.h	/^typedef struct JpegEncoderUsrContext JpegEncoderUsrContext;$/;"	t	typeref:struct:JpegEncoderUsrContext
KBD_KEYCODE_0	client/x11/red_window.cpp	/^    KBD_KEYCODE_0,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_1	client/x11/red_window.cpp	/^    KBD_KEYCODE_1,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_2	client/x11/red_window.cpp	/^    KBD_KEYCODE_2,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_3	client/x11/red_window.cpp	/^    KBD_KEYCODE_3,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_4	client/x11/red_window.cpp	/^    KBD_KEYCODE_4,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_5	client/x11/red_window.cpp	/^    KBD_KEYCODE_5,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_6	client/x11/red_window.cpp	/^    KBD_KEYCODE_6,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_7	client/x11/red_window.cpp	/^    KBD_KEYCODE_7,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_8	client/x11/red_window.cpp	/^    KBD_KEYCODE_8,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_9	client/x11/red_window.cpp	/^    KBD_KEYCODE_9,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_A	client/x11/red_window.cpp	/^    KBD_KEYCODE_A,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_APOSTROPH	client/x11/red_window.cpp	/^    KBD_KEYCODE_APOSTROPH,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_B	client/x11/red_window.cpp	/^    KBD_KEYCODE_B,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_BACKQUAT	client/x11/red_window.cpp	/^    KBD_KEYCODE_BACKQUAT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_BACKSLASH	client/x11/red_window.cpp	/^    KBD_KEYCODE_BACKSLASH,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_BACK_SPACE	client/x11/red_window.cpp	/^    KBD_KEYCODE_BACK_SPACE,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_C	client/x11/red_window.cpp	/^    KBD_KEYCODE_C,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_CAPS_LOCK	client/x11/red_window.cpp	/^    KBD_KEYCODE_CAPS_LOCK,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_COMMA	client/x11/red_window.cpp	/^    KBD_KEYCODE_COMMA,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_D	client/x11/red_window.cpp	/^    KBD_KEYCODE_D,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_DELETE	client/x11/red_window.cpp	/^    KBD_KEYCODE_DELETE,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_DOWN	client/x11/red_window.cpp	/^    KBD_KEYCODE_DOWN,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_E	client/x11/red_window.cpp	/^    KBD_KEYCODE_E,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_END	client/x11/red_window.cpp	/^    KBD_KEYCODE_END,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_EQUAL	client/x11/red_window.cpp	/^    KBD_KEYCODE_EQUAL,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_ESCAPE	client/x11/red_window.cpp	/^    KBD_KEYCODE_ESCAPE = 9,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_EUROPEAN	client/x11/red_window.cpp	/^    KBD_KEYCODE_EUROPEAN = 94,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F	client/x11/red_window.cpp	/^    KBD_KEYCODE_F,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F1	client/x11/red_window.cpp	/^    KBD_KEYCODE_F1,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F10	client/x11/red_window.cpp	/^    KBD_KEYCODE_F10,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F11	client/x11/red_window.cpp	/^    KBD_KEYCODE_F11,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F12	client/x11/red_window.cpp	/^    KBD_KEYCODE_F12,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F2	client/x11/red_window.cpp	/^    KBD_KEYCODE_F2,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F3	client/x11/red_window.cpp	/^    KBD_KEYCODE_F3,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F4	client/x11/red_window.cpp	/^    KBD_KEYCODE_F4,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F5	client/x11/red_window.cpp	/^    KBD_KEYCODE_F5,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F6	client/x11/red_window.cpp	/^    KBD_KEYCODE_F6,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F7	client/x11/red_window.cpp	/^    KBD_KEYCODE_F7,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F8	client/x11/red_window.cpp	/^    KBD_KEYCODE_F8,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_F9	client/x11/red_window.cpp	/^    KBD_KEYCODE_F9,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_G	client/x11/red_window.cpp	/^    KBD_KEYCODE_G,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_H	client/x11/red_window.cpp	/^    KBD_KEYCODE_H,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_HANGUL	client/x11/red_window.cpp	/^    KBD_KEYCODE_HANGUL,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_HANGUL_HANJA	client/x11/red_window.cpp	/^    KBD_KEYCODE_HANGUL_HANJA,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_HOME	client/x11/red_window.cpp	/^    KBD_KEYCODE_HOME,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_I	client/x11/red_window.cpp	/^    KBD_KEYCODE_I,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_INSERT	client/x11/red_window.cpp	/^    KBD_KEYCODE_INSERT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_J	client/x11/red_window.cpp	/^    KBD_KEYCODE_J,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_JAPANESE_BACKSLASH	client/x11/red_window.cpp	/^    KBD_KEYCODE_JAPANESE_BACKSLASH,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_JAPANESE_HENKAN	client/x11/red_window.cpp	/^    KBD_KEYCODE_JAPANESE_HENKAN = 129,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_JAPANESE_HIRAGANA_KATAKANA	client/x11/red_window.cpp	/^    KBD_KEYCODE_JAPANESE_HIRAGANA_KATAKANA = 208,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_JAPANESE_MUHENKAN	client/x11/red_window.cpp	/^    KBD_KEYCODE_JAPANESE_MUHENKAN = 131,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_K	client/x11/red_window.cpp	/^    KBD_KEYCODE_K,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L	client/x11/red_window.cpp	/^    KBD_KEYCODE_L,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_LEFT	client/x11/red_window.cpp	/^    KBD_KEYCODE_LEFT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L_ALT	client/x11/red_window.cpp	/^    KBD_KEYCODE_L_ALT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L_BRACKET	client/x11/red_window.cpp	/^    KBD_KEYCODE_L_BRACKET,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L_COMMAND	client/x11/red_window.cpp	/^    KBD_KEYCODE_L_COMMAND = 115,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L_CONTROL	client/x11/red_window.cpp	/^    KBD_KEYCODE_L_CONTROL,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_L_SHIFT	client/x11/red_window.cpp	/^    KBD_KEYCODE_L_SHIFT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_M	client/x11/red_window.cpp	/^    KBD_KEYCODE_M,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_MENU	client/x11/red_window.cpp	/^    KBD_KEYCODE_MENU,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_MINUS	client/x11/red_window.cpp	/^    KBD_KEYCODE_MINUS,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_N	client/x11/red_window.cpp	/^    KBD_KEYCODE_N,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_NUM_LOCK	client/x11/red_window.cpp	/^    KBD_KEYCODE_NUM_LOCK,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_O	client/x11/red_window.cpp	/^    KBD_KEYCODE_O,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_P	client/x11/red_window.cpp	/^    KBD_KEYCODE_P,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_0	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_0,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_1	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_1,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_2	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_2,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_3	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_3,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_4	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_4,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_5	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_5,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_6	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_6,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_7	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_7,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_8	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_8,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_9	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_9,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_ADD	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_ADD,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_DEL	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_DEL,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_DEVIDE	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_DEVIDE,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_ENTER	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_ENTER,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_MULTIPLY	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_MULTIPLY,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAD_SUBTRACT	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAD_SUBTRACT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAGE_DOWN	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAGE_DOWN,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAGE_UP	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAGE_UP,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PAUSE	client/x11/red_window.cpp	/^    KBD_KEYCODE_PAUSE,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PERIOD	client/x11/red_window.cpp	/^    KBD_KEYCODE_PERIOD,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_PRINT	client/x11/red_window.cpp	/^    KBD_KEYCODE_PRINT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_Q	client/x11/red_window.cpp	/^    KBD_KEYCODE_Q,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R	client/x11/red_window.cpp	/^    KBD_KEYCODE_R,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_RETURN	client/x11/red_window.cpp	/^    KBD_KEYCODE_RETURN,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_RIGHT	client/x11/red_window.cpp	/^    KBD_KEYCODE_RIGHT = 102,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R_ALT	client/x11/red_window.cpp	/^    KBD_KEYCODE_R_ALT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R_BRACKET	client/x11/red_window.cpp	/^    KBD_KEYCODE_R_BRACKET,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R_COMMAND	client/x11/red_window.cpp	/^    KBD_KEYCODE_R_COMMAND,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R_CONTROL	client/x11/red_window.cpp	/^    KBD_KEYCODE_R_CONTROL,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_R_SHIFT	client/x11/red_window.cpp	/^    KBD_KEYCODE_R_SHIFT,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_S	client/x11/red_window.cpp	/^    KBD_KEYCODE_S,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_SCROLL_LOCK	client/x11/red_window.cpp	/^    KBD_KEYCODE_SCROLL_LOCK,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_SEMICOLON	client/x11/red_window.cpp	/^    KBD_KEYCODE_SEMICOLON,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_SLASH	client/x11/red_window.cpp	/^    KBD_KEYCODE_SLASH,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_SPACE	client/x11/red_window.cpp	/^    KBD_KEYCODE_SPACE,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_T	client/x11/red_window.cpp	/^    KBD_KEYCODE_T,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_TAB	client/x11/red_window.cpp	/^    KBD_KEYCODE_TAB,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_U	client/x11/red_window.cpp	/^    KBD_KEYCODE_U,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_UP	client/x11/red_window.cpp	/^    KBD_KEYCODE_UP,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_V	client/x11/red_window.cpp	/^    KBD_KEYCODE_V,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_W	client/x11/red_window.cpp	/^    KBD_KEYCODE_W,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_X	client/x11/red_window.cpp	/^    KBD_KEYCODE_X,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_Y	client/x11/red_window.cpp	/^    KBD_KEYCODE_Y,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_YEN	client/x11/red_window.cpp	/^    KBD_KEYCODE_YEN = 133,$/;"	e	enum:KbdKeyCode	file:
KBD_KEYCODE_Z	client/x11/red_window.cpp	/^    KBD_KEYCODE_Z,$/;"	e	enum:KbdKeyCode	file:
KEYBOARD_MODIFIERS	client/windows/platform.cpp	/^static const KeyboardModifier KEYBOARD_MODIFIERS[] = {$/;"	v	file:
KEYCASE	client/application.cpp	992;"	d	file:
KEYMAP	client/x11/red_window.cpp	461;"	d	file:
KEYMAP	client/x11/red_window.cpp	466;"	d	file:
KEYMAP	client/x11/red_window.cpp	471;"	d	file:
KEYMAP	client/x11/red_window.cpp	473;"	d	file:
KEY_CASE	client/gui/gui.cpp	1241;"	d	file:
KEY_MODIFIERS_TTL	server/inputs_channel.c	114;"	d	file:
KbdKeyCode	client/x11/red_window.cpp	/^enum KbdKeyCode {$/;"	g	file:
KeyHandler	client/inputs_handler.h	/^class KeyHandler {$/;"	c
KeyHandlersStack	client/application.h	/^typedef std::list<KeyHandler*> KeyHandlersStack;$/;"	t
KeyInfo	client/inputs_channel.h	/^    struct KeyInfo {$/;"	s	class:InputsChannel
KeyModifiersEvent	client/inputs_channel.cpp	/^    KeyModifiersEvent(InputsChannel& channel) : _channel (channel) {}$/;"	f	class:KeyModifiersEvent
KeyModifiersEvent	client/inputs_channel.cpp	/^class KeyModifiersEvent: public Event {$/;"	c	file:
KeyModifiersPipeItem	server/inputs_channel.c	/^typedef struct KeyModifiersPipeItem {$/;"	s	file:
KeyModifiersPipeItem	server/inputs_channel.c	/^} KeyModifiersPipeItem;$/;"	t	typeref:struct:KeyModifiersPipeItem	file:
KeyboardModifier	client/windows/platform.cpp	/^typedef struct KeyboardModifier {$/;"	s	file:
KeyboardModifier	client/windows/platform.cpp	/^} KeyboardModifier;$/;"	t	typeref:struct:KeyboardModifier	file:
KeysList	client/windows/red_window.cpp	/^typedef std::list<RedKey> KeysList;$/;"	t	file:
Keyword	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	client/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	docs/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	docs/manual/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	server/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	server/tests/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	spice-common/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	spice-common/common/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	spice-common/python_modules/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDADD	server/tests/Makefile	/^LDADD = \\$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	client/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	docs/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	docs/manual/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	server/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	server/tests/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	spice-common/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	spice-common/common/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	spice-common/python_modules/Makefile	/^LDFLAGS = $/;"	m
LIBM	Makefile	/^LIBM = -lm$/;"	m
LIBM	client/Makefile	/^LIBM = -lm$/;"	m
LIBM	docs/Makefile	/^LIBM = -lm$/;"	m
LIBM	docs/manual/Makefile	/^LIBM = -lm$/;"	m
LIBM	server/Makefile	/^LIBM = -lm$/;"	m
LIBM	server/tests/Makefile	/^LIBM = -lm$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	client/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	docs/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	docs/manual/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	server/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	server/tests/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	spice-common/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	spice-common/common/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	spice-common/python_modules/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	spice-common/spice-protocol/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	spice-common/spice-protocol/spice/Makefile	/^LIBOBJS = $/;"	m
LIBRT	Makefile	/^LIBRT = -lrt$/;"	m
LIBRT	client/Makefile	/^LIBRT = -lrt$/;"	m
LIBRT	docs/Makefile	/^LIBRT = -lrt$/;"	m
LIBRT	docs/manual/Makefile	/^LIBRT = -lrt$/;"	m
LIBRT	server/Makefile	/^LIBRT = -lrt$/;"	m
LIBRT	server/tests/Makefile	/^LIBRT = -lrt$/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBS	client/Makefile	/^LIBS = $/;"	m
LIBS	docs/Makefile	/^LIBS = $/;"	m
LIBS	docs/manual/Makefile	/^LIBS = $/;"	m
LIBS	server/Makefile	/^LIBS = $/;"	m
LIBS	server/tests/Makefile	/^LIBS = $/;"	m
LIBS	spice-common/Makefile	/^LIBS = $/;"	m
LIBS	spice-common/common/Makefile	/^LIBS = $/;"	m
LIBS	spice-common/python_modules/Makefile	/^LIBS = $/;"	m
LIBS	spice-common/spice-protocol/Makefile	/^LIBS = $/;"	m
LIBS	spice-common/spice-protocol/spice/Makefile	/^LIBS = $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	client/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	docs/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	docs/manual/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	server/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	server/tests/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	spice-common/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	spice-common/common/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	spice-common/python_modules/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIMIT_OFFSET	server/glz_encoder.c	192;"	d	file:
LIMIT_OFFSET	spice-common/common/lz.c	426;"	d	file:
LINES_H	spice-common/common/lines.h	50;"	d
LINK	client/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	server/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	server/tests/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	spice-common/common/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK_TO_DCC	server/red_worker.c	1131;"	d	file:
LINK_TO_DPI	server/red_worker.c	1143;"	d	file:
LINK_TO_GLZ	server/red_worker.c	1148;"	d	file:
LINK_TO_RCC	server/red_worker.c	1126;"	d	file:
LIPO	Makefile	/^LIPO = $/;"	m
LIPO	client/Makefile	/^LIPO = $/;"	m
LIPO	docs/Makefile	/^LIPO = $/;"	m
LIPO	docs/manual/Makefile	/^LIPO = $/;"	m
LIPO	server/Makefile	/^LIPO = $/;"	m
LIPO	server/tests/Makefile	/^LIPO = $/;"	m
LIPO	spice-common/Makefile	/^LIPO = $/;"	m
LIPO	spice-common/common/Makefile	/^LIPO = $/;"	m
LIPO	spice-common/python_modules/Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LN_S	client/Makefile	/^LN_S = ln -s$/;"	m
LN_S	docs/Makefile	/^LN_S = ln -s$/;"	m
LN_S	docs/manual/Makefile	/^LN_S = ln -s$/;"	m
LN_S	server/Makefile	/^LN_S = ln -s$/;"	m
LN_S	server/tests/Makefile	/^LN_S = ln -s$/;"	m
LN_S	spice-common/Makefile	/^LN_S = ln -s$/;"	m
LN_S	spice-common/common/Makefile	/^LN_S = ln -s$/;"	m
LN_S	spice-common/python_modules/Makefile	/^LN_S = ln -s$/;"	m
LOG	client/debug.h	68;"	d
LOGIN_DIALOG_HEIGHT	client/gui/gui.cpp	57;"	d	file:
LOGIN_DIALOG_V_START	client/gui/gui.cpp	58;"	d	file:
LOGIN_DIALOG_WIDTH	client/gui/gui.cpp	56;"	d	file:
LOG_DEBUG	client/debug.h	/^  LOG_DEBUG,$/;"	e	enum:__anon104
LOG_ERROR	client/debug.h	/^  LOG_ERROR,$/;"	e	enum:__anon104
LOG_ERROR	client/debug.h	72;"	d
LOG_FATAL	client/debug.h	/^  LOG_FATAL$/;"	e	enum:__anon104
LOG_INFO	client/debug.h	/^  LOG_INFO,$/;"	e	enum:__anon104
LOG_INFO	client/debug.h	70;"	d
LOG_WARN	client/debug.h	/^  LOG_WARN,$/;"	e	enum:__anon104
LOG_WARN	client/debug.h	71;"	d
LOW_MARK_MS	client/windows/playback.cpp	29;"	d	file:
LTCOMPILE	client/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	server/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	server/tests/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	spice-common/common/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	client/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	client/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	docs/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	docs/manual/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	server/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	server/tests/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	spice-common/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	spice-common/common/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	spice-common/python_modules/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	spice-common/spice-protocol/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	spice-common/spice-protocol/spice/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	server/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	spice-common/common/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LT_OBJDIR	config.h	84;"	d
LT_OBJDIR	spice-common/config.h	111;"	d
LZ_A8	spice-common/common/lz.c	468;"	d	file:
LZ_A8	spice-common/common/lz.c	470;"	d	file:
LZ_A8	spice-common/common/lz.c	472;"	d	file:
LZ_A8	spice-common/common/lz_compress_tmpl.c	544;"	d	file:
LZ_A8	spice-common/common/lz_decompress_tmpl.c	334;"	d	file:
LZ_EXPECT_CONDITIONAL	client/glz_decoder.cpp	114;"	d	file:
LZ_EXPECT_CONDITIONAL	client/glz_decoder.cpp	117;"	d	file:
LZ_EXPECT_CONDITIONAL	client/glz_decoder.cpp	204;"	d	file:
LZ_EXPECT_CONDITIONAL	server/glz_encoder.c	162;"	d	file:
LZ_EXPECT_CONDITIONAL	server/glz_encoder.c	165;"	d	file:
LZ_EXPECT_CONDITIONAL	spice-common/common/lz.c	377;"	d	file:
LZ_EXPECT_CONDITIONAL	spice-common/common/lz.c	380;"	d	file:
LZ_EXPECT_CONDITIONAL	spice-common/common/lz.c	501;"	d	file:
LZ_IMAGE_TYPE_A8	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_A8$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_INVALID	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_INVALID,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_LOG	spice-common/common/lz_common.h	53;"	d
LZ_IMAGE_TYPE_MASK	spice-common/common/lz_common.h	52;"	d
LZ_IMAGE_TYPE_PLT1_BE	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_PLT1_BE,      \/\/ PLT stands for palette$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_PLT1_LE	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_PLT1_LE,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_PLT4_BE	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_PLT4_BE,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_PLT4_LE	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_PLT4_LE,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_PLT8	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_PLT8,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_RGB16	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_RGB16,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_RGB24	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_RGB24,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_RGB32	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_RGB32,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_RGBA	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_RGBA,$/;"	e	enum:__anon38
LZ_IMAGE_TYPE_XXXA	spice-common/common/lz_common.h	/^    LZ_IMAGE_TYPE_XXXA,$/;"	e	enum:__anon38
LZ_MAGIC	spice-common/common/lz_common.h	66;"	d
LZ_MAX_WINDOW_SIZE	spice-common/common/lz_common.h	34;"	d
LZ_PLT	client/glz_decode_tmpl.c	320;"	d	file:
LZ_PLT	client/glz_decoder.cpp	159;"	d	file:
LZ_PLT	client/glz_decoder.cpp	162;"	d	file:
LZ_PLT	client/glz_decoder.cpp	167;"	d	file:
LZ_PLT	client/glz_decoder.cpp	172;"	d	file:
LZ_PLT	client/glz_decoder.cpp	177;"	d	file:
LZ_PLT	client/glz_decoder.cpp	182;"	d	file:
LZ_PLT	server/glz_encode_tmpl.c	568;"	d	file:
LZ_PLT	server/glz_encoder.c	209;"	d	file:
LZ_PLT	spice-common/common/lz.c	438;"	d	file:
LZ_PLT	spice-common/common/lz.c	440;"	d	file:
LZ_PLT	spice-common/common/lz.c	443;"	d	file:
LZ_PLT	spice-common/common/lz.c	448;"	d	file:
LZ_PLT	spice-common/common/lz.c	453;"	d	file:
LZ_PLT	spice-common/common/lz.c	458;"	d	file:
LZ_PLT	spice-common/common/lz.c	463;"	d	file:
LZ_PLT	spice-common/common/lz_compress_tmpl.c	539;"	d	file:
LZ_PLT	spice-common/common/lz_decompress_tmpl.c	325;"	d	file:
LZ_READU16	spice-common/common/lz_compress_tmpl.c	531;"	d	file:
LZ_RGB16	client/glz_decode_tmpl.c	326;"	d	file:
LZ_RGB16	client/glz_decoder.cpp	188;"	d	file:
LZ_RGB16	client/glz_decoder.cpp	190;"	d	file:
LZ_RGB16	server/glz_encode_tmpl.c	570;"	d	file:
LZ_RGB16	server/glz_encoder.c	212;"	d	file:
LZ_RGB16	spice-common/common/lz.c	476;"	d	file:
LZ_RGB16	spice-common/common/lz.c	478;"	d	file:
LZ_RGB16	spice-common/common/lz.c	480;"	d	file:
LZ_RGB16	spice-common/common/lz_compress_tmpl.c	541;"	d	file:
LZ_RGB16	spice-common/common/lz_decompress_tmpl.c	331;"	d	file:
LZ_RGB24	client/glz_decode_tmpl.c	327;"	d	file:
LZ_RGB24	client/glz_decoder.cpp	194;"	d	file:
LZ_RGB24	server/glz_encode_tmpl.c	571;"	d	file:
LZ_RGB24	server/glz_encoder.c	215;"	d	file:
LZ_RGB24	spice-common/common/lz.c	484;"	d	file:
LZ_RGB24	spice-common/common/lz.c	486;"	d	file:
LZ_RGB24	spice-common/common/lz_compress_tmpl.c	542;"	d	file:
LZ_RGB24	spice-common/common/lz_decompress_tmpl.c	332;"	d	file:
LZ_RGB32	client/glz_decode_tmpl.c	328;"	d	file:
LZ_RGB32	client/glz_decoder.cpp	197;"	d	file:
LZ_RGB32	server/glz_encode_tmpl.c	572;"	d	file:
LZ_RGB32	server/glz_encoder.c	218;"	d	file:
LZ_RGB32	spice-common/common/lz.c	490;"	d	file:
LZ_RGB32	spice-common/common/lz.c	492;"	d	file:
LZ_RGB32	spice-common/common/lz_compress_tmpl.c	543;"	d	file:
LZ_RGB32	spice-common/common/lz_decompress_tmpl.c	333;"	d	file:
LZ_RGB_ALPHA	client/glz_decode_tmpl.c	329;"	d	file:
LZ_RGB_ALPHA	client/glz_decoder.cpp	200;"	d	file:
LZ_RGB_ALPHA	server/glz_encode_tmpl.c	569;"	d	file:
LZ_RGB_ALPHA	server/glz_encoder.c	221;"	d	file:
LZ_RGB_ALPHA	spice-common/common/lz.c	495;"	d	file:
LZ_RGB_ALPHA	spice-common/common/lz.c	497;"	d	file:
LZ_RGB_ALPHA	spice-common/common/lz_compress_tmpl.c	540;"	d	file:
LZ_RGB_ALPHA	spice-common/common/lz_decompress_tmpl.c	335;"	d	file:
LZ_UNEXPECT_CONDITIONAL	client/glz_decoder.cpp	115;"	d	file:
LZ_UNEXPECT_CONDITIONAL	client/glz_decoder.cpp	118;"	d	file:
LZ_UNEXPECT_CONDITIONAL	client/glz_decoder.cpp	203;"	d	file:
LZ_UNEXPECT_CONDITIONAL	server/glz_encoder.c	163;"	d	file:
LZ_UNEXPECT_CONDITIONAL	server/glz_encoder.c	166;"	d	file:
LZ_UNEXPECT_CONDITIONAL	spice-common/common/lz.c	378;"	d	file:
LZ_UNEXPECT_CONDITIONAL	spice-common/common/lz.c	381;"	d	file:
LZ_UNEXPECT_CONDITIONAL	spice-common/common/lz.c	500;"	d	file:
LZ_VERSION	spice-common/common/lz_common.h	69;"	d
LZ_VERSION_MAJOR	spice-common/common/lz_common.h	67;"	d
LZ_VERSION_MINOR	spice-common/common/lz_common.h	68;"	d
L_ALT_MODIFIER	client/platform.h	/^        L_ALT_MODIFIER = (1 << L_ALT_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
L_ALT_MODIFIER_SHIFT	client/platform.h	/^        L_ALT_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
L_CTRL_MODIFIER	client/platform.h	/^        L_CTRL_MODIFIER = (1 << L_CTRL_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
L_CTRL_MODIFIER_SHIFT	client/platform.h	/^        L_CTRL_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
L_SHIFT_MODIFIER	client/platform.h	/^        L_SHIFT_MODIFIER = (1 << L_SHIFT_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
L_SHIFT_MODIFIER_SHIFT	client/platform.h	/^        L_SHIFT_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
LayerChangedEvent	client/screen.cpp	/^    LayerChangedEvent (int screen) : _screen (screen) {}$/;"	f	class:LayerChangedEvent
LayerChangedEvent	client/screen.cpp	/^class LayerChangedEvent: public Event {$/;"	c	file:
LeftVariant	client/x11/platform.cpp	/^class LeftVariant {$/;"	c	file:
LineDash	spice-common/common/glc.c	/^typedef struct LineDash {$/;"	s	file:
LineDash	spice-common/common/glc.c	/^} LineDash;$/;"	t	typeref:struct:LineDash	file:
LineDoubleDash	spice-common/common/lines.h	95;"	d
LineFacePtr	spice-common/common/lines.c	/^} LineFaceRec, *LineFacePtr;$/;"	t	typeref:struct:_LineFace	file:
LineFaceRec	spice-common/common/lines.c	/^} LineFaceRec, *LineFacePtr;$/;"	t	typeref:struct:_LineFace	file:
LineOnOffDash	spice-common/common/lines.h	94;"	d
LineSolid	spice-common/common/lines.h	93;"	d
LinuxListener	client/x11/named_pipe.cpp	/^LinuxListener::LinuxListener(const char *name, NamedPipe::ListenerInterface &listener_interface,$/;"	f	class:LinuxListener
LinuxListener	client/x11/named_pipe.h	/^class LinuxListener: public EventSources::Socket {$/;"	c
Listener	client/red_window.h	/^class RedWindow::Listener {$/;"	c	class:RedWindow
ListenerInterface	client/platform.h	/^    class ListenerInterface {$/;"	c	class:NamedPipe
ListenerRef	client/platform.h	/^    typedef unsigned long ListenerRef;$/;"	t	class:NamedPipe
Literal	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
LocalCursor	client/cursor.h	/^    LocalCursor(): _atomic (1) {}$/;"	f	class:LocalCursor
LocalCursor	client/cursor.h	/^class LocalCursor {$/;"	c
LocalCursor	server/red_worker.c	/^typedef struct LocalCursor {$/;"	s	file:
LocalCursor	server/red_worker.c	/^} LocalCursor;$/;"	t	typeref:struct:LocalCursor	file:
Lock	client/threads.h	/^    Lock(Mutex& mutex)$/;"	f	class:Lock
Lock	client/threads.h	/^    Lock(Mutex& mutex, uint64_t timout_nano)$/;"	f	class:Lock
Lock	client/threads.h	/^class Lock {$/;"	c
LoginDialog	client/gui/gui.cpp	/^LoginDialog::LoginDialog(GUI& gui)$/;"	f	class:LoginDialog
LoginDialog	client/gui/gui.cpp	/^class LoginDialog : public GUI::Dialog {$/;"	c	file:
LowLevelKeyboardProc	client/windows/red_window.cpp	/^static LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)$/;"	f	file:
LzContext	spice-common/common/lz.h	/^typedef void *LzContext;$/;"	t
LzData	server/red_worker.c	/^} LzData;$/;"	t	typeref:struct:__anon182	file:
LzData	spice-common/common/canvas_base.c	/^typedef struct LzData {$/;"	s	file:
LzData	spice-common/common/canvas_base.c	/^} LzData;$/;"	t	typeref:struct:LzData	file:
LzDecodeUsrData	spice-common/common/canvas_utils.h	/^typedef struct LzDecodeUsrData {$/;"	s
LzDecodeUsrData	spice-common/common/canvas_utils.h	/^} LzDecodeUsrData;$/;"	t	typeref:struct:LzDecodeUsrData
LzImageSegment	spice-common/common/lz.c	/^struct LzImageSegment {$/;"	s	file:
LzImageSegment	spice-common/common/lz.c	/^typedef struct LzImageSegment LzImageSegment;$/;"	t	typeref:struct:LzImageSegment	file:
LzImageType	spice-common/common/lz_common.h	/^} LzImageType;$/;"	t	typeref:enum:__anon38
LzUsrContext	spice-common/common/lz.h	/^struct LzUsrContext {$/;"	s
LzUsrContext	spice-common/common/lz.h	/^typedef struct LzUsrContext LzUsrContext;$/;"	t	typeref:struct:LzUsrContext
MAINT	Makefile	/^MAINT = #$/;"	m
MAINT	client/Makefile	/^MAINT = #$/;"	m
MAINT	docs/Makefile	/^MAINT = #$/;"	m
MAINT	docs/manual/Makefile	/^MAINT = #$/;"	m
MAINT	server/Makefile	/^MAINT = #$/;"	m
MAINT	server/tests/Makefile	/^MAINT = #$/;"	m
MAINT	spice-common/Makefile	/^MAINT = #$/;"	m
MAINT	spice-common/common/Makefile	/^MAINT = #$/;"	m
MAINT	spice-common/python_modules/Makefile	/^MAINT = #$/;"	m
MAINT	spice-common/spice-protocol/Makefile	/^MAINT = #$/;"	m
MAINT	spice-common/spice-protocol/spice/Makefile	/^MAINT = #$/;"	m
MAINTAINERCLEANFILES	spice-common/Makefile	/^MAINTAINERCLEANFILES = \\$/;"	m
MAINTAINERCLEANFILES	spice-common/spice-protocol/Makefile	/^MAINTAINERCLEANFILES = \\$/;"	m
MAIN_CHANNEL_RECEIVE_BUF_SIZE	server/main_channel.h	33;"	d
MAIN_DISPATCHER_CHANNEL_EVENT	server/main_dispatcher.c	/^    MAIN_DISPATCHER_CHANNEL_EVENT = 0,$/;"	e	enum:__anon143	file:
MAIN_DISPATCHER_CLIENT_DISCONNECT	server/main_dispatcher.c	/^    MAIN_DISPATCHER_CLIENT_DISCONNECT,$/;"	e	enum:__anon143	file:
MAIN_DISPATCHER_H	server/main_dispatcher.h	2;"	d
MAIN_DISPATCHER_MIGRATE_SEAMLESS_DST_COMPLETE	server/main_dispatcher.c	/^    MAIN_DISPATCHER_MIGRATE_SEAMLESS_DST_COMPLETE,$/;"	e	enum:__anon143	file:
MAIN_DISPATCHER_NUM_MESSAGES	server/main_dispatcher.c	/^    MAIN_DISPATCHER_NUM_MESSAGES$/;"	e	enum:__anon143	file:
MAIN_DISPATCHER_SET_MM_TIME_LATENCY	server/main_dispatcher.c	/^    MAIN_DISPATCHER_SET_MM_TIME_LATENCY,$/;"	e	enum:__anon143	file:
MAIN_GUI_HEIGHT	client/gui/gui.cpp	47;"	d	file:
MAIN_GUI_WIDTH	client/gui/gui.cpp	46;"	d	file:
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	client/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	docs/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	docs/manual/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	server/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	server/tests/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/missing makeinfo$/;"	m
MAKEINFO	spice-common/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	spice-common/common/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	spice-common/python_modules/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	spice-common/spice-protocol/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing makeinfo$/;"	m
MAKEINFO	spice-common/spice-protocol/spice/Makefile	/^MAKEINFO = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/missing makeinfo$/;"	m
MALLOC_ERROR	spice-common/common/mem.c	30;"	d	file:
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	client/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	docs/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	docs/manual/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	server/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	server/tests/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	spice-common/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	spice-common/common/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	spice-common/python_modules/Makefile	/^MANIFEST_TOOL = :$/;"	m
MAP_BITMAP_FMT_TO_BITS_PER_PIXEL	server/red_parse_qxl.c	/^static const int MAP_BITMAP_FMT_TO_BITS_PER_PIXEL[] = {0, 1, 1, 4, 4, 8, 16, 24, 32, 32, 8};$/;"	v	file:
MAP_BITMAP_FMT_TO_LZ_IMAGE_TYPE	server/red_common.h	/^static const LzImageType MAP_BITMAP_FMT_TO_LZ_IMAGE_TYPE[] = {$/;"	v
MARSHALLERS_DEPS	spice-common/common/Makefile	/^MARSHALLERS_DEPS = \\$/;"	m
MARSHALLER_BUFFER_SIZE	spice-common/common/marshaller.c	56;"	d	file:
MASK	spice-common/common/canvas_base.c	3321;"	d	file:
MAX	spice-common/spice-protocol/spice/macros.h	112;"	d
MAX	spice-common/spice-protocol/spice/macros.h	113;"	d
MAXNUMCODES	spice-common/common/quic.c	46;"	d	file:
MAX_ATR_LEN	client/smartcard_channel.cpp	37;"	d	file:
MAX_B_FRAME	server/red_worker.c	114;"	d	file:
MAX_CACHE_CLIENTS	server/red_worker.c	325;"	d	file:
MAX_CHANNELS	spice-common/common/quic.c	126;"	d	file:
MAX_COORDINATE	spice-common/common/lines.c	79;"	d	file:
MAX_COPY	spice-common/common/lz.c	423;"	d	file:
MAX_COPY	spice-common/common/lz_common.h	35;"	d
MAX_DISPLAY_PIXMAP_CACHE	client/red_client.cpp	870;"	d	file:
MAX_DISTANCE	spice-common/common/lz.c	434;"	d	file:
MAX_DRAWABLE_PIXMAP_CACHE_ITEMS	server/red_worker.c	692;"	d	file:
MAX_EVENT_SOURCES	server/red_worker.c	285;"	d	file:
MAX_FARDISTANCE	spice-common/common/lz.c	435;"	d	file:
MAX_FPS	server/red_worker.c	143;"	d	file:
MAX_GLZ_DRAWABLE_INSTANCES	server/red_worker.c	627;"	d	file:
MAX_GLZ_WINDOW_SIZE	client/red_client.cpp	875;"	d	file:
MAX_HEADER_SIZE	server/red_channel.h	43;"	d
MAX_HEIGHT	server/tests/test_display_base.h	77;"	d
MAX_IMAGE_DIST	server/glz_encoder.c	198;"	d	file:
MAX_IMAGE_SEGS_NUM	server/glz_encoder_dictionary_protected.h	55;"	d
MAX_LEN	spice-common/common/lz.c	424;"	d	file:
MAX_LZ_ENCODERS	server/red_worker.c	326;"	d	file:
MAX_OVER	client/display_channel.cpp	173;"	d	file:
MAX_PIPE_SIZE	server/red_worker.c	401;"	d	file:
MAX_PIXEL_LONG_DISTANCE	server/glz_encoder.c	197;"	d	file:
MAX_PIXEL_MEDIUM_DISTANCE	server/glz_encoder.c	196;"	d	file:
MAX_PIXEL_SHORT_DISTANCE	server/glz_encoder.c	195;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	102;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	40;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	574;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	57;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	76;"	d	file:
MAX_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	94;"	d	file:
MAX_RGB_SIZE	server/red_worker.c	8757;"	d	file:
MAX_SEND_BUFS	server/red_channel.h	36;"	d
MAX_SURFACE_NUM	server/tests/test_display_base.c	424;"	d	file:
MAX_TRANS_DEPTH	client/x11/platform.cpp	1203;"	d	file:
MAX_UNDER	client/display_channel.cpp	174;"	d	file:
MAX_VIDEO_FRAMES	client/display_channel.cpp	172;"	d	file:
MAX_WIDTH	server/tests/test_display_base.h	78;"	d
MAXevol	spice-common/common/quic.c	51;"	d	file:
MAXwminext	spice-common/common/quic.c	66;"	d	file:
MELCSTATES	spice-common/common/quic.c	538;"	d	file:
MEMCLEAR	spice-common/common/quic_config.h	29;"	d
MEM_SLOT_GROUP_ID	server/tests/test_display_base.c	20;"	d	file:
MENU_ITEM_STATE_CHECKED	client/menu.h	/^        MENU_ITEM_STATE_CHECKED = 1 << 0,$/;"	e	enum:Menu::ItemState
MENU_ITEM_STATE_DIM	client/menu.h	/^        MENU_ITEM_STATE_DIM     = 1 << 1,$/;"	e	enum:Menu::ItemState
MENU_ITEM_TYPE_COMMAND	client/menu.h	/^        MENU_ITEM_TYPE_COMMAND,$/;"	e	enum:Menu::ItemType
MENU_ITEM_TYPE_INVALID	client/menu.h	/^        MENU_ITEM_TYPE_INVALID,$/;"	e	enum:Menu::ItemType
MENU_ITEM_TYPE_MENU	client/menu.h	/^        MENU_ITEM_TYPE_MENU,$/;"	e	enum:Menu::ItemType
MENU_ITEM_TYPE_SEPARATOR	client/menu.h	/^        MENU_ITEM_TYPE_SEPARATOR,$/;"	e	enum:Menu::ItemType
MESSAGE_BOX_HEIGHT	client/gui/gui.cpp	64;"	d	file:
MESSAGE_BOX_WIDTH	client/gui/gui.cpp	63;"	d	file:
MIGRATE_DATA_DISPLAY_MAX_CACHE_CLIENTS	server/migration_protocol.h	126;"	d
MIGRATE_TIMEOUT	server/reds-private.h	8;"	d
MIGRATION_NOTIFY_SPICE_KEY	server/reds.c	86;"	d	file:
MIGRATION_PRIMARY_SURFACE_TIMEOUT	client/display_channel.cpp	571;"	d	file:
MIN	server/tests/test_vdagent.c	20;"	d	file:
MIN	spice-common/spice-protocol/spice/macros.h	115;"	d
MIN	spice-common/spice-protocol/spice/macros.h	116;"	d
MIN_COORDINATE	spice-common/common/lines.c	80;"	d	file:
MIN_DIMENSION_TO_QUIC	server/red_worker.c	6614;"	d	file:
MIN_DISPLAY_PIXMAP_CACHE	client/red_client.cpp	869;"	d	file:
MIN_FILE_SIZE	server/glz_encoder.c	193;"	d	file:
MIN_FILE_SIZE	spice-common/common/lz.c	427;"	d	file:
MIN_GLZ_SIZE_FOR_ZLIB	server/red_worker.c	149;"	d	file:
MIN_GLZ_WINDOW_SIZE	client/red_client.cpp	874;"	d	file:
MIN_MEM_FOR_OTHERS	client/red_client.cpp	871;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	101;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	39;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	56;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	573;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	75;"	d	file:
MIN_REF_ENCODE_SIZE	server/glz_encode_tmpl.c	93;"	d	file:
MIN_SIZE_TO_COMPRESS	server/red_worker.c	6613;"	d	file:
MINevol	spice-common/common/quic.c	50;"	d	file:
MINwminext	spice-common/common/quic.c	65;"	d	file:
MINwmistart	spice-common/common/quic.c	55;"	d	file:
MIOUTCODES	spice-common/common/lines.c	196;"	d	file:
MIPOLYRELOADLEFT	spice-common/common/lines.c	328;"	d	file:
MIPOLYRELOADRIGHT	spice-common/common/lines.c	340;"	d	file:
MIPOLYSTEPLEFT	spice-common/common/lines.c	352;"	d	file:
MIPOLYSTEPRIGHT	spice-common/common/lines.c	360;"	d	file:
MISC_X_CFLAGS	Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_CFLAGS	client/Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_CFLAGS	docs/Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_CFLAGS	docs/manual/Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_CFLAGS	server/Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_CFLAGS	server/tests/Makefile	/^MISC_X_CFLAGS = $/;"	m
MISC_X_LIBS	Makefile	/^MISC_X_LIBS = $/;"	m
MISC_X_LIBS	client/Makefile	/^MISC_X_LIBS = $/;"	m
MISC_X_LIBS	docs/Makefile	/^MISC_X_LIBS = $/;"	m
MISC_X_LIBS	docs/manual/Makefile	/^MISC_X_LIBS = $/;"	m
MISC_X_LIBS	server/Makefile	/^MISC_X_LIBS = $/;"	m
MISC_X_LIBS	server/tests/Makefile	/^MISC_X_LIBS = $/;"	m
MI_OUTPUT_POINT	spice-common/common/lines.c	1436;"	d	file:
MJPEG_ADJUST_FPS_TIMEOUT	server/mjpeg_encoder.c	55;"	d	file:
MJPEG_AVERAGE_SIZE_WINDOW	server/mjpeg_encoder.c	39;"	d	file:
MJPEG_BIT_RATE_EVAL_MIN_NUM_FRAMES	server/mjpeg_encoder.c	41;"	d	file:
MJPEG_CLIENT_POSITIVE_REPORT_STRICT_TIMEOUT	server/mjpeg_encoder.c	53;"	d	file:
MJPEG_CLIENT_POSITIVE_REPORT_TIMEOUT	server/mjpeg_encoder.c	52;"	d	file:
MJPEG_ENCODER_FRAME_DROP	server/mjpeg_encoder.h	/^    MJPEG_ENCODER_FRAME_DROP,$/;"	e	enum:__anon198
MJPEG_ENCODER_FRAME_ENCODE_START	server/mjpeg_encoder.h	/^    MJPEG_ENCODER_FRAME_ENCODE_START,$/;"	e	enum:__anon198
MJPEG_ENCODER_FRAME_UNSUPPORTED	server/mjpeg_encoder.h	/^    MJPEG_ENCODER_FRAME_UNSUPPORTED = -1,$/;"	e	enum:__anon198
MJPEG_IMPROVE_QUALITY_FPS_PERMISSIVE_TH	server/mjpeg_encoder.c	37;"	d	file:
MJPEG_IMPROVE_QUALITY_FPS_STRICT_TH	server/mjpeg_encoder.c	36;"	d	file:
MJPEG_LEGACY_STATIC_QUALITY_ID	server/mjpeg_encoder.c	34;"	d	file:
MJPEG_LOW_FPS_RATE_TH	server/mjpeg_encoder.c	42;"	d	file:
MJPEG_MAX_CLIENT_PLAYBACK_DELAY	server/mjpeg_encoder.c	61;"	d	file:
MJPEG_MAX_FPS	server/mjpeg_encoder.c	28;"	d	file:
MJPEG_MIN_FPS	server/mjpeg_encoder.c	29;"	d	file:
MJPEG_PLAYBACK_LATENCY_DECREASE_FACTOR	server/mjpeg_encoder.c	1111;"	d	file:
MJPEG_QUALITY_EVAL_REASON_RATE_CHANGE	server/mjpeg_encoder.c	/^    MJPEG_QUALITY_EVAL_REASON_RATE_CHANGE,$/;"	e	enum:__anon195	file:
MJPEG_QUALITY_EVAL_REASON_SIZE_CHANGE	server/mjpeg_encoder.c	/^    MJPEG_QUALITY_EVAL_REASON_SIZE_CHANGE,$/;"	e	enum:__anon195	file:
MJPEG_QUALITY_EVAL_TYPE_DOWNGRADE	server/mjpeg_encoder.c	/^    MJPEG_QUALITY_EVAL_TYPE_DOWNGRADE,$/;"	e	enum:__anon194	file:
MJPEG_QUALITY_EVAL_TYPE_SET	server/mjpeg_encoder.c	/^    MJPEG_QUALITY_EVAL_TYPE_SET,$/;"	e	enum:__anon194	file:
MJPEG_QUALITY_EVAL_TYPE_UPGRADE	server/mjpeg_encoder.c	/^    MJPEG_QUALITY_EVAL_TYPE_UPGRADE,$/;"	e	enum:__anon194	file:
MJPEG_QUALITY_SAMPLE_NUM	server/mjpeg_encoder.c	31;"	d	file:
MJPEG_SERVER_STATUS_DOWNGRADE_DROP_FACTOR_TH	server/mjpeg_encoder.c	45;"	d	file:
MJPEG_SERVER_STATUS_EVAL_FPS_INTERVAL	server/mjpeg_encoder.c	44;"	d	file:
MJPEG_VIDEO_DELAY_TH	server/mjpeg_encoder.c	1113;"	d	file:
MJPEG_VIDEO_VS_AUDIO_LATENCY_FACTOR	server/mjpeg_encoder.c	1112;"	d	file:
MJPEG_WARMUP_TIME	server/mjpeg_encoder.c	70;"	d	file:
MJpegDecoder	client/mjpeg_decoder.cpp	/^MJpegDecoder::MJpegDecoder(int width, int height,$/;"	f	class:MJpegDecoder
MJpegDecoder	client/mjpeg_decoder.h	/^class MJpegDecoder {$/;"	c
MJpegEncoder	server/mjpeg_encoder.c	/^struct MJpegEncoder {$/;"	s	file:
MJpegEncoder	server/mjpeg_encoder.h	/^typedef struct MJpegEncoder MJpegEncoder;$/;"	t	typeref:struct:MJpegEncoder
MJpegEncoderBitRateInfo	server/mjpeg_encoder.c	/^typedef struct MJpegEncoderBitRateInfo {$/;"	s	file:
MJpegEncoderBitRateInfo	server/mjpeg_encoder.c	/^} MJpegEncoderBitRateInfo;$/;"	t	typeref:struct:MJpegEncoderBitRateInfo	file:
MJpegEncoderClientState	server/mjpeg_encoder.c	/^typedef struct MJpegEncoderClientState {$/;"	s	file:
MJpegEncoderClientState	server/mjpeg_encoder.c	/^} MJpegEncoderClientState;$/;"	t	typeref:struct:MJpegEncoderClientState	file:
MJpegEncoderQualityEval	server/mjpeg_encoder.c	/^typedef struct MJpegEncoderQualityEval {$/;"	s	file:
MJpegEncoderQualityEval	server/mjpeg_encoder.c	/^} MJpegEncoderQualityEval;$/;"	t	typeref:struct:MJpegEncoderQualityEval	file:
MJpegEncoderRateControl	server/mjpeg_encoder.c	/^typedef struct MJpegEncoderRateControl {$/;"	s	file:
MJpegEncoderRateControl	server/mjpeg_encoder.c	/^} MJpegEncoderRateControl;$/;"	t	typeref:struct:MJpegEncoderRateControl	file:
MJpegEncoderRateControlCbs	server/mjpeg_encoder.h	/^typedef struct MJpegEncoderRateControlCbs {$/;"	s
MJpegEncoderRateControlCbs	server/mjpeg_encoder.h	/^} MJpegEncoderRateControlCbs;$/;"	t	typeref:struct:MJpegEncoderRateControlCbs
MJpegEncoderServerState	server/mjpeg_encoder.c	/^typedef struct MJpegEncoderServerState {$/;"	s	file:
MJpegEncoderServerState	server/mjpeg_encoder.c	/^} MJpegEncoderServerState;$/;"	t	typeref:struct:MJpegEncoderServerState	file:
MJpegEncoderStats	server/mjpeg_encoder.h	/^typedef struct MJpegEncoderStats {$/;"	s
MJpegEncoderStats	server/mjpeg_encoder.h	/^} MJpegEncoderStats;$/;"	t	typeref:struct:MJpegEncoderStats
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	client/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	docs/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	docs/manual/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	server/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	server/tests/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	spice-common/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	spice-common/common/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	spice-common/python_modules/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	spice-common/spice-protocol/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	spice-common/spice-protocol/spice/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MM_TIMER_GRANULARITY_MS	server/reds-private.h	9;"	d
MM_TIME_DELTA	server/reds-private.h	10;"	d
MODAL_LOOP_DEFAULT_TIMEOUT	client/windows/platform.cpp	/^static const int MODAL_LOOP_DEFAULT_TIMEOUT = 100;$/;"	v	file:
MODAL_LOOP_TIMER_ID	client/windows/platform.cpp	/^static const unsigned long MODAL_LOOP_TIMER_ID = 1;$/;"	v	file:
MORE_X	spice-common/common/glc.c	272;"	d	file:
MOUSE_GRAB_RETRIES	client/x11/red_window.cpp	58;"	d	file:
MSG_NOSIGNAL	client/windows/platform_utils.h	91;"	d
MUTEX_INIT	spice-common/common/mutex.h	29;"	d
MUTEX_LOCK	spice-common/common/mutex.h	30;"	d
MUTEX_UNLOCK	spice-common/common/mutex.h	31;"	d
MainChannel	server/main_channel.h	/^typedef struct MainChannel {$/;"	s
MainChannel	server/main_channel.h	/^} MainChannel;$/;"	t	typeref:struct:MainChannel
MainChannelClient	server/main_channel.c	/^struct MainChannelClient {$/;"	s	file:
MainChannelClient	server/red_channel.h	/^typedef struct MainChannelClient MainChannelClient;$/;"	t	typeref:struct:MainChannelClient
MainChannelLoop	client/red_client.cpp	/^    MainChannelLoop(RedClient& client): MessageHandlerImp<RedClient, SPICE_CHANNEL_MAIN>(client) {}$/;"	f	class:MainChannelLoop
MainChannelLoop	client/red_client.cpp	/^class MainChannelLoop: public MessageHandlerImp<RedClient, SPICE_CHANNEL_MAIN> {$/;"	c	file:
MainDispatcher	server/main_dispatcher.c	/^} MainDispatcher;$/;"	t	typeref:struct:__anon142	file:
MainDispatcherChannelEventMessage	server/main_dispatcher.c	/^typedef struct MainDispatcherChannelEventMessage {$/;"	s	file:
MainDispatcherChannelEventMessage	server/main_dispatcher.c	/^} MainDispatcherChannelEventMessage;$/;"	t	typeref:struct:MainDispatcherChannelEventMessage	file:
MainDispatcherClientDisconnectMessage	server/main_dispatcher.c	/^typedef struct MainDispatcherClientDisconnectMessage {$/;"	s	file:
MainDispatcherClientDisconnectMessage	server/main_dispatcher.c	/^} MainDispatcherClientDisconnectMessage;$/;"	t	typeref:struct:MainDispatcherClientDisconnectMessage	file:
MainDispatcherMigrateSeamlessDstCompleteMessage	server/main_dispatcher.c	/^typedef struct MainDispatcherMigrateSeamlessDstCompleteMessage {$/;"	s	file:
MainDispatcherMigrateSeamlessDstCompleteMessage	server/main_dispatcher.c	/^} MainDispatcherMigrateSeamlessDstCompleteMessage;$/;"	t	typeref:struct:MainDispatcherMigrateSeamlessDstCompleteMessage	file:
MainDispatcherMmTimeLatencyMessage	server/main_dispatcher.c	/^typedef struct MainDispatcherMmTimeLatencyMessage {$/;"	s	file:
MainDispatcherMmTimeLatencyMessage	server/main_dispatcher.c	/^} MainDispatcherMmTimeLatencyMessage;$/;"	t	typeref:struct:MainDispatcherMmTimeLatencyMessage	file:
MainMigrateData	server/reds.h	/^typedef struct MainMigrateData MainMigrateData;$/;"	t	typeref:struct:MainMigrateData
MainMouseModeItemInfo	server/main_channel.c	/^typedef struct MainMouseModeItemInfo {$/;"	s	file:
MainMouseModeItemInfo	server/main_channel.c	/^} MainMouseModeItemInfo;$/;"	t	typeref:struct:MainMouseModeItemInfo	file:
MarshallerBuffer	spice-common/common/marshaller.c	/^struct MarshallerBuffer {$/;"	s	file:
MarshallerBuffer	spice-common/common/marshaller.c	/^typedef struct MarshallerBuffer MarshallerBuffer;$/;"	t	typeref:struct:MarshallerBuffer	file:
MarshallerItem	spice-common/common/marshaller.c	/^} MarshallerItem;$/;"	t	typeref:struct:__anon18	file:
MarshallerRef	spice-common/common/marshaller.c	/^} MarshallerRef;$/;"	t	typeref:struct:__anon19	file:
MarshallingSource	spice-common/python_modules/marshal.py	/^class MarshallingSource:$/;"	c
MemSlot	server/red_memslots.h	/^typedef struct MemSlot {$/;"	s
MemSlot	server/red_memslots.h	/^} MemSlot;$/;"	t	typeref:struct:MemSlot
Member	spice-common/python_modules/ptypes.py	/^class Member(Containee):$/;"	c
MemberItemInfo	spice-common/python_modules/demarshal.py	/^class MemberItemInfo(ItemInfo):$/;"	c
Menu	client/menu.cpp	/^Menu::Menu(CommandTarget& target, const std::string& name, int id)$/;"	f	class:Menu
Menu	client/menu.h	/^class Menu {$/;"	c
MenuCommand	client/menu.h	/^        MenuCommand(const std::string& name, int cmd_id, int state)$/;"	f	class:Menu::MenuCommand
MenuCommand	client/menu.h	/^    class MenuCommand {$/;"	c	class:Menu
MenuItem	client/menu.h	/^    struct MenuItem {$/;"	s	class:Menu
Message	client/red_channel.h	/^    Message(uint32_t type)$/;"	f	class:Message
Message	client/red_channel.h	/^class Message: public RedChannel::OutMessage, public RedPeer::OutMessage {$/;"	c
MessageDialog	client/gui/gui.cpp	/^MessageDialog::MessageDialog(GUI& gui)$/;"	f	class:MessageDialog
MessageDialog	client/gui/gui.cpp	/^class MessageDialog : public GUI::Dialog {$/;"	c	file:
MessageFilterProc	client/windows/red_window.cpp	/^static LRESULT CALLBACK MessageFilterProc(int nCode, WPARAM wParam, LPARAM lParam)$/;"	f	file:
MessageHandler	client/red_channel.h	/^    MessageHandler() {}$/;"	f	class:RedChannel::MessageHandler
MessageHandler	client/red_channel.h	/^class RedChannel::MessageHandler {$/;"	c	class:RedChannel
MessageHandlerImp	client/red_channel.h	/^MessageHandlerImp<HandlerClass, channel_id>::MessageHandlerImp(HandlerClass& obj)$/;"	f	class:MessageHandlerImp
MessageHandlerImp	client/red_channel.h	/^class MessageHandlerImp: public RedChannel::MessageHandler {$/;"	c
MessageType	client/gui/gui.h	/^    enum MessageType {$/;"	g	class:GUI
MessageType	spice-common/python_modules/ptypes.py	/^class MessageType(ContainerType):$/;"	c
MigChannel	client/red_client.h	/^    MigChannel(uint32_t type, uint32_t id, const ChannelCaps& common_caps, const ChannelCaps& caps)$/;"	f	class:MigChannel
MigChannel	client/red_client.h	/^class MigChannel: public RedChannelBase {$/;"	c
MigChannels	client/red_client.h	/^    typedef std::list<MigChannel*> MigChannels;$/;"	t	class:Migrate
MigPrimarySurfaceTimer	client/display_channel.cpp	/^class MigPrimarySurfaceTimer: public Timer {$/;"	c	file:
Migrate	client/red_client.cpp	/^Migrate::Migrate(RedClient& client)$/;"	f	class:Migrate
Migrate	client/red_client.h	/^class Migrate {$/;"	c
MigrateDisplaySurfaceLossless	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) MigrateDisplaySurfaceLossless {$/;"	s
MigrateDisplaySurfaceLossless	server/migration_protocol.h	/^} MigrateDisplaySurfaceLossless;$/;"	t	typeref:struct:MigrateDisplaySurfaceLossless
MigrateDisplaySurfaceLossy	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) MigrateDisplaySurfaceLossy {$/;"	s
MigrateDisplaySurfaceLossy	server/migration_protocol.h	/^} MigrateDisplaySurfaceLossy;$/;"	t	typeref:struct:MigrateDisplaySurfaceLossy
MigrateDisplaySurfacesAtClientLossless	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) MigrateDisplaySurfacesAtClientLossless {$/;"	s
MigrateDisplaySurfacesAtClientLossless	server/migration_protocol.h	/^} MigrateDisplaySurfacesAtClientLossless;$/;"	t	typeref:struct:MigrateDisplaySurfacesAtClientLossless
MigrateDisplaySurfacesAtClientLossy	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) MigrateDisplaySurfacesAtClientLossy {$/;"	s
MigrateDisplaySurfacesAtClientLossy	server/migration_protocol.h	/^} MigrateDisplaySurfacesAtClientLossy;$/;"	t	typeref:struct:MigrateDisplaySurfacesAtClientLossy
MigrateEndEvent	client/red_client.h	/^class MigrateEndEvent: public Event {$/;"	c
MigrationConnectTargetEvent	client/red_channel.h	/^class MigrationConnectTargetEvent: public Event {$/;"	c
MigrationDisconnectSrcEvent	client/red_channel.h	/^class MigrationDisconnectSrcEvent: public Event {$/;"	c
ModeCompare	client/x11/platform.cpp	/^class ModeCompare {$/;"	c	file:
ModeInfo	client/x11/platform.cpp	/^    ModeInfo(int int_index, XRRModeInfo* in_info) : index (int_index), info (in_info) {}$/;"	f	class:ModeInfo
ModeInfo	client/x11/platform.cpp	/^class ModeInfo {$/;"	c	file:
ModifierKey	client/application.cpp	/^struct ModifierKey {$/;"	s	file:
Monitor	client/monitor.cpp	/^Monitor::Monitor(int id)$/;"	f	class:Monitor
Monitor	client/monitor.h	/^class Monitor {$/;"	c
MonitorInfo	client/application.h	/^struct MonitorInfo {$/;"	s
MonitorMode	server/reds-private.h	/^typedef struct MonitorMode {$/;"	s
MonitorMode	server/reds-private.h	/^} MonitorMode;$/;"	t	typeref:struct:MonitorMode
MonitorsConfig	server/red_worker.c	/^typedef struct MonitorsConfig {$/;"	s	file:
MonitorsConfig	server/red_worker.c	/^} MonitorsConfig;$/;"	t	typeref:struct:MonitorsConfig	file:
MonitorsConfigItem	server/red_worker.c	/^typedef struct MonitorsConfigItem {$/;"	s	file:
MonitorsConfigItem	server/red_worker.c	/^} MonitorsConfigItem;$/;"	t	typeref:struct:MonitorsConfigItem	file:
MonitorsList	client/platform.h	/^typedef std::list<Monitor*> MonitorsList;$/;"	t
MonitorsQuery	client/application.h	/^    MonitorsQuery() {}$/;"	f	class:MonitorsQuery
MonitorsQuery	client/application.h	/^class MonitorsQuery: public SyncEvent {$/;"	c
MonoCursor	client/cursor_channel.cpp	/^MonoCursor::MonoCursor(const SpiceCursorHeader& header, const uint8_t* data)$/;"	f	class:MonoCursor
MonoCursor	client/cursor_channel.cpp	/^class MonoCursor: public NaitivCursor {$/;"	c	file:
MotionMessage	client/inputs_channel.cpp	/^MotionMessage::MotionMessage(InputsChannel& channel)$/;"	f	class:MotionMessage
MotionMessage	client/inputs_channel.cpp	/^class MotionMessage: public RedChannel::OutMessage, public RedPeer::OutMessage {$/;"	c	file:
MouseHandler	client/inputs_handler.h	/^class MouseHandler {$/;"	c
MouseModeEvent	client/red_client.cpp	/^    MouseModeEvent(RedClient& client)$/;"	f	class:MouseModeEvent
MouseModeEvent	client/red_client.cpp	/^class MouseModeEvent: public Event {$/;"	c	file:
MouseModePipeItem	server/main_channel.c	/^typedef struct MouseModePipeItem {$/;"	s	file:
MouseModePipeItem	server/main_channel.c	/^} MouseModePipeItem;$/;"	t	typeref:struct:MouseModePipeItem	file:
MsgItem	server/smartcard.c	/^typedef struct MsgItem {$/;"	s	file:
MsgItem	server/smartcard.c	/^} MsgItem;$/;"	t	typeref:struct:MsgItem	file:
MultiMediaTimePipeItem	server/main_channel.c	/^typedef struct MultiMediaTimePipeItem {$/;"	s	file:
MultiMediaTimePipeItem	server/main_channel.c	/^} MultiMediaTimePipeItem;$/;"	t	typeref:struct:MultiMediaTimePipeItem	file:
MultyMonScreen	client/x11/platform.cpp	/^MultyMonScreen::MultyMonScreen(Display* display, int screen, int& next_mon_id)$/;"	f	class:MultyMonScreen
MultyMonScreen	client/x11/platform.cpp	/^class MultyMonScreen: public XScreen {$/;"	c	file:
Mutex	client/threads.cpp	/^Mutex::Mutex(Type type)$/;"	f	class:Mutex
Mutex	client/threads.h	/^class Mutex {$/;"	c
MyListItem	client/gui/gui.cpp	/^        MyListItem (const CEGUI::String& text)$/;"	f	class:SampleTabFactory::MyListItem
MyListItem	client/gui/gui.cpp	/^    class MyListItem : public CEGUI::ListboxTextItem {$/;"	c	class:SampleTabFactory	file:
NARROW_CLIENT_ACK_WINDOW	server/red_worker.c	405;"	d	file:
NATIVE_CAPTION_STYLE	client/windows/red_window.cpp	33;"	d	file:
NET_TEST_BYTES	server/main_channel.c	54;"	d	file:
NET_TEST_STAGE_COMPLETE	server/main_channel.c	/^    NET_TEST_STAGE_COMPLETE,$/;"	e	enum:NetTestStage	file:
NET_TEST_STAGE_INVALID	server/main_channel.c	/^    NET_TEST_STAGE_INVALID,$/;"	e	enum:NetTestStage	file:
NET_TEST_STAGE_LATENCY	server/main_channel.c	/^    NET_TEST_STAGE_LATENCY,$/;"	e	enum:NetTestStage	file:
NET_TEST_STAGE_RATE	server/main_channel.c	/^    NET_TEST_STAGE_RATE,$/;"	e	enum:NetTestStage	file:
NET_TEST_STAGE_WARMUP	server/main_channel.c	/^    NET_TEST_STAGE_WARMUP,$/;"	e	enum:NetTestStage	file:
NET_TEST_WARMUP_BYTES	server/main_channel.c	53;"	d	file:
NEXT_LINE	spice-common/common/quic.c	1229;"	d	file:
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	client/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	docs/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	docs/manual/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	server/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	server/tests/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	spice-common/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	spice-common/common/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	spice-common/python_modules/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NMEDIT	client/Makefile	/^NMEDIT = $/;"	m
NMEDIT	docs/Makefile	/^NMEDIT = $/;"	m
NMEDIT	docs/manual/Makefile	/^NMEDIT = $/;"	m
NMEDIT	server/Makefile	/^NMEDIT = $/;"	m
NMEDIT	server/tests/Makefile	/^NMEDIT = $/;"	m
NMEDIT	spice-common/Makefile	/^NMEDIT = $/;"	m
NMEDIT	spice-common/common/Makefile	/^NMEDIT = $/;"	m
NMEDIT	spice-common/python_modules/Makefile	/^NMEDIT = $/;"	m
NORMAL	client/threads.h	/^        NORMAL,$/;"	e	enum:Mutex::Type
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	client/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	docs/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	docs/manual/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	server/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	server/tests/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	spice-common/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	spice-common/common/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	spice-common/python_modules/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	spice-common/spice-protocol/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	spice-common/spice-protocol/spice/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	client/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	docs/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	docs/manual/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	server/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	server/tests/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	spice-common/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	spice-common/common/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	spice-common/python_modules/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	spice-common/spice-protocol/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	spice-common/spice-protocol/spice/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTIFY_CURSOR_BATCH	server/tests/test_display_base.c	23;"	d	file:
NOTIFY_DISPLAY_BATCH	server/tests/test_display_base.c	22;"	d	file:
NOT_CONTRAST_PIXELS_WEIGHT	server/red_bitmap_utils.h	161;"	d
NOT_CONTRAST_PIXELS_WEIGHT	server/red_bitmap_utils.h	44;"	d
NOT_IMPLEMENTED	server/tests/basic_event_loop.c	21;"	d	file:
NO_ARGUMENT	client/cmd_line_parser.h	/^        NO_ARGUMENT,$/;"	e	enum:CmdLineParser::OptionType
NO_INDIRECT_LDFLAGS	Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NO_INDIRECT_LDFLAGS	client/Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NO_INDIRECT_LDFLAGS	docs/Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NO_INDIRECT_LDFLAGS	docs/manual/Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NO_INDIRECT_LDFLAGS	server/Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NO_INDIRECT_LDFLAGS	server/tests/Makefile	/^NO_INDIRECT_LDFLAGS = -Wl,--no-copy-dt-needed-entries$/;"	m
NULL	Makefile	/^NULL = $/;"	m
NULL	client/Makefile	/^NULL = $/;"	m
NULL	docs/manual/Makefile	/^NULL = $/;"	m
NULL	server/Makefile	/^NULL = $/;"	m
NULL	server/tests/Makefile	/^NULL = $/;"	m
NULL	spice-common/Makefile	/^NULL = $/;"	m
NULL	spice-common/common/Makefile	/^NULL = $/;"	m
NULL	spice-common/python_modules/Makefile	/^NULL = $/;"	m
NULL	spice-common/spice-protocol/Makefile	/^NULL = $/;"	m
NULL	spice-common/spice-protocol/spice/Makefile	/^NULL = $/;"	m
NULL_IMAGE_SEG_ID	server/glz_encoder_dictionary_protected.h	56;"	d
NUM_COMMANDS	server/tests/test_display_streaming.c	44;"	d	file:
NUM_CURSORS	server/red_worker.c	941;"	d	file:
NUM_DRAWABLES	server/red_worker.c	940;"	d	file:
NUM_LOCK_MODIFIER	client/platform.h	/^        NUM_LOCK_MODIFIER = (1 << NUM_LOCK_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon105
NUM_LOCK_MODIFIER_SHIFT	client/platform.h	/^        NUM_LOCK_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon105
NUM_LOCK_SCAN_CODE	server/inputs_channel.c	117;"	d	file:
NUM_SAMPLES_MESSAGES	client/record_channel.cpp	26;"	d	file:
NUM_STREAMS	server/red_worker.c	565;"	d	file:
NUM_SURFACES	server/red_worker.c	670;"	d	file:
NUM_TRACE_ITEMS	server/red_worker.c	937;"	d	file:
N_STATIC_ITEMS	spice-common/common/marshaller.c	64;"	d	file:
NaitivCursor	client/cursor_channel.cpp	/^class NaitivCursor: public CursorOpaque {$/;"	c	file:
NamePipeItem	server/main_channel.c	/^typedef struct NamePipeItem {$/;"	s	file:
NamePipeItem	server/main_channel.c	/^} NamePipeItem;$/;"	t	typeref:struct:NamePipeItem	file:
NamedPipe	client/platform.h	/^class NamedPipe {$/;"	c
NetTestStage	server/main_channel.c	/^enum NetTestStage {$/;"	g	file:
NewCacheItem	server/red_worker.c	/^struct NewCacheItem {$/;"	s	file:
NewCacheItem	server/red_worker.c	/^typedef struct NewCacheItem NewCacheItem;$/;"	t	typeref:struct:NewCacheItem	file:
NextBand	spice-common/common/lines.c	3491;"	d	file:
NoBlock	spice-common/python_modules/codegen.py	/^    class NoBlock:$/;"	c	class:CodeWriter
NotifyPipeItem	server/main_channel.c	/^typedef struct NotifyPipeItem {$/;"	s	file:
NotifyPipeItem	server/main_channel.c	/^} NotifyPipeItem;$/;"	t	typeref:struct:NotifyPipeItem	file:
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	client/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	docs/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	docs/manual/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	server/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	server/tests/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	spice-common/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	spice-common/common/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	spice-common/python_modules/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	client/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	docs/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	docs/manual/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	server/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	server/tests/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	spice-common/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	spice-common/common/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	spice-common/python_modules/Makefile	/^OBJEXT = o$/;"	m
OCTANT1	spice-common/common/lines.c	140;"	d	file:
OCTANT2	spice-common/common/lines.c	141;"	d	file:
OCTANT3	spice-common/common/lines.c	142;"	d	file:
OCTANT4	spice-common/common/lines.c	143;"	d	file:
OCTANT5	spice-common/common/lines.c	144;"	d	file:
OCTANT6	spice-common/common/lines.c	145;"	d	file:
OCTANT7	spice-common/common/lines.c	146;"	d	file:
OCTANT8	spice-common/common/lines.c	147;"	d	file:
OGLCTX_TYPE_PBUF	spice-common/common/ogl_ctx.c	/^    OGLCTX_TYPE_PBUF,$/;"	e	enum:__anon26	file:
OGLCTX_TYPE_PIXMAP	spice-common/common/ogl_ctx.c	/^    OGLCTX_TYPE_PIXMAP,$/;"	e	enum:__anon26	file:
OGLCtx	spice-common/common/ogl_ctx.c	/^struct OGLCtx {$/;"	s	file:
OGLCtx	spice-common/common/ogl_ctx.h	/^typedef struct OGLCtx OGLCtx;$/;"	t	typeref:struct:OGLCtx
OGLPixmapCtx	spice-common/common/ogl_ctx.c	/^typedef struct OGLPixmapCtx {$/;"	s	file:
OGLPixmapCtx	spice-common/common/ogl_ctx.c	/^} OGLPixmapCtx;$/;"	t	typeref:struct:OGLPixmapCtx	file:
ONE_BYTE	spice-common/common/quic.c	816;"	d	file:
ONE_BYTE	spice-common/common/quic_tmpl.c	23;"	d	file:
ON_PANIC	client/debug.h	30;"	d
OPTIONAL_ARGUMENT	client/cmd_line_parser.h	/^        OPTIONAL_ARGUMENT,$/;"	e	enum:CmdLineParser::OptionType
OPTION_DONE	client/cmd_line_parser.h	/^        OPTION_DONE = 0,$/;"	e	enum:CmdLineParser::__anon124
OPTION_ERROR	client/cmd_line_parser.h	/^        OPTION_ERROR = -1,$/;"	e	enum:CmdLineParser::__anon124
OPTION_FIRST_AVAILABLE	client/cmd_line_parser.h	/^        OPTION_FIRST_AVAILABLE,$/;"	e	enum:CmdLineParser::__anon124
OPTION_HELP	client/cmd_line_parser.h	/^        OPTION_HELP = 256,$/;"	e	enum:CmdLineParser::__anon124
OPUS_CFLAGS	spice-common/Makefile	/^OPUS_CFLAGS = $/;"	m
OPUS_CFLAGS	spice-common/common/Makefile	/^OPUS_CFLAGS = $/;"	m
OPUS_CFLAGS	spice-common/python_modules/Makefile	/^OPUS_CFLAGS = $/;"	m
OPUS_LIBS	spice-common/Makefile	/^OPUS_LIBS = $/;"	m
OPUS_LIBS	spice-common/common/Makefile	/^OPUS_LIBS = $/;"	m
OPUS_LIBS	spice-common/python_modules/Makefile	/^OPUS_LIBS = $/;"	m
OP_AND	client/red_drawable.h	/^        OP_AND,$/;"	e	enum:RedDrawable::CombineOP
OP_COPY	client/red_drawable.h	/^        OP_COPY,$/;"	e	enum:RedDrawable::CombineOP
OP_XOR	client/red_drawable.h	/^        OP_XOR,$/;"	e	enum:RedDrawable::CombineOP
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL	client/Makefile	/^OTOOL = $/;"	m
OTOOL	docs/Makefile	/^OTOOL = $/;"	m
OTOOL	docs/manual/Makefile	/^OTOOL = $/;"	m
OTOOL	server/Makefile	/^OTOOL = $/;"	m
OTOOL	server/tests/Makefile	/^OTOOL = $/;"	m
OTOOL	spice-common/Makefile	/^OTOOL = $/;"	m
OTOOL	spice-common/common/Makefile	/^OTOOL = $/;"	m
OTOOL	spice-common/python_modules/Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OTOOL64	client/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	docs/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	docs/manual/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	server/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	server/tests/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	spice-common/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	spice-common/common/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	spice-common/python_modules/Makefile	/^OTOOL64 = $/;"	m
OUTCODES	spice-common/common/lines.c	190;"	d	file:
OUTGOING_BLOCKED	server/inputs_channel.c	205;"	d	file:
OUTGOING_FAILED	server/inputs_channel.c	204;"	d	file:
OUTGOING_OK	server/inputs_channel.c	203;"	d	file:
OUTPUT_BUF_SIZE	server/mjpeg_encoder.c	332;"	d	file:
OUTPUT_BUF_SIZE_H264	server/red_worker.c	8756;"	d	file:
OUT_ABOVE	spice-common/common/lines.c	187;"	d	file:
OUT_BELOW	spice-common/common/lines.c	188;"	d	file:
OUT_LEFT	spice-common/common/lines.c	185;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	126;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	130;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	144;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	155;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	167;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	331;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	46;"	d	file:
OUT_PIXEL	client/glz_decode_tmpl.c	50;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	158;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	162;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	174;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	178;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	194;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	200;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	212;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	337;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	75;"	d	file:
OUT_PIXEL	spice-common/common/lz_decompress_tmpl.c	79;"	d	file:
OUT_RIGHT	spice-common/common/lines.c	186;"	d	file:
OVERLAY_FRAME	server/tests/test_display_streaming.c	46;"	d	file:
OVERLAY_HEIGHT	server/tests/test_display_streaming.c	48;"	d	file:
OVERLAY_WIDTH	server/tests/test_display_streaming.c	47;"	d	file:
OldRedMigrationBegin	client/red_client.cpp	/^typedef struct __attribute__ ((__packed__)) OldRedMigrationBegin {$/;"	s	file:
OldRedMigrationBegin	client/red_client.cpp	/^} OldRedMigrationBegin;$/;"	t	typeref:struct:OldRedMigrationBegin	file:
OneOrMore	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
Option	client/cmd_line_parser.cpp	/^CmdLineParser::Option::Option(int in_id, const std::string& in_name, char in_short_name,$/;"	f	class:CmdLineParser::Option
Option	client/cmd_line_parser.h	/^    class Option {$/;"	c	class:CmdLineParser
OptionParser	spice-common/spice_codegen.py	/^from optparse import OptionParser$/;"	i
OptionType	client/cmd_line_parser.h	/^    enum OptionType {$/;"	g	class:CmdLineParser
Optional	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
Options	client/cmd_line_parser.h	/^    typedef std::list<Option*> Options;$/;"	t	class:CmdLineParser
OutMessage	client/red_channel.h	/^    OutMessage() {}$/;"	f	class:RedChannel::OutMessage
OutMessage	client/red_channel.h	/^class RedChannel::OutMessage {$/;"	c	class:RedChannel
OutMessage	client/red_peer.cpp	/^RedPeer::OutMessage::OutMessage(uint32_t type)$/;"	f	class:RedPeer::OutMessage
OutMessage	client/red_peer.h	/^class RedPeer::OutMessage {$/;"	c	class:RedPeer
OutgoingHandler	server/red_channel.h	/^typedef struct OutgoingHandler {$/;"	s
OutgoingHandler	server/red_channel.h	/^} OutgoingHandler;$/;"	t	typeref:struct:OutgoingHandler
OutgoingHandlerInterface	server/red_channel.h	/^typedef struct OutgoingHandlerInterface {$/;"	s
OutgoingHandlerInterface	server/red_channel.h	/^} OutgoingHandlerInterface;$/;"	t	typeref:struct:OutgoingHandlerInterface
PACKAGE	Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	client/Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	config.h	87;"	d
PACKAGE	docs/Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	docs/manual/Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	server/Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	server/tests/Makefile	/^PACKAGE = spice$/;"	m
PACKAGE	spice-common/Makefile	/^PACKAGE = spice-common$/;"	m
PACKAGE	spice-common/common/Makefile	/^PACKAGE = spice-common$/;"	m
PACKAGE	spice-common/config.h	114;"	d
PACKAGE	spice-common/python_modules/Makefile	/^PACKAGE = spice-common$/;"	m
PACKAGE	spice-common/spice-protocol/Makefile	/^PACKAGE = spice-protocol$/;"	m
PACKAGE	spice-common/spice-protocol/config.h	5;"	d
PACKAGE	spice-common/spice-protocol/spice/Makefile	/^PACKAGE = spice-protocol$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	client/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	config.h	90;"	d
PACKAGE_BUGREPORT	docs/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	docs/manual/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	server/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	server/tests/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	spice-common/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	spice-common/common/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	spice-common/config.h	117;"	d
PACKAGE_BUGREPORT	spice-common/python_modules/Makefile	/^PACKAGE_BUGREPORT = spice-devel@lists.freedesktop.org$/;"	m
PACKAGE_BUGREPORT	spice-common/spice-protocol/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	spice-common/spice-protocol/config.h	8;"	d
PACKAGE_BUGREPORT	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	client/Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	config.h	93;"	d
PACKAGE_NAME	docs/Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	docs/manual/Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	server/Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	server/tests/Makefile	/^PACKAGE_NAME = spice$/;"	m
PACKAGE_NAME	spice-common/Makefile	/^PACKAGE_NAME = spice-common$/;"	m
PACKAGE_NAME	spice-common/common/Makefile	/^PACKAGE_NAME = spice-common$/;"	m
PACKAGE_NAME	spice-common/config.h	120;"	d
PACKAGE_NAME	spice-common/python_modules/Makefile	/^PACKAGE_NAME = spice-common$/;"	m
PACKAGE_NAME	spice-common/spice-protocol/Makefile	/^PACKAGE_NAME = spice-protocol$/;"	m
PACKAGE_NAME	spice-common/spice-protocol/config.h	11;"	d
PACKAGE_NAME	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_NAME = spice-protocol$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	client/Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	config.h	96;"	d
PACKAGE_STRING	docs/Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	docs/manual/Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	server/Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	server/tests/Makefile	/^PACKAGE_STRING = spice 0.12.5$/;"	m
PACKAGE_STRING	spice-common/Makefile	/^PACKAGE_STRING = spice-common noversion$/;"	m
PACKAGE_STRING	spice-common/common/Makefile	/^PACKAGE_STRING = spice-common noversion$/;"	m
PACKAGE_STRING	spice-common/config.h	123;"	d
PACKAGE_STRING	spice-common/python_modules/Makefile	/^PACKAGE_STRING = spice-common noversion$/;"	m
PACKAGE_STRING	spice-common/spice-protocol/Makefile	/^PACKAGE_STRING = spice-protocol 0.12.6$/;"	m
PACKAGE_STRING	spice-common/spice-protocol/config.h	14;"	d
PACKAGE_STRING	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_STRING = spice-protocol 0.12.6$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	client/Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	config.h	99;"	d
PACKAGE_TARNAME	docs/Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	docs/manual/Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	server/Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	server/tests/Makefile	/^PACKAGE_TARNAME = spice$/;"	m
PACKAGE_TARNAME	spice-common/Makefile	/^PACKAGE_TARNAME = spice-common$/;"	m
PACKAGE_TARNAME	spice-common/common/Makefile	/^PACKAGE_TARNAME = spice-common$/;"	m
PACKAGE_TARNAME	spice-common/config.h	126;"	d
PACKAGE_TARNAME	spice-common/python_modules/Makefile	/^PACKAGE_TARNAME = spice-common$/;"	m
PACKAGE_TARNAME	spice-common/spice-protocol/Makefile	/^PACKAGE_TARNAME = spice-protocol$/;"	m
PACKAGE_TARNAME	spice-common/spice-protocol/config.h	17;"	d
PACKAGE_TARNAME	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_TARNAME = spice-protocol$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	client/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	102;"	d
PACKAGE_URL	docs/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	docs/manual/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	server/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	server/tests/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	spice-common/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	spice-common/common/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	spice-common/config.h	129;"	d
PACKAGE_URL	spice-common/python_modules/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	spice-common/spice-protocol/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	spice-common/spice-protocol/config.h	20;"	d
PACKAGE_URL	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	client/Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	client/windows/main.cpp	/^const char* PACKAGE_VERSION = "???";$/;"	v
PACKAGE_VERSION	config.h	105;"	d
PACKAGE_VERSION	docs/Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	docs/manual/Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	server/Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	server/tests/Makefile	/^PACKAGE_VERSION = 0.12.5$/;"	m
PACKAGE_VERSION	spice-common/Makefile	/^PACKAGE_VERSION = noversion$/;"	m
PACKAGE_VERSION	spice-common/common/Makefile	/^PACKAGE_VERSION = noversion$/;"	m
PACKAGE_VERSION	spice-common/config.h	132;"	d
PACKAGE_VERSION	spice-common/python_modules/Makefile	/^PACKAGE_VERSION = noversion$/;"	m
PACKAGE_VERSION	spice-common/spice-protocol/Makefile	/^PACKAGE_VERSION = 0.12.6$/;"	m
PACKAGE_VERSION	spice-common/spice-protocol/config.h	23;"	d
PACKAGE_VERSION	spice-common/spice-protocol/spice/Makefile	/^PACKAGE_VERSION = 0.12.6$/;"	m
PALETTE_CACHE_HASH_KEY	server/red_worker.c	424;"	d	file:
PALETTE_CACHE_HASH_MASK	server/red_worker.c	423;"	d	file:
PALETTE_CACHE_HASH_SHIFT	server/red_worker.c	421;"	d	file:
PALETTE_CACHE_HASH_SIZE	server/red_worker.c	422;"	d	file:
PANIC	client/debug.h	74;"	d
PANIC_ON	client/debug.h	79;"	d
PASSIVE_STATE	client/red_channel.h	/^    PASSIVE_STATE,$/;"	e	enum:__anon110
PATH_PROGRESS	server/tests/test_display_base.h	/^    PATH_PROGRESS,$/;"	e	enum:__anon130
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	client/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	docs/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	docs/manual/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	server/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	server/tests/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	spice-common/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	spice-common/common/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	spice-common/python_modules/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	spice-common/spice-protocol/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	spice-common/spice-protocol/spice/Makefile	/^PATH_SEPARATOR = :$/;"	m
PING_INTERVAL	server/main_channel.c	56;"	d	file:
PING_STATE_LATENCY	server/red_channel.c	/^    PING_STATE_LATENCY,$/;"	e	enum:QosPingState	file:
PING_STATE_NONE	server/red_channel.c	/^    PING_STATE_NONE,$/;"	e	enum:QosPingState	file:
PING_STATE_TIMER	server/red_channel.c	/^    PING_STATE_TIMER,$/;"	e	enum:QosPingState	file:
PING_STATE_WARMUP	server/red_channel.c	/^    PING_STATE_WARMUP,$/;"	e	enum:QosPingState	file:
PING_TEST_IDLE_NET_TIMEOUT_MS	server/red_channel.c	53;"	d	file:
PING_TEST_TIMEOUT_MS	server/red_channel.c	52;"	d	file:
PIPE_BUF_SIZE	client/windows/named_pipe.h	26;"	d
PIPE_ITEM_INPUTS_INIT	server/inputs_channel.c	/^    PIPE_ITEM_INPUTS_INIT = PIPE_ITEM_TYPE_CHANNEL_BASE,$/;"	e	enum:__anon197	file:
PIPE_ITEM_KEY_MODIFIERS	server/inputs_channel.c	/^    PIPE_ITEM_KEY_MODIFIERS,$/;"	e	enum:__anon197	file:
PIPE_ITEM_MIGRATE_DATA	server/inputs_channel.c	/^    PIPE_ITEM_MIGRATE_DATA,$/;"	e	enum:__anon197	file:
PIPE_ITEM_MOUSE_MOTION_ACK	server/inputs_channel.c	/^    PIPE_ITEM_MOUSE_MOTION_ACK,$/;"	e	enum:__anon197	file:
PIPE_ITEM_TYPE	server/red_client_shared_cache.h	25;"	d
PIPE_ITEM_TYPE_CHANNEL_BASE	server/red_channel.h	/^    PIPE_ITEM_TYPE_CHANNEL_BASE=101,$/;"	e	enum:__anon144
PIPE_ITEM_TYPE_CREATE_SURFACE	server/red_worker.c	/^    PIPE_ITEM_TYPE_CREATE_SURFACE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_CURSOR	server/red_worker.c	/^    PIPE_ITEM_TYPE_CURSOR,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_CURSOR_INIT	server/red_worker.c	/^    PIPE_ITEM_TYPE_CURSOR_INIT,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_DESTROY_SURFACE	server/red_worker.c	/^    PIPE_ITEM_TYPE_DESTROY_SURFACE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_DRAW	server/red_worker.c	/^    PIPE_ITEM_TYPE_DRAW = PIPE_ITEM_TYPE_CHANNEL_BASE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_EMPTY_MSG	server/red_channel.h	/^    PIPE_ITEM_TYPE_EMPTY_MSG,$/;"	e	enum:__anon144
PIPE_ITEM_TYPE_ERROR	server/smartcard.c	/^    PIPE_ITEM_TYPE_ERROR = PIPE_ITEM_TYPE_CHANNEL_BASE,$/;"	e	enum:__anon141	file:
PIPE_ITEM_TYPE_IMAGE	server/red_worker.c	/^    PIPE_ITEM_TYPE_IMAGE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_INVAL_CURSOR_CACHE	server/red_worker.c	/^    PIPE_ITEM_TYPE_INVAL_CURSOR_CACHE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_INVAL_ONE	server/red_worker.c	/^    PIPE_ITEM_TYPE_INVAL_ONE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_INVAL_PALLET_CACHE	server/red_worker.c	/^    PIPE_ITEM_TYPE_INVAL_PALLET_CACHE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_MAIN_AGENT_CONNECTED_TOKENS	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_AGENT_CONNECTED_TOKENS,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_AGENT_DATA	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_AGENT_DATA,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_AGENT_DISCONNECTED	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_AGENT_DISCONNECTED,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_AGENT_TOKEN	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_AGENT_TOKEN,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_CHANNELS_LIST	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_CHANNELS_LIST = PIPE_ITEM_TYPE_CHANNEL_BASE,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_INIT	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_INIT,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MIGRATE_BEGIN	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MIGRATE_BEGIN,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MIGRATE_BEGIN_SEAMLESS	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MIGRATE_BEGIN_SEAMLESS,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MIGRATE_DATA	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MIGRATE_DATA,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MIGRATE_SWITCH_HOST	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MIGRATE_SWITCH_HOST,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MOUSE_MODE	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MOUSE_MODE,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_MULTI_MEDIA_TIME	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_MULTI_MEDIA_TIME,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_NAME	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_NAME,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_NOTIFY	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_NOTIFY,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_PING	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_PING,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MAIN_UUID	server/main_channel.c	/^    PIPE_ITEM_TYPE_MAIN_UUID,$/;"	e	enum:__anon199	file:
PIPE_ITEM_TYPE_MIGRATE	server/red_channel.h	/^    PIPE_ITEM_TYPE_MIGRATE,$/;"	e	enum:__anon144
PIPE_ITEM_TYPE_MIGRATE_DATA	server/red_worker.c	/^    PIPE_ITEM_TYPE_MIGRATE_DATA,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_MONITORS_CONFIG	server/red_worker.c	/^    PIPE_ITEM_TYPE_MONITORS_CONFIG,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_PING	server/red_channel.h	/^    PIPE_ITEM_TYPE_PING,$/;"	e	enum:__anon144
PIPE_ITEM_TYPE_PIXMAP_RESET	server/red_worker.c	/^    PIPE_ITEM_TYPE_PIXMAP_RESET,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_PIXMAP_SYNC	server/red_worker.c	/^    PIPE_ITEM_TYPE_PIXMAP_SYNC,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_PORT_EVENT	server/spicevmc.c	/^    PIPE_ITEM_TYPE_PORT_EVENT,$/;"	e	enum:__anon128	file:
PIPE_ITEM_TYPE_PORT_INIT	server/spicevmc.c	/^    PIPE_ITEM_TYPE_PORT_INIT,$/;"	e	enum:__anon128	file:
PIPE_ITEM_TYPE_SET_ACK	server/red_channel.h	/^    PIPE_ITEM_TYPE_SET_ACK=1,$/;"	e	enum:__anon144
PIPE_ITEM_TYPE_SMARTCARD_DATA	server/smartcard.c	/^    PIPE_ITEM_TYPE_SMARTCARD_DATA,$/;"	e	enum:__anon141	file:
PIPE_ITEM_TYPE_SMARTCARD_MIGRATE_DATA	server/smartcard.c	/^    PIPE_ITEM_TYPE_SMARTCARD_MIGRATE_DATA,$/;"	e	enum:__anon141	file:
PIPE_ITEM_TYPE_SPICEVMC_DATA	server/spicevmc.c	/^    PIPE_ITEM_TYPE_SPICEVMC_DATA = PIPE_ITEM_TYPE_CHANNEL_BASE,$/;"	e	enum:__anon128	file:
PIPE_ITEM_TYPE_SPICEVMC_MIGRATE_DATA	server/spicevmc.c	/^    PIPE_ITEM_TYPE_SPICEVMC_MIGRATE_DATA,$/;"	e	enum:__anon128	file:
PIPE_ITEM_TYPE_STREAM_ACTIVATE_REPORT	server/red_worker.c	/^    PIPE_ITEM_TYPE_STREAM_ACTIVATE_REPORT,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_STREAM_CLIP	server/red_worker.c	/^    PIPE_ITEM_TYPE_STREAM_CLIP,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_STREAM_CREATE	server/red_worker.c	/^    PIPE_ITEM_TYPE_STREAM_CREATE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_STREAM_DESTROY	server/red_worker.c	/^    PIPE_ITEM_TYPE_STREAM_DESTROY,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_UPGRADE	server/red_worker.c	/^    PIPE_ITEM_TYPE_UPGRADE,$/;"	e	enum:__anon172	file:
PIPE_ITEM_TYPE_VERB	server/red_worker.c	/^    PIPE_ITEM_TYPE_VERB,$/;"	e	enum:__anon172	file:
PIPE_MAX_NAME_LEN	client/windows/named_pipe.cpp	27;"	d	file:
PIPE_NAME	client/controller.cpp	33;"	d	file:
PIPE_NAME	client/foreign_menu.cpp	32;"	d	file:
PIPE_NAME	client/foreign_menu.cpp	34;"	d	file:
PIPE_NAME	client/foreign_menu.cpp	36;"	d	file:
PIPE_NAME_MAX_LEN	client/controller.cpp	32;"	d	file:
PIPE_NAME_MAX_LEN	client/foreign_menu.cpp	29;"	d	file:
PIPE_PREFIX	client/windows/named_pipe.cpp	28;"	d	file:
PIPE_TIMEOUT	client/windows/named_pipe.cpp	26;"	d	file:
PIXEL	server/glz_encode_tmpl.c	34;"	d	file:
PIXEL	server/glz_encode_tmpl.c	52;"	d	file:
PIXEL	server/glz_encode_tmpl.c	560;"	d	file:
PIXEL	server/glz_encode_tmpl.c	69;"	d	file:
PIXEL	server/glz_encode_tmpl.c	90;"	d	file:
PIXEL	server/glz_encode_tmpl.c	98;"	d	file:
PIXEL	server/red_bitmap_utils.h	149;"	d
PIXEL	server/red_bitmap_utils.h	19;"	d
PIXEL	server/red_bitmap_utils.h	33;"	d
PIXEL	server/red_bitmap_utils.h	38;"	d
PIXEL	spice-common/common/lz_compress_tmpl.c	106;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	126;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	132;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	528;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	60;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	75;"	d	file:
PIXEL	spice-common/common/lz_compress_tmpl.c	91;"	d	file:
PIXEL	spice-common/common/quic_rgb_tmpl.c	24;"	d	file:
PIXEL	spice-common/common/quic_rgb_tmpl.c	45;"	d	file:
PIXEL	spice-common/common/quic_rgb_tmpl.c	66;"	d	file:
PIXEL	spice-common/common/quic_rgb_tmpl.c	729;"	d	file:
PIXEL	spice-common/common/quic_rgb_tmpl.c	87;"	d	file:
PIXEL	spice-common/common/quic_tmpl.c	25;"	d	file:
PIXEL	spice-common/common/quic_tmpl.c	31;"	d	file:
PIXEL	spice-common/common/quic_tmpl.c	37;"	d	file:
PIXEL	spice-common/common/quic_tmpl.c	621;"	d	file:
PIXELES_SOURCE_OPAQUE_SIZE	client/pixels_source.h	23;"	d
PIXELS_SOURCE_TYPE_GL_DRAWABLE	client/x11/pixels_source_p.h	/^    PIXELS_SOURCE_TYPE_GL_DRAWABLE,$/;"	e	enum:__anon115
PIXELS_SOURCE_TYPE_GL_TEXTURE	client/x11/pixels_source_p.h	/^    PIXELS_SOURCE_TYPE_GL_TEXTURE,$/;"	e	enum:__anon115
PIXELS_SOURCE_TYPE_INVALID	client/x11/pixels_source_p.h	/^    PIXELS_SOURCE_TYPE_INVALID,$/;"	e	enum:__anon115
PIXELS_SOURCE_TYPE_PIXMAP	client/x11/pixels_source_p.h	/^    PIXELS_SOURCE_TYPE_PIXMAP,$/;"	e	enum:__anon115
PIXELS_SOURCE_TYPE_X_DRAWABLE	client/x11/pixels_source_p.h	/^    PIXELS_SOURCE_TYPE_X_DRAWABLE,$/;"	e	enum:__anon115
PIXEL_DIST	server/glz_encode_tmpl.c	134;"	d	file:
PIXEL_DIST	server/glz_encode_tmpl.c	139;"	d	file:
PIXEL_DIST	server/glz_encode_tmpl.c	559;"	d	file:
PIXEL_ID	server/glz_encode_tmpl.c	132;"	d	file:
PIXEL_ID	server/glz_encode_tmpl.c	137;"	d	file:
PIXEL_ID	server/glz_encode_tmpl.c	558;"	d	file:
PIXEL_ID	spice-common/common/lz_compress_tmpl.c	163;"	d	file:
PIXEL_ID	spice-common/common/lz_compress_tmpl.c	527;"	d	file:
PIXMAN_CFLAGS	Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	client/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	docs/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	docs/manual/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	server/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	server/tests/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	spice-common/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	spice-common/common/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_CFLAGS	spice-common/python_modules/Makefile	/^PIXMAN_CFLAGS = -I\/usr\/include\/pixman-1  $/;"	m
PIXMAN_DONT_DEFINE_STDINT	spice-common/common/pixman_utils.h	25;"	d
PIXMAN_LIBS	Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	client/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	docs/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	docs/manual/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	server/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	server/tests/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	spice-common/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	spice-common/common/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PIXMAN_LIBS	spice-common/python_modules/Makefile	/^PIXMAN_LIBS = -lpixman-1  $/;"	m
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	client/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	docs/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	docs/manual/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	server/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	server/tests/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	spice-common/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	spice-common/common/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	spice-common/python_modules/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	client/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	docs/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	docs/manual/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	server/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	server/tests/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	spice-common/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	spice-common/common/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	spice-common/python_modules/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	client/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	docs/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	docs/manual/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	server/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	server/tests/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	spice-common/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	spice-common/common/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	spice-common/python_modules/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PLATFORM_INCLUDES	client/Makefile	/^PLATFORM_INCLUDES = -I$(top_srcdir)\/client\/x11$/;"	m
PLT1_BE	client/glz_decode_tmpl.c	324;"	d	file:
PLT1_BE	client/glz_decoder.cpp	178;"	d	file:
PLT1_BE	spice-common/common/lz.c	459;"	d	file:
PLT1_BE	spice-common/common/lz_decompress_tmpl.c	329;"	d	file:
PLT1_LE	client/glz_decode_tmpl.c	325;"	d	file:
PLT1_LE	client/glz_decoder.cpp	183;"	d	file:
PLT1_LE	spice-common/common/lz.c	464;"	d	file:
PLT1_LE	spice-common/common/lz_decompress_tmpl.c	330;"	d	file:
PLT4_BE	client/glz_decode_tmpl.c	322;"	d	file:
PLT4_BE	client/glz_decoder.cpp	168;"	d	file:
PLT4_BE	spice-common/common/lz.c	449;"	d	file:
PLT4_BE	spice-common/common/lz_decompress_tmpl.c	327;"	d	file:
PLT4_LE	client/glz_decode_tmpl.c	323;"	d	file:
PLT4_LE	client/glz_decoder.cpp	173;"	d	file:
PLT4_LE	spice-common/common/lz.c	454;"	d	file:
PLT4_LE	spice-common/common/lz_decompress_tmpl.c	328;"	d	file:
PLT8	client/glz_decode_tmpl.c	321;"	d	file:
PLT8	client/glz_decoder.cpp	163;"	d	file:
PLT8	spice-common/common/lz.c	444;"	d	file:
PLT8	spice-common/common/lz_decompress_tmpl.c	326;"	d	file:
PLT_PIXELS_PER_BYTE	spice-common/common/lz_common.h	/^static const int PLT_PIXELS_PER_BYTE[] = {0, 8, 8, 2, 2, 1};$/;"	v
POSIX_YIELD_FUNC	config.h	108;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	client/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	docs/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	docs/manual/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	server/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	server/tests/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	spice-common/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	spice-common/common/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	spice-common/python_modules/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	spice-common/spice-protocol/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	spice-common/spice-protocol/spice/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	client/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	docs/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	docs/manual/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	server/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	server/tests/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	spice-common/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	spice-common/common/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	spice-common/python_modules/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	spice-common/spice-protocol/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	spice-common/spice-protocol/spice/Makefile	/^POST_UNINSTALL = :$/;"	m
PRED_1	spice-common/common/quic.c	32;"	d	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	client/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	docs/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	docs/manual/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	server/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	server/tests/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	spice-common/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	spice-common/common/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	spice-common/python_modules/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	spice-common/spice-protocol/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	spice-common/spice-protocol/spice/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	client/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	docs/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	docs/manual/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	server/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	server/tests/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	spice-common/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	spice-common/common/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	spice-common/python_modules/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	spice-common/spice-protocol/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	spice-common/spice-protocol/spice/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIORITY_ABOVE_NORMAL	client/platform.h	/^        PRIORITY_ABOVE_NORMAL,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_BELOW_NORMAL	client/platform.h	/^        PRIORITY_BELOW_NORMAL,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_HIGH	client/platform.h	/^        PRIORITY_HIGH,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_IDLE	client/platform.h	/^        PRIORITY_IDLE,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_INVALID	client/platform.h	/^        PRIORITY_INVALID,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_LOW	client/platform.h	/^        PRIORITY_LOW,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_NORMAL	client/platform.h	/^        PRIORITY_NORMAL,$/;"	e	enum:Platform::ThreadPriority
PRIORITY_TIME_CRITICAL	client/platform.h	/^        PRIORITY_TIME_CRITICAL,$/;"	e	enum:Platform::ThreadPriority
PRIVATE_FUNC_NAME	server/red_client_shared_cache.h	27;"	d
PRIu64	client/common.h	86;"	d
PROGRAMS	client/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	server/tests/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROTOCOL_CFLAGS	spice-common/Makefile	/^PROTOCOL_CFLAGS = -I ${top_srcdir}\/spice-protocol$/;"	m
PROTOCOL_CFLAGS	spice-common/common/Makefile	/^PROTOCOL_CFLAGS = -I ${top_srcdir}\/spice-protocol$/;"	m
PROTOCOL_CFLAGS	spice-common/python_modules/Makefile	/^PROTOCOL_CFLAGS = -I ${top_srcdir}\/spice-protocol$/;"	m
PTRDIFF_MAX	client/windows/stdint.h	287;"	d
PTRDIFF_MIN	client/windows/stdint.h	285;"	d
PYTHON	Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON	client/Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON	docs/Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON	docs/manual/Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON	server/Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON	server/tests/Makefile	/^PYTHON = \/usr\/bin\/python2$/;"	m
PYTHON_MODULES	spice-common/python_modules/Makefile	/^PYTHON_MODULES = \\$/;"	m
PaletteCache	client/canvas.h	/^typedef Cache<CachedPalette, PaletteCacheTreat, 1024, SpicePaletteCacheBase> PaletteCache;$/;"	t
PaletteCacheTreat	client/canvas.h	/^class PaletteCacheTreat {$/;"	c
ParseException	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
ParseResults	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
PartialBlock	spice-common/python_modules/codegen.py	/^    class PartialBlock:$/;"	c	class:CodeWriter
Path	server/tests/test_display_base.c	/^typedef struct Path {$/;"	s	file:
Path	server/tests/test_display_base.c	/^} Path;$/;"	t	typeref:struct:Path	file:
Path	spice-common/common/glc.c	/^} Path;$/;"	t	typeref:struct:Pathpath	file:
PathPoint	spice-common/common/glc.c	/^typedef struct PathPoint {$/;"	s	file:
PathPoint	spice-common/common/glc.c	/^} PathPoint;$/;"	t	typeref:struct:PathPoint	file:
PathSegment	spice-common/common/glc.c	/^typedef struct PathSegment {$/;"	s	file:
PathSegment	spice-common/common/glc.c	/^} PathSegment;$/;"	t	typeref:struct:PathSegment	file:
PathStroke	spice-common/common/glc.c	/^typedef struct PathStroke {$/;"	s	file:
PathStroke	spice-common/common/glc.c	/^} PathStroke;$/;"	t	typeref:struct:PathStroke	file:
Pathpath	spice-common/common/glc.c	/^typedef struct Pathpath {$/;"	s	file:
PeerConnectionOptMap	client/red_client.h	/^typedef std::map< int, RedPeer::ConnectionOptions::Type> PeerConnectionOptMap;$/;"	t
PingPipeItem	server/main_channel.c	/^typedef struct PingPipeItem {$/;"	s	file:
PingPipeItem	server/main_channel.c	/^} PingPipeItem;$/;"	t	typeref:struct:PingPipeItem	file:
PipeBuffer	client/windows/named_pipe.cpp	/^PipeBuffer::PipeBuffer(HANDLE pipe, ProcessLoop& process_loop)$/;"	f	class:PipeBuffer
PipeBuffer	client/windows/named_pipe.h	/^class PipeBuffer: public EventSources::Handle {$/;"	c
PipeItem	server/red_channel.h	/^typedef struct PipeItem {$/;"	s
PipeItem	server/red_channel.h	/^} PipeItem;$/;"	t	typeref:struct:PipeItem
PipeReader	client/windows/named_pipe.h	/^    PipeReader(HANDLE pipe, ProcessLoop& process_loop) : PipeBuffer(pipe, process_loop) {}$/;"	f	class:PipeReader
PipeReader	client/windows/named_pipe.h	/^class PipeReader: public PipeBuffer {$/;"	c
PipeWriter	client/windows/named_pipe.h	/^    PipeWriter(HANDLE pipe, ProcessLoop& process_loop) : PipeBuffer(pipe, process_loop) {}$/;"	f	class:PipeWriter
PipeWriter	client/windows/named_pipe.h	/^class PipeWriter: public PipeBuffer {$/;"	c
PixelsSource	client/pixels_source.h	/^class PixelsSource {$/;"	c
PixelsSource	client/windows/pixels_source.cpp	/^PixelsSource::PixelsSource()$/;"	f	class:PixelsSource
PixelsSource	client/x11/pixels_source.cpp	/^PixelsSource::PixelsSource()$/;"	f	class:PixelsSource
PixelsSource_p	client/windows/pixels_source_p.h	/^struct PixelsSource_p {$/;"	s
PixelsSource_p	client/x11/pixels_source_p.h	/^struct PixelsSource_p {$/;"	s
PixmanData	spice-common/common/canvas_utils.h	/^typedef struct PixmanData {$/;"	s
PixmanData	spice-common/common/canvas_utils.h	/^} PixmanData;$/;"	t	typeref:struct:PixmanData
PixmapCache	client/canvas.h	/^typedef SharedCache<pixman_image_t, PixmapCacheTreat, 1024, SpiceImageCacheBase> PixmapCache;$/;"	t
PixmapCache	server/red_worker.c	/^struct PixmapCache {$/;"	s	file:
PixmapCache	server/red_worker.c	/^typedef struct PixmapCache PixmapCache;$/;"	t	typeref:struct:PixmapCache	file:
PixmapCacheTreat	client/canvas.h	/^class PixmapCacheTreat {$/;"	c
PixmapHeader	client/red_types.h	/^struct PixmapHeader {$/;"	s
Platform	client/platform.h	/^class Platform {$/;"	c
PlatformWinProc	client/windows/platform.cpp	/^static LRESULT CALLBACK PlatformWinProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	file:
PlaybackChannel	client/audio_channels.h	/^class PlaybackChannel: public RedChannel {$/;"	c
PlaybackChannel	client/playback_channel.cpp	/^PlaybackChannel::PlaybackChannel(RedClient& client, uint32_t id)$/;"	f	class:PlaybackChannel
PlaybackChannel	server/snd_worker.c	/^struct PlaybackChannel {$/;"	s	file:
PlaybackChannel	server/snd_worker.c	/^typedef struct PlaybackChannel PlaybackChannel;$/;"	t	typeref:struct:PlaybackChannel	file:
PlaybackCommand	server/snd_worker.c	/^enum PlaybackCommand {$/;"	g	file:
PlaybackFactory	client/playback_channel.cpp	/^    PlaybackFactory() : ChannelFactory(SPICE_CHANNEL_PLAYBACK) {}$/;"	f	class:PlaybackFactory
PlaybackFactory	client/playback_channel.cpp	/^class PlaybackFactory: public ChannelFactory {$/;"	c	file:
PlaybackHandler	client/playback_channel.cpp	/^    PlaybackHandler(PlaybackChannel& channel)$/;"	f	class:PlaybackHandler
PlaybackHandler	client/playback_channel.cpp	/^class PlaybackHandler: public MessageHandlerImp<PlaybackChannel, SPICE_CHANNEL_PLAYBACK> {$/;"	c	file:
PointerInfo	spice-common/common/generated_client_demarshallers.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	spice-common/common/generated_client_demarshallers.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerInfo	spice-common/common/generated_client_demarshallers1.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	spice-common/common/generated_client_demarshallers1.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerInfo	spice-common/common/generated_server_demarshallers.c	/^struct PointerInfo {$/;"	s	file:
PointerInfo	spice-common/common/generated_server_demarshallers.c	/^typedef struct PointerInfo PointerInfo;$/;"	t	typeref:struct:PointerInfo	file:
PointerType	spice-common/python_modules/ptypes.py	/^class PointerType(Type):$/;"	c
PolyEdgePtr	spice-common/common/lines.c	/^} PolyEdgeRec, *PolyEdgePtr;$/;"	t	typeref:struct:_PolyEdge	file:
PolyEdgeRec	spice-common/common/lines.c	/^} PolyEdgeRec, *PolyEdgePtr;$/;"	t	typeref:struct:_PolyEdge	file:
PolySlopePtr	spice-common/common/lines.c	/^} PolySlopeRec, *PolySlopePtr;$/;"	t	typeref:struct:_PolySlope	file:
PolySlopeRec	spice-common/common/lines.c	/^} PolySlopeRec, *PolySlopePtr;$/;"	t	typeref:struct:_PolySlope	file:
PolyVertexPtr	spice-common/common/lines.c	/^} PolyVertexRec, *PolyVertexPtr;$/;"	t	typeref:struct:_PolyVertex	file:
PolyVertexRec	spice-common/common/lines.c	/^} PolyVertexRec, *PolyVertexPtr;$/;"	t	typeref:struct:_PolyVertex	file:
PortEventPipeItem	server/spicevmc.c	/^typedef struct PortEventPipeItem {$/;"	s	file:
PortEventPipeItem	server/spicevmc.c	/^} PortEventPipeItem;$/;"	t	typeref:struct:PortEventPipeItem	file:
PortInitPipeItem	server/spicevmc.c	/^typedef struct PortInitPipeItem {$/;"	s	file:
PortInitPipeItem	server/spicevmc.c	/^} PortInitPipeItem;$/;"	t	typeref:struct:PortInitPipeItem	file:
PositionMessage	client/inputs_channel.cpp	/^PositionMessage::PositionMessage(InputsChannel& channel)$/;"	f	class:PositionMessage
PositionMessage	client/inputs_channel.cpp	/^class PositionMessage: public RedChannel::OutMessage, public RedPeer::OutMessage {$/;"	c	file:
PreLoginDialog	client/gui/gui.cpp	/^PreLoginDialog::PreLoginDialog(GUI& gui, LoginDialog* login_dialog)$/;"	f	class:PreLoginDialog
PreLoginDialog	client/gui/gui.cpp	/^class PreLoginDialog: public TabDialog {$/;"	c	file:
PrintByteArray	client/smartcard_channel.cpp	/^void PrintByteArray(uint8_t *arrBytes, unsigned int nSize)$/;"	f
ProcessLoop	client/process_loop.cpp	/^ProcessLoop::ProcessLoop(void* owner)$/;"	f	class:ProcessLoop
ProcessLoop	client/process_loop.h	/^class ProcessLoop: public AbstractProcessLoop {$/;"	c
ProtocolMember	spice-common/python_modules/ptypes.py	/^class ProtocolMember:$/;"	c
ProtocolType	spice-common/python_modules/ptypes.py	/^class ProtocolType(Type):$/;"	c
PublicKey	client/red_peer.h	/^        typedef std::vector<uint8_t> PublicKey;$/;"	t	class:RedPeer::HostAuthOptions
PushBottomSet	client/x11/platform.cpp	/^typedef std::multiset<XMonitor*, SortTopToBottom> PushBottomSet;$/;"	t	file:
PushLeftSet	client/x11/platform.cpp	/^typedef std::multiset<XMonitor*, SortRightToLeft> PushLeftSet;$/;"	t	file:
PushRightSet	client/x11/platform.cpp	/^typedef std::multiset<XMonitor*, SortLeftToRight> PushRightSet;$/;"	t	file:
PushTopSet	client/x11/platform.cpp	/^typedef std::multiset<XMonitor*, SortBottomToTop> PushTopSet;$/;"	t	file:
QRegion	spice-common/common/region.h	/^typedef pixman_region32_t QRegion;$/;"	t
QUALITY_WAS_EVALUATED	server/mjpeg_encoder.c	421;"	d	file:
QUESTION	client/gui/gui.h	/^        QUESTION,$/;"	e	enum:GUI::MessageType
QUIC_COMPRESS_RGB	spice-common/common/quic.c	1234;"	d	file:
QUIC_ERROR	spice-common/common/quic.h	37;"	d
QUIC_FAMILY_5BPC	spice-common/common/quic.c	329;"	d	file:
QUIC_FAMILY_5BPC	spice-common/common/quic_family_tmpl.c	31;"	d	file:
QUIC_FAMILY_8BPC	spice-common/common/quic.c	325;"	d	file:
QUIC_FAMILY_8BPC	spice-common/common/quic_family_tmpl.c	23;"	d	file:
QUIC_IMAGE_TYPE_GRAY	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_GRAY,$/;"	e	enum:__anon21
QUIC_IMAGE_TYPE_INVALID	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_INVALID,$/;"	e	enum:__anon21
QUIC_IMAGE_TYPE_RGB16	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_RGB16,$/;"	e	enum:__anon21
QUIC_IMAGE_TYPE_RGB24	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_RGB24,$/;"	e	enum:__anon21
QUIC_IMAGE_TYPE_RGB32	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_RGB32,$/;"	e	enum:__anon21
QUIC_IMAGE_TYPE_RGBA	spice-common/common/quic.h	/^    QUIC_IMAGE_TYPE_RGBA$/;"	e	enum:__anon21
QUIC_MAGIC	spice-common/common/quic.c	38;"	d	file:
QUIC_OK	spice-common/common/quic.h	38;"	d
QUIC_RGB	spice-common/common/quic.c	36;"	d	file:
QUIC_RGB16	spice-common/common/quic.c	830;"	d	file:
QUIC_RGB16	spice-common/common/quic_rgb_tmpl.c	65;"	d	file:
QUIC_RGB16_TO_32	spice-common/common/quic.c	833;"	d	file:
QUIC_RGB16_TO_32	spice-common/common/quic_rgb_tmpl.c	86;"	d	file:
QUIC_RGB24	spice-common/common/quic.c	827;"	d	file:
QUIC_RGB24	spice-common/common/quic_rgb_tmpl.c	44;"	d	file:
QUIC_RGB32	spice-common/common/quic.c	824;"	d	file:
QUIC_RGB32	spice-common/common/quic_rgb_tmpl.c	23;"	d	file:
QUIC_UNCOMPRESS_RGB	spice-common/common/quic.c	1517;"	d	file:
QUIC_VERSION	spice-common/common/quic.c	41;"	d	file:
QUIC_VERSION_MAJOR	spice-common/common/quic.c	39;"	d	file:
QUIC_VERSION_MINOR	spice-common/common/quic.c	40;"	d	file:
QUIT_ACTION	client/red_channel.h	/^    QUIT_ACTION,$/;"	e	enum:__anon111
QXLAlphaBlend	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLAlphaBlend {$/;"	s
QXLAlphaBlend	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLAlphaBlend;$/;"	t	typeref:struct:QXLAlphaBlend
QXLBitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLBitmap {$/;"	s
QXLBitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBitmap;$/;"	t	typeref:struct:QXLBitmap
QXLBitmapFlags	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef enum QXLBitmapFlags {$/;"	g
QXLBitmapFlags	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBitmapFlags;$/;"	t	typeref:enum:QXLBitmapFlags
QXLBlackness	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLBlackness {$/;"	s
QXLBlackness	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBlackness, QXLInvers, QXLWhiteness;$/;"	t	typeref:struct:QXLBlackness
QXLBlend	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCopy, QXLBlend;$/;"	t	typeref:struct:QXLCopy
QXLBrush	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLBrush {$/;"	s
QXLBrush	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBrush;$/;"	t	typeref:struct:QXLBrush
QXLClip	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLClip {$/;"	s
QXLClip	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLClip;$/;"	t	typeref:struct:QXLClip
QXLClipRects	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLClipRects {$/;"	s
QXLClipRects	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLClipRects;$/;"	t	typeref:struct:QXLClipRects
QXLCmdType	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef enum QXLCmdType {$/;"	g
QXLCmdType	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCmdType;$/;"	t	typeref:enum:QXLCmdType
QXLCommand	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCommand {$/;"	s
QXLCommand	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCommand;$/;"	t	typeref:struct:QXLCommand
QXLCommandExt	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCommandExt {$/;"	s
QXLCommandExt	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCommandExt;$/;"	t	typeref:struct:QXLCommandExt
QXLCompatAlphaBlend	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCompatAlphaBlend {$/;"	s
QXLCompatAlphaBlend	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCompatAlphaBlend;$/;"	t	typeref:struct:QXLCompatAlphaBlend
QXLCompatDrawable	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCompatDrawable {$/;"	s
QXLCompatDrawable	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCompatDrawable;$/;"	t	typeref:struct:QXLCompatDrawable
QXLCompatUpdateCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCompatUpdateCmd {$/;"	s
QXLCompatUpdateCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCompatUpdateCmd;$/;"	t	typeref:struct:QXLCompatUpdateCmd
QXLComposite	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLComposite {$/;"	s
QXLComposite	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLComposite;$/;"	t	typeref:struct:QXLComposite
QXLCopy	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCopy {$/;"	s
QXLCopy	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCopy, QXLBlend;$/;"	t	typeref:struct:QXLCopy
QXLCopyBits	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCopyBits {$/;"	s
QXLCopyBits	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCopyBits;$/;"	t	typeref:struct:QXLCopyBits
QXLCursor	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCursor {$/;"	s
QXLCursor	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCursor;$/;"	t	typeref:struct:QXLCursor
QXLCursorCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCursorCmd {$/;"	s
QXLCursorCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCursorCmd;$/;"	t	typeref:struct:QXLCursorCmd
QXLCursorHeader	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLCursorHeader {$/;"	s
QXLCursorHeader	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLCursorHeader;$/;"	t	typeref:struct:QXLCursorHeader
QXLDataChunk	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct  SPICE_ATTR_PACKED QXLDataChunk {$/;"	s
QXLDataChunk	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLDataChunk;$/;"	t	typeref:struct:QXLDataChunk
QXLDevInfo	server/spice.h	/^typedef struct QXLDevInfo {$/;"	s
QXLDevInfo	server/spice.h	/^} QXLDevInfo;$/;"	t	typeref:struct:QXLDevInfo
QXLDevInitInfo	server/spice.h	/^typedef struct QXLDevInitInfo {$/;"	s
QXLDevInitInfo	server/spice.h	/^} QXLDevInitInfo;$/;"	t	typeref:struct:QXLDevInitInfo
QXLDevMemSlot	server/spice.h	/^struct QXLDevMemSlot {$/;"	s
QXLDevMemSlot	server/spice.h	/^typedef struct QXLDevMemSlot QXLDevMemSlot;$/;"	t	typeref:struct:QXLDevMemSlot
QXLDevSurfaceCreate	server/spice.h	/^struct QXLDevSurfaceCreate {$/;"	s
QXLDevSurfaceCreate	server/spice.h	/^typedef struct QXLDevSurfaceCreate QXLDevSurfaceCreate;$/;"	t	typeref:struct:QXLDevSurfaceCreate
QXLDrawArea	server/spice.h	/^typedef struct QXLDrawArea {$/;"	s
QXLDrawArea	server/spice.h	/^} QXLDrawArea;$/;"	t	typeref:struct:QXLDrawArea
QXLDrawable	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLDrawable {$/;"	s
QXLDrawable	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLDrawable;$/;"	t	typeref:struct:QXLDrawable
QXLEffectType	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef enum QXLEffectType$/;"	g
QXLEffectType	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLEffectType;$/;"	t	typeref:enum:QXLEffectType
QXLEscapeSetCustomDisplay	spice-common/spice-protocol/spice/qxl_windows.h	/^typedef struct SPICE_ATTR_PACKED QXLEscapeSetCustomDisplay {$/;"	s
QXLEscapeSetCustomDisplay	spice-common/spice-protocol/spice/qxl_windows.h	/^} QXLEscapeSetCustomDisplay;$/;"	t	typeref:struct:QXLEscapeSetCustomDisplay
QXLFIXED	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef int32_t QXLFIXED; \/\/fixed 28.4$/;"	t
QXLFill	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLFill {$/;"	s
QXLFill	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLFill;$/;"	t	typeref:struct:QXLFill
QXLHead	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLHead {$/;"	s
QXLHead	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLHead;$/;"	t	typeref:struct:QXLHead
QXLImage	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLImage {$/;"	s
QXLImage	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLImage;$/;"	t	typeref:struct:QXLImage
QXLImageDescriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLImageDescriptor {$/;"	s
QXLImageDescriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLImageDescriptor;$/;"	t	typeref:struct:QXLImageDescriptor
QXLImageFlags	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef enum QXLImageFlags {$/;"	g
QXLImageFlags	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLImageFlags;$/;"	t	typeref:enum:QXLImageFlags
QXLImageID	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLImageID {$/;"	s
QXLImageID	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLImageID;$/;"	t	typeref:struct:QXLImageID
QXLImageIDUnion	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLImageIDUnion;$/;"	t	typeref:union:__anon81
QXLInstance	server/spice.h	/^struct QXLInstance {$/;"	s
QXLInstance	server/spice.h	/^typedef struct QXLInstance QXLInstance;$/;"	t	typeref:struct:QXLInstance
QXLInterface	server/spice.h	/^struct QXLInterface {$/;"	s
QXLInterface	server/spice.h	/^typedef struct QXLInterface QXLInterface;$/;"	t	typeref:struct:QXLInterface
QXLInvers	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBlackness, QXLInvers, QXLWhiteness;$/;"	t	typeref:struct:QXLBlackness
QXLJPEGData	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLQUICData, QXLLZRGBData, QXLJPEGData;$/;"	t	typeref:struct:QXLQUICData
QXLLZRGBData	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLQUICData, QXLLZRGBData, QXLJPEGData;$/;"	t	typeref:struct:QXLQUICData
QXLLineAttr	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLLineAttr {$/;"	s
QXLLineAttr	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLLineAttr;$/;"	t	typeref:struct:QXLLineAttr
QXLMemSlot	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLMemSlot {$/;"	s
QXLMemSlot	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLMemSlot;$/;"	t	typeref:struct:QXLMemSlot
QXLMessage	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLMessage {$/;"	s
QXLMessage	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLMessage;$/;"	t	typeref:struct:QXLMessage
QXLMode	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLMode {$/;"	s
QXLMode	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLMode;$/;"	t	typeref:struct:QXLMode
QXLModes	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLModes {$/;"	s
QXLModes	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLModes;$/;"	t	typeref:struct:QXLModes
QXLMonitorsConfig	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLMonitorsConfig {$/;"	s
QXLMonitorsConfig	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLMonitorsConfig;$/;"	t	typeref:struct:QXLMonitorsConfig
QXLOpaque	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLOpaque {$/;"	s
QXLOpaque	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLOpaque;$/;"	t	typeref:struct:QXLOpaque
QXLOperator	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLOperator;$/;"	t	typeref:enum:__anon74
QXLPHYSICAL	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef uint64_t QXLPHYSICAL;$/;"	t
QXLPalette	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPalette {$/;"	s
QXLPalette	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPalette;$/;"	t	typeref:struct:QXLPalette
QXLPath	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPath {$/;"	s
QXLPath	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPath;$/;"	t	typeref:struct:QXLPath
QXLPathSeg	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPathSeg {$/;"	s
QXLPathSeg	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPathSeg;$/;"	t	typeref:struct:QXLPathSeg
QXLPattern	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPattern {$/;"	s
QXLPattern	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPattern;$/;"	t	typeref:struct:QXLPattern
QXLPoint	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPoint {$/;"	s
QXLPoint	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPoint;$/;"	t	typeref:struct:QXLPoint
QXLPoint16	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPoint16 {$/;"	s
QXLPoint16	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPoint16;$/;"	t	typeref:struct:QXLPoint16
QXLPointFix	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLPointFix {$/;"	s
QXLPointFix	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLPointFix;$/;"	t	typeref:struct:QXLPointFix
QXLQMask	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLQMask {$/;"	s
QXLQMask	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLQMask;$/;"	t	typeref:struct:QXLQMask
QXLQUICData	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLQUICData {$/;"	s
QXLQUICData	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLQUICData, QXLLZRGBData, QXLJPEGData;$/;"	t	typeref:struct:QXLQUICData
QXLRam	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLRam {$/;"	s
QXLRam	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLRam;$/;"	t	typeref:struct:QXLRam
QXLRasterGlyph	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLRasterGlyph {$/;"	s
QXLRasterGlyph	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLRasterGlyph;$/;"	t	typeref:struct:QXLRasterGlyph
QXLRect	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLRect {$/;"	s
QXLRect	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLRect;$/;"	t	typeref:struct:QXLRect
QXLReleaseInfo	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef union QXLReleaseInfo {$/;"	u
QXLReleaseInfo	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLReleaseInfo;$/;"	t	typeref:union:QXLReleaseInfo
QXLReleaseInfoExt	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct QXLReleaseInfoExt {$/;"	s
QXLReleaseInfoExt	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLReleaseInfoExt;$/;"	t	typeref:struct:QXLReleaseInfoExt
QXLRom	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLRom {$/;"	s
QXLRom	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLRom;$/;"	t	typeref:struct:QXLRom
QXLRop3	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLRop3 {$/;"	s
QXLRop3	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLRop3;$/;"	t	typeref:struct:QXLRop3
QXLState	server/reds.h	/^struct QXLState {$/;"	s
QXLState	server/spice.h	/^typedef struct QXLState QXLState;$/;"	t	typeref:struct:QXLState
QXLString	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLString {$/;"	s
QXLString	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLString;$/;"	t	typeref:struct:QXLString
QXLStroke	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLStroke {$/;"	s
QXLStroke	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLStroke;$/;"	t	typeref:struct:QXLStroke
QXLSurface	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLSurface {$/;"	s
QXLSurface	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLSurface;$/;"	t	typeref:struct:QXLSurface
QXLSurfaceCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLSurfaceCmd {$/;"	s
QXLSurfaceCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLSurfaceCmd;$/;"	t	typeref:struct:QXLSurfaceCmd
QXLSurfaceCmdType	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef enum QXLSurfaceCmdType {$/;"	g
QXLSurfaceCmdType	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLSurfaceCmdType;$/;"	t	typeref:enum:QXLSurfaceCmdType
QXLSurfaceCreate	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLSurfaceCreate {$/;"	s
QXLSurfaceCreate	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLSurfaceCreate;$/;"	t	typeref:struct:QXLSurfaceCreate
QXLSurfaceId	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLSurfaceId {$/;"	s
QXLSurfaceId	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLSurfaceId;$/;"	t	typeref:struct:QXLSurfaceId
QXLText	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLText {$/;"	s
QXLText	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLText;$/;"	t	typeref:struct:QXLText
QXLTransform	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLTransform;$/;"	t	typeref:struct:__anon75
QXLTransparent	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLTransparent {$/;"	s
QXLTransparent	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLTransparent;$/;"	t	typeref:struct:QXLTransparent
QXLURect	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLURect {$/;"	s
QXLURect	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLURect;$/;"	t	typeref:struct:QXLURect
QXLUpdateCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^typedef struct SPICE_ATTR_PACKED QXLUpdateCmd {$/;"	s
QXLUpdateCmd	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLUpdateCmd;$/;"	t	typeref:struct:QXLUpdateCmd
QXLWhiteness	spice-common/spice-protocol/spice/qxl_dev.h	/^} QXLBlackness, QXLInvers, QXLWhiteness;$/;"	t	typeref:struct:QXLBlackness
QXLWorker	server/spice.h	/^struct QXLWorker {$/;"	s
QXLWorker	server/spice.h	/^typedef struct QXLWorker QXLWorker;$/;"	t	typeref:struct:QXLWorker
QXL_BITMAP_DIRECT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_BITMAP_DIRECT = (1 << 0),$/;"	e	enum:QXLBitmapFlags
QXL_BITMAP_TOP_DOWN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_BITMAP_TOP_DOWN = (1 << 2), \/\/ == SPICE_BITMAP_FLAGS_TOP_DOWN$/;"	e	enum:QXLBitmapFlags
QXL_BITMAP_UNSTABLE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_BITMAP_UNSTABLE = (1 << 1),$/;"	e	enum:QXLBitmapFlags
QXL_CMD_CURSOR	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_CURSOR,$/;"	e	enum:QXLCmdType
QXL_CMD_DRAW	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_DRAW,$/;"	e	enum:QXLCmdType
QXL_CMD_MESSAGE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_MESSAGE,$/;"	e	enum:QXLCmdType
QXL_CMD_NOP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_NOP,$/;"	e	enum:QXLCmdType
QXL_CMD_SURFACE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_SURFACE,$/;"	e	enum:QXLCmdType
QXL_CMD_UPDATE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CMD_UPDATE,$/;"	e	enum:QXLCmdType
QXL_COMMAND_FLAG_COMPAT	spice-common/spice-protocol/spice/qxl_dev.h	206;"	d
QXL_COMMAND_FLAG_COMPAT_16BPP	spice-common/spice-protocol/spice/qxl_dev.h	207;"	d
QXL_COMMAND_RING_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	236;"	d
QXL_COPY_BITS	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_COPY_BITS,$/;"	e	enum:__anon72
QXL_CURSOR_HIDE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CURSOR_HIDE,$/;"	e	enum:__anon70
QXL_CURSOR_MOVE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CURSOR_MOVE,$/;"	e	enum:__anon70
QXL_CURSOR_RING_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	237;"	d
QXL_CURSOR_SET	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CURSOR_SET,$/;"	e	enum:__anon70
QXL_CURSOR_TRAIL	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_CURSOR_TRAIL,$/;"	e	enum:__anon70
QXL_CURSUR_DEVICE_DATA_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	334;"	d
QXL_DEVICE_ID_DEVEL	spice-common/spice-protocol/spice/qxl_dev.h	54;"	d
QXL_DEVICE_ID_STABLE	spice-common/spice-protocol/spice/qxl_dev.h	45;"	d
QXL_DRAW_ALPHA_BLEND	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_ALPHA_BLEND,$/;"	e	enum:__anon72
QXL_DRAW_BLACKNESS	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_BLACKNESS,$/;"	e	enum:__anon72
QXL_DRAW_BLEND	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_BLEND,$/;"	e	enum:__anon72
QXL_DRAW_COMPOSITE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_COMPOSITE$/;"	e	enum:__anon72
QXL_DRAW_COPY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_COPY,$/;"	e	enum:__anon72
QXL_DRAW_FILL	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_FILL,$/;"	e	enum:__anon72
QXL_DRAW_INVERS	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_INVERS,$/;"	e	enum:__anon72
QXL_DRAW_NOP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_NOP,$/;"	e	enum:__anon72
QXL_DRAW_OPAQUE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_OPAQUE,$/;"	e	enum:__anon72
QXL_DRAW_ROP3	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_ROP3,$/;"	e	enum:__anon72
QXL_DRAW_STROKE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_STROKE,$/;"	e	enum:__anon72
QXL_DRAW_TEXT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_TEXT,$/;"	e	enum:__anon72
QXL_DRAW_TRANSPARENT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_TRANSPARENT,$/;"	e	enum:__anon72
QXL_DRAW_WHITENESS	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_DRAW_WHITENESS,$/;"	e	enum:__anon72
QXL_EFFECT_BLACKNESS_ON_DUP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_BLACKNESS_ON_DUP = 3,$/;"	e	enum:QXLEffectType
QXL_EFFECT_BLEND	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_BLEND = 0,$/;"	e	enum:QXLEffectType
QXL_EFFECT_NOP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_NOP = 6,$/;"	e	enum:QXLEffectType
QXL_EFFECT_NOP_ON_DUP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_NOP_ON_DUP = 5,$/;"	e	enum:QXLEffectType
QXL_EFFECT_OPAQUE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_OPAQUE = 1,$/;"	e	enum:QXLEffectType
QXL_EFFECT_OPAQUE_BRUSH	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_OPAQUE_BRUSH = 7$/;"	e	enum:QXLEffectType
QXL_EFFECT_REVERT_ON_DUP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_REVERT_ON_DUP = 2,$/;"	e	enum:QXLEffectType
QXL_EFFECT_WHITENESS_ON_DUP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_EFFECT_WHITENESS_ON_DUP = 4,$/;"	e	enum:QXLEffectType
QXL_ESCAPE_SET_CUSTOM_DISPLAY	spice-common/spice-protocol/spice/qxl_windows.h	/^    QXL_ESCAPE_SET_CUSTOM_DISPLAY = 0x10001,$/;"	e	enum:__anon83
QXL_IMAGE_CACHE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_CACHE = (1 << 0),$/;"	e	enum:QXLImageFlags
QXL_IMAGE_GROUP_DEVICE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_GROUP_DEVICE,$/;"	e	enum:__anon80
QXL_IMAGE_GROUP_DRIVER	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_GROUP_DRIVER,$/;"	e	enum:__anon80
QXL_IMAGE_GROUP_DRIVER_DONT_CACHE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_GROUP_DRIVER_DONT_CACHE,$/;"	e	enum:__anon80
QXL_IMAGE_GROUP_RED	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_GROUP_RED,$/;"	e	enum:__anon80
QXL_IMAGE_HIGH_BITS_SET	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IMAGE_HIGH_BITS_SET = (1 << 1),$/;"	e	enum:QXLImageFlags
QXL_INTERRUPT_CLIENT	spice-common/spice-protocol/spice/qxl_dev.h	251;"	d
QXL_INTERRUPT_CLIENT_MONITORS_CONFIG	spice-common/spice-protocol/spice/qxl_dev.h	252;"	d
QXL_INTERRUPT_CURSOR	spice-common/spice-protocol/spice/qxl_dev.h	248;"	d
QXL_INTERRUPT_DISPLAY	spice-common/spice-protocol/spice/qxl_dev.h	247;"	d
QXL_INTERRUPT_ERROR	spice-common/spice-protocol/spice/qxl_dev.h	250;"	d
QXL_INTERRUPT_IO_CMD	spice-common/spice-protocol/spice/qxl_dev.h	249;"	d
QXL_IO_ATTACH_PRIMARY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_ATTACH_PRIMARY,$/;"	e	enum:__anon68
QXL_IO_CREATE_PRIMARY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_CREATE_PRIMARY,$/;"	e	enum:__anon68
QXL_IO_CREATE_PRIMARY_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_CREATE_PRIMARY_ASYNC,$/;"	e	enum:__anon68
QXL_IO_DESTROY_ALL_SURFACES	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_ALL_SURFACES,$/;"	e	enum:__anon68
QXL_IO_DESTROY_ALL_SURFACES_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_ALL_SURFACES_ASYNC,$/;"	e	enum:__anon68
QXL_IO_DESTROY_PRIMARY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_PRIMARY,$/;"	e	enum:__anon68
QXL_IO_DESTROY_PRIMARY_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_PRIMARY_ASYNC,$/;"	e	enum:__anon68
QXL_IO_DESTROY_SURFACE_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_SURFACE_ASYNC,$/;"	e	enum:__anon68
QXL_IO_DESTROY_SURFACE_WAIT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DESTROY_SURFACE_WAIT,$/;"	e	enum:__anon68
QXL_IO_DETACH_PRIMARY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_DETACH_PRIMARY,$/;"	e	enum:__anon68
QXL_IO_FLUSH_RELEASE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_FLUSH_RELEASE,$/;"	e	enum:__anon68
QXL_IO_FLUSH_SURFACES_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_FLUSH_SURFACES_ASYNC,$/;"	e	enum:__anon68
QXL_IO_LOG	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_LOG,$/;"	e	enum:__anon68
QXL_IO_MEMSLOT_ADD	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_MEMSLOT_ADD,$/;"	e	enum:__anon68
QXL_IO_MEMSLOT_ADD_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_MEMSLOT_ADD_ASYNC,$/;"	e	enum:__anon68
QXL_IO_MEMSLOT_DEL	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_MEMSLOT_DEL,$/;"	e	enum:__anon68
QXL_IO_MONITORS_CONFIG_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_MONITORS_CONFIG_ASYNC,$/;"	e	enum:__anon68
QXL_IO_NOTIFY_CMD	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_NOTIFY_CMD,$/;"	e	enum:__anon68
QXL_IO_NOTIFY_CURSOR	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_NOTIFY_CURSOR,$/;"	e	enum:__anon68
QXL_IO_NOTIFY_OOM	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_NOTIFY_OOM,$/;"	e	enum:__anon68
QXL_IO_RANGE_INDEX	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_RANGE_INDEX,$/;"	e	enum:__anon67
QXL_IO_RANGE_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_RANGE_SIZE$/;"	e	enum:__anon68
QXL_IO_RESET	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_RESET,$/;"	e	enum:__anon68
QXL_IO_SET_MODE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_SET_MODE,                  \/* qxl-1 *\/$/;"	e	enum:__anon68
QXL_IO_UPDATE_AREA	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_UPDATE_AREA,$/;"	e	enum:__anon68
QXL_IO_UPDATE_AREA_ASYNC	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_UPDATE_AREA_ASYNC,$/;"	e	enum:__anon68
QXL_IO_UPDATE_IRQ	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_IO_UPDATE_IRQ,$/;"	e	enum:__anon68
QXL_LOG_BUF_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	245;"	d
QXL_OP_ADD	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_ADD                       = 0x0c,$/;"	e	enum:__anon74
QXL_OP_ATOP	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_ATOP                      = 0x09,$/;"	e	enum:__anon74
QXL_OP_ATOP_REVERSE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_ATOP_REVERSE              = 0x0a,$/;"	e	enum:__anon74
QXL_OP_CLEAR	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_CLEAR                     = 0x00,$/;"	e	enum:__anon74
QXL_OP_COLOR_BURN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_COLOR_BURN                = 0x36,$/;"	e	enum:__anon74
QXL_OP_COLOR_DODGE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_COLOR_DODGE               = 0x35,$/;"	e	enum:__anon74
QXL_OP_DARKEN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_DARKEN                    = 0x33,$/;"	e	enum:__anon74
QXL_OP_DIFFERENCE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_DIFFERENCE                = 0x39,$/;"	e	enum:__anon74
QXL_OP_DST	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_DST                       = 0x02,$/;"	e	enum:__anon74
QXL_OP_EXCLUSION	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_EXCLUSION                 = 0x3a,$/;"	e	enum:__anon74
QXL_OP_HARD_LIGHT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_HARD_LIGHT                = 0x37,$/;"	e	enum:__anon74
QXL_OP_HSL_COLOR	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_HSL_COLOR                 = 0x3d,$/;"	e	enum:__anon74
QXL_OP_HSL_HUE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_HSL_HUE                   = 0x3b,$/;"	e	enum:__anon74
QXL_OP_HSL_LUMINOSITY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_HSL_LUMINOSITY            = 0x3e$/;"	e	enum:__anon74
QXL_OP_HSL_SATURATION	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_HSL_SATURATION            = 0x3c,$/;"	e	enum:__anon74
QXL_OP_IN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_IN                        = 0x05,$/;"	e	enum:__anon74
QXL_OP_IN_REVERSE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_IN_REVERSE                = 0x06,$/;"	e	enum:__anon74
QXL_OP_LIGHTEN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_LIGHTEN                   = 0x34,$/;"	e	enum:__anon74
QXL_OP_MULTIPLY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_MULTIPLY                  = 0x30,$/;"	e	enum:__anon74
QXL_OP_OUT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_OUT                       = 0x07,$/;"	e	enum:__anon74
QXL_OP_OUT_REVERSE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_OUT_REVERSE               = 0x08,$/;"	e	enum:__anon74
QXL_OP_OVER	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_OVER                      = 0x03,$/;"	e	enum:__anon74
QXL_OP_OVERLAY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_OVERLAY                   = 0x32,$/;"	e	enum:__anon74
QXL_OP_OVER_REVERSE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_OVER_REVERSE              = 0x04,$/;"	e	enum:__anon74
QXL_OP_SATURATE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_SATURATE                  = 0x0d,$/;"	e	enum:__anon74
QXL_OP_SCREEN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_SCREEN                    = 0x31,$/;"	e	enum:__anon74
QXL_OP_SOFT_LIGHT	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_SOFT_LIGHT                = 0x38,$/;"	e	enum:__anon74
QXL_OP_SOURCE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_SOURCE		     = 0x01,$/;"	e	enum:__anon74
QXL_OP_XOR	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_OP_XOR                       = 0x0b,$/;"	e	enum:__anon74
QXL_PATH_BEGIN	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_PATH_BEGIN = (1 << 0),$/;"	e	enum:__anon79
QXL_PATH_BEZIER	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_PATH_BEZIER = (1 << 4),$/;"	e	enum:__anon79
QXL_PATH_CLOSE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_PATH_CLOSE = (1 << 3),$/;"	e	enum:__anon79
QXL_PATH_END	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_PATH_END = (1 << 1),$/;"	e	enum:__anon79
QXL_PCI_RANGES	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_PCI_RANGES$/;"	e	enum:__anon67
QXL_RAM_MAGIC	spice-common/spice-protocol/spice/qxl_dev.h	58;"	d
QXL_RAM_RANGE_INDEX	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_RAM_RANGE_INDEX,$/;"	e	enum:__anon67
QXL_RELEASE_RING_SIZE	spice-common/spice-protocol/spice/qxl_dev.h	238;"	d
QXL_REVISION_DEVEL	spice-common/spice-protocol/spice/qxl_dev.h	55;"	d
QXL_REVISION_STABLE_V04	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_REVISION_STABLE_V04=0x01,$/;"	e	enum:__anon66
QXL_REVISION_STABLE_V06	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_REVISION_STABLE_V06=0x02,$/;"	e	enum:__anon66
QXL_REVISION_STABLE_V10	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_REVISION_STABLE_V10=0x03,$/;"	e	enum:__anon66
QXL_REVISION_STABLE_V12	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_REVISION_STABLE_V12=0x04,$/;"	e	enum:__anon66
QXL_ROM_MAGIC	spice-common/spice-protocol/spice/qxl_dev.h	57;"	d
QXL_ROM_RANGE_INDEX	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_ROM_RANGE_INDEX,$/;"	e	enum:__anon67
QXL_SET_IMAGE_ID	spice-common/spice-protocol/spice/qxl_dev.h	713;"	d
QXL_SURFACE_CMD_CREATE	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_SURFACE_CMD_CREATE,$/;"	e	enum:QXLSurfaceCmdType
QXL_SURFACE_CMD_DESTROY	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_SURFACE_CMD_DESTROY,$/;"	e	enum:QXLSurfaceCmdType
QXL_SURF_FLAG_KEEP_DATA	spice-common/spice-protocol/spice/qxl_dev.h	222;"	d
QXL_SURF_TYPE_PRIMARY	spice-common/spice-protocol/spice/qxl_dev.h	220;"	d
QXL_VRAM_RANGE_INDEX	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXL_VRAM_RANGE_INDEX,$/;"	e	enum:__anon67
QosPingState	server/red_channel.c	/^enum QosPingState {$/;"	g	file:
QuadInfo	client/gui/softrenderer.h	/^        struct QuadInfo {$/;"	s	class:CEGUI::SoftRenderer
QuadQueue	client/gui/softrenderer.h	/^        typedef std::multiset<QuadInfo> QuadQueue;$/;"	t	class:CEGUI::SoftRenderer
QuicContext	spice-common/common/quic.h	/^typedef void *QuicContext;$/;"	t
QuicData	server/red_worker.c	/^} QuicData;$/;"	t	typeref:struct:__anon181	file:
QuicData	spice-common/common/canvas_base.c	/^typedef struct QuicData {$/;"	s	file:
QuicData	spice-common/common/canvas_base.c	/^} QuicData;$/;"	t	typeref:struct:QuicData	file:
QuicFamily	spice-common/common/quic.c	/^typedef struct QuicFamily {$/;"	s	file:
QuicFamily	spice-common/common/quic.c	/^} QuicFamily;$/;"	t	typeref:struct:QuicFamily	file:
QuicImageType	spice-common/common/quic.h	/^} QuicImageType;$/;"	t	typeref:enum:__anon21
QuicUsrContext	spice-common/common/quic.h	/^struct QuicUsrContext {$/;"	s
QuicUsrContext	spice-common/common/quic.h	/^typedef struct QuicUsrContext QuicUsrContext;$/;"	t	typeref:struct:QuicUsrContext
QuickSortSpans	spice-common/common/lines.c	/^static void QuickSortSpans($/;"	f	file:
QuickSortSpansX	spice-common/common/lines.c	/^QuickSortSpansX (DDXPointRec points[], int widths[], int numSpans)$/;"	f	file:
QuitEvent	client/process_loop.cpp	/^    QuitEvent(int error_code) : _error_code(error_code) {}$/;"	f	class:ProcessLoop::QuitEvent
QuitEvent	client/process_loop.cpp	/^class ProcessLoop::QuitEvent: public Event {$/;"	c	class:ProcessLoop	file:
RAISE_RETRIES	client/x11/red_window.cpp	54;"	d	file:
RAM_PATH	server/spice_bitmap_utils.c	25;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	client/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	docs/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	docs/manual/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	server/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	server/tests/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	spice-common/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	spice-common/common/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	spice-common/python_modules/Makefile	/^RANLIB = ranlib$/;"	m
RASTER_OP	spice-common/common/pixman_utils.c	75;"	d	file:
RCC_FOREACH_SAFE	server/red_worker.c	1127;"	d	file:
RCC_TO_CCC	server/red_worker.c	1166;"	d	file:
RCC_TO_DCC	server/red_worker.c	1165;"	d	file:
RC_BUFFER_SIZE_FF	server/red_worker.c	112;"	d	file:
RECEIVE_BUF_SIZE	server/inputs_channel.c	54;"	d	file:
RECORD_SAMPLES_SIZE	server/snd_worker.c	46;"	d	file:
RECURSIVE	client/threads.h	/^        RECURSIVE,$/;"	e	enum:Mutex::Type
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_CLEAN_TARGETS	docs/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_CLEAN_TARGETS	server/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_CLEAN_TARGETS	spice-common/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_CLEAN_TARGETS	spice-common/spice-protocol/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RECURSIVE_TARGETS	docs/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RECURSIVE_TARGETS	server/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RECURSIVE_TARGETS	spice-common/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RECURSIVE_TARGETS	spice-common/spice-protocol/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
RED64	client/common.h	79;"	d
RED64	client/common.h	82;"	d
REDHAT_PCI_VENDOR_ID	spice-common/spice-protocol/spice/qxl_dev.h	42;"	d
REDHAT_PCI_VENDOR_ID	spice-common/spice-protocol/spice/vdi_dev.h	40;"	d
REDKEY_0	client/red_key.h	/^    REDKEY_0,$/;"	e	enum:RedKey
REDKEY_1	client/red_key.h	/^    REDKEY_1,$/;"	e	enum:RedKey
REDKEY_2	client/red_key.h	/^    REDKEY_2,$/;"	e	enum:RedKey
REDKEY_3	client/red_key.h	/^    REDKEY_3,$/;"	e	enum:RedKey
REDKEY_4	client/red_key.h	/^    REDKEY_4,$/;"	e	enum:RedKey
REDKEY_5	client/red_key.h	/^    REDKEY_5,$/;"	e	enum:RedKey
REDKEY_6	client/red_key.h	/^    REDKEY_6,$/;"	e	enum:RedKey
REDKEY_7	client/red_key.h	/^    REDKEY_7,$/;"	e	enum:RedKey
REDKEY_8	client/red_key.h	/^    REDKEY_8,$/;"	e	enum:RedKey
REDKEY_9	client/red_key.h	/^    REDKEY_9,$/;"	e	enum:RedKey
REDKEY_A	client/red_key.h	/^    REDKEY_A,$/;"	e	enum:RedKey
REDKEY_B	client/red_key.h	/^    REDKEY_B,$/;"	e	enum:RedKey
REDKEY_BACKSPACE	client/red_key.h	/^    REDKEY_BACKSPACE,$/;"	e	enum:RedKey
REDKEY_BACK_QUOTE	client/red_key.h	/^    REDKEY_BACK_QUOTE,$/;"	e	enum:RedKey
REDKEY_BACK_SLASH	client/red_key.h	/^    REDKEY_BACK_SLASH,$/;"	e	enum:RedKey
REDKEY_C	client/red_key.h	/^    REDKEY_C,$/;"	e	enum:RedKey
REDKEY_CAPS_LOCK	client/red_key.h	/^    REDKEY_CAPS_LOCK,$/;"	e	enum:RedKey
REDKEY_COMMA	client/red_key.h	/^    REDKEY_COMMA,$/;"	e	enum:RedKey
REDKEY_CTRL_BREAK	client/red_key.h	/^    REDKEY_CTRL_BREAK = REDKEY_ESCAPE_BASE + 0x46,$/;"	e	enum:RedKey
REDKEY_CTRL_PRINT_SCREEN	client/red_key.h	/^    REDKEY_CTRL_PRINT_SCREEN = REDKEY_ESCAPE_BASE + 0x37,$/;"	e	enum:RedKey
REDKEY_D	client/red_key.h	/^    REDKEY_D,$/;"	e	enum:RedKey
REDKEY_DELETE	client/red_key.h	/^    REDKEY_DELETE = REDKEY_ESCAPE_BASE + 0x53,$/;"	e	enum:RedKey
REDKEY_DOWN	client/red_key.h	/^    REDKEY_DOWN = REDKEY_ESCAPE_BASE + 0x50,$/;"	e	enum:RedKey
REDKEY_E	client/red_key.h	/^    REDKEY_E,$/;"	e	enum:RedKey
REDKEY_END	client/red_key.h	/^    REDKEY_END = REDKEY_ESCAPE_BASE + 0x4f,$/;"	e	enum:RedKey
REDKEY_ENTER	client/red_key.h	/^    REDKEY_ENTER,$/;"	e	enum:RedKey
REDKEY_EQUALS	client/red_key.h	/^    REDKEY_EQUALS,$/;"	e	enum:RedKey
REDKEY_ESCAPE	client/red_key.h	/^    REDKEY_ESCAPE,$/;"	e	enum:RedKey
REDKEY_ESCAPE_BASE	client/red_key.h	/^    REDKEY_ESCAPE_BASE = 0x100,$/;"	e	enum:RedKey
REDKEY_EUROPEAN	client/red_key.h	/^    REDKEY_EUROPEAN = 0x56,$/;"	e	enum:RedKey
REDKEY_F	client/red_key.h	/^    REDKEY_F,$/;"	e	enum:RedKey
REDKEY_F1	client/red_key.h	/^    REDKEY_F1,$/;"	e	enum:RedKey
REDKEY_F10	client/red_key.h	/^    REDKEY_F10,$/;"	e	enum:RedKey
REDKEY_F11	client/red_key.h	/^    REDKEY_F11,$/;"	e	enum:RedKey
REDKEY_F12	client/red_key.h	/^    REDKEY_F12,$/;"	e	enum:RedKey
REDKEY_F2	client/red_key.h	/^    REDKEY_F2,$/;"	e	enum:RedKey
REDKEY_F3	client/red_key.h	/^    REDKEY_F3,$/;"	e	enum:RedKey
REDKEY_F4	client/red_key.h	/^    REDKEY_F4,$/;"	e	enum:RedKey
REDKEY_F5	client/red_key.h	/^    REDKEY_F5,$/;"	e	enum:RedKey
REDKEY_F6	client/red_key.h	/^    REDKEY_F6,$/;"	e	enum:RedKey
REDKEY_F7	client/red_key.h	/^    REDKEY_F7,$/;"	e	enum:RedKey
REDKEY_F8	client/red_key.h	/^    REDKEY_F8,$/;"	e	enum:RedKey
REDKEY_F9	client/red_key.h	/^    REDKEY_F9,$/;"	e	enum:RedKey
REDKEY_FAKE_L_SHIFT	client/red_key.h	/^    REDKEY_FAKE_L_SHIFT = REDKEY_ESCAPE_BASE + 0x2a,$/;"	e	enum:RedKey
REDKEY_FAKE_R_SHIFT	client/red_key.h	/^    REDKEY_FAKE_R_SHIFT = REDKEY_ESCAPE_BASE + 0x36,$/;"	e	enum:RedKey
REDKEY_G	client/red_key.h	/^    REDKEY_G,$/;"	e	enum:RedKey
REDKEY_H	client/red_key.h	/^    REDKEY_H,$/;"	e	enum:RedKey
REDKEY_HOME	client/red_key.h	/^    REDKEY_HOME = REDKEY_ESCAPE_BASE + 0x47,$/;"	e	enum:RedKey
REDKEY_I	client/red_key.h	/^    REDKEY_I,$/;"	e	enum:RedKey
REDKEY_INSERT	client/red_key.h	/^    REDKEY_INSERT = REDKEY_ESCAPE_BASE + 0x52,$/;"	e	enum:RedKey
REDKEY_INVALID	client/red_key.h	/^    REDKEY_INVALID,$/;"	e	enum:RedKey
REDKEY_J	client/red_key.h	/^    REDKEY_J,$/;"	e	enum:RedKey
REDKEY_JAPANESE_BACKSLASH	client/red_key.h	/^    REDKEY_JAPANESE_BACKSLASH = 0x73,$/;"	e	enum:RedKey
REDKEY_JAPANESE_HENKAN	client/red_key.h	/^    REDKEY_JAPANESE_HENKAN = 0x79,$/;"	e	enum:RedKey
REDKEY_JAPANESE_HIRAGANA_KATAKANA	client/red_key.h	/^    REDKEY_JAPANESE_HIRAGANA_KATAKANA = 0x70,$/;"	e	enum:RedKey
REDKEY_JAPANESE_MUHENKAN	client/red_key.h	/^    REDKEY_JAPANESE_MUHENKAN = 0x7B,$/;"	e	enum:RedKey
REDKEY_JAPANESE_YEN	client/red_key.h	/^    REDKEY_JAPANESE_YEN = 0x7D,$/;"	e	enum:RedKey
REDKEY_K	client/red_key.h	/^    REDKEY_K,$/;"	e	enum:RedKey
REDKEY_KOREAN_HANGUL	client/red_key.h	/^    REDKEY_KOREAN_HANGUL = 0xf2,$/;"	e	enum:RedKey
REDKEY_KOREAN_HANGUL_HANJA	client/red_key.h	/^    REDKEY_KOREAN_HANGUL_HANJA = 0xf1,$/;"	e	enum:RedKey
REDKEY_L	client/red_key.h	/^    REDKEY_L,$/;"	e	enum:RedKey
REDKEY_LEFT	client/red_key.h	/^    REDKEY_LEFT = REDKEY_ESCAPE_BASE + 0x4b,$/;"	e	enum:RedKey
REDKEY_LEFT_CMD	client/red_key.h	/^    REDKEY_LEFT_CMD = REDKEY_ESCAPE_BASE + 0x5b,$/;"	e	enum:RedKey
REDKEY_L_ALT	client/red_key.h	/^    REDKEY_L_ALT,$/;"	e	enum:RedKey
REDKEY_L_BRACKET	client/red_key.h	/^    REDKEY_L_BRACKET,$/;"	e	enum:RedKey
REDKEY_L_CTRL	client/red_key.h	/^    REDKEY_L_CTRL,$/;"	e	enum:RedKey
REDKEY_L_SHIFT	client/red_key.h	/^    REDKEY_L_SHIFT,$/;"	e	enum:RedKey
REDKEY_M	client/red_key.h	/^    REDKEY_M,$/;"	e	enum:RedKey
REDKEY_MENU	client/red_key.h	/^    REDKEY_MENU = REDKEY_ESCAPE_BASE + 0x5d,$/;"	e	enum:RedKey
REDKEY_MINUS	client/red_key.h	/^    REDKEY_MINUS,$/;"	e	enum:RedKey
REDKEY_MUTE	client/red_key.h	/^    REDKEY_MUTE = REDKEY_ESCAPE_BASE + 0x20,$/;"	e	enum:RedKey
REDKEY_N	client/red_key.h	/^    REDKEY_N,$/;"	e	enum:RedKey
REDKEY_NUM_KEYS	client/red_key.h	/^    REDKEY_NUM_KEYS$/;"	e	enum:RedKey
REDKEY_NUM_LOCK	client/red_key.h	/^    REDKEY_NUM_LOCK,$/;"	e	enum:RedKey
REDKEY_O	client/red_key.h	/^    REDKEY_O,$/;"	e	enum:RedKey
REDKEY_P	client/red_key.h	/^    REDKEY_P,$/;"	e	enum:RedKey
REDKEY_PAD_0	client/red_key.h	/^    REDKEY_PAD_0,$/;"	e	enum:RedKey
REDKEY_PAD_1	client/red_key.h	/^    REDKEY_PAD_1,$/;"	e	enum:RedKey
REDKEY_PAD_2	client/red_key.h	/^    REDKEY_PAD_2,$/;"	e	enum:RedKey
REDKEY_PAD_3	client/red_key.h	/^    REDKEY_PAD_3,$/;"	e	enum:RedKey
REDKEY_PAD_4	client/red_key.h	/^    REDKEY_PAD_4,$/;"	e	enum:RedKey
REDKEY_PAD_5	client/red_key.h	/^    REDKEY_PAD_5,$/;"	e	enum:RedKey
REDKEY_PAD_6	client/red_key.h	/^    REDKEY_PAD_6,$/;"	e	enum:RedKey
REDKEY_PAD_7	client/red_key.h	/^    REDKEY_PAD_7,$/;"	e	enum:RedKey
REDKEY_PAD_8	client/red_key.h	/^    REDKEY_PAD_8,$/;"	e	enum:RedKey
REDKEY_PAD_9	client/red_key.h	/^    REDKEY_PAD_9,$/;"	e	enum:RedKey
REDKEY_PAD_DIVIDE	client/red_key.h	/^    REDKEY_PAD_DIVIDE = REDKEY_ESCAPE_BASE + 0x35,$/;"	e	enum:RedKey
REDKEY_PAD_ENTER	client/red_key.h	/^    REDKEY_PAD_ENTER = REDKEY_ESCAPE_BASE + 0x1c,$/;"	e	enum:RedKey
REDKEY_PAD_MINUS	client/red_key.h	/^    REDKEY_PAD_MINUS,$/;"	e	enum:RedKey
REDKEY_PAD_MULTIPLY	client/red_key.h	/^    REDKEY_PAD_MULTIPLY,$/;"	e	enum:RedKey
REDKEY_PAD_PLUS	client/red_key.h	/^    REDKEY_PAD_PLUS,$/;"	e	enum:RedKey
REDKEY_PAD_POINT	client/red_key.h	/^    REDKEY_PAD_POINT,$/;"	e	enum:RedKey
REDKEY_PAGEDOWN	client/red_key.h	/^    REDKEY_PAGEDOWN = REDKEY_ESCAPE_BASE + 0x51,$/;"	e	enum:RedKey
REDKEY_PAGEUP	client/red_key.h	/^    REDKEY_PAGEUP = REDKEY_ESCAPE_BASE + 0x49,$/;"	e	enum:RedKey
REDKEY_PAUSE	client/red_key.h	/^    REDKEY_PAUSE,$/;"	e	enum:RedKey
REDKEY_PERIOD	client/red_key.h	/^    REDKEY_PERIOD,$/;"	e	enum:RedKey
REDKEY_Q	client/red_key.h	/^    REDKEY_Q,$/;"	e	enum:RedKey
REDKEY_QUOTE	client/red_key.h	/^    REDKEY_QUOTE,$/;"	e	enum:RedKey
REDKEY_R	client/red_key.h	/^    REDKEY_R,$/;"	e	enum:RedKey
REDKEY_RIGHT	client/red_key.h	/^    REDKEY_RIGHT = REDKEY_ESCAPE_BASE + 0x4d,$/;"	e	enum:RedKey
REDKEY_RIGHT_CMD	client/red_key.h	/^    REDKEY_RIGHT_CMD = REDKEY_ESCAPE_BASE + 0x5c,$/;"	e	enum:RedKey
REDKEY_R_ALT	client/red_key.h	/^    REDKEY_R_ALT = REDKEY_ESCAPE_BASE + 0x38,$/;"	e	enum:RedKey
REDKEY_R_BRACKET	client/red_key.h	/^    REDKEY_R_BRACKET,$/;"	e	enum:RedKey
REDKEY_R_CTRL	client/red_key.h	/^    REDKEY_R_CTRL = REDKEY_ESCAPE_BASE + 0x1d,$/;"	e	enum:RedKey
REDKEY_R_SHIFT	client/red_key.h	/^    REDKEY_R_SHIFT,$/;"	e	enum:RedKey
REDKEY_S	client/red_key.h	/^    REDKEY_S,$/;"	e	enum:RedKey
REDKEY_SCROLL_LOCK	client/red_key.h	/^    REDKEY_SCROLL_LOCK,$/;"	e	enum:RedKey
REDKEY_SEMICOLON	client/red_key.h	/^    REDKEY_SEMICOLON,$/;"	e	enum:RedKey
REDKEY_SLASH	client/red_key.h	/^    REDKEY_SLASH,$/;"	e	enum:RedKey
REDKEY_SPACE	client/red_key.h	/^    REDKEY_SPACE,$/;"	e	enum:RedKey
REDKEY_T	client/red_key.h	/^    REDKEY_T,$/;"	e	enum:RedKey
REDKEY_TAB	client/red_key.h	/^    REDKEY_TAB,$/;"	e	enum:RedKey
REDKEY_U	client/red_key.h	/^    REDKEY_U,$/;"	e	enum:RedKey
REDKEY_UP	client/red_key.h	/^    REDKEY_UP = REDKEY_ESCAPE_BASE + 0x48,$/;"	e	enum:RedKey
REDKEY_V	client/red_key.h	/^    REDKEY_V,$/;"	e	enum:RedKey
REDKEY_VOLUME_DOWN	client/red_key.h	/^    REDKEY_VOLUME_DOWN = REDKEY_ESCAPE_BASE + 0x2e,$/;"	e	enum:RedKey
REDKEY_VOLUME_UP	client/red_key.h	/^    REDKEY_VOLUME_UP = REDKEY_ESCAPE_BASE + 0x30,$/;"	e	enum:RedKey
REDKEY_W	client/red_key.h	/^    REDKEY_W,$/;"	e	enum:RedKey
REDKEY_X	client/red_key.h	/^    REDKEY_X,$/;"	e	enum:RedKey
REDKEY_Y	client/red_key.h	/^    REDKEY_Y,$/;"	e	enum:RedKey
REDKEY_Z	client/red_key.h	/^    REDKEY_Z,$/;"	e	enum:RedKey
REDS_AGENT_WINDOW_SIZE	server/inputs_channel.c	50;"	d	file:
REDS_AGENT_WINDOW_SIZE	server/main_channel.h	29;"	d
REDS_MAX_STAT_NODES	server/reds-private.h	84;"	d
REDS_MIG_ABORT	server/reds.c	90;"	d	file:
REDS_MIG_CONTINUE	server/reds.c	89;"	d	file:
REDS_MIG_DIFF_VERSION	server/reds.c	91;"	d	file:
REDS_MIG_VERSION	server/reds.c	88;"	d	file:
REDS_NUM_INTERNAL_AGENT_MESSAGES	server/inputs_channel.c	51;"	d	file:
REDS_NUM_INTERNAL_AGENT_MESSAGES	server/main_channel.h	30;"	d
REDS_PRIVATE_H	server/reds-private.h	2;"	d
REDS_SASL_ERROR_AUTH_FAILED	server/reds_stream.h	/^    REDS_SASL_ERROR_AUTH_FAILED$/;"	e	enum:__anon154
REDS_SASL_ERROR_CONTINUE	server/reds_stream.h	/^    REDS_SASL_ERROR_CONTINUE,$/;"	e	enum:__anon154
REDS_SASL_ERROR_GENERIC	server/reds_stream.h	/^    REDS_SASL_ERROR_GENERIC,$/;"	e	enum:__anon154
REDS_SASL_ERROR_INVALID_DATA	server/reds_stream.h	/^    REDS_SASL_ERROR_INVALID_DATA,$/;"	e	enum:__anon154
REDS_SASL_ERROR_OK	server/reds_stream.h	/^    REDS_SASL_ERROR_OK,$/;"	e	enum:__anon154
REDS_SASL_ERROR_RETRY	server/reds_stream.h	/^    REDS_SASL_ERROR_RETRY,$/;"	e	enum:__anon154
REDS_SAVE_VERSION	server/reds.c	2657;"	d	file:
REDS_STAT_SHM_SIZE	server/reds-private.h	85;"	d
REDS_STREAM_SSL_STATUS_ERROR	server/reds_stream.h	/^    REDS_STREAM_SSL_STATUS_ERROR,$/;"	e	enum:__anon153
REDS_STREAM_SSL_STATUS_OK	server/reds_stream.h	/^    REDS_STREAM_SSL_STATUS_OK,$/;"	e	enum:__anon153
REDS_STREAM_SSL_STATUS_WAIT_FOR_READ	server/reds_stream.h	/^    REDS_STREAM_SSL_STATUS_WAIT_FOR_READ,$/;"	e	enum:__anon153
REDS_STREAM_SSL_STATUS_WAIT_FOR_WRITE	server/reds_stream.h	/^    REDS_STREAM_SSL_STATUS_WAIT_FOR_WRITE$/;"	e	enum:__anon153
REDS_TOKENS_TO_SEND	server/reds.c	93;"	d	file:
REDS_VDI_PORT_NUM_RECEIVE_BUFFS	server/reds.c	94;"	d	file:
RED_ABI_TRANSLATE_H	server/red_parse_qxl.h	20;"	d
RED_BITMAP_UTILS_RGB16	server/red_bitmap_utils.h	155;"	d
RED_BITMAP_UTILS_RGB16	server/red_worker.c	6099;"	d	file:
RED_BITMAP_UTILS_RGB24	server/red_bitmap_utils.h	156;"	d
RED_BITMAP_UTILS_RGB24	server/red_worker.c	6101;"	d	file:
RED_BITMAP_UTILS_RGB32	server/red_bitmap_utils.h	157;"	d
RED_BITMAP_UTILS_RGB32	server/red_worker.c	6103;"	d	file:
RED_COMPRESS_BUF_SIZE	server/red_worker.c	146;"	d	file:
RED_ICON_RES_ID	client/windows/resource.h	5;"	d
RED_ICON_RES_ID	client/x11/resource.h	21;"	d
RED_MAX_RENDERERS	server/red_worker.h	79;"	d
RED_MOUSE_BUTTON_STATE_TO_AGENT	server/inputs_channel.c	212;"	d	file:
RED_MOUSE_BUTTON_STATE_TO_AGENT	server/reds.c	1628;"	d	file:
RED_MOUSE_STATE_TO_LOCAL	server/inputs_channel.c	207;"	d	file:
RED_MOUSE_STATE_TO_LOCAL	server/reds.c	1623;"	d	file:
RED_RELEASE_BUNCH_SIZE	server/red_worker.c	5279;"	d	file:
RED_RENDERER_INVALID	server/red_worker.h	/^    RED_RENDERER_INVALID,$/;"	e	enum:__anon135
RED_RENDERER_OGL_PBUF	server/red_worker.h	/^    RED_RENDERER_OGL_PBUF,$/;"	e	enum:__anon135
RED_RENDERER_OGL_PIXMAP	server/red_worker.h	/^    RED_RENDERER_OGL_PIXMAP,$/;"	e	enum:__anon135
RED_RENDERER_SW	server/red_worker.h	/^    RED_RENDERER_SW,$/;"	e	enum:__anon135
RED_SCREEN_ROTATION_0	client/x11/platform.cpp	/^    RED_SCREEN_ROTATION_0,$/;"	e	enum:RedScreenRotation	file:
RED_SCREEN_ROTATION_180	client/x11/platform.cpp	/^    RED_SCREEN_ROTATION_180,$/;"	e	enum:RedScreenRotation	file:
RED_SCREEN_ROTATION_270	client/x11/platform.cpp	/^    RED_SCREEN_ROTATION_270,$/;"	e	enum:RedScreenRotation	file:
RED_SCREEN_ROTATION_90	client/x11/platform.cpp	/^    RED_SCREEN_ROTATION_90,$/;"	e	enum:RedScreenRotation	file:
RED_STREAM_CHANNEL_CAPACITY	server/red_worker.c	135;"	d	file:
RED_STREAM_CLIENT_REPORT_TIMEOUT	server/red_worker.c	138;"	d	file:
RED_STREAM_CLIENT_REPORT_WINDOW	server/red_worker.c	137;"	d	file:
RED_STREAM_CONTINUS_MAX_DELTA	server/red_worker.c	128;"	d	file:
RED_STREAM_DEFAULT_HIGH_START_BIT_RATE	server/red_worker.c	139;"	d	file:
RED_STREAM_DEFAULT_LOW_START_BIT_RATE	server/red_worker.c	140;"	d	file:
RED_STREAM_DETACTION_MAX_DELTA	server/red_worker.c	127;"	d	file:
RED_STREAM_FRAMES_RESET_CONDITION	server/red_worker.c	132;"	d	file:
RED_STREAM_FRAMES_START_CONDITION	server/red_worker.c	130;"	d	file:
RED_STREAM_GRADUAL_FRAMES_START_CONDITION	server/red_worker.c	131;"	d	file:
RED_STREAM_INPUT_FPS_TIMEOUT	server/red_worker.c	134;"	d	file:
RED_STREAM_MIN_SIZE	server/red_worker.c	133;"	d	file:
RED_STREAM_TIMOUT	server/red_worker.c	129;"	d	file:
RED_SUBPIXEL_ORDER_H_BGR	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_H_BGR,$/;"	e	enum:RedSubpixelOrder	file:
RED_SUBPIXEL_ORDER_H_RGB	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_H_RGB,$/;"	e	enum:RedSubpixelOrder	file:
RED_SUBPIXEL_ORDER_NONE	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_NONE,$/;"	e	enum:RedSubpixelOrder	file:
RED_SUBPIXEL_ORDER_UNKNOWN	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_UNKNOWN,$/;"	e	enum:RedSubpixelOrder	file:
RED_SUBPIXEL_ORDER_V_BGR	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_V_BGR,$/;"	e	enum:RedSubpixelOrder	file:
RED_SUBPIXEL_ORDER_V_RGB	client/x11/platform.cpp	/^    RED_SUBPIXEL_ORDER_V_RGB,$/;"	e	enum:RedSubpixelOrder	file:
RED_WORKER_MESSAGE_ADD_MEMSLOT	server/red_worker.h	/^    RED_WORKER_MESSAGE_ADD_MEMSLOT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_ADD_MEMSLOT_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_ADD_MEMSLOT_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_COUNT	server/red_worker.h	/^    RED_WORKER_MESSAGE_COUNT \/\/ LAST$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CREATE_PRIMARY_SURFACE	server/red_worker.h	/^    RED_WORKER_MESSAGE_CREATE_PRIMARY_SURFACE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CREATE_PRIMARY_SURFACE_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_CREATE_PRIMARY_SURFACE_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CURSOR_CHANNEL_CREATE	server/red_worker.h	/^    RED_WORKER_MESSAGE_CURSOR_CHANNEL_CREATE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CURSOR_CONNECT	server/red_worker.h	/^    RED_WORKER_MESSAGE_CURSOR_CONNECT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CURSOR_DISCONNECT	server/red_worker.h	/^    RED_WORKER_MESSAGE_CURSOR_DISCONNECT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_CURSOR_MIGRATE	server/red_worker.h	/^    RED_WORKER_MESSAGE_CURSOR_MIGRATE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DEL_MEMSLOT	server/red_worker.h	/^    RED_WORKER_MESSAGE_DEL_MEMSLOT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_PRIMARY_SURFACE	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_PRIMARY_SURFACE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_PRIMARY_SURFACE_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_PRIMARY_SURFACE_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_SURFACES	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_SURFACES,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_SURFACES_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_SURFACES_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_SURFACE_WAIT	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_SURFACE_WAIT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DESTROY_SURFACE_WAIT_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_DESTROY_SURFACE_WAIT_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DISPLAY_CHANNEL_CREATE	server/red_worker.h	/^    RED_WORKER_MESSAGE_DISPLAY_CHANNEL_CREATE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DISPLAY_CONNECT	server/red_worker.h	/^    RED_WORKER_MESSAGE_DISPLAY_CONNECT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DISPLAY_DISCONNECT	server/red_worker.h	/^    RED_WORKER_MESSAGE_DISPLAY_DISCONNECT,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DISPLAY_MIGRATE	server/red_worker.h	/^    RED_WORKER_MESSAGE_DISPLAY_MIGRATE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_DRIVER_UNLOAD	server/red_worker.h	/^    RED_WORKER_MESSAGE_DRIVER_UNLOAD,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_FLUSH_SURFACES_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_FLUSH_SURFACES_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_LOADVM_COMMANDS	server/red_worker.h	/^    RED_WORKER_MESSAGE_LOADVM_COMMANDS,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_MONITORS_CONFIG_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_MONITORS_CONFIG_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_NOP	server/red_worker.h	/^    RED_WORKER_MESSAGE_NOP,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_OOM	server/red_worker.h	/^    RED_WORKER_MESSAGE_OOM,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_READY	server/red_worker.h	/^    RED_WORKER_MESSAGE_READY,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_RESET_CURSOR	server/red_worker.h	/^    RED_WORKER_MESSAGE_RESET_CURSOR,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_RESET_IMAGE_CACHE	server/red_worker.h	/^    RED_WORKER_MESSAGE_RESET_IMAGE_CACHE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_RESET_MEMSLOTS	server/red_worker.h	/^    RED_WORKER_MESSAGE_RESET_MEMSLOTS,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_SET_COMPRESSION	server/red_worker.h	/^    RED_WORKER_MESSAGE_SET_COMPRESSION,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_SET_MOUSE_MODE	server/red_worker.h	/^    RED_WORKER_MESSAGE_SET_MOUSE_MODE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_SET_STREAMING_VIDEO	server/red_worker.h	/^    RED_WORKER_MESSAGE_SET_STREAMING_VIDEO,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_SET_STREAMING_VIDEO_COMPRESSION	server/red_worker.h	/^    RED_WORKER_MESSAGE_SET_STREAMING_VIDEO_COMPRESSION,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_START	server/red_worker.h	/^    RED_WORKER_MESSAGE_START,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_STOP	server/red_worker.h	/^    RED_WORKER_MESSAGE_STOP,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_UPDATE	server/red_worker.h	/^    RED_WORKER_MESSAGE_UPDATE,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_UPDATE_ASYNC	server/red_worker.h	/^    RED_WORKER_MESSAGE_UPDATE_ASYNC,$/;"	e	enum:__anon134
RED_WORKER_MESSAGE_WAKEUP	server/red_worker.h	/^    RED_WORKER_MESSAGE_WAKEUP,$/;"	e	enum:__anon134
RED_WORKER_PENDING_OOM	server/red_worker.h	/^    RED_WORKER_PENDING_OOM,$/;"	e	enum:__anon133
RED_WORKER_PENDING_WAKEUP	server/red_worker.h	/^    RED_WORKER_PENDING_WAKEUP,$/;"	e	enum:__anon133
REF_SEG_IS_VALID	server/glz_encoder_dictionary_protected.h	176;"	d
REGION_TEST_ALL	spice-common/common/region.h	35;"	d
REGION_TEST_LEFT_EXCLUSIVE	spice-common/common/region.h	32;"	d
REGION_TEST_RIGHT_EXCLUSIVE	spice-common/common/region.h	33;"	d
REGION_TEST_SHARED	spice-common/common/region.h	34;"	d
REING_SIZE_MS	client/x11/playback.cpp	25;"	d	file:
RELRO_LDFLAGS	Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RELRO_LDFLAGS	client/Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RELRO_LDFLAGS	docs/Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RELRO_LDFLAGS	docs/manual/Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RELRO_LDFLAGS	server/Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RELRO_LDFLAGS	server/tests/Makefile	/^RELRO_LDFLAGS = -Wl,-z -Wl,relro -Wl,-z -Wl,now$/;"	m
RENDER_TYPE_FBO	client/red_pixmap_gl.h	/^    RENDER_TYPE_FBO,$/;"	e	enum:RenderType
RENDER_TYPE_PBUFF	client/red_pixmap_gl.h	/^    RENDER_TYPE_PBUFF,$/;"	e	enum:RenderType
REQUIRED_ARGUMENT	client/cmd_line_parser.h	/^        REQUIRED_ARGUMENT,$/;"	e	enum:CmdLineParser::OptionType
RESET_TIMEOUT	client/display_channel.cpp	554;"	d	file:
RGB16_555	client/red_drawable.h	/^        RGB16_555,$/;"	e	enum:RedDrawable::Format
RGB16_565	client/red_drawable.h	/^        RGB16_565,$/;"	e	enum:RedDrawable::Format
RGB32	client/red_drawable.h	/^        RGB32,$/;"	e	enum:RedDrawable::Format
RGBConverter	client/jpeg_decoder.h	/^class RGBConverter {$/;"	c
RGBToBGRConverter	client/jpeg_decoder.h	/^class RGBToBGRConverter : public RGBConverter {$/;"	c
RGBToBGRXConverter	client/jpeg_decoder.h	/^class RGBToBGRXConverter : public RGBConverter {$/;"	c
RGB_BYTES_PER_PIXEL	spice-common/common/lz_common.h	/^static const int RGB_BYTES_PER_PIXEL[] = {0, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 1};$/;"	v
RING_FOREACH	spice-common/common/ring.h	143;"	d
RING_FOREACH_REVERSED	spice-common/common/ring.h	148;"	d
RING_FOREACH_SAFE	spice-common/common/ring.h	137;"	d
RING_SIZE_MS	client/windows/playback.cpp	27;"	d	file:
RING_SIZE_MS	client/windows/record.cpp	26;"	d	file:
RLE	spice-common/common/quic.c	30;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_rgb_tmpl.c	189;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_rgb_tmpl.c	197;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_rgb_tmpl.c	735;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_tmpl.c	54;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_tmpl.c	626;"	d	file:
RLE_PRED_1_IMP	spice-common/common/quic_tmpl.c	62;"	d	file:
RLE_PRED_2	spice-common/common/quic.c	34;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_rgb_tmpl.c	201;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_rgb_tmpl.c	208;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_rgb_tmpl.c	736;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_tmpl.c	627;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_tmpl.c	66;"	d	file:
RLE_PRED_2_IMP	spice-common/common/quic_tmpl.c	73;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_rgb_tmpl.c	212;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_rgb_tmpl.c	217;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_rgb_tmpl.c	737;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_tmpl.c	628;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_tmpl.c	77;"	d	file:
RLE_PRED_3_IMP	spice-common/common/quic_tmpl.c	82;"	d	file:
RLE_STAT	spice-common/common/quic.c	31;"	d	file:
ROP3_FILL_HANDLERS	spice-common/common/rop3.c	369;"	d	file:
ROP3_HANDLERS	spice-common/common/rop3.c	145;"	d	file:
ROP3_HANDLERS_DEPTH	spice-common/common/rop3.c	63;"	d	file:
ROP3_NUM_OPS	spice-common/common/rop3.c	36;"	d	file:
ROPInput	spice-common/common/canvas_base.c	/^} ROPInput;$/;"	t	typeref:enum:__anon14	file:
ROP_INPUT_BRUSH	spice-common/common/canvas_base.c	/^    ROP_INPUT_BRUSH,$/;"	e	enum:__anon14	file:
ROP_INPUT_DEST	spice-common/common/canvas_base.c	/^    ROP_INPUT_DEST$/;"	e	enum:__anon14	file:
ROP_INPUT_SRC	spice-common/common/canvas_base.c	/^    ROP_INPUT_SRC,$/;"	e	enum:__anon14	file:
ROP_TABLE	spice-common/common/pixman_utils.c	116;"	d	file:
ROUND	spice-common/common/canvas_base.c	43;"	d	file:
R_ALT_MODIFIER	client/platform.h	/^        R_ALT_MODIFIER = (1 << R_ALT_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
R_ALT_MODIFIER_SHIFT	client/platform.h	/^        R_ALT_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
R_CTRL_MODIFIER	client/platform.h	/^        R_CTRL_MODIFIER = (1 << R_CTRL_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
R_CTRL_MODIFIER_SHIFT	client/platform.h	/^        R_CTRL_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
R_SHIFT_MODIFIER	client/platform.h	/^        R_SHIFT_MODIFIER = (1 << R_SHIFT_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon106
R_SHIFT_MODIFIER_SHIFT	client/platform.h	/^        R_SHIFT_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon106
ReadWriteMutex	client/read_write_mutex.h	/^    ReadWriteMutex()$/;"	f	class:ReadWriteMutex
ReadWriteMutex	client/read_write_mutex.h	/^class ReadWriteMutex {$/;"	c
ReaderAddEvent	client/smartcard_channel.h	/^    ReaderAddEvent(SmartCardChannel* smartcard_channel, VEvent* vevent)$/;"	f	class:ReaderAddEvent
ReaderAddEvent	client/smartcard_channel.h	/^class ReaderAddEvent: public VEventEvent {$/;"	c
ReaderData	client/smartcard_channel.h	/^    ReaderData() :$/;"	f	struct:ReaderData
ReaderData	client/smartcard_channel.h	/^struct ReaderData {$/;"	s
ReaderRemoveEvent	client/smartcard_channel.h	/^    ReaderRemoveEvent(SmartCardChannel* smartcard_channel, VEvent* vevent)$/;"	f	class:ReaderRemoveEvent
ReaderRemoveEvent	client/smartcard_channel.h	/^class ReaderRemoveEvent: public VEventEvent {$/;"	c
Readers	server/smartcard.c	/^static struct Readers {$/;"	s	file:
ReceiveBuffer	client/client_net_socket.h	/^    ReceiveBuffer() {}$/;"	f	class:ClientNetSocket::ReceiveBuffer
ReceiveBuffer	client/client_net_socket.h	/^class ClientNetSocket::ReceiveBuffer {$/;"	c	class:ClientNetSocket
ReceiveException	client/client_net_socket.h	/^    class ReceiveException {};$/;"	c	class:ClientNetSocket
RecordChannel	client/audio_channels.h	/^class RecordChannel: public RedChannel, private Platform::RecordClient {$/;"	c
RecordChannel	client/record_channel.cpp	/^RecordChannel::RecordChannel(RedClient& client, uint32_t id)$/;"	f	class:RecordChannel
RecordChannel	server/snd_worker.c	/^typedef struct RecordChannel {$/;"	s	file:
RecordChannel	server/snd_worker.c	/^} RecordChannel;$/;"	t	typeref:struct:RecordChannel	file:
RecordClient	client/platform.h	/^class Platform::RecordClient {$/;"	c	class:Platform
RecordCommand	server/snd_worker.c	/^enum RecordCommand {$/;"	g	file:
RecordFactory	client/record_channel.cpp	/^    RecordFactory() : ChannelFactory(SPICE_CHANNEL_RECORD) {}$/;"	f	class:RecordFactory
RecordFactory	client/record_channel.cpp	/^class RecordFactory: public ChannelFactory {$/;"	c	file:
RecordHandler	client/record_channel.cpp	/^    RecordHandler(RecordChannel& channel)$/;"	f	class:RecordHandler
RecordHandler	client/record_channel.cpp	/^class RecordHandler: public MessageHandlerImp<RecordChannel, SPICE_CHANNEL_RECORD> {$/;"	c	file:
RecordSamplesMessage	client/record_channel.cpp	/^RecordSamplesMessage::RecordSamplesMessage(RecordChannel& channel)$/;"	f	class:RecordSamplesMessage
RecordSamplesMessage	client/record_channel.cpp	/^class RecordSamplesMessage: public RedChannel::OutMessage {$/;"	c	file:
RectI	client/gui/softrenderer.h	/^        struct RectI {$/;"	s	class:CEGUI::SoftRenderer
RecurciveLock	client/threads.h	/^typedef Lock RecurciveLock;$/;"	t
RecurciveMutex	client/threads.h	/^    RecurciveMutex() : Mutex(Mutex::RECURSIVE) {}$/;"	f	class:RecurciveMutex
RecurciveMutex	client/threads.h	/^class RecurciveMutex: public Mutex {$/;"	c
RedChannel	client/red_channel.cpp	/^RedChannel::RedChannel(RedClient& client, uint8_t type, uint8_t id,$/;"	f	class:RedChannel
RedChannel	client/red_channel.h	/^class RedChannel: public RedChannelBase {$/;"	c
RedChannel	server/red_channel.h	/^struct RedChannel {$/;"	s
RedChannel	server/red_channel.h	/^typedef struct RedChannel RedChannel;$/;"	t	typeref:struct:RedChannel
RedChannelBase	client/red_channel.cpp	/^RedChannelBase::RedChannelBase(uint8_t type, uint8_t id, const ChannelCaps& common_caps,$/;"	f	class:RedChannelBase
RedChannelBase	client/red_channel.h	/^class RedChannelBase: public RedPeer {$/;"	c
RedChannelCapabilities	server/red_channel.h	/^typedef struct RedChannelCapabilities {$/;"	s
RedChannelCapabilities	server/red_channel.h	/^} RedChannelCapabilities;$/;"	t	typeref:struct:RedChannelCapabilities
RedChannelClient	server/red_channel.h	/^struct RedChannelClient {$/;"	s
RedChannelClient	server/red_channel.h	/^typedef struct RedChannelClient RedChannelClient;$/;"	t	typeref:struct:RedChannelClient
RedChannelClientConnectivityMonitor	server/red_channel.h	/^typedef struct RedChannelClientConnectivityMonitor {$/;"	s
RedChannelClientConnectivityMonitor	server/red_channel.h	/^} RedChannelClientConnectivityMonitor;$/;"	t	typeref:struct:RedChannelClientConnectivityMonitor
RedChannelClientLatencyMonitor	server/red_channel.h	/^typedef struct RedChannelClientLatencyMonitor {$/;"	s
RedChannelClientLatencyMonitor	server/red_channel.h	/^} RedChannelClientLatencyMonitor;$/;"	t	typeref:struct:RedChannelClientLatencyMonitor
RedClient	client/red_client.cpp	/^RedClient::RedClient(Application& application)$/;"	f	class:RedClient
RedClient	client/red_client.h	/^class RedClient: public RedChannel,$/;"	c
RedClient	server/red_channel.h	/^struct RedClient {$/;"	s
RedClient	server/red_channel.h	/^typedef struct RedClient RedClient;$/;"	t	typeref:struct:RedClient
RedCompressBuf	server/red_worker.c	/^struct RedCompressBuf {$/;"	s	file:
RedCompressBuf	server/red_worker.c	/^typedef struct RedCompressBuf RedCompressBuf;$/;"	t	typeref:struct:RedCompressBuf	file:
RedCursorCmd	server/red_parse_qxl.h	/^typedef struct RedCursorCmd {$/;"	s
RedCursorCmd	server/red_parse_qxl.h	/^} RedCursorCmd;$/;"	t	typeref:struct:RedCursorCmd
RedDataChunk	server/red_parse_qxl.h	/^struct RedDataChunk {$/;"	s
RedDataChunk	server/red_parse_qxl.h	/^typedef struct RedDataChunk RedDataChunk;$/;"	t	typeref:struct:RedDataChunk
RedDispatcher	server/red_dispatcher.c	/^struct RedDispatcher {$/;"	s	file:
RedDispatcher	server/red_worker.h	/^typedef struct RedDispatcher RedDispatcher;$/;"	t	typeref:struct:RedDispatcher
RedDrawable	client/red_drawable.h	/^    RedDrawable() {}$/;"	f	class:RedDrawable
RedDrawable	client/red_drawable.h	/^class RedDrawable: public PixelsSource {$/;"	c
RedDrawable	server/red_parse_qxl.h	/^typedef struct RedDrawable {$/;"	s
RedDrawable	server/red_parse_qxl.h	/^} RedDrawable;$/;"	t	typeref:struct:RedDrawable
RedDrawable_p	client/x11/pixels_source_p.h	/^struct RedDrawable_p {$/;"	s
RedGlContext	client/x11/red_window_p.h	/^typedef GLXContext RedGlContext;$/;"	t
RedGlzDrawable	server/red_worker.c	/^struct RedGlzDrawable {$/;"	s	file:
RedGlzDrawable	server/red_worker.c	/^typedef struct RedGlzDrawable RedGlzDrawable;$/;"	t	typeref:struct:RedGlzDrawable	file:
RedKey	client/red_key.h	/^enum RedKey {$/;"	g
RedLinkInfo	server/reds.c	/^typedef struct RedLinkInfo {$/;"	s	file:
RedLinkInfo	server/reds.c	/^} RedLinkInfo;$/;"	t	typeref:struct:RedLinkInfo	file:
RedMemSlotInfo	server/red_memslots.h	/^typedef struct RedMemSlotInfo {$/;"	s
RedMemSlotInfo	server/red_memslots.h	/^} RedMemSlotInfo;$/;"	t	typeref:struct:RedMemSlotInfo
RedMessage	server/red_parse_qxl.h	/^typedef struct RedMessage {$/;"	s
RedMessage	server/red_parse_qxl.h	/^} RedMessage;$/;"	t	typeref:struct:RedMessage
RedPbuffer	client/x11/red_window_p.h	/^typedef GLXPbuffer RedPbuffer;$/;"	t
RedPeer	client/red_peer.cpp	/^RedPeer::RedPeer()$/;"	f	class:RedPeer
RedPeer	client/red_peer.h	/^class RedPeer: protected EventSources::Socket {$/;"	c
RedPixmap	client/red_pixmap.h	/^class RedPixmap: public RedDrawable {$/;"	c
RedPixmap	client/windows/red_pixmap.cpp	/^RedPixmap::RedPixmap(int width, int height, RedDrawable::Format format,$/;"	f	class:RedPixmap
RedPixmap	client/x11/red_pixmap.cpp	/^RedPixmap::RedPixmap(int width, int height, RedPixmap::Format format,$/;"	f	class:RedPixmap
RedPixmapGL	client/red_pixmap_gl.h	/^class RedPixmapGL: public RedPixmap {$/;"	c
RedPixmapGL	client/x11/red_pixmap_gl.cpp	/^RedPixmapGL::RedPixmapGL(int width, int height, RedDrawable::Format format,$/;"	f	class:RedPixmapGL
RedPixmapGdi	client/red_pixmap_gdi.h	/^class RedPixmapGdi: public RedPixmap {$/;"	c
RedPixmapGdi	client/windows/red_pixmap_gdi.cpp	/^RedPixmapGdi::RedPixmapGdi(int width, int height, RedDrawable::Format format, bool top_bottom)$/;"	f	class:RedPixmapGdi
RedPixmapSw	client/red_pixmap_sw.h	/^class RedPixmapSw: public RedPixmap {$/;"	c
RedPixmapSw	client/windows/red_pixmap_sw.cpp	/^RedPixmapSw::RedPixmapSw(int width, int height, RedDrawable::Format format,$/;"	f	class:RedPixmapSw
RedPixmapSw	client/x11/red_pixmap_sw.cpp	/^RedPixmapSw::RedPixmapSw(int width, int height, RedDrawable::Format format,$/;"	f	class:RedPixmapSw
RedPixmap_p	client/windows/red_pixmap_gdi.cpp	/^struct RedPixmap_p {$/;"	s	file:
RedPixmap_p	client/windows/red_pixmap_sw.cpp	/^struct RedPixmap_p {$/;"	s	file:
RedSSLParameters	server/reds.c	/^typedef struct RedSSLParameters {$/;"	s	file:
RedSSLParameters	server/reds.c	/^} RedSSLParameters;$/;"	t	typeref:struct:RedSSLParameters	file:
RedScreen	client/screen.cpp	/^RedScreen::RedScreen(Application& owner, int id, const std::string& name, int width, int height)$/;"	f	class:RedScreen
RedScreen	client/screen.h	/^class RedScreen: public RedWindow::Listener {$/;"	c
RedScreenRotation	client/x11/platform.cpp	/^enum RedScreenRotation {$/;"	g	file:
RedSubpixelOrder	client/x11/platform.cpp	/^enum RedSubpixelOrder {$/;"	g	file:
RedSurface	server/red_worker.c	/^typedef struct RedSurface {$/;"	s	file:
RedSurface	server/red_worker.c	/^} RedSurface;$/;"	t	typeref:struct:RedSurface	file:
RedSurfaceCmd	server/red_parse_qxl.h	/^typedef struct RedSurfaceCmd {$/;"	s
RedSurfaceCmd	server/red_parse_qxl.h	/^} RedSurfaceCmd;$/;"	t	typeref:struct:RedSurfaceCmd
RedSurfaceCreate	server/red_parse_qxl.h	/^typedef struct RedSurfaceCreate {$/;"	s
RedSurfaceCreate	server/red_parse_qxl.h	/^} RedSurfaceCreate;$/;"	t	typeref:struct:RedSurfaceCreate
RedUpdateCmd	server/red_parse_qxl.h	/^typedef struct RedUpdateCmd {$/;"	s
RedUpdateCmd	server/red_parse_qxl.h	/^} RedUpdateCmd;$/;"	t	typeref:struct:RedUpdateCmd
RedWindow	client/red_window.h	/^class RedWindow: public RedDrawable, private RedWindow_p {$/;"	c
RedWindow	client/windows/red_window.cpp	/^RedWindow::RedWindow(RedWindow::Listener& listener, int screen_id)$/;"	f	class:RedWindow
RedWindow	client/x11/red_window.cpp	/^RedWindow::RedWindow(RedWindow::Listener& listener, int screen)$/;"	f	class:RedWindow
RedWindow_p	client/windows/red_window.cpp	/^RedWindow_p::RedWindow_p()$/;"	f	class:RedWindow_p
RedWindow_p	client/windows/red_window_p.h	/^class RedWindow_p {$/;"	c
RedWindow_p	client/x11/red_window.cpp	/^RedWindow_p::RedWindow_p()$/;"	f	class:RedWindow_p
RedWindow_p	client/x11/red_window_p.h	/^class RedWindow_p {$/;"	c
RedWorkeState	server/red_dispatcher.c	/^typedef struct RedWorkeState {$/;"	s	file:
RedWorkeState	server/red_dispatcher.c	/^} RedWorkeState;$/;"	t	typeref:struct:RedWorkeState	file:
RedWorker	server/red_worker.c	/^typedef struct RedWorker {$/;"	s	file:
RedWorker	server/red_worker.c	/^} RedWorker;$/;"	t	typeref:struct:RedWorker	file:
RedWorkerMessage	server/red_worker.h	/^typedef uint32_t RedWorkerMessage;$/;"	t
RedWorkerMessageAddMemslot	server/red_dispatcher.h	/^typedef struct RedWorkerMessageAddMemslot {$/;"	s
RedWorkerMessageAddMemslot	server/red_dispatcher.h	/^} RedWorkerMessageAddMemslot;$/;"	t	typeref:struct:RedWorkerMessageAddMemslot
RedWorkerMessageAddMemslotAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageAddMemslotAsync {$/;"	s
RedWorkerMessageAddMemslotAsync	server/red_dispatcher.h	/^} RedWorkerMessageAddMemslotAsync;$/;"	t	typeref:struct:RedWorkerMessageAddMemslotAsync
RedWorkerMessageAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageAsync {$/;"	s
RedWorkerMessageAsync	server/red_dispatcher.h	/^} RedWorkerMessageAsync;$/;"	t	typeref:struct:RedWorkerMessageAsync
RedWorkerMessageCreatePrimarySurface	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCreatePrimarySurface {$/;"	s
RedWorkerMessageCreatePrimarySurface	server/red_dispatcher.h	/^} RedWorkerMessageCreatePrimarySurface;$/;"	t	typeref:struct:RedWorkerMessageCreatePrimarySurface
RedWorkerMessageCreatePrimarySurfaceAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCreatePrimarySurfaceAsync {$/;"	s
RedWorkerMessageCreatePrimarySurfaceAsync	server/red_dispatcher.h	/^} RedWorkerMessageCreatePrimarySurfaceAsync;$/;"	t	typeref:struct:RedWorkerMessageCreatePrimarySurfaceAsync
RedWorkerMessageCursorChannelCreate	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCursorChannelCreate {$/;"	s
RedWorkerMessageCursorChannelCreate	server/red_dispatcher.h	/^} RedWorkerMessageCursorChannelCreate;$/;"	t	typeref:struct:RedWorkerMessageCursorChannelCreate
RedWorkerMessageCursorConnect	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCursorConnect {$/;"	s
RedWorkerMessageCursorConnect	server/red_dispatcher.h	/^} RedWorkerMessageCursorConnect;$/;"	t	typeref:struct:RedWorkerMessageCursorConnect
RedWorkerMessageCursorDisconnect	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCursorDisconnect {$/;"	s
RedWorkerMessageCursorDisconnect	server/red_dispatcher.h	/^} RedWorkerMessageCursorDisconnect;$/;"	t	typeref:struct:RedWorkerMessageCursorDisconnect
RedWorkerMessageCursorMigrate	server/red_dispatcher.h	/^typedef struct RedWorkerMessageCursorMigrate {$/;"	s
RedWorkerMessageCursorMigrate	server/red_dispatcher.h	/^} RedWorkerMessageCursorMigrate;$/;"	t	typeref:struct:RedWorkerMessageCursorMigrate
RedWorkerMessageDelMemslot	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDelMemslot {$/;"	s
RedWorkerMessageDelMemslot	server/red_dispatcher.h	/^} RedWorkerMessageDelMemslot;$/;"	t	typeref:struct:RedWorkerMessageDelMemslot
RedWorkerMessageDestroyPrimarySurface	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroyPrimarySurface {$/;"	s
RedWorkerMessageDestroyPrimarySurface	server/red_dispatcher.h	/^} RedWorkerMessageDestroyPrimarySurface;$/;"	t	typeref:struct:RedWorkerMessageDestroyPrimarySurface
RedWorkerMessageDestroyPrimarySurfaceAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroyPrimarySurfaceAsync {$/;"	s
RedWorkerMessageDestroyPrimarySurfaceAsync	server/red_dispatcher.h	/^} RedWorkerMessageDestroyPrimarySurfaceAsync;$/;"	t	typeref:struct:RedWorkerMessageDestroyPrimarySurfaceAsync
RedWorkerMessageDestroySurfaceWait	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroySurfaceWait {$/;"	s
RedWorkerMessageDestroySurfaceWait	server/red_dispatcher.h	/^} RedWorkerMessageDestroySurfaceWait;$/;"	t	typeref:struct:RedWorkerMessageDestroySurfaceWait
RedWorkerMessageDestroySurfaceWaitAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroySurfaceWaitAsync {$/;"	s
RedWorkerMessageDestroySurfaceWaitAsync	server/red_dispatcher.h	/^} RedWorkerMessageDestroySurfaceWaitAsync;$/;"	t	typeref:struct:RedWorkerMessageDestroySurfaceWaitAsync
RedWorkerMessageDestroySurfaces	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroySurfaces {$/;"	s
RedWorkerMessageDestroySurfaces	server/red_dispatcher.h	/^} RedWorkerMessageDestroySurfaces;$/;"	t	typeref:struct:RedWorkerMessageDestroySurfaces
RedWorkerMessageDestroySurfacesAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDestroySurfacesAsync {$/;"	s
RedWorkerMessageDestroySurfacesAsync	server/red_dispatcher.h	/^} RedWorkerMessageDestroySurfacesAsync;$/;"	t	typeref:struct:RedWorkerMessageDestroySurfacesAsync
RedWorkerMessageDisplayChannelCreate	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDisplayChannelCreate {$/;"	s
RedWorkerMessageDisplayChannelCreate	server/red_dispatcher.h	/^} RedWorkerMessageDisplayChannelCreate;$/;"	t	typeref:struct:RedWorkerMessageDisplayChannelCreate
RedWorkerMessageDisplayConnect	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDisplayConnect {$/;"	s
RedWorkerMessageDisplayConnect	server/red_dispatcher.h	/^} RedWorkerMessageDisplayConnect;$/;"	t	typeref:struct:RedWorkerMessageDisplayConnect
RedWorkerMessageDisplayDisconnect	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDisplayDisconnect {$/;"	s
RedWorkerMessageDisplayDisconnect	server/red_dispatcher.h	/^} RedWorkerMessageDisplayDisconnect;$/;"	t	typeref:struct:RedWorkerMessageDisplayDisconnect
RedWorkerMessageDisplayMigrate	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDisplayMigrate {$/;"	s
RedWorkerMessageDisplayMigrate	server/red_dispatcher.h	/^} RedWorkerMessageDisplayMigrate;$/;"	t	typeref:struct:RedWorkerMessageDisplayMigrate
RedWorkerMessageDriverUnload	server/red_dispatcher.h	/^typedef struct RedWorkerMessageDriverUnload {$/;"	s
RedWorkerMessageDriverUnload	server/red_dispatcher.h	/^} RedWorkerMessageDriverUnload;$/;"	t	typeref:struct:RedWorkerMessageDriverUnload
RedWorkerMessageFlushSurfacesAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageFlushSurfacesAsync {$/;"	s
RedWorkerMessageFlushSurfacesAsync	server/red_dispatcher.h	/^} RedWorkerMessageFlushSurfacesAsync;$/;"	t	typeref:struct:RedWorkerMessageFlushSurfacesAsync
RedWorkerMessageLoadvmCommands	server/red_dispatcher.h	/^typedef struct RedWorkerMessageLoadvmCommands {$/;"	s
RedWorkerMessageLoadvmCommands	server/red_dispatcher.h	/^} RedWorkerMessageLoadvmCommands;$/;"	t	typeref:struct:RedWorkerMessageLoadvmCommands
RedWorkerMessageMonitorsConfigAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageMonitorsConfigAsync {$/;"	s
RedWorkerMessageMonitorsConfigAsync	server/red_dispatcher.h	/^} RedWorkerMessageMonitorsConfigAsync;$/;"	t	typeref:struct:RedWorkerMessageMonitorsConfigAsync
RedWorkerMessageOom	server/red_dispatcher.h	/^typedef struct RedWorkerMessageOom {$/;"	s
RedWorkerMessageOom	server/red_dispatcher.h	/^} RedWorkerMessageOom;$/;"	t	typeref:struct:RedWorkerMessageOom
RedWorkerMessageResetCursor	server/red_dispatcher.h	/^typedef struct RedWorkerMessageResetCursor {$/;"	s
RedWorkerMessageResetCursor	server/red_dispatcher.h	/^} RedWorkerMessageResetCursor;$/;"	t	typeref:struct:RedWorkerMessageResetCursor
RedWorkerMessageResetImageCache	server/red_dispatcher.h	/^typedef struct RedWorkerMessageResetImageCache {$/;"	s
RedWorkerMessageResetImageCache	server/red_dispatcher.h	/^} RedWorkerMessageResetImageCache;$/;"	t	typeref:struct:RedWorkerMessageResetImageCache
RedWorkerMessageResetMemslots	server/red_dispatcher.h	/^typedef struct RedWorkerMessageResetMemslots {$/;"	s
RedWorkerMessageResetMemslots	server/red_dispatcher.h	/^} RedWorkerMessageResetMemslots;$/;"	t	typeref:struct:RedWorkerMessageResetMemslots
RedWorkerMessageSetCompression	server/red_dispatcher.h	/^typedef struct RedWorkerMessageSetCompression {$/;"	s
RedWorkerMessageSetCompression	server/red_dispatcher.h	/^} RedWorkerMessageSetCompression;$/;"	t	typeref:struct:RedWorkerMessageSetCompression
RedWorkerMessageSetMouseMode	server/red_dispatcher.h	/^typedef struct RedWorkerMessageSetMouseMode {$/;"	s
RedWorkerMessageSetMouseMode	server/red_dispatcher.h	/^} RedWorkerMessageSetMouseMode;$/;"	t	typeref:struct:RedWorkerMessageSetMouseMode
RedWorkerMessageSetStreamingVideo	server/red_dispatcher.h	/^typedef struct RedWorkerMessageSetStreamingVideo {$/;"	s
RedWorkerMessageSetStreamingVideo	server/red_dispatcher.h	/^} RedWorkerMessageSetStreamingVideo;$/;"	t	typeref:struct:RedWorkerMessageSetStreamingVideo
RedWorkerMessageSetStreamingVideoCompression	server/red_dispatcher.h	/^typedef struct RedWorkerMessageSetStreamingVideoCompression {$/;"	s
RedWorkerMessageSetStreamingVideoCompression	server/red_dispatcher.h	/^} RedWorkerMessageSetStreamingVideoCompression;$/;"	t	typeref:struct:RedWorkerMessageSetStreamingVideoCompression
RedWorkerMessageStart	server/red_dispatcher.h	/^typedef struct RedWorkerMessageStart {$/;"	s
RedWorkerMessageStart	server/red_dispatcher.h	/^} RedWorkerMessageStart;$/;"	t	typeref:struct:RedWorkerMessageStart
RedWorkerMessageStop	server/red_dispatcher.h	/^typedef struct RedWorkerMessageStop {$/;"	s
RedWorkerMessageStop	server/red_dispatcher.h	/^} RedWorkerMessageStop;$/;"	t	typeref:struct:RedWorkerMessageStop
RedWorkerMessageUpdate	server/red_dispatcher.h	/^typedef struct RedWorkerMessageUpdate {$/;"	s
RedWorkerMessageUpdate	server/red_dispatcher.h	/^} RedWorkerMessageUpdate;$/;"	t	typeref:struct:RedWorkerMessageUpdate
RedWorkerMessageUpdateAsync	server/red_dispatcher.h	/^typedef struct RedWorkerMessageUpdateAsync {$/;"	s
RedWorkerMessageUpdateAsync	server/red_dispatcher.h	/^} RedWorkerMessageUpdateAsync;$/;"	t	typeref:struct:RedWorkerMessageUpdateAsync
RedWorkerMessageWakeup	server/red_dispatcher.h	/^typedef struct RedWorkerMessageWakeup {$/;"	s
RedWorkerMessageWakeup	server/red_dispatcher.h	/^} RedWorkerMessageWakeup;$/;"	t	typeref:struct:RedWorkerMessageWakeup
RedsClientMonitorsConfig	server/reds-private.h	/^typedef struct RedsClientMonitorsConfig {$/;"	s
RedsClientMonitorsConfig	server/reds-private.h	/^} RedsClientMonitorsConfig;$/;"	t	typeref:struct:RedsClientMonitorsConfig
RedsMigCertPubKeyInfo	server/reds.c	/^typedef struct RedsMigCertPubKeyInfo {$/;"	s	file:
RedsMigCertPubKeyInfo	server/reds.c	/^} RedsMigCertPubKeyInfo;$/;"	t	typeref:struct:RedsMigCertPubKeyInfo	file:
RedsMigPendingLink	server/reds-private.h	/^typedef struct RedsMigPendingLink {$/;"	s
RedsMigPendingLink	server/reds-private.h	/^} RedsMigPendingLink;$/;"	t	typeref:struct:RedsMigPendingLink
RedsMigSpice	server/reds.h	/^typedef struct RedsMigSpice {$/;"	s
RedsMigSpice	server/reds.h	/^} RedsMigSpice;$/;"	t	typeref:struct:RedsMigSpice
RedsMigSpiceMessage	server/reds.c	/^typedef struct RedsMigSpiceMessage {$/;"	s	file:
RedsMigSpiceMessage	server/reds.c	/^} RedsMigSpiceMessage;$/;"	t	typeref:struct:RedsMigSpiceMessage	file:
RedsMigTargetClient	server/reds-private.h	/^typedef struct RedsMigTargetClient {$/;"	s
RedsMigTargetClient	server/reds-private.h	/^} RedsMigTargetClient;$/;"	t	typeref:struct:RedsMigTargetClient
RedsMigWaitDisconnectClient	server/reds-private.h	/^typedef struct RedsMigWaitDisconnectClient {$/;"	s
RedsMigWaitDisconnectClient	server/reds-private.h	/^} RedsMigWaitDisconnectClient;$/;"	t	typeref:struct:RedsMigWaitDisconnectClient
RedsOutItem	server/main_channel.c	/^struct RedsOutItem {$/;"	s	file:
RedsOutItem	server/main_channel.c	/^typedef struct RedsOutItem RedsOutItem;$/;"	t	typeref:struct:RedsOutItem	file:
RedsSASL	server/reds_stream.c	/^typedef struct RedsSASL {$/;"	s	file:
RedsSASL	server/reds_stream.c	/^} RedsSASL;$/;"	t	typeref:struct:RedsSASL	file:
RedsSaslError	server/reds_stream.h	/^} RedsSaslError;$/;"	t	typeref:enum:__anon154
RedsStatValue	server/reds-private.h	/^typedef struct RedsStatValue {$/;"	s
RedsStatValue	server/reds-private.h	/^} RedsStatValue;$/;"	t	typeref:struct:RedsStatValue
RedsState	server/reds-private.h	/^typedef struct RedsState {$/;"	s
RedsState	server/reds-private.h	/^} RedsState;$/;"	t	typeref:struct:RedsState
RedsStream	server/reds_stream.h	/^struct RedsStream {$/;"	s
RedsStream	server/reds_stream.h	/^typedef struct RedsStream RedsStream;$/;"	t	typeref:struct:RedsStream
RedsStreamPrivate	server/reds_stream.c	/^struct RedsStreamPrivate {$/;"	s	file:
RedsStreamPrivate	server/reds_stream.h	/^typedef struct RedsStreamPrivate RedsStreamPrivate;$/;"	t	typeref:struct:RedsStreamPrivate
RedsStreamSslStatus	server/reds_stream.h	/^} RedsStreamSslStatus;$/;"	t	typeref:enum:__anon153
RefsPipeItem	server/main_channel.c	/^typedef struct RefsPipeItem {$/;"	s	file:
RefsPipeItem	server/main_channel.c	/^} RefsPipeItem;$/;"	t	typeref:struct:RefsPipeItem	file:
Region_p	client/windows/red_window.cpp	/^    Region_p(HRGN region) : _region (region) {}$/;"	f	class:Region_p
Region_p	client/windows/red_window.cpp	/^class Region_p {$/;"	c	file:
Region_p	client/x11/red_window.cpp	/^    Region_p(QRegion* region) : _region (region) {}$/;"	f	class:Region_p
Region_p	client/x11/red_window.cpp	/^class Region_p {$/;"	c	file:
RemoveInputsHandlerEvent	client/inputs_channel.cpp	/^    RemoveInputsHandlerEvent(InputsChannel& channel) : _channel (channel) {}$/;"	f	class:RemoveInputsHandlerEvent
RemoveInputsHandlerEvent	client/inputs_channel.cpp	/^class RemoveInputsHandlerEvent: public SyncEvent {$/;"	c	file:
RenderType	client/red_pixmap_gl.h	/^enum RenderType {$/;"	g
RendererInfo	server/red_dispatcher.c	/^typedef struct RendererInfo {$/;"	s	file:
RendererInfo	server/red_dispatcher.c	/^} RendererInfo;$/;"	t	typeref:struct:RendererInfo	file:
ResIcon	client/x11/res.cpp	/^typedef struct ResIcon {$/;"	s	file:
ResIcon	client/x11/res.cpp	/^} ResIcon;$/;"	t	typeref:struct:ResIcon	file:
ResImage	client/x11/res.cpp	/^typedef struct ResImage {$/;"	s	file:
ResImage	client/x11/res.cpp	/^} ResImage;$/;"	t	typeref:struct:ResImage	file:
ResImage_p	client/windows/pixels_source.cpp	/^struct ResImage_p {$/;"	s	file:
ResString	client/gui/resource_provider.cpp	/^struct ResString{$/;"	s	file:
ResetTimer	client/display_channel.cpp	/^    ResetTimer(RedScreen* screen, RedClient& client) : _screen(screen), _client(client) {}$/;"	f	class:ResetTimer
ResetTimer	client/display_channel.cpp	/^class ResetTimer: public Timer {$/;"	c	file:
RightVariant	client/x11/platform.cpp	/^class RightVariant {$/;"	c	file:
Ring	spice-common/common/ring.h	/^typedef struct Ring {$/;"	s
Ring	spice-common/common/ring.h	/^} Ring;$/;"	t	typeref:struct:Ring
RingItem	spice-common/common/ring.h	/^typedef struct Ring RingItem;$/;"	t	typeref:struct:Ring
RootDemarshallingDestination	spice-common/python_modules/demarshal.py	/^class RootDemarshallingDestination(DemarshallingDestination):$/;"	c
RootMarshallingSource	spice-common/python_modules/marshal.py	/^class RootMarshallingSource(MarshallingSource):$/;"	c
SAFE_FOREACH	server/red_worker.c	1117;"	d	file:
SAME_PIXEL	server/glz_encode_tmpl.c	126;"	d	file:
SAME_PIXEL	server/glz_encode_tmpl.c	38;"	d	file:
SAME_PIXEL	server/glz_encode_tmpl.c	55;"	d	file:
SAME_PIXEL	server/glz_encode_tmpl.c	562;"	d	file:
SAME_PIXEL	server/red_bitmap_utils.h	151;"	d
SAME_PIXEL	server/red_bitmap_utils.h	55;"	d
SAME_PIXEL	spice-common/common/lz_compress_tmpl.c	158;"	d	file:
SAME_PIXEL	spice-common/common/lz_compress_tmpl.c	530;"	d	file:
SAME_PIXEL	spice-common/common/lz_compress_tmpl.c	64;"	d	file:
SAME_PIXEL	spice-common/common/lz_compress_tmpl.c	79;"	d	file:
SAME_PIXEL	spice-common/common/lz_compress_tmpl.c	94;"	d	file:
SAME_PIXEL	spice-common/common/quic_rgb_tmpl.c	106;"	d	file:
SAME_PIXEL	spice-common/common/quic_rgb_tmpl.c	734;"	d	file:
SAME_PIXEL_WEIGHT	server/red_bitmap_utils.h	160;"	d
SAME_PIXEL_WEIGHT	server/red_bitmap_utils.h	43;"	d
SAMPLE_JUMP	server/red_bitmap_utils.h	158;"	d
SAMPLE_JUMP	server/red_bitmap_utils.h	54;"	d
SASL_CFLAGS	Makefile	/^SASL_CFLAGS = $/;"	m
SASL_CFLAGS	client/Makefile	/^SASL_CFLAGS = $/;"	m
SASL_CFLAGS	docs/Makefile	/^SASL_CFLAGS = $/;"	m
SASL_CFLAGS	docs/manual/Makefile	/^SASL_CFLAGS = $/;"	m
SASL_CFLAGS	server/Makefile	/^SASL_CFLAGS = $/;"	m
SASL_CFLAGS	server/tests/Makefile	/^SASL_CFLAGS = $/;"	m
SASL_DATA_MAX_LEN	server/reds.c	1908;"	d	file:
SASL_DATA_MAX_LEN	server/reds_stream.c	660;"	d	file:
SASL_LIBS	Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SASL_LIBS	client/Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SASL_LIBS	docs/Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SASL_LIBS	docs/manual/Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SASL_LIBS	server/Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SASL_LIBS	server/tests/Makefile	/^SASL_LIBS =  -lsasl2$/;"	m
SCREEN_INIT_HEIGHT	client/application.cpp	633;"	d	file:
SCREEN_INIT_WIDTH	client/application.cpp	632;"	d	file:
SCREEN_LAYER_CURSOR	client/screen.h	/^    SCREEN_LAYER_CURSOR,$/;"	e	enum:__anon109
SCREEN_LAYER_DISPLAY	client/screen.h	/^    SCREEN_LAYER_DISPLAY,$/;"	e	enum:__anon109
SCREEN_LAYER_GUI	client/screen.h	/^    SCREEN_LAYER_GUI,$/;"	e	enum:__anon109
SCREEN_LAYER_GUI_BARIER	client/screen.h	/^    SCREEN_LAYER_GUI_BARIER,$/;"	e	enum:__anon109
SCREEN_LAYER_INFO	client/screen.h	/^    SCREEN_LAYER_INFO,$/;"	e	enum:__anon109
SCROLL_LOCK_MODIFIER	client/platform.h	/^        SCROLL_LOCK_MODIFIER = (1 << SCROLL_LOCK_MODIFIER_SHIFT),$/;"	e	enum:Platform::__anon105
SCROLL_LOCK_MODIFIER_SHIFT	client/platform.h	/^        SCROLL_LOCK_MODIFIER_SHIFT,$/;"	e	enum:Platform::__anon105
SCROLL_LOCK_SCAN_CODE	server/inputs_channel.c	116;"	d	file:
SCanvas	client/red_sw_canvas.cpp	/^SCanvas::SCanvas(bool onscreen,$/;"	f	class:SCanvas
SCanvas	client/red_sw_canvas.h	/^class SCanvas: public Canvas {$/;"	c
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SED	client/Makefile	/^SED = \/bin\/sed$/;"	m
SED	docs/Makefile	/^SED = \/bin\/sed$/;"	m
SED	docs/manual/Makefile	/^SED = \/bin\/sed$/;"	m
SED	server/Makefile	/^SED = \/bin\/sed$/;"	m
SED	server/tests/Makefile	/^SED = \/bin\/sed$/;"	m
SED	spice-common/Makefile	/^SED = \/bin\/sed$/;"	m
SED	spice-common/common/Makefile	/^SED = \/bin\/sed$/;"	m
SED	spice-common/python_modules/Makefile	/^SED = \/bin\/sed$/;"	m
SERVER_MARSHALLERS	spice-common/common/Makefile	/^SERVER_MARSHALLERS = \\$/;"	m
SET_CAP	server/red_worker.c	11234;"	d	file:
SET_GLC_BOX	spice-common/common/gl_canvas.c	164;"	d	file:
SET_GLC_RECT	spice-common/common/gl_canvas.c	157;"	d	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	client/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	docs/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	docs/manual/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	server/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	server/tests/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	spice-common/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	spice-common/common/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	spice-common/python_modules/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	spice-common/spice-protocol/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	spice-common/spice-protocol/spice/Makefile	/^SET_MAKE = $/;"	m
SET_b	spice-common/common/quic_rgb_tmpl.c	101;"	d	file:
SET_b	spice-common/common/quic_rgb_tmpl.c	38;"	d	file:
SET_b	spice-common/common/quic_rgb_tmpl.c	59;"	d	file:
SET_b	spice-common/common/quic_rgb_tmpl.c	763;"	d	file:
SET_b	spice-common/common/quic_rgb_tmpl.c	80;"	d	file:
SET_g	spice-common/common/quic_rgb_tmpl.c	36;"	d	file:
SET_g	spice-common/common/quic_rgb_tmpl.c	57;"	d	file:
SET_g	spice-common/common/quic_rgb_tmpl.c	761;"	d	file:
SET_g	spice-common/common/quic_rgb_tmpl.c	78;"	d	file:
SET_g	spice-common/common/quic_rgb_tmpl.c	99;"	d	file:
SET_r	spice-common/common/quic_rgb_tmpl.c	34;"	d	file:
SET_r	spice-common/common/quic_rgb_tmpl.c	55;"	d	file:
SET_r	spice-common/common/quic_rgb_tmpl.c	759;"	d	file:
SET_r	spice-common/common/quic_rgb_tmpl.c	76;"	d	file:
SET_r	spice-common/common/quic_rgb_tmpl.c	97;"	d	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	client/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	docs/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	docs/manual/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	server/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	server/tests/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	spice-common/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	spice-common/common/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	spice-common/python_modules/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	spice-common/spice-protocol/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	spice-common/spice-protocol/spice/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHORT_PIX_IMAGE_DIST_LEVEL_1	server/glz_encode_match_tmpl.c	21;"	d	file:
SHORT_PIX_IMAGE_DIST_LEVEL_2	server/glz_encode_match_tmpl.c	22;"	d	file:
SHORT_PIX_IMAGE_DIST_LEVEL_3	server/glz_encode_match_tmpl.c	23;"	d	file:
SHUTDOWN_ERR	client/windows/platform_utils.h	93;"	d
SHUTDOWN_ERR	client/x11/platform_utils.h	32;"	d
SHUT_RD	client/windows/platform_utils.h	89;"	d
SHUT_RDWR	client/windows/platform_utils.h	90;"	d
SHUT_WR	client/windows/platform_utils.h	88;"	d
SIG_ATOMIC_MAX	client/windows/stdint.h	293;"	d
SIG_ATOMIC_MIN	client/windows/stdint.h	291;"	d
SIMPLE_COPY_BITS	server/tests/test_display_base.h	/^    SIMPLE_COPY_BITS,$/;"	e	enum:__anon130
SIMPLE_CREATE_SURFACE	server/tests/test_display_base.h	/^    SIMPLE_CREATE_SURFACE,$/;"	e	enum:__anon130
SIMPLE_DESTROY_SURFACE	server/tests/test_display_base.h	/^    SIMPLE_DESTROY_SURFACE,$/;"	e	enum:__anon130
SIMPLE_DRAW	server/tests/test_display_base.h	/^    SIMPLE_DRAW,$/;"	e	enum:__anon130
SIMPLE_DRAW_BITMAP	server/tests/test_display_base.h	/^    SIMPLE_DRAW_BITMAP,$/;"	e	enum:__anon130
SIMPLE_DRAW_SOLID	server/tests/test_display_base.h	/^    SIMPLE_DRAW_SOLID,$/;"	e	enum:__anon130
SIMPLE_UPDATE	server/tests/test_display_base.h	/^    SIMPLE_UPDATE,$/;"	e	enum:__anon130
SINGLE_PART	server/tests/test_display_base.c	55;"	d	file:
SIZED_INTERVAL	server/tests/test_display_streaming.c	45;"	d	file:
SIZE_MAX	client/windows/stdint.h	296;"	d
SIZE_MAX	client/windows/stdint.h	297;"	d
SIZE_OVERFLOWS	spice-common/common/mem.c	137;"	d	file:
SLEEP	server/tests/test_display_base.h	/^    SLEEP$/;"	e	enum:__anon130
SMARTCARD_CFLAGS	Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	client/Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	docs/Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	docs/manual/Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	server/Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	server/tests/Makefile	/^SMARTCARD_CFLAGS = $/;"	m
SMARTCARD_CFLAGS	spice-common/Makefile	/^SMARTCARD_CFLAGS = -I\/usr\/include\/cacard -I\/usr\/include\/nss3 -I\/usr\/include\/nspr4  $/;"	m
SMARTCARD_CFLAGS	spice-common/common/Makefile	/^SMARTCARD_CFLAGS = -I\/usr\/include\/cacard -I\/usr\/include\/nss3 -I\/usr\/include\/nspr4  $/;"	m
SMARTCARD_CFLAGS	spice-common/python_modules/Makefile	/^SMARTCARD_CFLAGS = -I\/usr\/include\/cacard -I\/usr\/include\/nss3 -I\/usr\/include\/nspr4  $/;"	m
SMARTCARD_LIBS	Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	client/Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	docs/Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	docs/manual/Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	server/Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	server/tests/Makefile	/^SMARTCARD_LIBS = $/;"	m
SMARTCARD_LIBS	spice-common/Makefile	/^SMARTCARD_LIBS = -lcacard -lssl3 -lsmime3 -lnss3 -lnssutil3 -lplds4 -lplc4 -lnspr4 -lpthread -ldl  $/;"	m
SMARTCARD_LIBS	spice-common/common/Makefile	/^SMARTCARD_LIBS = -lcacard -lssl3 -lsmime3 -lnss3 -lnssutil3 -lplds4 -lplc4 -lnspr4 -lpthread -ldl  $/;"	m
SMARTCARD_LIBS	spice-common/python_modules/Makefile	/^SMARTCARD_LIBS = -lcacard -lssl3 -lsmime3 -lnss3 -lnssutil3 -lplds4 -lplc4 -lnspr4 -lpthread -ldl  $/;"	m
SMARTCARD_MAX_READERS	server/smartcard.c	41;"	d	file:
SND_CODEC_ANY_FREQUENCY	spice-common/common/snd_codec.h	53;"	d
SND_CODEC_CELT_BIT_RATE	spice-common/common/snd_codec.h	38;"	d
SND_CODEC_CELT_COMPRESSED_FRAME_BYTES	spice-common/common/snd_codec.h	40;"	d
SND_CODEC_CELT_FRAME_SIZE	spice-common/common/snd_codec.h	37;"	d
SND_CODEC_CELT_PLAYBACK_FREQ	spice-common/common/snd_codec.h	39;"	d
SND_CODEC_DECODE	spice-common/common/snd_codec.h	64;"	d
SND_CODEC_DECODER_UNAVAILABLE	spice-common/common/snd_codec.h	58;"	d
SND_CODEC_DECODE_FAILED	spice-common/common/snd_codec.h	60;"	d
SND_CODEC_ENCODE	spice-common/common/snd_codec.h	63;"	d
SND_CODEC_ENCODER_UNAVAILABLE	spice-common/common/snd_codec.h	57;"	d
SND_CODEC_ENCODE_FAILED	spice-common/common/snd_codec.h	59;"	d
SND_CODEC_INVALID_ENCODE_SIZE	spice-common/common/snd_codec.h	61;"	d
SND_CODEC_MAX_COMPRESSED_BYTES	spice-common/common/snd_codec.h	51;"	d
SND_CODEC_MAX_FRAME_BYTES	spice-common/common/snd_codec.h	50;"	d
SND_CODEC_MAX_FRAME_SIZE	spice-common/common/snd_codec.h	49;"	d
SND_CODEC_OK	spice-common/common/snd_codec.h	55;"	d
SND_CODEC_OPUS_COMPRESSED_FRAME_BYTES	spice-common/common/snd_codec.h	45;"	d
SND_CODEC_OPUS_FRAME_SIZE	spice-common/common/snd_codec.h	43;"	d
SND_CODEC_OPUS_PLAYBACK_FREQ	spice-common/common/snd_codec.h	44;"	d
SND_CODEC_PLAYBACK_CHAN	spice-common/common/snd_codec.h	47;"	d
SND_CODEC_UNAVAILABLE	spice-common/common/snd_codec.h	56;"	d
SND_PLAYBACK_CTRL	server/snd_worker.c	/^    SND_PLAYBACK_CTRL,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_CTRL_MASK	server/snd_worker.c	65;"	d	file:
SND_PLAYBACK_LATENCY	server/snd_worker.c	/^    SND_PLAYBACK_LATENCY,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_LATENCY_MASK	server/snd_worker.c	68;"	d	file:
SND_PLAYBACK_MIGRATE	server/snd_worker.c	/^    SND_PLAYBACK_MIGRATE,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_MIGRATE_MASK	server/snd_worker.c	63;"	d	file:
SND_PLAYBACK_MODE	server/snd_worker.c	/^    SND_PLAYBACK_MODE,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_MODE_MASK	server/snd_worker.c	64;"	d	file:
SND_PLAYBACK_PCM	server/snd_worker.c	/^    SND_PLAYBACK_PCM,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_PCM_MASK	server/snd_worker.c	66;"	d	file:
SND_PLAYBACK_VOLUME	server/snd_worker.c	/^    SND_PLAYBACK_VOLUME,$/;"	e	enum:PlaybackCommand	file:
SND_PLAYBACK_VOLUME_MASK	server/snd_worker.c	67;"	d	file:
SND_RECEIVE_BUF_SIZE	server/snd_worker.c	45;"	d	file:
SND_RECORD_CTRL	server/snd_worker.c	/^    SND_RECORD_CTRL,$/;"	e	enum:RecordCommand	file:
SND_RECORD_CTRL_MASK	server/snd_worker.c	71;"	d	file:
SND_RECORD_MIGRATE	server/snd_worker.c	/^    SND_RECORD_MIGRATE,$/;"	e	enum:RecordCommand	file:
SND_RECORD_MIGRATE_MASK	server/snd_worker.c	70;"	d	file:
SND_RECORD_VOLUME	server/snd_worker.c	/^    SND_RECORD_VOLUME,$/;"	e	enum:RecordCommand	file:
SND_RECORD_VOLUME_MASK	server/snd_worker.c	72;"	d	file:
SOCKET	client/x11/platform_utils.h	/^typedef int SOCKET;$/;"	t
SOCKET_ERROR	client/x11/platform_utils.h	30;"	d
SOCKET_STATUS_CLOSED	client/client_net_socket.h	/^    SOCKET_STATUS_CLOSED,$/;"	e	enum:__anon125
SOCKET_STATUS_OPEN	client/client_net_socket.h	/^    SOCKET_STATUS_OPEN,$/;"	e	enum:__anon125
SOCKET_STATUS_RECEIVED_FIN	client/client_net_socket.h	/^    SOCKET_STATUS_RECEIVED_FIN,$/;"	e	enum:__anon125
SOCKET_STATUS_SENT_FIN	client/client_net_socket.h	/^    SOCKET_STATUS_SENT_FIN,$/;"	e	enum:__anon125
SOLID_RASTER_OP	spice-common/common/pixman_utils.c	31;"	d	file:
SOURCES	Makefile	/^SOURCES =$/;"	m
SOURCES	client/Makefile	/^SOURCES = $(spicec_SOURCES)$/;"	m
SOURCES	docs/Makefile	/^SOURCES =$/;"	m
SOURCES	docs/manual/Makefile	/^SOURCES =$/;"	m
SOURCES	server/Makefile	/^SOURCES = $(libspice_server_la_SOURCES)$/;"	m
SOURCES	server/tests/Makefile	/^SOURCES = $(test_display_no_ssl_SOURCES) \\$/;"	m
SOURCES	spice-common/Makefile	/^SOURCES =$/;"	m
SOURCES	spice-common/common/Makefile	/^SOURCES = $(libspice_common_client_la_SOURCES) \\$/;"	m
SOURCES	spice-common/python_modules/Makefile	/^SOURCES =$/;"	m
SOURCES	spice-common/spice-protocol/Makefile	/^SOURCES =$/;"	m
SOURCES	spice-common/spice-protocol/spice/Makefile	/^SOURCES =$/;"	m
SPICEC_ERROR_CODE_AGENT_ERROR	spice-common/spice-protocol/spice/error_codes.h	44;"	d
SPICEC_ERROR_CODE_AGENT_TIMEOUT	spice-common/spice-protocol/spice/error_codes.h	43;"	d
SPICEC_ERROR_CODE_CMD_LINE_ERROR	spice-common/spice-protocol/spice/error_codes.h	48;"	d
SPICEC_ERROR_CODE_CONNECT_FAILED	spice-common/spice-protocol/spice/error_codes.h	37;"	d
SPICEC_ERROR_CODE_ERROR	spice-common/spice-protocol/spice/error_codes.h	35;"	d
SPICEC_ERROR_CODE_GETHOSTBYNAME_FAILED	spice-common/spice-protocol/spice/error_codes.h	36;"	d
SPICEC_ERROR_CODE_INVALID_ARG	spice-common/spice-protocol/spice/error_codes.h	47;"	d
SPICEC_ERROR_CODE_NOT_ENOUGH_MEMORY	spice-common/spice-protocol/spice/error_codes.h	42;"	d
SPICEC_ERROR_CODE_PERMISSION_DENIED	spice-common/spice-protocol/spice/error_codes.h	46;"	d
SPICEC_ERROR_CODE_RECV_FAILED	spice-common/spice-protocol/spice/error_codes.h	40;"	d
SPICEC_ERROR_CODE_SEND_FAILED	spice-common/spice-protocol/spice/error_codes.h	39;"	d
SPICEC_ERROR_CODE_SOCKET_FAILED	spice-common/spice-protocol/spice/error_codes.h	38;"	d
SPICEC_ERROR_CODE_SSL_ERROR	spice-common/spice-protocol/spice/error_codes.h	41;"	d
SPICEC_ERROR_CODE_SUCCESS	spice-common/spice-protocol/spice/error_codes.h	34;"	d
SPICEC_ERROR_CODE_VERSION_MISMATCH	spice-common/spice-protocol/spice/error_codes.h	45;"	d
SPICEC_STATIC_LINKAGE_BSTATIC	Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICEC_STATIC_LINKAGE_BSTATIC	client/Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICEC_STATIC_LINKAGE_BSTATIC	docs/Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICEC_STATIC_LINKAGE_BSTATIC	docs/manual/Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICEC_STATIC_LINKAGE_BSTATIC	server/Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICEC_STATIC_LINKAGE_BSTATIC	server/tests/Makefile	/^SPICEC_STATIC_LINKAGE_BSTATIC = $/;"	m
SPICE_ABORT_LEVEL_DEFAULT	spice-common/common/log.c	65;"	d	file:
SPICE_ABORT_LEVEL_DEFAULT	spice-common/common/log.c	67;"	d	file:
SPICE_ADDR_FLAG_IPV4_ONLY	server/spice.h	448;"	d
SPICE_ADDR_FLAG_IPV6_ONLY	server/spice.h	449;"	d
SPICE_AGENT_MAX_DATA_SIZE	spice-common/common/messages.h	199;"	d
SPICE_ALIGN	spice-common/spice-protocol/spice/macros.h	127;"	d
SPICE_ALPHA_FLAGS_DEST_HAS_ALPHA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ALPHA_FLAGS_DEST_HAS_ALPHA = (1 << 0),$/;"	e	enum:SpiceAlphaFlags
SPICE_ALPHA_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ALPHA_FLAGS_MASK = 0x3$/;"	e	enum:SpiceAlphaFlags
SPICE_ALPHA_FLAGS_SRC_SURFACE_HAS_ALPHA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ALPHA_FLAGS_SRC_SURFACE_HAS_ALPHA = (1 << 1),$/;"	e	enum:SpiceAlphaFlags
SPICE_ATTR_NORETURN	spice-common/common/macros.h	23;"	d
SPICE_ATTR_NORETURN	spice-common/common/macros.h	28;"	d
SPICE_ATTR_PACKED	spice-common/spice-protocol/spice/end-packed.h	34;"	d
SPICE_ATTR_PACKED	spice-common/spice-protocol/spice/qxl_dev.h	/^        struct SPICE_ATTR_PACKED {$/;"	s	union:QXLCursorCmd::__anon71
SPICE_ATTR_PACKED	spice-common/spice-protocol/spice/start-packed.h	50;"	d
SPICE_ATTR_PACKED	spice-common/spice-protocol/spice/start-packed.h	60;"	d
SPICE_ATTR_PRINTF	spice-common/common/macros.h	25;"	d
SPICE_ATTR_PRINTF	spice-common/common/macros.h	29;"	d
SPICE_AUDIO_DATA_MODE_CELT_0_5_1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_DATA_MODE_CELT_0_5_1,$/;"	e	enum:SpiceAudioDataMode
SPICE_AUDIO_DATA_MODE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_DATA_MODE_ENUM_END$/;"	e	enum:SpiceAudioDataMode
SPICE_AUDIO_DATA_MODE_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_DATA_MODE_INVALID,$/;"	e	enum:SpiceAudioDataMode
SPICE_AUDIO_DATA_MODE_OPUS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_DATA_MODE_OPUS,$/;"	e	enum:SpiceAudioDataMode
SPICE_AUDIO_DATA_MODE_RAW	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_DATA_MODE_RAW,$/;"	e	enum:SpiceAudioDataMode
SPICE_AUDIO_FMT_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_FMT_ENUM_END$/;"	e	enum:SpiceAudioFmt
SPICE_AUDIO_FMT_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_FMT_INVALID,$/;"	e	enum:SpiceAudioFmt
SPICE_AUDIO_FMT_S16	spice-common/spice-protocol/spice/enums.h	/^    SPICE_AUDIO_FMT_S16,$/;"	e	enum:SpiceAudioFmt
SPICE_BEGIN_DECLS	spice-common/spice-protocol/spice/macros.h	100;"	d
SPICE_BEGIN_DECLS	spice-common/spice-protocol/spice/macros.h	97;"	d
SPICE_BITMAP_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FLAGS_MASK = 0x7$/;"	e	enum:SpiceBitmapFlags
SPICE_BITMAP_FLAGS_PAL_CACHE_ME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FLAGS_PAL_CACHE_ME = (1 << 0),$/;"	e	enum:SpiceBitmapFlags
SPICE_BITMAP_FLAGS_PAL_FROM_CACHE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FLAGS_PAL_FROM_CACHE = (1 << 1),$/;"	e	enum:SpiceBitmapFlags
SPICE_BITMAP_FLAGS_TOP_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FLAGS_TOP_DOWN = (1 << 2),$/;"	e	enum:SpiceBitmapFlags
SPICE_BITMAP_FMT_16BIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_16BIT,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_1BIT_BE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_1BIT_BE,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_1BIT_LE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_1BIT_LE,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_24BIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_24BIT,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_32BIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_32BIT,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_4BIT_BE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_4BIT_BE,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_4BIT_LE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_4BIT_LE,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_8BIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_8BIT,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_8BIT_A	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_8BIT_A,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_ENUM_END$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_INVALID,$/;"	e	enum:SpiceBitmapFmt
SPICE_BITMAP_FMT_RGBA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BITMAP_FMT_RGBA,$/;"	e	enum:SpiceBitmapFmt
SPICE_BNF	spice-common/python_modules/spice_parser.py	/^def SPICE_BNF():$/;"	f
SPICE_BREAKPOINT	client/utils.h	53;"	d
SPICE_BRUSH_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BRUSH_TYPE_ENUM_END$/;"	e	enum:SpiceBrushType
SPICE_BRUSH_TYPE_NONE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BRUSH_TYPE_NONE,$/;"	e	enum:SpiceBrushType
SPICE_BRUSH_TYPE_PATTERN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BRUSH_TYPE_PATTERN,$/;"	e	enum:SpiceBrushType
SPICE_BRUSH_TYPE_SOLID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_BRUSH_TYPE_SOLID,$/;"	e	enum:SpiceBrushType
SPICE_BYTESWAP16	spice-common/spice-protocol/spice/macros.h	286;"	d
SPICE_BYTESWAP16	spice-common/spice-protocol/spice/macros.h	322;"	d
SPICE_BYTESWAP16	spice-common/spice-protocol/spice/macros.h	347;"	d
SPICE_BYTESWAP16	spice-common/spice-protocol/spice/macros.h	351;"	d
SPICE_BYTESWAP16	spice-common/spice-protocol/spice/macros.h	356;"	d
SPICE_BYTESWAP16_CONSTANT	spice-common/spice-protocol/spice/macros.h	201;"	d
SPICE_BYTESWAP16_IA32	spice-common/spice-protocol/spice/macros.h	233;"	d
SPICE_BYTESWAP16_IA64	spice-common/spice-protocol/spice/macros.h	290;"	d
SPICE_BYTESWAP32	spice-common/spice-protocol/spice/macros.h	287;"	d
SPICE_BYTESWAP32	spice-common/spice-protocol/spice/macros.h	323;"	d
SPICE_BYTESWAP32	spice-common/spice-protocol/spice/macros.h	348;"	d
SPICE_BYTESWAP32	spice-common/spice-protocol/spice/macros.h	352;"	d
SPICE_BYTESWAP32	spice-common/spice-protocol/spice/macros.h	357;"	d
SPICE_BYTESWAP32_CONSTANT	spice-common/spice-protocol/spice/macros.h	205;"	d
SPICE_BYTESWAP32_IA32	spice-common/spice-protocol/spice/macros.h	247;"	d
SPICE_BYTESWAP32_IA32	spice-common/spice-protocol/spice/macros.h	261;"	d
SPICE_BYTESWAP32_IA64	spice-common/spice-protocol/spice/macros.h	301;"	d
SPICE_BYTESWAP32_X86_64	spice-common/spice-protocol/spice/macros.h	326;"	d
SPICE_BYTESWAP64	spice-common/spice-protocol/spice/macros.h	288;"	d
SPICE_BYTESWAP64	spice-common/spice-protocol/spice/macros.h	324;"	d
SPICE_BYTESWAP64	spice-common/spice-protocol/spice/macros.h	349;"	d
SPICE_BYTESWAP64	spice-common/spice-protocol/spice/macros.h	353;"	d
SPICE_BYTESWAP64	spice-common/spice-protocol/spice/macros.h	358;"	d
SPICE_BYTESWAP64_CONSTANT	spice-common/spice-protocol/spice/macros.h	211;"	d
SPICE_BYTESWAP64_IA32	spice-common/spice-protocol/spice/macros.h	272;"	d
SPICE_BYTESWAP64_IA64	spice-common/spice-protocol/spice/macros.h	312;"	d
SPICE_BYTESWAP64_X86_64	spice-common/spice-protocol/spice/macros.h	336;"	d
SPICE_CANVAS_INTERNAL	client/red_canvas_base.h	20;"	d
SPICE_CANVAS_INTERNAL	client/red_canvas_base.h	24;"	d
SPICE_CANVAS_INTERNAL	client/red_gdi_canvas.cpp	30;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_gdi_canvas.cpp	34;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_gdi_canvas.h	22;"	d
SPICE_CANVAS_INTERNAL	client/red_gdi_canvas.h	26;"	d
SPICE_CANVAS_INTERNAL	client/red_gl_canvas.cpp	25;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_gl_canvas.cpp	29;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_gl_canvas.h	22;"	d
SPICE_CANVAS_INTERNAL	client/red_gl_canvas.h	27;"	d
SPICE_CANVAS_INTERNAL	client/red_sw_canvas.cpp	28;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_sw_canvas.cpp	32;"	d	file:
SPICE_CANVAS_INTERNAL	client/red_sw_canvas.h	23;"	d
SPICE_CANVAS_INTERNAL	client/red_sw_canvas.h	27;"	d
SPICE_CANVAS_INTERNAL	server/reds_gl_canvas.c	24;"	d	file:
SPICE_CANVAS_INTERNAL	server/reds_gl_canvas.c	28;"	d	file:
SPICE_CANVAS_INTERNAL	server/reds_gl_canvas.h	21;"	d
SPICE_CANVAS_INTERNAL	server/reds_gl_canvas.h	25;"	d
SPICE_CANVAS_INTERNAL	server/reds_sw_canvas.c	24;"	d	file:
SPICE_CANVAS_INTERNAL	server/reds_sw_canvas.c	28;"	d	file:
SPICE_CANVAS_INTERNAL	server/reds_sw_canvas.h	20;"	d
SPICE_CANVAS_INTERNAL	server/reds_sw_canvas.h	24;"	d
SPICE_CHANNEL_CURSOR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_CURSOR,$/;"	e	enum:__anon39
SPICE_CHANNEL_DISPLAY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_DISPLAY,$/;"	e	enum:__anon39
SPICE_CHANNEL_EVENT_CONNECTED	server/spice.h	59;"	d
SPICE_CHANNEL_EVENT_DISCONNECTED	server/spice.h	61;"	d
SPICE_CHANNEL_EVENT_FLAG_ADDR_EXT	server/spice.h	64;"	d
SPICE_CHANNEL_EVENT_FLAG_TLS	server/spice.h	63;"	d
SPICE_CHANNEL_EVENT_INITIALIZED	server/spice.h	60;"	d
SPICE_CHANNEL_INPUTS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_INPUTS,$/;"	e	enum:__anon39
SPICE_CHANNEL_MAIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_MAIN = 1,$/;"	e	enum:__anon39
SPICE_CHANNEL_PLAYBACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_PLAYBACK,$/;"	e	enum:__anon39
SPICE_CHANNEL_PORT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_PORT,$/;"	e	enum:__anon39
SPICE_CHANNEL_RECORD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_RECORD,$/;"	e	enum:__anon39
SPICE_CHANNEL_SECURITY_NONE	server/spice.h	498;"	d
SPICE_CHANNEL_SECURITY_SSL	server/spice.h	499;"	d
SPICE_CHANNEL_SMARTCARD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_SMARTCARD,$/;"	e	enum:__anon39
SPICE_CHANNEL_TUNNEL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_TUNNEL,$/;"	e	enum:__anon39
SPICE_CHANNEL_USBREDIR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_USBREDIR,$/;"	e	enum:__anon39
SPICE_CHANNEL_WEBDAV	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CHANNEL_WEBDAV,$/;"	e	enum:__anon39
SPICE_CHAR_DEVICE_WAIT_TOKENS_TIMEOUT	server/char_device.c	29;"	d	file:
SPICE_CHUNKS_FLAGS_FREE	spice-common/common/mem.h	/^    SPICE_CHUNKS_FLAGS_FREE = (1<<1)$/;"	e	enum:__anon5
SPICE_CHUNKS_FLAGS_UNSTABLE	spice-common/common/mem.h	/^    SPICE_CHUNKS_FLAGS_UNSTABLE = (1<<0),$/;"	e	enum:__anon5
SPICE_CLIP_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CLIP_TYPE_ENUM_END$/;"	e	enum:SpiceClipType
SPICE_CLIP_TYPE_NONE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CLIP_TYPE_NONE,$/;"	e	enum:SpiceClipType
SPICE_CLIP_TYPE_RECTS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CLIP_TYPE_RECTS,$/;"	e	enum:SpiceClipType
SPICE_COMMON_CAP_AUTH_SASL	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_COMMON_CAP_AUTH_SASL,$/;"	e	enum:__anon84
SPICE_COMMON_CAP_AUTH_SPICE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_COMMON_CAP_AUTH_SPICE,$/;"	e	enum:__anon84
SPICE_COMMON_CAP_MINI_HEADER	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_COMMON_CAP_MINI_HEADER,$/;"	e	enum:__anon84
SPICE_COMMON_CAP_PROTOCOL_AUTH_SELECTION	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_COMMON_CAP_PROTOCOL_AUTH_SELECTION,$/;"	e	enum:__anon84
SPICE_COMPAT_VERSION_0_4	server/spice.h	/^    SPICE_COMPAT_VERSION_0_4 = 0,$/;"	e	enum:__anon156
SPICE_COMPAT_VERSION_0_6	server/spice.h	/^    SPICE_COMPAT_VERSION_0_6 = 1,$/;"	e	enum:__anon156
SPICE_COMPAT_VERSION_CURRENT	server/spice.h	439;"	d
SPICE_COMPOSITE_COMPONENT_ALPHA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_COMPONENT_ALPHA = (1 << 18),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_DEST_OPAQUE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_DEST_OPAQUE = (1 << 24),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_FLAGS_MASK = 0x1ffffff$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_HAS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_HAS_MASK = (1 << 19),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_HAS_MASK_TRANSFORM	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_HAS_MASK_TRANSFORM = (1 << 21),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_HAS_SRC_TRANSFORM	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_HAS_SRC_TRANSFORM = (1 << 20),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_FILTER0	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_FILTER0 = (1 << 11),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_FILTER2	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_FILTER2 = (1 << 13),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_FITLER1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_FITLER1 = (1 << 12),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_OPAQUE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_OPAQUE = (1 << 23),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_REPEAT0	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_REPEAT0 = (1 << 16),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_MASK_REPEAT1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_MASK_REPEAT1 = (1 << 17),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP0	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP0 = (1 << 0),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP1 = (1 << 1),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP2	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP2 = (1 << 2),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP3	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP3 = (1 << 3),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP4	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP4 = (1 << 4),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP5	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP5 = (1 << 5),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP6	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP6 = (1 << 6),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_OP7	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_OP7 = (1 << 7),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SOURCE_OPAQUE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SOURCE_OPAQUE = (1 << 22),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SRC_FILTER0	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SRC_FILTER0 = (1 << 8),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SRC_FILTER1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SRC_FILTER1 = (1 << 9),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SRC_FILTER2	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SRC_FILTER2 = (1 << 10),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SRC_REPEAT0	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SRC_REPEAT0 = (1 << 14),$/;"	e	enum:SpiceCompositeFlags
SPICE_COMPOSITE_SRC_REPEAT1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_COMPOSITE_SRC_REPEAT1 = (1 << 15),$/;"	e	enum:SpiceCompositeFlags
SPICE_CONTAINEROF	spice-common/spice-protocol/spice/macros.h	141;"	d
SPICE_CURSOR_FLAGS_CACHE_ME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_FLAGS_CACHE_ME = (1 << 1),$/;"	e	enum:SpiceCursorFlags
SPICE_CURSOR_FLAGS_FROM_CACHE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_FLAGS_FROM_CACHE = (1 << 2),$/;"	e	enum:SpiceCursorFlags
SPICE_CURSOR_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_FLAGS_MASK = 0x7$/;"	e	enum:SpiceCursorFlags
SPICE_CURSOR_FLAGS_NONE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_FLAGS_NONE = (1 << 0),$/;"	e	enum:SpiceCursorFlags
SPICE_CURSOR_TYPE_ALPHA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_ALPHA,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_COLOR16	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_COLOR16,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_COLOR24	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_COLOR24,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_COLOR32	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_COLOR32,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_COLOR4	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_COLOR4,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_COLOR8	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_COLOR8,$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_ENUM_END$/;"	e	enum:SpiceCursorType
SPICE_CURSOR_TYPE_MONO	spice-common/spice-protocol/spice/enums.h	/^    SPICE_CURSOR_TYPE_MONO,$/;"	e	enum:SpiceCursorType
SPICE_DEBUG_ALLOW_MC_ENV	server/reds.c	84;"	d	file:
SPICE_DISPLAY_CAP_A8_SURFACE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_DISPLAY_CAP_A8_SURFACE,$/;"	e	enum:__anon88
SPICE_DISPLAY_CAP_COMPOSITE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_DISPLAY_CAP_COMPOSITE,$/;"	e	enum:__anon88
SPICE_DISPLAY_CAP_MONITORS_CONFIG	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_DISPLAY_CAP_MONITORS_CONFIG,$/;"	e	enum:__anon88
SPICE_DISPLAY_CAP_SIZED_STREAM	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_DISPLAY_CAP_SIZED_STREAM,$/;"	e	enum:__anon88
SPICE_DISPLAY_CAP_STREAM_REPORT	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_DISPLAY_CAP_STREAM_REPORT,$/;"	e	enum:__anon88
SPICE_END_CHANNEL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_END_CHANNEL$/;"	e	enum:__anon39
SPICE_END_DECLS	spice-common/spice-protocol/spice/macros.h	101;"	d
SPICE_END_DECLS	spice-common/spice-protocol/spice/macros.h	98;"	d
SPICE_FIXED28_4	spice-common/common/draw.h	/^typedef int32_t SPICE_FIXED28_4;$/;"	t
SPICE_FUNC_NAME	client/debug.h	63;"	d
SPICE_FUNC_NAME	client/debug.h	65;"	d
SPICE_GET_ADDRESS	spice-common/common/draw.h	41;"	d
SPICE_GNUC_ALLOC_SIZE	spice-common/spice-protocol/spice/macros.h	51;"	d
SPICE_GNUC_ALLOC_SIZE	spice-common/spice-protocol/spice/macros.h	54;"	d
SPICE_GNUC_ALLOC_SIZE2	spice-common/spice-protocol/spice/macros.h	52;"	d
SPICE_GNUC_ALLOC_SIZE2	spice-common/spice-protocol/spice/macros.h	55;"	d
SPICE_GNUC_CONST	spice-common/spice-protocol/spice/macros.h	63;"	d
SPICE_GNUC_CONST	spice-common/spice-protocol/spice/macros.h	71;"	d
SPICE_GNUC_DEPRECATED	server/spice.h	/^                                   QXLDevSurfaceCreate *surface) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^                       uint32_t num_dirty_rects, uint32_t clear_dirty_region) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    socklen_t llen SPICE_GNUC_DEPRECATED;$/;"	m	struct:SpiceChannelEventInfo
SPICE_GNUC_DEPRECATED	server/spice.h	/^    socklen_t plen SPICE_GNUC_DEPRECATED;$/;"	m	struct:SpiceChannelEventInfo
SPICE_GNUC_DEPRECATED	server/spice.h	/^    struct sockaddr laddr SPICE_GNUC_DEPRECATED;$/;"	m	struct:SpiceChannelEventInfo	typeref:struct:SpiceChannelEventInfo::laddr
SPICE_GNUC_DEPRECATED	server/spice.h	/^    struct sockaddr paddr SPICE_GNUC_DEPRECATED;$/;"	m	struct:SpiceChannelEventInfo	typeref:struct:SpiceChannelEventInfo::paddr
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*add_memslot)(QXLWorker *worker, QXLDevMemSlot *slot) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*del_memslot)(QXLWorker *worker, uint32_t slot_group_id, uint32_t slot_id) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*destroy_primary_surface)(QXLWorker *worker, uint32_t surface_id) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*destroy_surface_wait)(QXLWorker *worker, uint32_t surface_id) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*destroy_surfaces)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*loadvm_commands)(QXLWorker *worker, struct QXLCommandExt *ext, uint32_t count) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*oom)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*reset_cursor)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*reset_image_cache)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*reset_memslots)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*start)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*stop)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	/^    void (*wakeup)(QXLWorker *worker) SPICE_GNUC_DEPRECATED;$/;"	m	struct:QXLWorker
SPICE_GNUC_DEPRECATED	server/spice.h	30;"	d
SPICE_GNUC_DEPRECATED	server/spice.h	31;"	d
SPICE_GNUC_DEPRECATED	spice-common/spice-protocol/spice/macros.h	77;"	d
SPICE_GNUC_DEPRECATED	spice-common/spice-protocol/spice/macros.h	79;"	d
SPICE_GNUC_FORMAT	spice-common/spice-protocol/spice/macros.h	61;"	d
SPICE_GNUC_FORMAT	spice-common/spice-protocol/spice/macros.h	69;"	d
SPICE_GNUC_MALLOC	spice-common/spice-protocol/spice/macros.h	38;"	d
SPICE_GNUC_MALLOC	spice-common/spice-protocol/spice/macros.h	41;"	d
SPICE_GNUC_MAY_ALIAS	spice-common/spice-protocol/spice/macros.h	83;"	d
SPICE_GNUC_MAY_ALIAS	spice-common/spice-protocol/spice/macros.h	85;"	d
SPICE_GNUC_NORETURN	spice-common/spice-protocol/spice/macros.h	62;"	d
SPICE_GNUC_NORETURN	spice-common/spice-protocol/spice/macros.h	70;"	d
SPICE_GNUC_NO_INSTRUMENT	spice-common/spice-protocol/spice/macros.h	65;"	d
SPICE_GNUC_NO_INSTRUMENT	spice-common/spice-protocol/spice/macros.h	73;"	d
SPICE_GNUC_NULL_TERMINATED	spice-common/spice-protocol/spice/macros.h	45;"	d
SPICE_GNUC_NULL_TERMINATED	spice-common/spice-protocol/spice/macros.h	47;"	d
SPICE_GNUC_PRINTF	spice-common/spice-protocol/spice/macros.h	59;"	d
SPICE_GNUC_PRINTF	spice-common/spice-protocol/spice/macros.h	67;"	d
SPICE_GNUC_PURE	spice-common/spice-protocol/spice/macros.h	37;"	d
SPICE_GNUC_PURE	spice-common/spice-protocol/spice/macros.h	40;"	d
SPICE_GNUC_SCANF	spice-common/spice-protocol/spice/macros.h	60;"	d
SPICE_GNUC_SCANF	spice-common/spice-protocol/spice/macros.h	68;"	d
SPICE_GNUC_UNUSED	spice-common/spice-protocol/spice/macros.h	64;"	d
SPICE_GNUC_UNUSED	spice-common/spice-protocol/spice/macros.h	72;"	d
SPICE_GNUC_VISIBLE	server/red_common.h	32;"	d
SPICE_GNUC_WARN_UNUSED_RESULT	spice-common/spice-protocol/spice/macros.h	89;"	d
SPICE_GNUC_WARN_UNUSED_RESULT	spice-common/spice-protocol/spice/macros.h	91;"	d
SPICE_IMAGE_COMPRESS_AUTO_GLZ	server/spice.h	/^    SPICE_IMAGE_COMPRESS_AUTO_GLZ = 2,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_AUTO_LZ	server/spice.h	/^    SPICE_IMAGE_COMPRESS_AUTO_LZ  = 3,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_GLZ	server/spice.h	/^    SPICE_IMAGE_COMPRESS_GLZ      = 5,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_INVALID	server/spice.h	/^    SPICE_IMAGE_COMPRESS_INVALID  = 0,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_LZ	server/spice.h	/^    SPICE_IMAGE_COMPRESS_LZ       = 6,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_OFF	server/spice.h	/^    SPICE_IMAGE_COMPRESS_OFF      = 1,$/;"	e	enum:__anon157
SPICE_IMAGE_COMPRESS_QUIC	server/spice.h	/^    SPICE_IMAGE_COMPRESS_QUIC     = 4,$/;"	e	enum:__anon157
SPICE_IMAGE_FLAGS_CACHE_ME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_FLAGS_CACHE_ME = (1 << 0),$/;"	e	enum:SpiceImageFlags
SPICE_IMAGE_FLAGS_CACHE_REPLACE_ME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_FLAGS_CACHE_REPLACE_ME = (1 << 2),$/;"	e	enum:SpiceImageFlags
SPICE_IMAGE_FLAGS_HIGH_BITS_SET	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_FLAGS_HIGH_BITS_SET = (1 << 1),$/;"	e	enum:SpiceImageFlags
SPICE_IMAGE_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_FLAGS_MASK = 0x7$/;"	e	enum:SpiceImageFlags
SPICE_IMAGE_SCALE_MODE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_SCALE_MODE_ENUM_END$/;"	e	enum:SpiceImageScaleMode
SPICE_IMAGE_SCALE_MODE_INTERPOLATE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_SCALE_MODE_INTERPOLATE,$/;"	e	enum:SpiceImageScaleMode
SPICE_IMAGE_SCALE_MODE_NEAREST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_SCALE_MODE_NEAREST,$/;"	e	enum:SpiceImageScaleMode
SPICE_IMAGE_TYPE_BITMAP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_BITMAP,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_ENUM_END$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_FROM_CACHE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_FROM_CACHE,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_FROM_CACHE_LOSSLESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_FROM_CACHE_LOSSLESS,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_GLZ_RGB	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_GLZ_RGB,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_JPEG	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_JPEG,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_JPEG_ALPHA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_JPEG_ALPHA,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_LZ_PLT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_LZ_PLT = 100,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_LZ_RGB	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_LZ_RGB,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_QUIC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_QUIC,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_RESERVED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_RESERVED,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_SURFACE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_SURFACE,$/;"	e	enum:SpiceImageType
SPICE_IMAGE_TYPE_ZLIB_GLZ_RGB	spice-common/spice-protocol/spice/enums.h	/^    SPICE_IMAGE_TYPE_ZLIB_GLZ_RGB,$/;"	e	enum:SpiceImageType
SPICE_INFO_CODE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_INFO_CODE_ENUM_END$/;"	e	enum:SpiceInfoCode
SPICE_INFO_GENERAL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_INFO_GENERAL,$/;"	e	enum:SpiceInfoCode
SPICE_INPUTS_CAP_KEY_SCANCODE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_INPUTS_CAP_KEY_SCANCODE,$/;"	e	enum:__anon89
SPICE_INPUT_MOTION_ACK_BUNCH	spice-common/spice-protocol/spice/protocol.h	108;"	d
SPICE_INT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	188;"	d
SPICE_INT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	192;"	d
SPICE_INT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	195;"	d
SPICE_INTERFACE_AUDIO_FMT_S16	server/spice.h	/^    SPICE_INTERFACE_AUDIO_FMT_S16 = 1,$/;"	e	enum:__anon155
SPICE_INTERFACE_CHAR_DEVICE	server/spice.h	403;"	d
SPICE_INTERFACE_CHAR_DEVICE_MAJOR	server/spice.h	404;"	d
SPICE_INTERFACE_CHAR_DEVICE_MINOR	server/spice.h	405;"	d
SPICE_INTERFACE_CORE	server/spice.h	51;"	d
SPICE_INTERFACE_CORE_MAJOR	server/spice.h	52;"	d
SPICE_INTERFACE_CORE_MINOR	server/spice.h	53;"	d
SPICE_INTERFACE_KEYBOARD	server/spice.h	270;"	d
SPICE_INTERFACE_KEYBOARD_MAJOR	server/spice.h	271;"	d
SPICE_INTERFACE_KEYBOARD_MINOR	server/spice.h	272;"	d
SPICE_INTERFACE_MIGRATION	server/spice.h	533;"	d
SPICE_INTERFACE_MIGRATION_MAJOR	server/spice.h	534;"	d
SPICE_INTERFACE_MIGRATION_MINOR	server/spice.h	535;"	d
SPICE_INTERFACE_MOUSE	server/spice.h	291;"	d
SPICE_INTERFACE_MOUSE_MAJOR	server/spice.h	292;"	d
SPICE_INTERFACE_MOUSE_MINOR	server/spice.h	293;"	d
SPICE_INTERFACE_NET_WIRE	server/spice-experimental.h	8;"	d
SPICE_INTERFACE_NET_WIRE_MAJOR	server/spice-experimental.h	9;"	d
SPICE_INTERFACE_NET_WIRE_MINOR	server/spice-experimental.h	10;"	d
SPICE_INTERFACE_PLAYBACK	server/spice.h	334;"	d
SPICE_INTERFACE_PLAYBACK_CHAN	server/spice.h	346;"	d
SPICE_INTERFACE_PLAYBACK_FMT	server/spice.h	347;"	d
SPICE_INTERFACE_PLAYBACK_FREQ	server/spice.h	345;"	d
SPICE_INTERFACE_PLAYBACK_MAJOR	server/spice.h	335;"	d
SPICE_INTERFACE_PLAYBACK_MINOR	server/spice.h	336;"	d
SPICE_INTERFACE_QXL	server/spice.h	105;"	d
SPICE_INTERFACE_QXL_MAJOR	server/spice.h	106;"	d
SPICE_INTERFACE_QXL_MINOR	server/spice.h	107;"	d
SPICE_INTERFACE_RECORD	server/spice.h	368;"	d
SPICE_INTERFACE_RECORD_CHAN	server/spice.h	376;"	d
SPICE_INTERFACE_RECORD_FMT	server/spice.h	377;"	d
SPICE_INTERFACE_RECORD_FREQ	server/spice.h	375;"	d
SPICE_INTERFACE_RECORD_MAJOR	server/spice.h	369;"	d
SPICE_INTERFACE_RECORD_MINOR	server/spice.h	370;"	d
SPICE_INTERFACE_TABLET	server/spice.h	311;"	d
SPICE_INTERFACE_TABLET_MAJOR	server/spice.h	312;"	d
SPICE_INTERFACE_TABLET_MINOR	server/spice.h	313;"	d
SPICE_JPEG_ALPHA_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_JPEG_ALPHA_FLAGS_MASK = 0x1$/;"	e	enum:SpiceJpegAlphaFlags
SPICE_JPEG_ALPHA_FLAGS_TOP_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_JPEG_ALPHA_FLAGS_TOP_DOWN = (1 << 0),$/;"	e	enum:SpiceJpegAlphaFlags
SPICE_KEYBOARD_MODIFIER_FLAGS_CAPS_LOCK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_KEYBOARD_MODIFIER_FLAGS_CAPS_LOCK = (1 << 2),$/;"	e	enum:SpiceKeyboardModifierFlags
SPICE_KEYBOARD_MODIFIER_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_KEYBOARD_MODIFIER_FLAGS_MASK = 0x7$/;"	e	enum:SpiceKeyboardModifierFlags
SPICE_KEYBOARD_MODIFIER_FLAGS_NUM_LOCK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_KEYBOARD_MODIFIER_FLAGS_NUM_LOCK = (1 << 1),$/;"	e	enum:SpiceKeyboardModifierFlags
SPICE_KEYBOARD_MODIFIER_FLAGS_SCROLL_LOCK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_KEYBOARD_MODIFIER_FLAGS_SCROLL_LOCK = (1 << 0),$/;"	e	enum:SpiceKeyboardModifierFlags
SPICE_LIKELY	spice-common/spice-protocol/spice/macros.h	179;"	d
SPICE_LIKELY	spice-common/spice-protocol/spice/macros.h	182;"	d
SPICE_LINE_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINE_FLAGS_MASK = 0xc$/;"	e	enum:SpiceLineFlags
SPICE_LINE_FLAGS_START_WITH_GAP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINE_FLAGS_START_WITH_GAP = (1 << 2),$/;"	e	enum:SpiceLineFlags
SPICE_LINE_FLAGS_STYLED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINE_FLAGS_STYLED = (1 << 3),$/;"	e	enum:SpiceLineFlags
SPICE_LINK_ERR_BAD_CONNECTION_ID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_BAD_CONNECTION_ID,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_CHANNEL_NOT_AVAILABLE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_CHANNEL_NOT_AVAILABLE,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_ENUM_END$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_ERROR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_ERROR,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_INVALID_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_INVALID_DATA,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_INVALID_MAGIC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_INVALID_MAGIC,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_NEED_SECURED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_NEED_SECURED,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_NEED_UNSECURED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_NEED_UNSECURED,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_OK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_OK,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_PERMISSION_DENIED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_PERMISSION_DENIED,$/;"	e	enum:SpiceLinkErr
SPICE_LINK_ERR_VERSION_MISMATCH	spice-common/spice-protocol/spice/enums.h	/^    SPICE_LINK_ERR_VERSION_MISMATCH,$/;"	e	enum:SpiceLinkErr
SPICE_LOG_DOMAIN	server/dispatcher.c	30;"	d	file:
SPICE_LOG_DOMAIN	server/red_worker.c	22;"	d	file:
SPICE_LOG_DOMAIN	spice-common/common/log.h	28;"	d
SPICE_LOG_LEVEL_CRITICAL	spice-common/common/log.h	/^    SPICE_LOG_LEVEL_CRITICAL,$/;"	e	enum:__anon2
SPICE_LOG_LEVEL_DEBUG	spice-common/common/log.h	/^    SPICE_LOG_LEVEL_DEBUG,$/;"	e	enum:__anon2
SPICE_LOG_LEVEL_ERROR	spice-common/common/log.h	/^    SPICE_LOG_LEVEL_ERROR,$/;"	e	enum:__anon2
SPICE_LOG_LEVEL_INFO	spice-common/common/log.h	/^    SPICE_LOG_LEVEL_INFO,$/;"	e	enum:__anon2
SPICE_LOG_LEVEL_WARNING	spice-common/common/log.h	/^    SPICE_LOG_LEVEL_WARNING,$/;"	e	enum:__anon2
SPICE_LT_VERSION	Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_LT_VERSION	client/Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_LT_VERSION	docs/Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_LT_VERSION	docs/manual/Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_LT_VERSION	server/Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_LT_VERSION	server/tests/Makefile	/^SPICE_LT_VERSION = 10:0:9$/;"	m
SPICE_MAGIC	spice-common/spice-protocol/spice/protocol.h	38;"	d
SPICE_MAIN_CAP_AGENT_CONNECTED_TOKENS	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_MAIN_CAP_AGENT_CONNECTED_TOKENS,$/;"	e	enum:__anon87
SPICE_MAIN_CAP_NAME_AND_UUID	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_MAIN_CAP_NAME_AND_UUID,$/;"	e	enum:__anon87
SPICE_MAIN_CAP_SEAMLESS_MIGRATE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_MAIN_CAP_SEAMLESS_MIGRATE,$/;"	e	enum:__anon87
SPICE_MAIN_CAP_SEMI_SEAMLESS_MIGRATE	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_MAIN_CAP_SEMI_SEAMLESS_MIGRATE,$/;"	e	enum:__anon87
SPICE_MASK_FLAGS_INVERS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MASK_FLAGS_INVERS = (1 << 0),$/;"	e	enum:SpiceMaskFlags
SPICE_MASK_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MASK_FLAGS_MASK = 0x1$/;"	e	enum:SpiceMaskFlags
SPICE_MAX_PASSWORD_LENGTH	spice-common/spice-protocol/spice/protocol.h	43;"	d
SPICE_MEMBER	spice-common/spice-protocol/spice/macros.h	146;"	d
SPICE_MEMBER_P	spice-common/spice-protocol/spice/macros.h	144;"	d
SPICE_MENU_INTERNAL_ID_BASE	spice-common/spice-protocol/spice/controller_prot.h	119;"	d
SPICE_MENU_INTERNAL_ID_SHIFT	spice-common/spice-protocol/spice/controller_prot.h	120;"	d
SPICE_MIGRATE_CLIENT_NONE	server/spice-experimental.h	/^    SPICE_MIGRATE_CLIENT_NONE = 1,$/;"	e	enum:__anon168
SPICE_MIGRATE_CLIENT_READY	server/spice-experimental.h	/^    SPICE_MIGRATE_CLIENT_READY,$/;"	e	enum:__anon168
SPICE_MIGRATE_CLIENT_WAITING	server/spice-experimental.h	/^    SPICE_MIGRATE_CLIENT_WAITING,$/;"	e	enum:__anon168
SPICE_MIGRATE_DATA_CHAR_DEVICE_VERSION	server/migration_protocol.h	43;"	d
SPICE_MIGRATE_DATA_DISPLAY_MAGIC	server/migration_protocol.h	118;"	d
SPICE_MIGRATE_DATA_DISPLAY_VERSION	server/migration_protocol.h	117;"	d
SPICE_MIGRATE_DATA_INPUTS_MAGIC	server/migration_protocol.h	190;"	d
SPICE_MIGRATE_DATA_INPUTS_VERSION	server/migration_protocol.h	189;"	d
SPICE_MIGRATE_DATA_MAIN_MAGIC	server/migration_protocol.h	87;"	d
SPICE_MIGRATE_DATA_MAIN_VERSION	server/migration_protocol.h	85;"	d
SPICE_MIGRATE_DATA_SMARTCARD_MAGIC	server/migration_protocol.h	74;"	d
SPICE_MIGRATE_DATA_SMARTCARD_VERSION	server/migration_protocol.h	72;"	d
SPICE_MIGRATE_DATA_SPICEVMC_MAGIC	server/migration_protocol.h	63;"	d
SPICE_MIGRATE_DATA_SPICEVMC_VERSION	server/migration_protocol.h	61;"	d
SPICE_MIGRATE_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MIGRATE_FLAGS_MASK = 0x3$/;"	e	enum:SpiceMigrateFlags
SPICE_MIGRATE_NEED_DATA_TRANSFER	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MIGRATE_NEED_DATA_TRANSFER = (1 << 1),$/;"	e	enum:SpiceMigrateFlags
SPICE_MIGRATE_NEED_FLUSH	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MIGRATE_NEED_FLUSH = (1 << 0),$/;"	e	enum:SpiceMigrateFlags
SPICE_MIGRATION_PROTOCOL_VERSION	server/migration_protocol.h	30;"	d
SPICE_MOUSE_BUTTON_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_DOWN,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_ENUM_END$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_INVALID,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_LEFT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_LEFT,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_MASK_LEFT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_MASK_LEFT = (1 << 0),$/;"	e	enum:SpiceMouseButtonMask
SPICE_MOUSE_BUTTON_MASK_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_MASK_MASK = 0x7$/;"	e	enum:SpiceMouseButtonMask
SPICE_MOUSE_BUTTON_MASK_MIDDLE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_MASK_MIDDLE = (1 << 1),$/;"	e	enum:SpiceMouseButtonMask
SPICE_MOUSE_BUTTON_MASK_RIGHT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_MASK_RIGHT = (1 << 2),$/;"	e	enum:SpiceMouseButtonMask
SPICE_MOUSE_BUTTON_MIDDLE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_MIDDLE,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_RIGHT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_RIGHT,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_BUTTON_UP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_BUTTON_UP,$/;"	e	enum:SpiceMouseButton
SPICE_MOUSE_MODE_CLIENT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_MODE_CLIENT = (1 << 1),$/;"	e	enum:SpiceMouseMode
SPICE_MOUSE_MODE_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_MODE_MASK = 0x3$/;"	e	enum:SpiceMouseMode
SPICE_MOUSE_MODE_SERVER	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MOUSE_MODE_SERVER = (1 << 0),$/;"	e	enum:SpiceMouseMode
SPICE_MSGC_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_ACK,$/;"	e	enum:__anon41
SPICE_MSGC_ACK_SYNC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_ACK_SYNC = 1,$/;"	e	enum:__anon41
SPICE_MSGC_DISCONNECTING	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_DISCONNECTING,$/;"	e	enum:__anon41
SPICE_MSGC_DISPLAY_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_DISPLAY_INIT = 101,$/;"	e	enum:__anon45
SPICE_MSGC_DISPLAY_STREAM_REPORT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_DISPLAY_STREAM_REPORT,$/;"	e	enum:__anon45
SPICE_MSGC_END_DISPLAY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_DISPLAY$/;"	e	enum:__anon45
SPICE_MSGC_END_INPUTS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_INPUTS$/;"	e	enum:__anon47
SPICE_MSGC_END_MAIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_MAIN$/;"	e	enum:__anon43
SPICE_MSGC_END_PORT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_PORT$/;"	e	enum:__anon59
SPICE_MSGC_END_RECORD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_RECORD$/;"	e	enum:__anon51
SPICE_MSGC_END_SMARTCARD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_SMARTCARD$/;"	e	enum:__anon55
SPICE_MSGC_END_SPICEVMC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_SPICEVMC$/;"	e	enum:__anon57
SPICE_MSGC_END_TUNNEL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_END_TUNNEL$/;"	e	enum:__anon53
SPICE_MSGC_INPUTS_KEY_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_KEY_DOWN = 101,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_KEY_MODIFIERS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_KEY_MODIFIERS,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_KEY_SCANCODE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_KEY_SCANCODE,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_KEY_UP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_KEY_UP,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_MOUSE_MOTION	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_MOUSE_MOTION = 111,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_MOUSE_POSITION	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_MOUSE_POSITION,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_MOUSE_PRESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_MOUSE_PRESS,$/;"	e	enum:__anon47
SPICE_MSGC_INPUTS_MOUSE_RELEASE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_INPUTS_MOUSE_RELEASE,$/;"	e	enum:__anon47
SPICE_MSGC_MAIN_AGENT_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_AGENT_DATA,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_AGENT_START	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_AGENT_START,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_AGENT_TOKEN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_AGENT_TOKEN,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_ATTACH_CHANNELS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_ATTACH_CHANNELS,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_CLIENT_INFO	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_CLIENT_INFO = 101,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MIGRATE_CONNECTED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MIGRATE_CONNECTED,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MIGRATE_CONNECTED_SEAMLESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MIGRATE_CONNECTED_SEAMLESS,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MIGRATE_CONNECT_ERROR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MIGRATE_CONNECT_ERROR,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MIGRATE_DST_DO_SEAMLESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MIGRATE_DST_DO_SEAMLESS,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MIGRATE_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MIGRATE_END,$/;"	e	enum:__anon43
SPICE_MSGC_MAIN_MOUSE_MODE_REQUEST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MAIN_MOUSE_MODE_REQUEST,$/;"	e	enum:__anon43
SPICE_MSGC_MIGRATE_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MIGRATE_DATA,$/;"	e	enum:__anon41
SPICE_MSGC_MIGRATE_FLUSH_MARK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_MIGRATE_FLUSH_MARK,$/;"	e	enum:__anon41
SPICE_MSGC_PONG	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_PONG,$/;"	e	enum:__anon41
SPICE_MSGC_PORT_EVENT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_PORT_EVENT = 201,$/;"	e	enum:__anon59
SPICE_MSGC_RECORD_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_RECORD_DATA = 101,$/;"	e	enum:__anon51
SPICE_MSGC_RECORD_MODE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_RECORD_MODE,$/;"	e	enum:__anon51
SPICE_MSGC_RECORD_START_MARK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_RECORD_START_MARK,$/;"	e	enum:__anon51
SPICE_MSGC_SMARTCARD_ATR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SMARTCARD_ATR = 101,$/;"	e	enum:__anon55
SPICE_MSGC_SMARTCARD_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SMARTCARD_DATA = 101,$/;"	e	enum:__anon55
SPICE_MSGC_SMARTCARD_ERROR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SMARTCARD_ERROR = 101,$/;"	e	enum:__anon55
SPICE_MSGC_SMARTCARD_HEADER	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SMARTCARD_HEADER = 101,$/;"	e	enum:__anon55
SPICE_MSGC_SMARTCARD_READER_ADD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SMARTCARD_READER_ADD = 101,$/;"	e	enum:__anon55
SPICE_MSGC_SPICEVMC_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_SPICEVMC_DATA = 101,$/;"	e	enum:__anon57
SPICE_MSGC_TUNNEL_SERVICE_ADD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SERVICE_ADD = 101,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SERVICE_REMOVE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SERVICE_REMOVE,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_CLOSED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_CLOSED,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_CLOSED_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_CLOSED_ACK,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_DATA,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_FIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_FIN,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_OPEN_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_OPEN_ACK,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_OPEN_NACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_OPEN_NACK,$/;"	e	enum:__anon53
SPICE_MSGC_TUNNEL_SOCKET_TOKEN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSGC_TUNNEL_SOCKET_TOKEN,$/;"	e	enum:__anon53
SPICE_MSG_BASE_LAST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_BASE_LAST = 100,$/;"	e	enum:__anon40
SPICE_MSG_CURSOR_HIDE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_HIDE,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_INIT = 101,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_INVAL_ALL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_INVAL_ALL,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_INVAL_ONE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_INVAL_ONE,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_MOVE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_MOVE,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_RESET	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_RESET,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_SET	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_SET,$/;"	e	enum:__anon48
SPICE_MSG_CURSOR_TRAIL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_CURSOR_TRAIL,$/;"	e	enum:__anon48
SPICE_MSG_DISCONNECTING	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISCONNECTING,$/;"	e	enum:__anon40
SPICE_MSG_DISPLAY_COPY_BITS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_COPY_BITS,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_ALPHA_BLEND	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_ALPHA_BLEND,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_BLACKNESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_BLACKNESS,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_BLEND	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_BLEND,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_COMPOSITE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_COMPOSITE,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_COPY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_COPY,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_FILL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_FILL = 302,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_INVERS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_INVERS,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_OPAQUE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_OPAQUE,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_ROP3	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_ROP3,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_STROKE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_STROKE,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_TEXT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_TEXT,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_TRANSPARENT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_TRANSPARENT,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_DRAW_WHITENESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_DRAW_WHITENESS,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_INVAL_ALL_PALETTES	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_INVAL_ALL_PALETTES,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_INVAL_ALL_PIXMAPS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_INVAL_ALL_PIXMAPS,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_INVAL_LIST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_INVAL_LIST,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_INVAL_PALETTE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_INVAL_PALETTE,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_MARK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_MARK,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_MODE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_MODE = 101,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_MONITORS_CONFIG	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_MONITORS_CONFIG,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_RESET	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_RESET,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_ACTIVATE_REPORT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_ACTIVATE_REPORT,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_CLIP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_CLIP,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_CREATE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_CREATE = 122,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_DATA,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_DATA_SIZED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_DATA_SIZED,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_DESTROY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_DESTROY,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_STREAM_DESTROY_ALL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_STREAM_DESTROY_ALL,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_SURFACE_CREATE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_SURFACE_CREATE,$/;"	e	enum:__anon44
SPICE_MSG_DISPLAY_SURFACE_DESTROY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_DISPLAY_SURFACE_DESTROY,$/;"	e	enum:__anon44
SPICE_MSG_END_CURSOR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_CURSOR$/;"	e	enum:__anon48
SPICE_MSG_END_DISPLAY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_DISPLAY$/;"	e	enum:__anon44
SPICE_MSG_END_INPUTS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_INPUTS$/;"	e	enum:__anon46
SPICE_MSG_END_MAIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_MAIN$/;"	e	enum:__anon42
SPICE_MSG_END_PLAYBACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_PLAYBACK$/;"	e	enum:__anon49
SPICE_MSG_END_PORT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_PORT$/;"	e	enum:__anon58
SPICE_MSG_END_RECORD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_RECORD$/;"	e	enum:__anon50
SPICE_MSG_END_SMARTCARD	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_SMARTCARD$/;"	e	enum:__anon54
SPICE_MSG_END_SPICEVMC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_SPICEVMC$/;"	e	enum:__anon56
SPICE_MSG_END_TUNNEL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_END_TUNNEL$/;"	e	enum:__anon52
SPICE_MSG_INPUTS_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_INPUTS_INIT = 101,$/;"	e	enum:__anon46
SPICE_MSG_INPUTS_KEY_MODIFIERS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_INPUTS_KEY_MODIFIERS,$/;"	e	enum:__anon46
SPICE_MSG_INPUTS_MOUSE_MOTION_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_INPUTS_MOUSE_MOTION_ACK = 111,$/;"	e	enum:__anon46
SPICE_MSG_LIST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_LIST,$/;"	e	enum:__anon40
SPICE_MSG_MAIN_AGENT_CONNECTED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_AGENT_CONNECTED,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_AGENT_CONNECTED_TOKENS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_AGENT_CONNECTED_TOKENS,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_AGENT_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_AGENT_DATA,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_AGENT_DISCONNECTED	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_AGENT_DISCONNECTED,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_AGENT_TOKEN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_AGENT_TOKEN,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_CHANNELS_LIST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_CHANNELS_LIST,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_INIT,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_BEGIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_BEGIN = 101,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_BEGIN_SEAMLESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_BEGIN_SEAMLESS,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_CANCEL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_CANCEL,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_DST_SEAMLESS_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_DST_SEAMLESS_ACK,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_DST_SEAMLESS_NACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_DST_SEAMLESS_NACK,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_END,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MIGRATE_SWITCH_HOST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MIGRATE_SWITCH_HOST,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MOUSE_MODE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MOUSE_MODE,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_MULTI_MEDIA_TIME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_MULTI_MEDIA_TIME,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_NAME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_NAME,$/;"	e	enum:__anon42
SPICE_MSG_MAIN_UUID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MAIN_UUID,$/;"	e	enum:__anon42
SPICE_MSG_MIGRATE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MIGRATE = 1,$/;"	e	enum:__anon40
SPICE_MSG_MIGRATE_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_MIGRATE_DATA,$/;"	e	enum:__anon40
SPICE_MSG_NOTIFY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_NOTIFY,$/;"	e	enum:__anon40
SPICE_MSG_PING	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PING,$/;"	e	enum:__anon40
SPICE_MSG_PLAYBACK_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_DATA = 101,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_LATENCY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_LATENCY,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_MODE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_MODE,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_MUTE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_MUTE,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_START	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_START,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_STOP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_STOP,$/;"	e	enum:__anon49
SPICE_MSG_PLAYBACK_VOLUME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PLAYBACK_VOLUME,$/;"	e	enum:__anon49
SPICE_MSG_PORT_EVENT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PORT_EVENT,$/;"	e	enum:__anon58
SPICE_MSG_PORT_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_PORT_INIT = 201,$/;"	e	enum:__anon58
SPICE_MSG_RECORD_MUTE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_RECORD_MUTE,$/;"	e	enum:__anon50
SPICE_MSG_RECORD_START	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_RECORD_START = 101,$/;"	e	enum:__anon50
SPICE_MSG_RECORD_STOP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_RECORD_STOP,$/;"	e	enum:__anon50
SPICE_MSG_RECORD_VOLUME	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_RECORD_VOLUME,$/;"	e	enum:__anon50
SPICE_MSG_SET_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_SET_ACK,$/;"	e	enum:__anon40
SPICE_MSG_SMARTCARD_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_SMARTCARD_DATA = 101,$/;"	e	enum:__anon54
SPICE_MSG_SPICEVMC_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_SPICEVMC_DATA = 101,$/;"	e	enum:__anon56
SPICE_MSG_TUNNEL_INIT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_INIT = 101,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SERVICE_IP_MAP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SERVICE_IP_MAP,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_CLOSE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_CLOSE,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_CLOSED_ACK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_CLOSED_ACK,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_DATA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_DATA,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_FIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_FIN,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_OPEN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_OPEN,$/;"	e	enum:__anon52
SPICE_MSG_TUNNEL_SOCKET_TOKEN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_TUNNEL_SOCKET_TOKEN,$/;"	e	enum:__anon52
SPICE_MSG_WAIT_FOR_CHANNELS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_MSG_WAIT_FOR_CHANNELS,$/;"	e	enum:__anon40
SPICE_NONPKGCONFIG_CFLAGS	Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_CFLAGS	client/Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_CFLAGS	docs/Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_CFLAGS	docs/manual/Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_CFLAGS	server/Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_CFLAGS	server/tests/Makefile	/^SPICE_NONPKGCONFIG_CFLAGS = $/;"	m
SPICE_NONPKGCONFIG_LIBS	Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NONPKGCONFIG_LIBS	client/Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NONPKGCONFIG_LIBS	docs/Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NONPKGCONFIG_LIBS	docs/manual/Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NONPKGCONFIG_LIBS	server/Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NONPKGCONFIG_LIBS	server/tests/Makefile	/^SPICE_NONPKGCONFIG_LIBS =  -pthread -lm -lrt $/;"	m
SPICE_NOTIFY_SEVERITY_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_SEVERITY_ENUM_END$/;"	e	enum:SpiceNotifySeverity
SPICE_NOTIFY_SEVERITY_ERROR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_SEVERITY_ERROR,$/;"	e	enum:SpiceNotifySeverity
SPICE_NOTIFY_SEVERITY_INFO	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_SEVERITY_INFO,$/;"	e	enum:SpiceNotifySeverity
SPICE_NOTIFY_SEVERITY_WARN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_SEVERITY_WARN,$/;"	e	enum:SpiceNotifySeverity
SPICE_NOTIFY_VISIBILITY_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_VISIBILITY_ENUM_END$/;"	e	enum:SpiceNotifyVisibility
SPICE_NOTIFY_VISIBILITY_HIGH	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_VISIBILITY_HIGH,$/;"	e	enum:SpiceNotifyVisibility
SPICE_NOTIFY_VISIBILITY_LOW	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_VISIBILITY_LOW,$/;"	e	enum:SpiceNotifyVisibility
SPICE_NOTIFY_VISIBILITY_MEDIUM	spice-common/spice-protocol/spice/enums.h	/^    SPICE_NOTIFY_VISIBILITY_MEDIUM,$/;"	e	enum:SpiceNotifyVisibility
SPICE_N_ELEMENTS	spice-common/spice-protocol/spice/macros.h	125;"	d
SPICE_OFFSETOF	spice-common/spice-protocol/spice/macros.h	134;"	d
SPICE_OFFSETOF	spice-common/spice-protocol/spice/macros.h	137;"	d
SPICE_PATH_BEGIN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PATH_BEGIN = (1 << 0),$/;"	e	enum:SpicePathFlags
SPICE_PATH_BEZIER	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PATH_BEZIER = (1 << 4),$/;"	e	enum:SpicePathFlags
SPICE_PATH_CLOSE	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PATH_CLOSE = (1 << 3),$/;"	e	enum:SpicePathFlags
SPICE_PATH_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PATH_END = (1 << 1),$/;"	e	enum:SpicePathFlags
SPICE_PATH_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PATH_FLAGS_MASK = 0x1b$/;"	e	enum:SpicePathFlags
SPICE_PLAYBACK_CAP_CELT_0_5_1	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PLAYBACK_CAP_CELT_0_5_1,$/;"	e	enum:__anon85
SPICE_PLAYBACK_CAP_LATENCY	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PLAYBACK_CAP_LATENCY,$/;"	e	enum:__anon85
SPICE_PLAYBACK_CAP_OPUS	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PLAYBACK_CAP_OPUS,$/;"	e	enum:__anon85
SPICE_PLAYBACK_CAP_VOLUME	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PLAYBACK_CAP_VOLUME,$/;"	e	enum:__anon85
SPICE_PORT_EVENT_BREAK	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PORT_EVENT_BREAK,$/;"	e	enum:__anon90
SPICE_PORT_EVENT_CLOSED	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PORT_EVENT_CLOSED,$/;"	e	enum:__anon90
SPICE_PORT_EVENT_OPENED	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_PORT_EVENT_OPENED,$/;"	e	enum:__anon90
SPICE_PUBKEY_TYPE_DH	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DH,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_DSA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DSA,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_DSA1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DSA1,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_DSA2	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DSA2,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_DSA3	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DSA3,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_DSA4	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_DSA4,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_EC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_EC,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_ENUM_END$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_INVALID,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_RSA	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_RSA,$/;"	e	enum:SpicePubkeyType
SPICE_PUBKEY_TYPE_RSA2	spice-common/spice-protocol/spice/enums.h	/^    SPICE_PUBKEY_TYPE_RSA2,$/;"	e	enum:SpicePubkeyType
SPICE_RECORD_CAP_CELT_0_5_1	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_RECORD_CAP_CELT_0_5_1,$/;"	e	enum:__anon86
SPICE_RECORD_CAP_OPUS	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_RECORD_CAP_OPUS,$/;"	e	enum:__anon86
SPICE_RECORD_CAP_VOLUME	spice-common/spice-protocol/spice/protocol.h	/^    SPICE_RECORD_CAP_VOLUME,$/;"	e	enum:__anon86
SPICE_REQUIRES	Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_REQUIRES	client/Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_REQUIRES	docs/Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_REQUIRES	docs/manual/Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_REQUIRES	server/Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_REQUIRES	server/tests/Makefile	/^SPICE_REQUIRES =  glib-2.0 >= 2.22 pixman-1 >= 0.17.7 celt051 >= 0.5.1.1 openssl xinerama$/;"	m
SPICE_RESOURCE_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_RESOURCE_TYPE_ENUM_END$/;"	e	enum:SpiceResourceType
SPICE_RES_TYPE_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_RES_TYPE_INVALID,$/;"	e	enum:SpiceResourceType
SPICE_RES_TYPE_PIXMAP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_RES_TYPE_PIXMAP,$/;"	e	enum:SpiceResourceType
SPICE_RING_CONS_ITEM	spice-common/spice-protocol/spice/ipc_ring.h	120;"	d
SPICE_RING_CONS_WAIT	spice-common/spice-protocol/spice/ipc_ring.h	122;"	d
SPICE_RING_DECLARE	spice-common/spice-protocol/spice/ipc_ring.h	71;"	d
SPICE_RING_INDEX_MASK	spice-common/spice-protocol/spice/ipc_ring.h	97;"	d
SPICE_RING_INIT	spice-common/spice-protocol/spice/ipc_ring.h	89;"	d
SPICE_RING_IS_EMPTY	spice-common/spice-protocol/spice/ipc_ring.h	101;"	d
SPICE_RING_IS_FULL	spice-common/spice-protocol/spice/ipc_ring.h	103;"	d
SPICE_RING_IS_PACKED	spice-common/spice-protocol/spice/ipc_ring.h	99;"	d
SPICE_RING_POP	spice-common/spice-protocol/spice/ipc_ring.h	129;"	d
SPICE_RING_PROD_ITEM	spice-common/spice-protocol/spice/ipc_ring.h	105;"	d
SPICE_RING_PROD_WAIT	spice-common/spice-protocol/spice/ipc_ring.h	107;"	d
SPICE_RING_PUSH	spice-common/spice-protocol/spice/ipc_ring.h	114;"	d
SPICE_ROPD_INVERS_BRUSH	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_INVERS_BRUSH = (1 << 1),$/;"	e	enum:SpiceRopd
SPICE_ROPD_INVERS_DEST	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_INVERS_DEST = (1 << 2),$/;"	e	enum:SpiceRopd
SPICE_ROPD_INVERS_RES	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_INVERS_RES = (1 << 10),$/;"	e	enum:SpiceRopd
SPICE_ROPD_INVERS_SRC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_INVERS_SRC = (1 << 0),$/;"	e	enum:SpiceRopd
SPICE_ROPD_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_MASK = 0x7ff$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_AND	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_AND = (1 << 5),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_BLACKNESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_BLACKNESS = (1 << 7),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_INVERS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_INVERS = (1 << 9),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_OR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_OR = (1 << 4),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_PUT	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_PUT = (1 << 3),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_WHITENESS	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_WHITENESS = (1 << 8),$/;"	e	enum:SpiceRopd
SPICE_ROPD_OP_XOR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_ROPD_OP_XOR = (1 << 6),$/;"	e	enum:SpiceRopd
SPICE_ROP_AND	spice-common/common/pixman_utils.h	/^    SPICE_ROP_AND,           \/* 0x1    src AND dst *\/$/;"	e	enum:__anon1
SPICE_ROP_AND_INVERTED	spice-common/common/pixman_utils.h	/^    SPICE_ROP_AND_INVERTED,  \/* 0x4    (NOT src) AND dst *\/$/;"	e	enum:__anon1
SPICE_ROP_AND_REVERSE	spice-common/common/pixman_utils.h	/^    SPICE_ROP_AND_REVERSE,   \/* 0x2    src AND NOT dst *\/$/;"	e	enum:__anon1
SPICE_ROP_CLEAR	spice-common/common/pixman_utils.h	/^    SPICE_ROP_CLEAR,         \/* 0x0    0 *\/$/;"	e	enum:__anon1
SPICE_ROP_COPY	spice-common/common/pixman_utils.h	/^    SPICE_ROP_COPY,          \/* 0x3    src *\/$/;"	e	enum:__anon1
SPICE_ROP_COPY_INVERTED	spice-common/common/pixman_utils.h	/^    SPICE_ROP_COPY_INVERTED, \/* 0xc    NOT src *\/$/;"	e	enum:__anon1
SPICE_ROP_EQUIV	spice-common/common/pixman_utils.h	/^    SPICE_ROP_EQUIV,         \/* 0x9    (NOT src) XOR dst *\/$/;"	e	enum:__anon1
SPICE_ROP_INVERT	spice-common/common/pixman_utils.h	/^    SPICE_ROP_INVERT,        \/* 0xa    NOT dst *\/$/;"	e	enum:__anon1
SPICE_ROP_NAND	spice-common/common/pixman_utils.h	/^    SPICE_ROP_NAND,          \/* 0xe    (NOT src) OR (NOT dst) *\/$/;"	e	enum:__anon1
SPICE_ROP_NOOP	spice-common/common/pixman_utils.h	/^    SPICE_ROP_NOOP,          \/* 0x5    dst *\/$/;"	e	enum:__anon1
SPICE_ROP_NOR	spice-common/common/pixman_utils.h	/^    SPICE_ROP_NOR,           \/* 0x8    (NOT src) AND (NOT dst) *\/$/;"	e	enum:__anon1
SPICE_ROP_OR	spice-common/common/pixman_utils.h	/^    SPICE_ROP_OR,            \/* 0x7    src OR dst *\/$/;"	e	enum:__anon1
SPICE_ROP_OR_INVERTED	spice-common/common/pixman_utils.h	/^    SPICE_ROP_OR_INVERTED,   \/* 0xd    (NOT src) OR dst *\/$/;"	e	enum:__anon1
SPICE_ROP_OR_REVERSE	spice-common/common/pixman_utils.h	/^    SPICE_ROP_OR_REVERSE,    \/* 0xb    src OR (NOT dst) *\/$/;"	e	enum:__anon1
SPICE_ROP_SET	spice-common/common/pixman_utils.h	/^    SPICE_ROP_SET            \/* 0xf    1 *\/$/;"	e	enum:__anon1
SPICE_ROP_XOR	spice-common/common/pixman_utils.h	/^    SPICE_ROP_XOR,           \/* 0x6    src XOR dst *\/$/;"	e	enum:__anon1
SPICE_SERVER_VERSION	server/spice.h	27;"	d
SPICE_SET_ADDRESS	spice-common/common/draw.h	42;"	d
SPICE_SSL_VERIFY_OP	spice-common/common/ssl_verify.h	/^} SPICE_SSL_VERIFY_OP;$/;"	t	typeref:enum:__anon3
SPICE_SSL_VERIFY_OP_HOSTNAME	spice-common/common/ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_HOSTNAME = (1 << 1),$/;"	e	enum:__anon3
SPICE_SSL_VERIFY_OP_NONE	spice-common/common/ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_NONE     = 0,$/;"	e	enum:__anon3
SPICE_SSL_VERIFY_OP_PUBKEY	spice-common/common/ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_PUBKEY   = (1 << 0),$/;"	e	enum:__anon3
SPICE_SSL_VERIFY_OP_SUBJECT	spice-common/common/ssl_verify.h	/^  SPICE_SSL_VERIFY_OP_SUBJECT  = (1 << 2),$/;"	e	enum:__anon3
SPICE_STAT_MAGIC	spice-common/spice-protocol/spice/stats.h	38;"	d
SPICE_STAT_NODE_FLAG_ENABLED	spice-common/spice-protocol/spice/stats.h	/^    SPICE_STAT_NODE_FLAG_ENABLED = (1 << 0),$/;"	e	enum:__anon91
SPICE_STAT_NODE_FLAG_VALUE	spice-common/spice-protocol/spice/stats.h	/^    SPICE_STAT_NODE_FLAG_VALUE = (1 << 2),$/;"	e	enum:__anon91
SPICE_STAT_NODE_FLAG_VISIBLE	spice-common/spice-protocol/spice/stats.h	/^    SPICE_STAT_NODE_FLAG_VISIBLE = (1 << 1),$/;"	e	enum:__anon91
SPICE_STAT_NODE_MASK_SHOW	spice-common/spice-protocol/spice/stats.h	47;"	d
SPICE_STAT_NODE_MASK_SHOW_VALUE	spice-common/spice-protocol/spice/stats.h	48;"	d
SPICE_STAT_NODE_NAME_MAX	spice-common/spice-protocol/spice/stats.h	37;"	d
SPICE_STAT_SHM_NAME	spice-common/spice-protocol/spice/stats.h	36;"	d
SPICE_STAT_VERSION	spice-common/spice-protocol/spice/stats.h	39;"	d
SPICE_STMT_END	spice-common/spice-protocol/spice/macros.h	158;"	d
SPICE_STMT_START	spice-common/spice-protocol/spice/macros.h	157;"	d
SPICE_STREAM_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STREAM_FLAGS_MASK = 0x1$/;"	e	enum:SpiceStreamFlags
SPICE_STREAM_FLAGS_TOP_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STREAM_FLAGS_TOP_DOWN = (1 << 0),$/;"	e	enum:SpiceStreamFlags
SPICE_STREAM_VIDEO_ALL	server/spice.h	/^    SPICE_STREAM_VIDEO_ALL,$/;"	e	enum:__anon159
SPICE_STREAM_VIDEO_COMPRESSION_H264	server/spice.h	/^   SPICE_STREAM_VIDEO_COMPRESSION_H264$/;"	e	enum:__anon160
SPICE_STREAM_VIDEO_COMPRESSION_INVALID	server/spice.h	/^   SPICE_STREAM_VIDEO_COMPRESSION_INVALID,$/;"	e	enum:__anon160
SPICE_STREAM_VIDEO_COMPRESSION_MJPEG	server/spice.h	/^   SPICE_STREAM_VIDEO_COMPRESSION_MJPEG,$/;"	e	enum:__anon160
SPICE_STREAM_VIDEO_FILTER	server/spice.h	/^    SPICE_STREAM_VIDEO_FILTER$/;"	e	enum:__anon159
SPICE_STREAM_VIDEO_INVALID	server/spice.h	/^    SPICE_STREAM_VIDEO_INVALID,$/;"	e	enum:__anon159
SPICE_STREAM_VIDEO_OFF	server/spice.h	/^    SPICE_STREAM_VIDEO_OFF,$/;"	e	enum:__anon159
SPICE_STRINGIFY	spice-common/common/log.h	31;"	d
SPICE_STRINGIFY_ARG	spice-common/common/log.h	32;"	d
SPICE_STRING_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STRING_FLAGS_MASK = 0xf$/;"	e	enum:SpiceStringFlags
SPICE_STRING_FLAGS_RASTER_A1	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STRING_FLAGS_RASTER_A1 = (1 << 0),$/;"	e	enum:SpiceStringFlags
SPICE_STRING_FLAGS_RASTER_A4	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STRING_FLAGS_RASTER_A4 = (1 << 1),$/;"	e	enum:SpiceStringFlags
SPICE_STRING_FLAGS_RASTER_A8	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STRING_FLAGS_RASTER_A8 = (1 << 2),$/;"	e	enum:SpiceStringFlags
SPICE_STRING_FLAGS_RASTER_TOP_DOWN	spice-common/spice-protocol/spice/enums.h	/^    SPICE_STRING_FLAGS_RASTER_TOP_DOWN = (1 << 3),$/;"	e	enum:SpiceStringFlags
SPICE_STRLOC	spice-common/common/log.h	34;"	d
SPICE_SURFACE_FLAGS_MASK	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FLAGS_MASK = 0x1$/;"	e	enum:SpiceSurfaceFlags
SPICE_SURFACE_FLAGS_PRIMARY	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FLAGS_PRIMARY = (1 << 0),$/;"	e	enum:SpiceSurfaceFlags
SPICE_SURFACE_FMT_16_555	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_16_555 = 16,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_16_565	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_16_565 = 80,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_1_A	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_1_A,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_32_ARGB	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_32_ARGB = 96,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_32_xRGB	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_32_xRGB = 32,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_8_A	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_8_A = 8,$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_DEPTH	spice-common/common/draw.h	95;"	d
SPICE_SURFACE_FMT_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_ENUM_END$/;"	e	enum:SpiceSurfaceFmt
SPICE_SURFACE_FMT_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_SURFACE_FMT_INVALID,$/;"	e	enum:SpiceSurfaceFmt
SPICE_TICKET_KEY_PAIR_LENGTH	spice-common/spice-protocol/spice/protocol.h	44;"	d
SPICE_TICKET_PUBKEY_BYTES	spice-common/spice-protocol/spice/protocol.h	45;"	d
SPICE_TUNNEL_IP_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_IP_TYPE_ENUM_END$/;"	e	enum:SpiceTunnelIpType
SPICE_TUNNEL_IP_TYPE_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_IP_TYPE_INVALID,$/;"	e	enum:SpiceTunnelIpType
SPICE_TUNNEL_IP_TYPE_IPv4	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_IP_TYPE_IPv4,$/;"	e	enum:SpiceTunnelIpType
SPICE_TUNNEL_SERVICE_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_SERVICE_TYPE_ENUM_END$/;"	e	enum:SpiceTunnelServiceType
SPICE_TUNNEL_SERVICE_TYPE_GENERIC	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_SERVICE_TYPE_GENERIC,$/;"	e	enum:SpiceTunnelServiceType
SPICE_TUNNEL_SERVICE_TYPE_INVALID	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_SERVICE_TYPE_INVALID,$/;"	e	enum:SpiceTunnelServiceType
SPICE_TUNNEL_SERVICE_TYPE_IPP	spice-common/spice-protocol/spice/enums.h	/^    SPICE_TUNNEL_SERVICE_TYPE_IPP,$/;"	e	enum:SpiceTunnelServiceType
SPICE_UINT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	187;"	d
SPICE_UINT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	191;"	d
SPICE_UINT64_CONSTANT	spice-common/spice-protocol/spice/macros.h	194;"	d
SPICE_UNLIKELY	spice-common/spice-protocol/spice/macros.h	180;"	d
SPICE_UNLIKELY	spice-common/spice-protocol/spice/macros.h	183;"	d
SPICE_VERSION_MAJOR	spice-common/spice-protocol/spice/protocol.h	39;"	d
SPICE_VERSION_MINOR	spice-common/spice-protocol/spice/protocol.h	40;"	d
SPICE_VIDEO_CODEC_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VIDEO_CODEC_TYPE_ENUM_END$/;"	e	enum:SpiceVideoCodecType
SPICE_VIDEO_CODEC_TYPE_H264	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VIDEO_CODEC_TYPE_H264,$/;"	e	enum:SpiceVideoCodecType
SPICE_VIDEO_CODEC_TYPE_MJPEG	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VIDEO_CODEC_TYPE_MJPEG = 1,$/;"	e	enum:SpiceVideoCodecType
SPICE_VSC_MESSAGE_TYPE_APDU	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_APDU,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_ATR	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_ATR,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_CardRemove	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_CardRemove,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_ENUM_END$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_Error	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_Error,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_Flush	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_Flush,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_FlushComplete	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_FlushComplete,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_Init	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_Init = 1,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_ReaderAdd	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_ReaderAdd,$/;"	e	enum:SpiceVscMessageType
SPICE_VSC_MESSAGE_TYPE_ReaderRemove	spice-common/spice-protocol/spice/enums.h	/^    SPICE_VSC_MESSAGE_TYPE_ReaderRemove,$/;"	e	enum:SpiceVscMessageType
SPICE_WAN_COMPRESSION_ALWAYS	server/spice.h	/^    SPICE_WAN_COMPRESSION_ALWAYS,$/;"	e	enum:__anon158
SPICE_WAN_COMPRESSION_AUTO	server/spice.h	/^    SPICE_WAN_COMPRESSION_AUTO,$/;"	e	enum:__anon158
SPICE_WAN_COMPRESSION_INVALID	server/spice.h	/^    SPICE_WAN_COMPRESSION_INVALID,$/;"	e	enum:__anon158
SPICE_WAN_COMPRESSION_NEVER	server/spice.h	/^    SPICE_WAN_COMPRESSION_NEVER,$/;"	e	enum:__anon158
SPICE_WARN_CODE_ENUM_END	spice-common/spice-protocol/spice/enums.h	/^    SPICE_WARN_CODE_ENUM_END$/;"	e	enum:SpiceWarnCode
SPICE_WARN_GENERAL	spice-common/spice-protocol/spice/enums.h	/^    SPICE_WARN_GENERAL,$/;"	e	enum:SpiceWarnCode
SPICE_WATCH_EVENT_READ	server/spice.h	56;"	d
SPICE_WATCH_EVENT_WRITE	server/spice.h	57;"	d
SQSECANT	spice-common/common/lines.c	298;"	d	file:
SSL_CFLAGS	Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_CFLAGS	client/Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_CFLAGS	docs/Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_CFLAGS	docs/manual/Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_CFLAGS	server/Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_CFLAGS	server/tests/Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_LIBS	client/Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_LIBS	docs/Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_LIBS	docs/manual/Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_LIBS	server/Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_LIBS	server/tests/Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSL_VERIFY_H	spice-common/common/ssl_verify.h	20;"	d
START_MARK_MS	client/windows/playback.cpp	28;"	d	file:
STATE_FINISH_DECOMPRESS	client/mjpeg_decoder.cpp	/^    STATE_FINISH_DECOMPRESS$/;"	e	enum:__anon126	file:
STATE_READ_HEADER	client/mjpeg_decoder.cpp	/^    STATE_READ_HEADER,$/;"	e	enum:__anon126	file:
STATE_READ_SCANLINES	client/mjpeg_decoder.cpp	/^    STATE_READ_SCANLINES,$/;"	e	enum:__anon126	file:
STATE_START_DECOMPRESS	client/mjpeg_decoder.cpp	/^    STATE_START_DECOMPRESS,$/;"	e	enum:__anon126	file:
STDC_HEADERS	config.h	119;"	d
STDC_HEADERS	spice-common/config.h	143;"	d
STICKY_KEY_PIXMAP	client/application.cpp	58;"	d	file:
STICKY_KEY_TIMEOUT	client/application.cpp	59;"	d	file:
STREAM_FRAME_CONTAINER	server/red_worker.c	/^    STREAM_FRAME_CONTAINER,$/;"	e	enum:__anon175	file:
STREAM_FRAME_NATIVE	server/red_worker.c	/^    STREAM_FRAME_NATIVE,$/;"	e	enum:__anon175	file:
STREAM_FRAME_NONE	server/red_worker.c	/^    STREAM_FRAME_NONE,$/;"	e	enum:__anon175	file:
STREAM_STATS	server/red_worker.c	470;"	d	file:
STREAM_VIDEO_ALL	server/red_common.h	/^    STREAM_VIDEO_ALL,$/;"	e	enum:__anon200
STREAM_VIDEO_COMPRESSION_H264	server/red_common.h	/^   STREAM_VIDEO_COMPRESSION_H264$/;"	e	enum:__anon201
STREAM_VIDEO_COMPRESSION_INVALID	server/red_common.h	/^   STREAM_VIDEO_COMPRESSION_INVALID,$/;"	e	enum:__anon201
STREAM_VIDEO_COMPRESSION_MJPEG	server/red_common.h	/^   STREAM_VIDEO_COMPRESSION_MJPEG,$/;"	e	enum:__anon201
STREAM_VIDEO_FILTER	server/red_common.h	/^    STREAM_VIDEO_FILTER$/;"	e	enum:__anon200
STREAM_VIDEO_INVALID	server/red_common.h	/^    STREAM_VIDEO_INVALID,$/;"	e	enum:__anon200
STREAM_VIDEO_OFF	server/red_common.h	/^    STREAM_VIDEO_OFF,$/;"	e	enum:__anon200
STRINGIZE	client/gui/softrenderer.cpp	35;"	d	file:
STRIP	Makefile	/^STRIP = strip$/;"	m
STRIP	client/Makefile	/^STRIP = strip$/;"	m
STRIP	docs/Makefile	/^STRIP = strip$/;"	m
STRIP	docs/manual/Makefile	/^STRIP = strip$/;"	m
STRIP	server/Makefile	/^STRIP = strip$/;"	m
STRIP	server/tests/Makefile	/^STRIP = strip$/;"	m
STRIP	spice-common/Makefile	/^STRIP = strip$/;"	m
STRIP	spice-common/common/Makefile	/^STRIP = strip$/;"	m
STRIP	spice-common/python_modules/Makefile	/^STRIP = strip$/;"	m
STRIP	spice-common/spice-protocol/Makefile	/^STRIP = $/;"	m
STRIP	spice-common/spice-protocol/spice/Makefile	/^STRIP = $/;"	m
STRUCTS	spice-common/common/Makefile	/^STRUCTS = -M String -M Rect -M Point -M DisplayBase -M Fill -M Opaque -M Copy -M Blend -M Blackness -M Whiteness -M Invers -M Rop3 -M Stroke -M Text -M Transparent -M AlphaBlend -M Composite$/;"	m
STR_BUTTON_BACK	client/gui/resource_provider.h	/^    STR_BUTTON_BACK,$/;"	e	enum:__anon113
STR_BUTTON_CANCEL	client/gui/resource_provider.h	/^    STR_BUTTON_CANCEL,$/;"	e	enum:__anon113
STR_BUTTON_CLOSE	client/gui/resource_provider.h	/^    STR_BUTTON_CLOSE,$/;"	e	enum:__anon113
STR_BUTTON_CONNECT	client/gui/resource_provider.h	/^    STR_BUTTON_CONNECT,$/;"	e	enum:__anon113
STR_BUTTON_DISCONNECT	client/gui/resource_provider.h	/^    STR_BUTTON_DISCONNECT,$/;"	e	enum:__anon113
STR_BUTTON_OK	client/gui/resource_provider.h	/^    STR_BUTTON_OK,$/;"	e	enum:__anon113
STR_BUTTON_OPTIONS	client/gui/resource_provider.h	/^    STR_BUTTON_OPTIONS,$/;"	e	enum:__anon113
STR_BUTTON_QUIT	client/gui/resource_provider.h	/^    STR_BUTTON_QUIT,$/;"	e	enum:__anon113
STR_INVALID	client/gui/resource_provider.h	/^    STR_INVALID,$/;"	e	enum:__anon113
STR_LABEL_HOST	client/gui/resource_provider.h	/^    STR_LABEL_HOST,$/;"	e	enum:__anon113
STR_LABEL_PASSWORD	client/gui/resource_provider.h	/^    STR_LABEL_PASSWORD,$/;"	e	enum:__anon113
STR_LABEL_PORT	client/gui/resource_provider.h	/^    STR_LABEL_PORT,$/;"	e	enum:__anon113
STR_LABEL_SPORT	client/gui/resource_provider.h	/^    STR_LABEL_SPORT,$/;"	e	enum:__anon113
STR_MESG_CONNECTING	client/gui/resource_provider.h	/^    STR_MESG_CONNECTING,$/;"	e	enum:__anon113
STR_MESG_INVALID_PORT	client/gui/resource_provider.h	/^    STR_MESG_INVALID_PORT,$/;"	e	enum:__anon113
STR_MESG_INVALID_SPORT	client/gui/resource_provider.h	/^    STR_MESG_INVALID_SPORT,$/;"	e	enum:__anon113
STR_MESG_MISSING_HOST_NAME	client/gui/resource_provider.h	/^    STR_MESG_MISSING_HOST_NAME,$/;"	e	enum:__anon113
STR_MESG_MISSING_PORT	client/gui/resource_provider.h	/^    STR_MESG_MISSING_PORT,$/;"	e	enum:__anon113
SUBDIRS	Makefile	/^SUBDIRS = spice-common server docs $(am__append_1)$/;"	m
SUBDIRS	docs/Makefile	/^SUBDIRS = manual$/;"	m
SUBDIRS	server/Makefile	/^SUBDIRS = . tests$/;"	m
SUBDIRS	spice-common/Makefile	/^SUBDIRS = python_modules common$/;"	m
SUBDIRS	spice-common/spice-protocol/Makefile	/^SUBDIRS = spice$/;"	m
SUBSUMES	spice-common/common/region.c	39;"	d	file:
SUBTYPE_PORT	server/reds.c	2910;"	d	file:
SUBTYPE_SMARTCARD	server/reds.c	2908;"	d	file:
SUBTYPE_USBREDIR	server/reds.c	2909;"	d	file:
SUBTYPE_VDAGENT	server/reds.c	2907;"	d	file:
SUFFIXES	docs/manual/Makefile	/^SUFFIXES = .html$/;"	m
SURF_HEIGHT	server/tests/test_display_base.h	81;"	d
SURF_WIDTH	server/tests/test_display_base.h	80;"	d
SWAPINT	spice-common/common/lines.c	204;"	d	file:
SWAPINT_PAIR	spice-common/common/lines.c	210;"	d	file:
SWAPPT	spice-common/common/lines.c	207;"	d	file:
SW_CANVAS_CACHE	client/red_canvas_base.h	21;"	d
SW_CANVAS_CACHE	client/red_canvas_base.h	23;"	d
SW_CANVAS_CACHE	client/red_gdi_canvas.cpp	31;"	d	file:
SW_CANVAS_CACHE	client/red_gdi_canvas.cpp	33;"	d	file:
SW_CANVAS_CACHE	client/red_gdi_canvas.h	23;"	d
SW_CANVAS_CACHE	client/red_gdi_canvas.h	25;"	d
SW_CANVAS_CACHE	client/red_gl_canvas.cpp	26;"	d	file:
SW_CANVAS_CACHE	client/red_gl_canvas.cpp	28;"	d	file:
SW_CANVAS_CACHE	client/red_gl_canvas.h	23;"	d
SW_CANVAS_CACHE	client/red_gl_canvas.h	26;"	d
SW_CANVAS_CACHE	client/red_sw_canvas.cpp	29;"	d	file:
SW_CANVAS_CACHE	client/red_sw_canvas.cpp	31;"	d	file:
SW_CANVAS_CACHE	client/red_sw_canvas.h	24;"	d
SW_CANVAS_CACHE	client/red_sw_canvas.h	26;"	d
SW_CANVAS_IMAGE_CACHE	server/reds_gl_canvas.c	25;"	d	file:
SW_CANVAS_IMAGE_CACHE	server/reds_gl_canvas.c	27;"	d	file:
SW_CANVAS_IMAGE_CACHE	server/reds_gl_canvas.h	22;"	d
SW_CANVAS_IMAGE_CACHE	server/reds_gl_canvas.h	24;"	d
SW_CANVAS_IMAGE_CACHE	server/reds_sw_canvas.c	25;"	d	file:
SW_CANVAS_IMAGE_CACHE	server/reds_sw_canvas.c	27;"	d	file:
SW_CANVAS_IMAGE_CACHE	server/reds_sw_canvas.h	21;"	d
SW_CANVAS_IMAGE_CACHE	server/reds_sw_canvas.h	23;"	d
SYNC_REMOTE_MODIFIERS	client/inputs_channel.cpp	29;"	d	file:
S_	client/gui/softrenderer.cpp	34;"	d	file:
SampleTab	client/gui/gui.cpp	/^        SampleTab(int id, int width, int height)$/;"	f	class:SampleTabFactory::SampleTab
SampleTab	client/gui/gui.cpp	/^    class SampleTab: public GUI::Tab {$/;"	c	class:SampleTabFactory	file:
SampleTabFactory	client/gui/gui.cpp	/^    SampleTabFactory(int id)$/;"	f	class:SampleTabFactory
SampleTabFactory	client/gui/gui.cpp	/^class SampleTabFactory: public GUI::TabFactory {$/;"	c	file:
ScreenIcon	client/x11/x_icon.h	/^        ScreenIcon() : pixmap (None), mask (None) {}$/;"	f	class:XIcon::ScreenIcon
ScreenIcon	client/x11/x_icon.h	/^        ScreenIcon(Pixmap in_pixmap, Pixmap in_mask) : pixmap (in_pixmap), mask (in_mask) {}$/;"	f	class:XIcon::ScreenIcon
ScreenIcon	client/x11/x_icon.h	/^    class ScreenIcon {$/;"	c	class:XIcon
ScreenLayer	client/screen_layer.cpp	/^ScreenLayer::ScreenLayer(int z_order, bool opaque)$/;"	f	class:ScreenLayer
ScreenLayer	client/screen_layer.h	/^class ScreenLayer {$/;"	c
ScreenList	client/x11/platform.cpp	/^typedef std::list<XScreen*> ScreenList;$/;"	t	file:
SendBuffer	client/client_net_socket.h	/^    SendBuffer() {};$/;"	f	class:ClientNetSocket::SendBuffer
SendBuffer	client/client_net_socket.h	/^class ClientNetSocket::SendBuffer {$/;"	c	class:ClientNetSocket
SendException	client/client_net_socket.h	/^    class SendException {};$/;"	c	class:ClientNetSocket
SendTrigger	client/red_channel.cpp	/^SendTrigger::SendTrigger(RedChannel& channel)$/;"	f	class:SendTrigger
SendTrigger	client/red_channel.h	/^class SendTrigger: public EventSources::Trigger {$/;"	c
Session	client/x11/named_pipe.cpp	/^Session::Session(int fd, ProcessLoop& events_loop)$/;"	f	class:Session
Session	client/x11/named_pipe.h	/^class Session: public EventSources::Socket {$/;"	c
SetInputsHandlerEvent	client/inputs_channel.cpp	/^    SetInputsHandlerEvent(InputsChannel& channel) : _channel (channel) {}$/;"	f	class:SetInputsHandlerEvent
SetInputsHandlerEvent	client/inputs_channel.cpp	/^class SetInputsHandlerEvent: public Event {$/;"	c	file:
SetModeFunc	client/red_client.cpp	/^        SetModeFunc(bool capture_mode)$/;"	f	class:MouseModeEvent::SetModeFunc
SetModeFunc	client/red_client.cpp	/^    class SetModeFunc: public ForEachChannelFunc {$/;"	c	class:MouseModeEvent	file:
SetYMajorOctant	spice-common/common/lines.c	232;"	d	file:
SettingsDialog	client/gui/gui.cpp	/^SettingsDialog::SettingsDialog(GUI& gui)$/;"	f	class:SettingsDialog
SettingsDialog	client/gui/gui.cpp	/^class SettingsDialog : public TabDialog {$/;"	c	file:
Shadow	server/red_worker.c	/^typedef struct Shadow {$/;"	s	file:
Shadow	server/red_worker.c	/^} Shadow;$/;"	t	typeref:struct:Shadow	file:
SharedCache	client/shared_cache.hpp	/^    SharedCache()$/;"	f	class:SharedCache
SharedCache	client/shared_cache.hpp	/^class SharedCache : public Base {$/;"	c
SharedDictionary	server/glz_encoder_dictionary_protected.h	/^struct SharedDictionary {$/;"	s
SharedDictionary	server/glz_encoder_dictionary_protected.h	/^typedef struct SharedDictionary SharedDictionary;$/;"	t	typeref:struct:SharedDictionary
ShowTreeData	server/red_worker.c	/^typedef struct ShowTreeData {$/;"	s	file:
ShowTreeData	server/red_worker.c	/^} ShowTreeData;$/;"	t	typeref:struct:ShowTreeData	file:
ShutdownExcpetion	client/client_net_socket.h	/^    class ShutdownExcpetion {};$/;"	c	class:ClientNetSocket
SimpleSpiceUpdate	server/tests/test_display_base.c	/^typedef struct SimpleSpiceUpdate {$/;"	s	file:
SimpleSpiceUpdate	server/tests/test_display_base.c	/^} SimpleSpiceUpdate;$/;"	t	typeref:struct:SimpleSpiceUpdate	file:
SimpleSurfaceCmd	server/tests/test_display_base.c	/^typedef struct SimpleSurfaceCmd {$/;"	s	file:
SimpleSurfaceCmd	server/tests/test_display_base.c	/^} SimpleSurfaceCmd;$/;"	t	typeref:struct:SimpleSurfaceCmd	file:
SizeCompare	client/x11/platform.cpp	/^class SizeCompare {$/;"	c	file:
SizeInfo	client/x11/platform.cpp	/^    SizeInfo(int int_index, XRRScreenSize* in_size) : index (int_index), size (in_size) {}$/;"	f	class:SizeInfo
SizeInfo	client/x11/platform.cpp	/^class SizeInfo {$/;"	c	file:
SmartCardChannel	client/smartcard_channel.cpp	/^SmartCardChannel::SmartCardChannel(RedClient& client, uint32_t id)$/;"	f	class:SmartCardChannel
SmartCardChannel	client/smartcard_channel.h	/^class SmartCardChannel : public RedChannel {$/;"	c
SmartCardChannel	server/smartcard.c	/^typedef struct SmartCardChannel {$/;"	s	file:
SmartCardChannel	server/smartcard.c	/^} SmartCardChannel;$/;"	t	typeref:struct:SmartCardChannel	file:
SmartCardChannelClient	server/smartcard.c	/^typedef struct SmartCardChannelClient {$/;"	s	file:
SmartCardChannelClient	server/smartcard.c	/^} SmartCardChannelClient;$/;"	t	typeref:struct:SmartCardChannelClient	file:
SmartCardDeviceState	server/smartcard.c	/^struct SmartCardDeviceState {$/;"	s	file:
SmartCardDeviceState	server/smartcard.c	/^typedef struct SmartCardDeviceState SmartCardDeviceState;$/;"	t	typeref:struct:SmartCardDeviceState	file:
SmartCardEvent	client/smartcard_channel.h	/^typedef std::pair<VEventType, Event*> SmartCardEvent;$/;"	t
SmartCardFactory	client/smartcard_channel.cpp	/^    SmartCardFactory() : ChannelFactory(SPICE_CHANNEL_SMARTCARD) {}$/;"	f	class:SmartCardFactory
SmartCardFactory	client/smartcard_channel.cpp	/^class SmartCardFactory: public ChannelFactory {$/;"	c	file:
SmartCardHandler	client/smartcard_channel.cpp	/^    SmartCardHandler(SmartCardChannel& channel)$/;"	f	class:SmartCardHandler
SmartCardHandler	client/smartcard_channel.cpp	/^class SmartCardHandler: public MessageHandlerImp<SmartCardChannel, SPICE_CHANNEL_SMARTCARD> {$/;"	c	file:
SmartcardOptions	client/smartcard_channel.cpp	/^SmartcardOptions::SmartcardOptions() :$/;"	f	class:SmartcardOptions
SmartcardOptions	client/smartcard_channel.h	/^struct SmartcardOptions {$/;"	s
SndChannel	server/snd_worker.c	/^struct SndChannel {$/;"	s	file:
SndChannel	server/snd_worker.c	/^typedef struct SndChannel SndChannel;$/;"	t	typeref:struct:SndChannel	file:
SndCodec	spice-common/common/snd_codec.h	/^typedef struct SndCodecInternal * SndCodec;$/;"	t	typeref:struct:SndCodecInternal
SndCodecInternal	spice-common/common/snd_codec.c	/^} SndCodecInternal;$/;"	t	typeref:struct:__anon37	file:
SndWorker	server/snd_worker.c	/^struct SndWorker {$/;"	s	file:
SndWorker	server/snd_worker.c	/^typedef struct SndWorker SndWorker;$/;"	t	typeref:struct:SndWorker	file:
Socket	client/event_sources.h	/^class EventSources::Socket: public EventSource {$/;"	c	class:EventSources
SocketStatus	client/client_net_socket.h	/^} SocketStatus;$/;"	t	typeref:enum:__anon125
SoftRenderer	client/gui/softrenderer.cpp	/^SoftRenderer::SoftRenderer(uint8_t* surface, uint width, uint height, uint stride,$/;"	f	class:CEGUI::SoftRenderer
SoftRenderer	client/gui/softrenderer.h	/^    class SoftRenderer : public Renderer$/;"	c	namespace:CEGUI
SoftTexture	client/gui/softtexture.cpp	/^SoftTexture::SoftTexture(Renderer* owner)$/;"	f	class:CEGUI::SoftTexture
SoftTexture	client/gui/softtexture.cpp	/^SoftTexture::SoftTexture(Renderer* owner, const String& filename,$/;"	f	class:CEGUI::SoftTexture
SoftTexture	client/gui/softtexture.cpp	/^SoftTexture::SoftTexture(Renderer* owner, uint size)$/;"	f	class:CEGUI::SoftTexture
SoftTexture	client/gui/softtexture.h	/^    class SoftTexture : public Texture$/;"	c	namespace:CEGUI
SortBottomToTop	client/x11/platform.cpp	/^class SortBottomToTop {$/;"	c	file:
SortLeftToRight	client/x11/platform.cpp	/^class SortLeftToRight {$/;"	c	file:
SortRightToLeft	client/x11/platform.cpp	/^class SortRightToLeft {$/;"	c	file:
SortTopToBottom	client/x11/platform.cpp	/^class SortTopToBottom {$/;"	c	file:
SpanDataPtr	spice-common/common/lines.c	/^} SpanDataRec, *SpanDataPtr;$/;"	t	typeref:struct:_SpanData	file:
SpanDataRec	spice-common/common/lines.c	/^} SpanDataRec, *SpanDataPtr;$/;"	t	typeref:struct:_SpanData	file:
SpanGroup	spice-common/common/lines.c	/^} SpanGroup;$/;"	t	typeref:struct:__anon28	file:
Spans	spice-common/common/lines.c	/^} Spans;$/;"	t	typeref:struct:__anon27	file:
SpiceAlphaBlend	spice-common/common/draw.h	/^typedef struct SpiceAlphaBlend {$/;"	s
SpiceAlphaBlend	spice-common/common/draw.h	/^} SpiceAlphaBlend;$/;"	t	typeref:struct:SpiceAlphaBlend
SpiceAlphaFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceAlphaFlags {$/;"	g
SpiceAlphaFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceAlphaFlags;$/;"	t	typeref:enum:SpiceAlphaFlags
SpiceAudioDataMode	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceAudioDataMode {$/;"	g
SpiceAudioDataMode	spice-common/spice-protocol/spice/enums.h	/^} SpiceAudioDataMode;$/;"	t	typeref:enum:SpiceAudioDataMode
SpiceAudioFmt	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceAudioFmt {$/;"	g
SpiceAudioFmt	spice-common/spice-protocol/spice/enums.h	/^} SpiceAudioFmt;$/;"	t	typeref:enum:SpiceAudioFmt
SpiceBaseInstance	server/spice.h	/^struct SpiceBaseInstance {$/;"	s
SpiceBaseInstance	server/spice.h	/^typedef struct SpiceBaseInstance SpiceBaseInstance;$/;"	t	typeref:struct:SpiceBaseInstance
SpiceBaseInterface	server/spice.h	/^struct SpiceBaseInterface {$/;"	s
SpiceBaseInterface	server/spice.h	/^typedef struct SpiceBaseInterface SpiceBaseInterface;$/;"	t	typeref:struct:SpiceBaseInterface
SpiceBitmap	spice-common/common/draw.h	/^typedef struct SpiceBitmap {$/;"	s
SpiceBitmap	spice-common/common/draw.h	/^} SpiceBitmap;$/;"	t	typeref:struct:SpiceBitmap
SpiceBitmapFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceBitmapFlags {$/;"	g
SpiceBitmapFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceBitmapFlags;$/;"	t	typeref:enum:SpiceBitmapFlags
SpiceBitmapFmt	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceBitmapFmt {$/;"	g
SpiceBitmapFmt	spice-common/spice-protocol/spice/enums.h	/^} SpiceBitmapFmt;$/;"	t	typeref:enum:SpiceBitmapFmt
SpiceBlackness	spice-common/common/draw.h	/^typedef struct SpiceBlackness {$/;"	s
SpiceBlackness	spice-common/common/draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceBlend	spice-common/common/draw.h	/^} SpiceCopy, SpiceBlend;$/;"	t	typeref:struct:SpiceCopy
SpiceBrush	spice-common/common/draw.h	/^typedef struct SpiceBrush {$/;"	s
SpiceBrush	spice-common/common/draw.h	/^} SpiceBrush;$/;"	t	typeref:struct:SpiceBrush
SpiceBrushType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceBrushType {$/;"	g
SpiceBrushType	spice-common/spice-protocol/spice/enums.h	/^} SpiceBrushType;$/;"	t	typeref:enum:SpiceBrushType
SpiceBuffer	spice-common/common/mem.h	/^typedef struct SpiceBuffer$/;"	s
SpiceBuffer	spice-common/common/mem.h	/^} SpiceBuffer;$/;"	t	typeref:struct:SpiceBuffer
SpiceCanvas	spice-common/common/canvas_base.h	/^typedef struct _SpiceCanvas SpiceCanvas;$/;"	t	typeref:struct:_SpiceCanvas
SpiceCanvasOps	spice-common/common/canvas_base.h	/^} SpiceCanvasOps;$/;"	t	typeref:struct:__anon13
SpiceChannelEventInfo	server/spice.h	/^typedef struct SpiceChannelEventInfo {$/;"	s
SpiceChannelEventInfo	server/spice.h	/^} SpiceChannelEventInfo;$/;"	t	typeref:struct:SpiceChannelEventInfo
SpiceChannelId	spice-common/common/messages.h	/^typedef struct SpiceChannelId {$/;"	s
SpiceChannelId	spice-common/common/messages.h	/^} SpiceChannelId;$/;"	t	typeref:struct:SpiceChannelId
SpiceCharDeviceCallbacks	server/char_device.h	/^typedef struct SpiceCharDeviceCallbacks {$/;"	s
SpiceCharDeviceCallbacks	server/char_device.h	/^} SpiceCharDeviceCallbacks;$/;"	t	typeref:struct:SpiceCharDeviceCallbacks
SpiceCharDeviceClientState	server/char_device.c	/^struct SpiceCharDeviceClientState {$/;"	s	file:
SpiceCharDeviceClientState	server/char_device.c	/^typedef struct SpiceCharDeviceClientState SpiceCharDeviceClientState;$/;"	t	typeref:struct:SpiceCharDeviceClientState	file:
SpiceCharDeviceInstance	server/spice.h	/^struct SpiceCharDeviceInstance {$/;"	s
SpiceCharDeviceInstance	server/spice.h	/^typedef struct SpiceCharDeviceInstance SpiceCharDeviceInstance;$/;"	t	typeref:struct:SpiceCharDeviceInstance
SpiceCharDeviceInterface	server/spice.h	/^struct SpiceCharDeviceInterface {$/;"	s
SpiceCharDeviceInterface	server/spice.h	/^typedef struct SpiceCharDeviceInterface SpiceCharDeviceInterface;$/;"	t	typeref:struct:SpiceCharDeviceInterface
SpiceCharDeviceMsgToClient	server/char_device.h	/^typedef void SpiceCharDeviceMsgToClient;$/;"	t
SpiceCharDeviceMsgToClientItem	server/char_device.c	/^typedef struct SpiceCharDeviceMsgToClientItem {$/;"	s	file:
SpiceCharDeviceMsgToClientItem	server/char_device.c	/^} SpiceCharDeviceMsgToClientItem;$/;"	t	typeref:struct:SpiceCharDeviceMsgToClientItem	file:
SpiceCharDeviceState	server/char_device.c	/^struct SpiceCharDeviceState {$/;"	s	file:
SpiceCharDeviceState	server/spice.h	/^typedef struct SpiceCharDeviceState SpiceCharDeviceState;$/;"	t	typeref:struct:SpiceCharDeviceState
SpiceCharDeviceStateItem	server/reds-private.h	/^typedef struct SpiceCharDeviceStateItem {$/;"	s
SpiceCharDeviceStateItem	server/reds-private.h	/^} SpiceCharDeviceStateItem;$/;"	t	typeref:struct:SpiceCharDeviceStateItem
SpiceCharDeviceWriteBuffer	server/char_device.h	/^typedef struct SpiceCharDeviceWriteBuffer {$/;"	s
SpiceCharDeviceWriteBuffer	server/char_device.h	/^} SpiceCharDeviceWriteBuffer;$/;"	t	typeref:struct:SpiceCharDeviceWriteBuffer
SpiceChunk	spice-common/common/mem.h	/^typedef struct SpiceChunk {$/;"	s
SpiceChunk	spice-common/common/mem.h	/^} SpiceChunk;$/;"	t	typeref:struct:SpiceChunk
SpiceChunks	spice-common/common/mem.h	/^typedef struct SpiceChunks {$/;"	s
SpiceChunks	spice-common/common/mem.h	/^} SpiceChunks;$/;"	t	typeref:struct:SpiceChunks
SpiceClip	spice-common/common/draw.h	/^typedef struct SpiceClip {$/;"	s
SpiceClip	spice-common/common/draw.h	/^} SpiceClip;$/;"	t	typeref:struct:SpiceClip
SpiceClipRects	spice-common/common/draw.h	/^typedef struct SpiceClipRects {$/;"	s
SpiceClipRects	spice-common/common/draw.h	/^} SpiceClipRects;$/;"	t	typeref:struct:SpiceClipRects
SpiceClipType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceClipType {$/;"	g
SpiceClipType	spice-common/spice-protocol/spice/enums.h	/^} SpiceClipType;$/;"	t	typeref:enum:SpiceClipType
SpiceComposite	spice-common/common/draw.h	/^typedef struct SpiceComposite {$/;"	s
SpiceComposite	spice-common/common/draw.h	/^} SpiceComposite;$/;"	t	typeref:struct:SpiceComposite
SpiceCompositeFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceCompositeFlags {$/;"	g
SpiceCompositeFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceCompositeFlags;$/;"	t	typeref:enum:SpiceCompositeFlags
SpiceCopy	spice-common/common/draw.h	/^typedef struct SpiceCopy {$/;"	s
SpiceCopy	spice-common/common/draw.h	/^} SpiceCopy, SpiceBlend;$/;"	t	typeref:struct:SpiceCopy
SpiceCoreInterface	server/spice.h	/^struct SpiceCoreInterface {$/;"	s
SpiceCoreInterface	server/spice.h	/^typedef struct SpiceCoreInterface SpiceCoreInterface;$/;"	t	typeref:struct:SpiceCoreInterface
SpiceCursor	spice-common/common/messages.h	/^typedef struct SpiceCursor {$/;"	s
SpiceCursor	spice-common/common/messages.h	/^} SpiceCursor;$/;"	t	typeref:struct:SpiceCursor
SpiceCursorFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceCursorFlags {$/;"	g
SpiceCursorFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceCursorFlags;$/;"	t	typeref:enum:SpiceCursorFlags
SpiceCursorHeader	spice-common/common/draw.h	/^typedef struct SpiceCursorHeader {$/;"	s
SpiceCursorHeader	spice-common/common/draw.h	/^} SpiceCursorHeader;$/;"	t	typeref:struct:SpiceCursorHeader
SpiceCursorType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceCursorType {$/;"	g
SpiceCursorType	spice-common/spice-protocol/spice/enums.h	/^} SpiceCursorType;$/;"	t	typeref:enum:SpiceCursorType
SpiceDataHeader	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceDataHeader {$/;"	s
SpiceDataHeader	spice-common/spice-protocol/spice/protocol.h	/^} SpiceDataHeader;$/;"	t	typeref:struct:SpiceDataHeader
SpiceDataHeaderOpaque	server/red_channel.h	/^struct SpiceDataHeaderOpaque {$/;"	s
SpiceDataHeaderOpaque	server/red_channel.h	/^typedef struct SpiceDataHeaderOpaque SpiceDataHeaderOpaque;$/;"	t	typeref:struct:SpiceDataHeaderOpaque
SpiceFill	spice-common/common/draw.h	/^typedef struct SpiceFill {$/;"	s
SpiceFill	spice-common/common/draw.h	/^} SpiceFill;$/;"	t	typeref:struct:SpiceFill
SpiceGlzDecoder	spice-common/common/canvas_base.h	/^typedef struct _SpiceGlzDecoder SpiceGlzDecoder;$/;"	t	typeref:struct:_SpiceGlzDecoder
SpiceGlzDecoderOps	spice-common/common/canvas_base.h	/^} SpiceGlzDecoderOps;$/;"	t	typeref:struct:__anon11
SpiceHead	spice-common/common/messages.h	/^} SpiceHead;$/;"	t	typeref:struct:SpiceMsgDisplayHead
SpiceImage	spice-common/common/draw.h	/^typedef struct SpiceImage {$/;"	s
SpiceImage	spice-common/common/draw.h	/^} SpiceImage;$/;"	t	typeref:struct:SpiceImage
SpiceImageCache	spice-common/common/canvas_base.h	/^typedef struct _SpiceImageCache SpiceImageCache;$/;"	t	typeref:struct:_SpiceImageCache
SpiceImageCacheBase	client/canvas.h	/^    SpiceImageCacheBase()$/;"	f	class:SpiceImageCacheBase
SpiceImageCacheBase	client/canvas.h	/^class SpiceImageCacheBase {$/;"	c
SpiceImageCacheOps	spice-common/common/canvas_base.h	/^} SpiceImageCacheOps;$/;"	t	typeref:struct:__anon8
SpiceImageDescriptor	spice-common/common/draw.h	/^typedef struct SpiceImageDescriptor {$/;"	s
SpiceImageDescriptor	spice-common/common/draw.h	/^} SpiceImageDescriptor;$/;"	t	typeref:struct:SpiceImageDescriptor
SpiceImageFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceImageFlags {$/;"	g
SpiceImageFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceImageFlags;$/;"	t	typeref:enum:SpiceImageFlags
SpiceImageScaleMode	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceImageScaleMode {$/;"	g
SpiceImageScaleMode	spice-common/spice-protocol/spice/enums.h	/^} SpiceImageScaleMode;$/;"	t	typeref:enum:SpiceImageScaleMode
SpiceImageSurfaces	spice-common/common/canvas_base.h	/^typedef struct _SpiceImageSurfaces SpiceImageSurfaces;$/;"	t	typeref:struct:_SpiceImageSurfaces
SpiceImageSurfacesOps	spice-common/common/canvas_base.h	/^} SpiceImageSurfacesOps;$/;"	t	typeref:struct:__anon9
SpiceImageType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceImageType {$/;"	g
SpiceImageType	spice-common/spice-protocol/spice/enums.h	/^} SpiceImageType;$/;"	t	typeref:enum:SpiceImageType
SpiceInfoCode	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceInfoCode {$/;"	g
SpiceInfoCode	spice-common/spice-protocol/spice/enums.h	/^} SpiceInfoCode;$/;"	t	typeref:enum:SpiceInfoCode
SpiceInvers	spice-common/common/draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceJPEGAlphaData	spice-common/common/draw.h	/^typedef struct SpiceJPEGAlphaData {$/;"	s
SpiceJPEGAlphaData	spice-common/common/draw.h	/^} SpiceJPEGAlphaData;$/;"	t	typeref:struct:SpiceJPEGAlphaData
SpiceJPEGData	spice-common/common/draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceJpegAlphaFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceJpegAlphaFlags {$/;"	g
SpiceJpegAlphaFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceJpegAlphaFlags;$/;"	t	typeref:enum:SpiceJpegAlphaFlags
SpiceJpegDecoder	spice-common/common/canvas_base.h	/^typedef struct _SpiceJpegDecoder SpiceJpegDecoder;$/;"	t	typeref:struct:_SpiceJpegDecoder
SpiceJpegDecoderOps	spice-common/common/canvas_base.h	/^typedef struct SpiceJpegDecoderOps {$/;"	s
SpiceJpegDecoderOps	spice-common/common/canvas_base.h	/^} SpiceJpegDecoderOps;$/;"	t	typeref:struct:SpiceJpegDecoderOps
SpiceKbdInstance	server/spice.h	/^struct SpiceKbdInstance {$/;"	s
SpiceKbdInstance	server/spice.h	/^typedef struct SpiceKbdInstance SpiceKbdInstance;$/;"	t	typeref:struct:SpiceKbdInstance
SpiceKbdInterface	server/spice.h	/^struct SpiceKbdInterface {$/;"	s
SpiceKbdInterface	server/spice.h	/^typedef struct SpiceKbdInterface SpiceKbdInterface;$/;"	t	typeref:struct:SpiceKbdInterface
SpiceKbdState	server/inputs_channel.c	/^struct SpiceKbdState {$/;"	s	file:
SpiceKbdState	server/spice.h	/^typedef struct SpiceKbdState SpiceKbdState;$/;"	t	typeref:struct:SpiceKbdState
SpiceKeyboardModifierFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceKeyboardModifierFlags {$/;"	g
SpiceKeyboardModifierFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceKeyboardModifierFlags;$/;"	t	typeref:enum:SpiceKeyboardModifierFlags
SpiceLZPLTData	spice-common/common/draw.h	/^typedef struct SpiceLZPLTData {$/;"	s
SpiceLZPLTData	spice-common/common/draw.h	/^} SpiceLZPLTData;$/;"	t	typeref:struct:SpiceLZPLTData
SpiceLZRGBData	spice-common/common/draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceLineAttr	spice-common/common/draw.h	/^typedef struct SpiceLineAttr {$/;"	s
SpiceLineAttr	spice-common/common/draw.h	/^} SpiceLineAttr;$/;"	t	typeref:struct:SpiceLineAttr
SpiceLineFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceLineFlags {$/;"	g
SpiceLineFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceLineFlags;$/;"	t	typeref:enum:SpiceLineFlags
SpiceLinkAuthMechanism	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceLinkAuthMechanism {$/;"	s
SpiceLinkAuthMechanism	spice-common/spice-protocol/spice/protocol.h	/^} SpiceLinkAuthMechanism;$/;"	t	typeref:struct:SpiceLinkAuthMechanism
SpiceLinkEncryptedTicket	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceLinkEncryptedTicket {$/;"	s
SpiceLinkEncryptedTicket	spice-common/spice-protocol/spice/protocol.h	/^} SpiceLinkEncryptedTicket;$/;"	t	typeref:struct:SpiceLinkEncryptedTicket
SpiceLinkErr	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceLinkErr {$/;"	g
SpiceLinkErr	spice-common/spice-protocol/spice/enums.h	/^} SpiceLinkErr;$/;"	t	typeref:enum:SpiceLinkErr
SpiceLinkHeader	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceLinkHeader {$/;"	s
SpiceLinkHeader	spice-common/spice-protocol/spice/protocol.h	/^} SpiceLinkHeader;$/;"	t	typeref:struct:SpiceLinkHeader
SpiceLinkMess	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceLinkMess {$/;"	s
SpiceLinkMess	spice-common/spice-protocol/spice/protocol.h	/^} SpiceLinkMess;$/;"	t	typeref:struct:SpiceLinkMess
SpiceLinkReply	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceLinkReply {$/;"	s
SpiceLinkReply	spice-common/spice-protocol/spice/protocol.h	/^} SpiceLinkReply;$/;"	t	typeref:struct:SpiceLinkReply
SpiceLogLevel	spice-common/common/log.h	/^} SpiceLogLevel;$/;"	t	typeref:enum:__anon2
SpiceMarshaller	spice-common/common/marshaller.c	/^struct SpiceMarshaller {$/;"	s	file:
SpiceMarshaller	spice-common/common/marshaller.h	/^typedef struct SpiceMarshaller SpiceMarshaller;$/;"	t	typeref:struct:SpiceMarshaller
SpiceMarshallerData	spice-common/common/marshaller.c	/^struct SpiceMarshallerData {$/;"	s	file:
SpiceMarshallerData	spice-common/common/marshaller.c	/^typedef struct SpiceMarshallerData SpiceMarshallerData;$/;"	t	typeref:struct:SpiceMarshallerData	file:
SpiceMaskFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceMaskFlags {$/;"	g
SpiceMaskFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceMaskFlags;$/;"	t	typeref:enum:SpiceMaskFlags
SpiceMessageMarshallers	spice-common/common/client_marshallers.h	/^} SpiceMessageMarshallers;$/;"	t	typeref:struct:__anon29
SpiceMigrateDataCharDevice	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataCharDevice {$/;"	s
SpiceMigrateDataCharDevice	server/migration_protocol.h	/^} SpiceMigrateDataCharDevice;$/;"	t	typeref:struct:SpiceMigrateDataCharDevice
SpiceMigrateDataDisplay	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataDisplay {$/;"	s
SpiceMigrateDataDisplay	server/migration_protocol.h	/^} SpiceMigrateDataDisplay;$/;"	t	typeref:struct:SpiceMigrateDataDisplay
SpiceMigrateDataHeader	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataHeader {$/;"	s
SpiceMigrateDataHeader	server/migration_protocol.h	/^} SpiceMigrateDataHeader;$/;"	t	typeref:struct:SpiceMigrateDataHeader
SpiceMigrateDataInputs	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataInputs {$/;"	s
SpiceMigrateDataInputs	server/migration_protocol.h	/^} SpiceMigrateDataInputs;$/;"	t	typeref:struct:SpiceMigrateDataInputs
SpiceMigrateDataMain	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataMain {$/;"	s
SpiceMigrateDataMain	server/migration_protocol.h	/^} SpiceMigrateDataMain;$/;"	t	typeref:struct:SpiceMigrateDataMain
SpiceMigrateDataRect	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataRect {$/;"	s
SpiceMigrateDataRect	server/migration_protocol.h	/^} SpiceMigrateDataRect;$/;"	t	typeref:struct:SpiceMigrateDataRect
SpiceMigrateDataSmartcard	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataSmartcard {$/;"	s
SpiceMigrateDataSmartcard	server/migration_protocol.h	/^} SpiceMigrateDataSmartcard;$/;"	t	typeref:struct:SpiceMigrateDataSmartcard
SpiceMigrateDataSpiceVmc	server/migration_protocol.h	/^typedef struct __attribute__ ((__packed__)) SpiceMigrateDataSpiceVmc {$/;"	s
SpiceMigrateDataSpiceVmc	server/migration_protocol.h	/^} SpiceMigrateDataSpiceVmc;$/;"	t	typeref:struct:SpiceMigrateDataSpiceVmc
SpiceMigrateFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceMigrateFlags {$/;"	g
SpiceMigrateFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceMigrateFlags;$/;"	t	typeref:enum:SpiceMigrateFlags
SpiceMigrateInstance	server/spice.h	/^struct SpiceMigrateInstance {$/;"	s
SpiceMigrateInstance	server/spice.h	/^typedef struct SpiceMigrateInstance SpiceMigrateInstance;$/;"	t	typeref:struct:SpiceMigrateInstance
SpiceMigrateInterface	server/spice.h	/^struct SpiceMigrateInterface {$/;"	s
SpiceMigrateInterface	server/spice.h	/^typedef struct SpiceMigrateInterface SpiceMigrateInterface;$/;"	t	typeref:struct:SpiceMigrateInterface
SpiceMigrateState	server/reds.h	/^struct SpiceMigrateState {$/;"	s
SpiceMigrateState	server/spice.h	/^typedef struct SpiceMigrateState SpiceMigrateState;$/;"	t	typeref:struct:SpiceMigrateState
SpiceMigrationDstInfo	spice-common/common/messages.h	/^typedef struct SpiceMigrationDstInfo {$/;"	s
SpiceMigrationDstInfo	spice-common/common/messages.h	/^} SpiceMigrationDstInfo;$/;"	t	typeref:struct:SpiceMigrationDstInfo
SpiceMiniDataHeader	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceMiniDataHeader {$/;"	s
SpiceMiniDataHeader	spice-common/spice-protocol/spice/protocol.h	/^} SpiceMiniDataHeader;$/;"	t	typeref:struct:SpiceMiniDataHeader
SpiceMouseButton	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceMouseButton {$/;"	g
SpiceMouseButton	spice-common/spice-protocol/spice/enums.h	/^} SpiceMouseButton;$/;"	t	typeref:enum:SpiceMouseButton
SpiceMouseButtonMask	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceMouseButtonMask {$/;"	g
SpiceMouseButtonMask	spice-common/spice-protocol/spice/enums.h	/^} SpiceMouseButtonMask;$/;"	t	typeref:enum:SpiceMouseButtonMask
SpiceMouseInstance	server/spice.h	/^struct SpiceMouseInstance {$/;"	s
SpiceMouseInstance	server/spice.h	/^typedef struct SpiceMouseInstance SpiceMouseInstance;$/;"	t	typeref:struct:SpiceMouseInstance
SpiceMouseInterface	server/spice.h	/^struct SpiceMouseInterface {$/;"	s
SpiceMouseInterface	server/spice.h	/^typedef struct SpiceMouseInterface SpiceMouseInterface;$/;"	t	typeref:struct:SpiceMouseInterface
SpiceMouseMode	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceMouseMode {$/;"	g
SpiceMouseMode	spice-common/spice-protocol/spice/enums.h	/^} SpiceMouseMode;$/;"	t	typeref:enum:SpiceMouseMode
SpiceMouseState	server/inputs_channel.c	/^struct SpiceMouseState {$/;"	s	file:
SpiceMouseState	server/spice.h	/^typedef struct SpiceMouseState SpiceMouseState;$/;"	t	typeref:struct:SpiceMouseState
SpiceMsgAudioMute	spice-common/common/messages.h	/^typedef struct SpiceMsgAudioMute {$/;"	s
SpiceMsgAudioMute	spice-common/common/messages.h	/^} SpiceMsgAudioMute;$/;"	t	typeref:struct:SpiceMsgAudioMute
SpiceMsgAudioVolume	spice-common/common/messages.h	/^typedef struct SpiceMsgAudioVolume {$/;"	s
SpiceMsgAudioVolume	spice-common/common/messages.h	/^} SpiceMsgAudioVolume;$/;"	t	typeref:struct:SpiceMsgAudioVolume
SpiceMsgChannels	spice-common/common/messages.h	/^typedef struct SpiceMsgChannels {$/;"	s
SpiceMsgChannels	spice-common/common/messages.h	/^} SpiceMsgChannels;$/;"	t	typeref:struct:SpiceMsgChannels
SpiceMsgCursorInit	spice-common/common/messages.h	/^typedef struct SpiceMsgCursorInit {$/;"	s
SpiceMsgCursorInit	spice-common/common/messages.h	/^} SpiceMsgCursorInit;$/;"	t	typeref:struct:SpiceMsgCursorInit
SpiceMsgCursorMove	spice-common/common/messages.h	/^typedef struct SpiceMsgCursorMove {$/;"	s
SpiceMsgCursorMove	spice-common/common/messages.h	/^} SpiceMsgCursorMove;$/;"	t	typeref:struct:SpiceMsgCursorMove
SpiceMsgCursorSet	spice-common/common/messages.h	/^typedef struct SpiceMsgCursorSet {$/;"	s
SpiceMsgCursorSet	spice-common/common/messages.h	/^} SpiceMsgCursorSet;$/;"	t	typeref:struct:SpiceMsgCursorSet
SpiceMsgCursorTrail	spice-common/common/messages.h	/^typedef struct SpiceMsgCursorTrail {$/;"	s
SpiceMsgCursorTrail	spice-common/common/messages.h	/^} SpiceMsgCursorTrail;$/;"	t	typeref:struct:SpiceMsgCursorTrail
SpiceMsgData	spice-common/common/messages.h	/^typedef struct SpiceMsgData {$/;"	s
SpiceMsgData	spice-common/common/messages.h	/^} SpiceMsgData;$/;"	t	typeref:struct:SpiceMsgData
SpiceMsgDisconnect	spice-common/common/messages.h	/^typedef struct SpiceMsgDisconnect {$/;"	s
SpiceMsgDisconnect	spice-common/common/messages.h	/^} SpiceMsgDisconnect;$/;"	t	typeref:struct:SpiceMsgDisconnect
SpiceMsgDisplayBase	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayBase {$/;"	s
SpiceMsgDisplayBase	spice-common/common/messages.h	/^} SpiceMsgDisplayBase;$/;"	t	typeref:struct:SpiceMsgDisplayBase
SpiceMsgDisplayCopyBits	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayCopyBits {$/;"	s
SpiceMsgDisplayCopyBits	spice-common/common/messages.h	/^} SpiceMsgDisplayCopyBits;$/;"	t	typeref:struct:SpiceMsgDisplayCopyBits
SpiceMsgDisplayDrawAlphaBlend	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawAlphaBlend {$/;"	s
SpiceMsgDisplayDrawAlphaBlend	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawAlphaBlend;$/;"	t	typeref:struct:SpiceMsgDisplayDrawAlphaBlend
SpiceMsgDisplayDrawBlackness	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawBlackness {$/;"	s
SpiceMsgDisplayDrawBlackness	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawBlackness;$/;"	t	typeref:struct:SpiceMsgDisplayDrawBlackness
SpiceMsgDisplayDrawBlend	spice-common/common/messages.h	/^typedef SpiceMsgDisplayDrawCopy SpiceMsgDisplayDrawBlend;$/;"	t
SpiceMsgDisplayDrawComposite	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawComposite {$/;"	s
SpiceMsgDisplayDrawComposite	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawComposite;$/;"	t	typeref:struct:SpiceMsgDisplayDrawComposite
SpiceMsgDisplayDrawCopy	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawCopy {$/;"	s
SpiceMsgDisplayDrawCopy	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawCopy;$/;"	t	typeref:struct:SpiceMsgDisplayDrawCopy
SpiceMsgDisplayDrawFill	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawFill {$/;"	s
SpiceMsgDisplayDrawFill	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawFill;$/;"	t	typeref:struct:SpiceMsgDisplayDrawFill
SpiceMsgDisplayDrawInvers	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawInvers {$/;"	s
SpiceMsgDisplayDrawInvers	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawInvers;$/;"	t	typeref:struct:SpiceMsgDisplayDrawInvers
SpiceMsgDisplayDrawOpaque	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawOpaque {$/;"	s
SpiceMsgDisplayDrawOpaque	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawOpaque;$/;"	t	typeref:struct:SpiceMsgDisplayDrawOpaque
SpiceMsgDisplayDrawRop3	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawRop3 {$/;"	s
SpiceMsgDisplayDrawRop3	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawRop3;$/;"	t	typeref:struct:SpiceMsgDisplayDrawRop3
SpiceMsgDisplayDrawStroke	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawStroke {$/;"	s
SpiceMsgDisplayDrawStroke	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawStroke;$/;"	t	typeref:struct:SpiceMsgDisplayDrawStroke
SpiceMsgDisplayDrawText	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawText {$/;"	s
SpiceMsgDisplayDrawText	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawText;$/;"	t	typeref:struct:SpiceMsgDisplayDrawText
SpiceMsgDisplayDrawTransparent	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawTransparent {$/;"	s
SpiceMsgDisplayDrawTransparent	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawTransparent;$/;"	t	typeref:struct:SpiceMsgDisplayDrawTransparent
SpiceMsgDisplayDrawWhiteness	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayDrawWhiteness {$/;"	s
SpiceMsgDisplayDrawWhiteness	spice-common/common/messages.h	/^} SpiceMsgDisplayDrawWhiteness;$/;"	t	typeref:struct:SpiceMsgDisplayDrawWhiteness
SpiceMsgDisplayHead	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayHead {$/;"	s
SpiceMsgDisplayInvalOne	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayInvalOne {$/;"	s
SpiceMsgDisplayInvalOne	spice-common/common/messages.h	/^} SpiceMsgDisplayInvalOne;$/;"	t	typeref:struct:SpiceMsgDisplayInvalOne
SpiceMsgDisplayMode	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayMode {$/;"	s
SpiceMsgDisplayMode	spice-common/common/messages.h	/^} SpiceMsgDisplayMode;$/;"	t	typeref:struct:SpiceMsgDisplayMode
SpiceMsgDisplayMonitorsConfig	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayMonitorsConfig {$/;"	s
SpiceMsgDisplayMonitorsConfig	spice-common/common/messages.h	/^} SpiceMsgDisplayMonitorsConfig;$/;"	t	typeref:struct:SpiceMsgDisplayMonitorsConfig
SpiceMsgDisplayStreamActivateReport	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamActivateReport {$/;"	s
SpiceMsgDisplayStreamActivateReport	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamActivateReport;$/;"	t	typeref:struct:SpiceMsgDisplayStreamActivateReport
SpiceMsgDisplayStreamClip	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamClip {$/;"	s
SpiceMsgDisplayStreamClip	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamClip;$/;"	t	typeref:struct:SpiceMsgDisplayStreamClip
SpiceMsgDisplayStreamCreate	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamCreate {$/;"	s
SpiceMsgDisplayStreamCreate	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamCreate;$/;"	t	typeref:struct:SpiceMsgDisplayStreamCreate
SpiceMsgDisplayStreamData	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamData {$/;"	s
SpiceMsgDisplayStreamData	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamData;$/;"	t	typeref:struct:SpiceMsgDisplayStreamData
SpiceMsgDisplayStreamDataSized	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamDataSized {$/;"	s
SpiceMsgDisplayStreamDataSized	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamDataSized;$/;"	t	typeref:struct:SpiceMsgDisplayStreamDataSized
SpiceMsgDisplayStreamDestroy	spice-common/common/messages.h	/^typedef struct SpiceMsgDisplayStreamDestroy {$/;"	s
SpiceMsgDisplayStreamDestroy	spice-common/common/messages.h	/^} SpiceMsgDisplayStreamDestroy;$/;"	t	typeref:struct:SpiceMsgDisplayStreamDestroy
SpiceMsgEmpty	spice-common/common/messages.h	/^typedef struct SpiceMsgEmpty {$/;"	s
SpiceMsgEmpty	spice-common/common/messages.h	/^} SpiceMsgEmpty;$/;"	t	typeref:struct:SpiceMsgEmpty
SpiceMsgInputsInit	spice-common/common/messages.h	/^typedef struct SpiceMsgInputsInit {$/;"	s
SpiceMsgInputsInit	spice-common/common/messages.h	/^} SpiceMsgInputsInit;$/;"	t	typeref:struct:SpiceMsgInputsInit
SpiceMsgInputsKeyModifiers	spice-common/common/messages.h	/^typedef struct SpiceMsgInputsKeyModifiers {$/;"	s
SpiceMsgInputsKeyModifiers	spice-common/common/messages.h	/^} SpiceMsgInputsKeyModifiers;$/;"	t	typeref:struct:SpiceMsgInputsKeyModifiers
SpiceMsgMainAgentConnectedTokens	spice-common/common/messages.h	/^typedef struct SpiceMsgMainAgentTokens SpiceMsgMainAgentConnectedTokens;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgMainAgentDisconnect	spice-common/common/messages.h	/^typedef struct SpiceMsgMainAgentDisconnect {$/;"	s
SpiceMsgMainAgentDisconnect	spice-common/common/messages.h	/^} SpiceMsgMainAgentDisconnect;$/;"	t	typeref:struct:SpiceMsgMainAgentDisconnect
SpiceMsgMainAgentTokens	spice-common/common/messages.h	/^typedef struct SpiceMsgMainAgentTokens {$/;"	s
SpiceMsgMainAgentTokens	spice-common/common/messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgMainInit	spice-common/common/messages.h	/^typedef struct SpiceMsgMainInit {$/;"	s
SpiceMsgMainInit	spice-common/common/messages.h	/^} SpiceMsgMainInit;$/;"	t	typeref:struct:SpiceMsgMainInit
SpiceMsgMainMigrateBeginSeamless	spice-common/common/messages.h	/^typedef struct SpiceMsgMainMigrateBeginSeamless {$/;"	s
SpiceMsgMainMigrateBeginSeamless	spice-common/common/messages.h	/^} SpiceMsgMainMigrateBeginSeamless;$/;"	t	typeref:struct:SpiceMsgMainMigrateBeginSeamless
SpiceMsgMainMigrationBegin	spice-common/common/messages.h	/^typedef struct SpiceMsgMainMigrationBegin {$/;"	s
SpiceMsgMainMigrationBegin	spice-common/common/messages.h	/^} SpiceMsgMainMigrationBegin;$/;"	t	typeref:struct:SpiceMsgMainMigrationBegin
SpiceMsgMainMigrationSwitchHost	spice-common/common/messages.h	/^typedef struct SpiceMsgMainMigrationSwitchHost {$/;"	s
SpiceMsgMainMigrationSwitchHost	spice-common/common/messages.h	/^} SpiceMsgMainMigrationSwitchHost;$/;"	t	typeref:struct:SpiceMsgMainMigrationSwitchHost
SpiceMsgMainMouseMode	spice-common/common/messages.h	/^typedef struct SpiceMsgMainMouseMode {$/;"	s
SpiceMsgMainMouseMode	spice-common/common/messages.h	/^} SpiceMsgMainMouseMode;$/;"	t	typeref:struct:SpiceMsgMainMouseMode
SpiceMsgMainMultiMediaTime	spice-common/common/messages.h	/^typedef struct SpiceMsgMainMultiMediaTime {$/;"	s
SpiceMsgMainMultiMediaTime	spice-common/common/messages.h	/^} SpiceMsgMainMultiMediaTime;$/;"	t	typeref:struct:SpiceMsgMainMultiMediaTime
SpiceMsgMainName	spice-common/common/messages.h	/^typedef struct SpiceMsgMainName {$/;"	s
SpiceMsgMainName	spice-common/common/messages.h	/^} SpiceMsgMainName;$/;"	t	typeref:struct:SpiceMsgMainName
SpiceMsgMainUuid	spice-common/common/messages.h	/^typedef struct SpiceMsgMainUuid {$/;"	s
SpiceMsgMainUuid	spice-common/common/messages.h	/^} SpiceMsgMainUuid;$/;"	t	typeref:struct:SpiceMsgMainUuid
SpiceMsgMigrate	spice-common/common/messages.h	/^typedef struct SpiceMsgMigrate {$/;"	s
SpiceMsgMigrate	spice-common/common/messages.h	/^} SpiceMsgMigrate;$/;"	t	typeref:struct:SpiceMsgMigrate
SpiceMsgNotify	spice-common/common/messages.h	/^typedef struct SpiceMsgNotify {$/;"	s
SpiceMsgNotify	spice-common/common/messages.h	/^} SpiceMsgNotify;$/;"	t	typeref:struct:SpiceMsgNotify
SpiceMsgPing	spice-common/common/messages.h	/^typedef struct SpiceMsgPing {$/;"	s
SpiceMsgPing	spice-common/common/messages.h	/^} SpiceMsgPing;$/;"	t	typeref:struct:SpiceMsgPing
SpiceMsgPlaybackLatency	spice-common/common/messages.h	/^typedef struct SpiceMsgPlaybackLatency {$/;"	s
SpiceMsgPlaybackLatency	spice-common/common/messages.h	/^} SpiceMsgPlaybackLatency;$/;"	t	typeref:struct:SpiceMsgPlaybackLatency
SpiceMsgPlaybackMode	spice-common/common/messages.h	/^typedef struct SpiceMsgPlaybackMode {$/;"	s
SpiceMsgPlaybackMode	spice-common/common/messages.h	/^} SpiceMsgPlaybackMode, SpiceMsgcRecordMode;$/;"	t	typeref:struct:SpiceMsgPlaybackMode
SpiceMsgPlaybackPacket	spice-common/common/messages.h	/^typedef struct SpiceMsgPlaybackPacket {$/;"	s
SpiceMsgPlaybackPacket	spice-common/common/messages.h	/^} SpiceMsgPlaybackPacket, SpiceMsgcRecordPacket;$/;"	t	typeref:struct:SpiceMsgPlaybackPacket
SpiceMsgPlaybackStart	spice-common/common/messages.h	/^typedef struct SpiceMsgPlaybackStart {$/;"	s
SpiceMsgPlaybackStart	spice-common/common/messages.h	/^} SpiceMsgPlaybackStart;$/;"	t	typeref:struct:SpiceMsgPlaybackStart
SpiceMsgPortEvent	spice-common/common/messages.h	/^typedef struct SpiceMsgPortEvent {$/;"	s
SpiceMsgPortEvent	spice-common/common/messages.h	/^} SpiceMsgPortEvent;$/;"	t	typeref:struct:SpiceMsgPortEvent
SpiceMsgPortInit	spice-common/common/messages.h	/^typedef struct SpiceMsgPortInit {$/;"	s
SpiceMsgPortInit	spice-common/common/messages.h	/^} SpiceMsgPortInit;$/;"	t	typeref:struct:SpiceMsgPortInit
SpiceMsgRecordStart	spice-common/common/messages.h	/^typedef struct SpiceMsgRecordStart {$/;"	s
SpiceMsgRecordStart	spice-common/common/messages.h	/^} SpiceMsgRecordStart;$/;"	t	typeref:struct:SpiceMsgRecordStart
SpiceMsgSetAck	spice-common/common/messages.h	/^typedef struct SpiceMsgSetAck {$/;"	s
SpiceMsgSetAck	spice-common/common/messages.h	/^} SpiceMsgSetAck;$/;"	t	typeref:struct:SpiceMsgSetAck
SpiceMsgSmartcard	spice-common/common/messages.h	/^typedef struct SpiceMsgSmartcard {$/;"	s
SpiceMsgSmartcard	spice-common/common/messages.h	/^} SpiceMsgSmartcard;$/;"	t	typeref:struct:SpiceMsgSmartcard
SpiceMsgSurfaceCreate	spice-common/common/messages.h	/^typedef struct SpiceMsgSurfaceCreate {$/;"	s
SpiceMsgSurfaceCreate	spice-common/common/messages.h	/^} SpiceMsgSurfaceCreate;$/;"	t	typeref:struct:SpiceMsgSurfaceCreate
SpiceMsgSurfaceDestroy	spice-common/common/messages.h	/^typedef struct SpiceMsgSurfaceDestroy {$/;"	s
SpiceMsgSurfaceDestroy	spice-common/common/messages.h	/^} SpiceMsgSurfaceDestroy;$/;"	t	typeref:struct:SpiceMsgSurfaceDestroy
SpiceMsgTunnelInit	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelInit {$/;"	s
SpiceMsgTunnelInit	spice-common/common/messages.h	/^} SpiceMsgTunnelInit;$/;"	t	typeref:struct:SpiceMsgTunnelInit
SpiceMsgTunnelIpInfo	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelIpInfo {$/;"	s
SpiceMsgTunnelIpInfo	spice-common/common/messages.h	/^} SpiceMsgTunnelIpInfo;$/;"	t	typeref:struct:SpiceMsgTunnelIpInfo
SpiceMsgTunnelServiceIpMap	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelServiceIpMap {$/;"	s
SpiceMsgTunnelServiceIpMap	spice-common/common/messages.h	/^} SpiceMsgTunnelServiceIpMap;$/;"	t	typeref:struct:SpiceMsgTunnelServiceIpMap
SpiceMsgTunnelSocketClose	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketClose {$/;"	s
SpiceMsgTunnelSocketClose	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketClose;$/;"	t	typeref:struct:SpiceMsgTunnelSocketClose
SpiceMsgTunnelSocketClosedAck	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketClosedAck {$/;"	s
SpiceMsgTunnelSocketClosedAck	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketClosedAck;$/;"	t	typeref:struct:SpiceMsgTunnelSocketClosedAck
SpiceMsgTunnelSocketData	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketData {$/;"	s
SpiceMsgTunnelSocketData	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketData;$/;"	t	typeref:struct:SpiceMsgTunnelSocketData
SpiceMsgTunnelSocketFin	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketFin {$/;"	s
SpiceMsgTunnelSocketFin	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketFin;$/;"	t	typeref:struct:SpiceMsgTunnelSocketFin
SpiceMsgTunnelSocketOpen	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketOpen {$/;"	s
SpiceMsgTunnelSocketOpen	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketOpen;$/;"	t	typeref:struct:SpiceMsgTunnelSocketOpen
SpiceMsgTunnelSocketTokens	spice-common/common/messages.h	/^typedef struct SpiceMsgTunnelSocketTokens {$/;"	s
SpiceMsgTunnelSocketTokens	spice-common/common/messages.h	/^} SpiceMsgTunnelSocketTokens;$/;"	t	typeref:struct:SpiceMsgTunnelSocketTokens
SpiceMsgWaitForChannels	spice-common/common/messages.h	/^typedef struct SpiceMsgWaitForChannels {$/;"	s
SpiceMsgWaitForChannels	spice-common/common/messages.h	/^} SpiceMsgWaitForChannels;$/;"	t	typeref:struct:SpiceMsgWaitForChannels
SpiceMsgcAckSync	spice-common/common/messages.h	/^typedef struct SpiceMsgcAckSync {$/;"	s
SpiceMsgcAckSync	spice-common/common/messages.h	/^} SpiceMsgcAckSync;$/;"	t	typeref:struct:SpiceMsgcAckSync
SpiceMsgcClientInfo	spice-common/common/messages.h	/^typedef struct SpiceMsgcClientInfo {$/;"	s
SpiceMsgcClientInfo	spice-common/common/messages.h	/^} SpiceMsgcClientInfo;$/;"	t	typeref:struct:SpiceMsgcClientInfo
SpiceMsgcDisplayInit	spice-common/common/messages.h	/^typedef struct SpiceMsgcDisplayInit {$/;"	s
SpiceMsgcDisplayInit	spice-common/common/messages.h	/^} SpiceMsgcDisplayInit;$/;"	t	typeref:struct:SpiceMsgcDisplayInit
SpiceMsgcDisplayStreamReport	spice-common/common/messages.h	/^typedef struct SpiceMsgcDisplayStreamReport {$/;"	s
SpiceMsgcDisplayStreamReport	spice-common/common/messages.h	/^} SpiceMsgcDisplayStreamReport;$/;"	t	typeref:struct:SpiceMsgcDisplayStreamReport
SpiceMsgcKeyDown	spice-common/common/messages.h	/^typedef struct SpiceMsgcKeyDown {$/;"	s
SpiceMsgcKeyDown	spice-common/common/messages.h	/^} SpiceMsgcKeyDown;$/;"	t	typeref:struct:SpiceMsgcKeyDown
SpiceMsgcKeyModifiers	spice-common/common/messages.h	/^typedef struct SpiceMsgcKeyModifiers {$/;"	s
SpiceMsgcKeyModifiers	spice-common/common/messages.h	/^} SpiceMsgcKeyModifiers;$/;"	t	typeref:struct:SpiceMsgcKeyModifiers
SpiceMsgcKeyUp	spice-common/common/messages.h	/^typedef struct SpiceMsgcKeyUp {$/;"	s
SpiceMsgcKeyUp	spice-common/common/messages.h	/^} SpiceMsgcKeyUp;$/;"	t	typeref:struct:SpiceMsgcKeyUp
SpiceMsgcMainAgentStart	spice-common/common/messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgcMainAgentTokens	spice-common/common/messages.h	/^} SpiceMsgMainAgentTokens, SpiceMsgcMainAgentTokens, SpiceMsgcMainAgentStart;$/;"	t	typeref:struct:SpiceMsgMainAgentTokens
SpiceMsgcMainMigrateDstDoSeamless	spice-common/common/messages.h	/^typedef struct SpiceMsgcMainMigrateDstDoSeamless {$/;"	s
SpiceMsgcMainMigrateDstDoSeamless	spice-common/common/messages.h	/^} SpiceMsgcMainMigrateDstDoSeamless;$/;"	t	typeref:struct:SpiceMsgcMainMigrateDstDoSeamless
SpiceMsgcMainMouseModeRequest	spice-common/common/messages.h	/^typedef struct SpiceMsgcMainMouseModeRequest {$/;"	s
SpiceMsgcMainMouseModeRequest	spice-common/common/messages.h	/^} SpiceMsgcMainMouseModeRequest;$/;"	t	typeref:struct:SpiceMsgcMainMouseModeRequest
SpiceMsgcMouseMotion	spice-common/common/messages.h	/^typedef struct SpiceMsgcMouseMotion {$/;"	s
SpiceMsgcMouseMotion	spice-common/common/messages.h	/^} SpiceMsgcMouseMotion;$/;"	t	typeref:struct:SpiceMsgcMouseMotion
SpiceMsgcMousePosition	spice-common/common/messages.h	/^typedef struct SpiceMsgcMousePosition {$/;"	s
SpiceMsgcMousePosition	spice-common/common/messages.h	/^} SpiceMsgcMousePosition;$/;"	t	typeref:struct:SpiceMsgcMousePosition
SpiceMsgcMousePress	spice-common/common/messages.h	/^typedef struct SpiceMsgcMousePress {$/;"	s
SpiceMsgcMousePress	spice-common/common/messages.h	/^} SpiceMsgcMousePress;$/;"	t	typeref:struct:SpiceMsgcMousePress
SpiceMsgcMouseRelease	spice-common/common/messages.h	/^typedef struct SpiceMsgcMouseRelease {$/;"	s
SpiceMsgcMouseRelease	spice-common/common/messages.h	/^} SpiceMsgcMouseRelease;$/;"	t	typeref:struct:SpiceMsgcMouseRelease
SpiceMsgcPortEvent	spice-common/common/messages.h	/^typedef struct SpiceMsgcPortEvent {$/;"	s
SpiceMsgcPortEvent	spice-common/common/messages.h	/^} SpiceMsgcPortEvent;$/;"	t	typeref:struct:SpiceMsgcPortEvent
SpiceMsgcRecordMode	spice-common/common/messages.h	/^} SpiceMsgPlaybackMode, SpiceMsgcRecordMode;$/;"	t	typeref:struct:SpiceMsgPlaybackMode
SpiceMsgcRecordPacket	spice-common/common/messages.h	/^} SpiceMsgPlaybackPacket, SpiceMsgcRecordPacket;$/;"	t	typeref:struct:SpiceMsgPlaybackPacket
SpiceMsgcRecordStartMark	spice-common/common/messages.h	/^typedef struct SpiceMsgcRecordStartMark {$/;"	s
SpiceMsgcRecordStartMark	spice-common/common/messages.h	/^} SpiceMsgcRecordStartMark;$/;"	t	typeref:struct:SpiceMsgcRecordStartMark
SpiceMsgcSmartcard	spice-common/common/messages.h	/^typedef struct SpiceMsgcSmartcard {$/;"	s
SpiceMsgcSmartcard	spice-common/common/messages.h	/^} SpiceMsgcSmartcard;$/;"	t	typeref:struct:SpiceMsgcSmartcard
SpiceMsgcTunnelAddGenericService	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelAddGenericService {$/;"	s
SpiceMsgcTunnelAddGenericService	spice-common/common/messages.h	/^} SpiceMsgcTunnelAddGenericService;$/;"	t	typeref:struct:SpiceMsgcTunnelAddGenericService
SpiceMsgcTunnelRemoveService	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelRemoveService {$/;"	s
SpiceMsgcTunnelRemoveService	spice-common/common/messages.h	/^} SpiceMsgcTunnelRemoveService;$/;"	t	typeref:struct:SpiceMsgcTunnelRemoveService
SpiceMsgcTunnelSocketClosed	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketClosed {$/;"	s
SpiceMsgcTunnelSocketClosed	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketClosed;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketClosed
SpiceMsgcTunnelSocketClosedAck	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketClosedAck {$/;"	s
SpiceMsgcTunnelSocketClosedAck	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketClosedAck;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketClosedAck
SpiceMsgcTunnelSocketData	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketData {$/;"	s
SpiceMsgcTunnelSocketData	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketData;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketData
SpiceMsgcTunnelSocketFin	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketFin {$/;"	s
SpiceMsgcTunnelSocketFin	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketFin;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketFin
SpiceMsgcTunnelSocketOpenAck	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketOpenAck {$/;"	s
SpiceMsgcTunnelSocketOpenAck	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketOpenAck;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketOpenAck
SpiceMsgcTunnelSocketOpenNack	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketOpenNack {$/;"	s
SpiceMsgcTunnelSocketOpenNack	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketOpenNack;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketOpenNack
SpiceMsgcTunnelSocketTokens	spice-common/common/messages.h	/^typedef struct SpiceMsgcTunnelSocketTokens {$/;"	s
SpiceMsgcTunnelSocketTokens	spice-common/common/messages.h	/^} SpiceMsgcTunnelSocketTokens;$/;"	t	typeref:struct:SpiceMsgcTunnelSocketTokens
SpiceNetWireInstance	server/spice-experimental.h	/^struct SpiceNetWireInstance {$/;"	s
SpiceNetWireInstance	server/spice-experimental.h	/^typedef struct SpiceNetWireInstance SpiceNetWireInstance;$/;"	t	typeref:struct:SpiceNetWireInstance
SpiceNetWireInterface	server/spice-experimental.h	/^struct SpiceNetWireInterface {$/;"	s
SpiceNetWireInterface	server/spice-experimental.h	/^typedef struct SpiceNetWireInterface SpiceNetWireInterface;$/;"	t	typeref:struct:SpiceNetWireInterface
SpiceNetWireState	server/reds.h	/^struct SpiceNetWireState {$/;"	s
SpiceNetWireState	server/spice-experimental.h	/^typedef struct SpiceNetWireState SpiceNetWireState;$/;"	t	typeref:struct:SpiceNetWireState
SpiceNotifySeverity	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceNotifySeverity {$/;"	g
SpiceNotifySeverity	spice-common/spice-protocol/spice/enums.h	/^} SpiceNotifySeverity;$/;"	t	typeref:enum:SpiceNotifySeverity
SpiceNotifyVisibility	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceNotifyVisibility {$/;"	g
SpiceNotifyVisibility	spice-common/spice-protocol/spice/enums.h	/^} SpiceNotifyVisibility;$/;"	t	typeref:enum:SpiceNotifyVisibility
SpiceOpaque	spice-common/common/draw.h	/^typedef struct SpiceOpaque {$/;"	s
SpiceOpaque	spice-common/common/draw.h	/^} SpiceOpaque;$/;"	t	typeref:struct:SpiceOpaque
SpiceOpenSSLVerify	spice-common/common/ssl_verify.h	/^} SpiceOpenSSLVerify;$/;"	t	typeref:struct:__anon4
SpicePalette	spice-common/common/draw.h	/^typedef struct SpicePalette {$/;"	s
SpicePalette	spice-common/common/draw.h	/^} SpicePalette;$/;"	t	typeref:struct:SpicePalette
SpicePaletteCache	spice-common/common/canvas_base.h	/^typedef struct _SpicePaletteCache SpicePaletteCache;$/;"	t	typeref:struct:_SpicePaletteCache
SpicePaletteCacheBase	client/canvas.h	/^    SpicePaletteCacheBase()$/;"	f	class:SpicePaletteCacheBase
SpicePaletteCacheBase	client/canvas.h	/^class SpicePaletteCacheBase {$/;"	c
SpicePaletteCacheOps	spice-common/common/canvas_base.h	/^} SpicePaletteCacheOps;$/;"	t	typeref:struct:__anon10
SpicePath	spice-common/common/draw.h	/^typedef struct SpicePath {$/;"	s
SpicePath	spice-common/common/draw.h	/^} SpicePath;$/;"	t	typeref:struct:SpicePath
SpicePathFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpicePathFlags {$/;"	g
SpicePathFlags	spice-common/spice-protocol/spice/enums.h	/^} SpicePathFlags;$/;"	t	typeref:enum:SpicePathFlags
SpicePathSeg	spice-common/common/draw.h	/^typedef struct SpicePathSeg {$/;"	s
SpicePathSeg	spice-common/common/draw.h	/^} SpicePathSeg;$/;"	t	typeref:struct:SpicePathSeg
SpicePattern	spice-common/common/draw.h	/^typedef struct SpicePattern {$/;"	s
SpicePattern	spice-common/common/draw.h	/^} SpicePattern;$/;"	t	typeref:struct:SpicePattern
SpicePlaybackInstance	server/spice.h	/^struct SpicePlaybackInstance {$/;"	s
SpicePlaybackInstance	server/spice.h	/^typedef struct SpicePlaybackInstance SpicePlaybackInstance;$/;"	t	typeref:struct:SpicePlaybackInstance
SpicePlaybackInterface	server/spice.h	/^struct SpicePlaybackInterface {$/;"	s
SpicePlaybackInterface	server/spice.h	/^typedef struct SpicePlaybackInterface SpicePlaybackInterface;$/;"	t	typeref:struct:SpicePlaybackInterface
SpicePlaybackState	server/snd_worker.c	/^struct SpicePlaybackState {$/;"	s	file:
SpicePlaybackState	server/spice.h	/^typedef struct SpicePlaybackState SpicePlaybackState;$/;"	t	typeref:struct:SpicePlaybackState
SpicePoint	spice-common/common/draw.h	/^typedef struct SpicePoint {$/;"	s
SpicePoint	spice-common/common/draw.h	/^} SpicePoint;$/;"	t	typeref:struct:SpicePoint
SpicePoint16	spice-common/common/draw.h	/^typedef struct SpicePoint16 {$/;"	s
SpicePoint16	spice-common/common/draw.h	/^} SpicePoint16;$/;"	t	typeref:struct:SpicePoint16
SpicePointFix	spice-common/common/draw.h	/^typedef struct SpicePointFix {$/;"	s
SpicePointFix	spice-common/common/draw.h	/^} SpicePointFix;$/;"	t	typeref:struct:SpicePointFix
SpicePubkeyType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpicePubkeyType {$/;"	g
SpicePubkeyType	spice-common/spice-protocol/spice/enums.h	/^} SpicePubkeyType;$/;"	t	typeref:enum:SpicePubkeyType
SpiceQMask	spice-common/common/draw.h	/^typedef struct SpiceQMask {$/;"	s
SpiceQMask	spice-common/common/draw.h	/^} SpiceQMask;$/;"	t	typeref:struct:SpiceQMask
SpiceQUICData	spice-common/common/draw.h	/^typedef struct SpiceQUICData {$/;"	s
SpiceQUICData	spice-common/common/draw.h	/^} SpiceQUICData, SpiceLZRGBData, SpiceJPEGData;$/;"	t	typeref:struct:SpiceQUICData
SpiceROP	spice-common/common/pixman_utils.h	/^} SpiceROP;$/;"	t	typeref:enum:__anon1
SpiceRasterGlyph	spice-common/common/draw.h	/^typedef struct SpiceRasterGlyph {$/;"	s
SpiceRasterGlyph	spice-common/common/draw.h	/^} SpiceRasterGlyph;$/;"	t	typeref:struct:SpiceRasterGlyph
SpiceRecordInstance	server/spice.h	/^struct SpiceRecordInstance {$/;"	s
SpiceRecordInstance	server/spice.h	/^typedef struct SpiceRecordInstance SpiceRecordInstance;$/;"	t	typeref:struct:SpiceRecordInstance
SpiceRecordInterface	server/spice.h	/^struct SpiceRecordInterface {$/;"	s
SpiceRecordInterface	server/spice.h	/^typedef struct SpiceRecordInterface SpiceRecordInterface;$/;"	t	typeref:struct:SpiceRecordInterface
SpiceRecordState	server/snd_worker.c	/^struct SpiceRecordState {$/;"	s	file:
SpiceRecordState	server/spice.h	/^typedef struct SpiceRecordState SpiceRecordState;$/;"	t	typeref:struct:SpiceRecordState
SpiceRect	spice-common/common/draw.h	/^typedef struct SpiceRect {$/;"	s
SpiceRect	spice-common/common/draw.h	/^} SpiceRect;$/;"	t	typeref:struct:SpiceRect
SpiceResourceID	spice-common/common/messages.h	/^typedef struct SpiceResourceID {$/;"	s
SpiceResourceID	spice-common/common/messages.h	/^} SpiceResourceID;$/;"	t	typeref:struct:SpiceResourceID
SpiceResourceList	spice-common/common/messages.h	/^typedef struct SpiceResourceList {$/;"	s
SpiceResourceList	spice-common/common/messages.h	/^} SpiceResourceList;$/;"	t	typeref:struct:SpiceResourceList
SpiceResourceType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceResourceType {$/;"	g
SpiceResourceType	spice-common/spice-protocol/spice/enums.h	/^} SpiceResourceType;$/;"	t	typeref:enum:SpiceResourceType
SpiceRop3	spice-common/common/draw.h	/^typedef struct SpiceRop3 {$/;"	s
SpiceRop3	spice-common/common/draw.h	/^} SpiceRop3;$/;"	t	typeref:struct:SpiceRop3
SpiceRopd	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceRopd {$/;"	g
SpiceRopd	spice-common/spice-protocol/spice/enums.h	/^} SpiceRopd;$/;"	t	typeref:enum:SpiceRopd
SpiceServer	server/spice.h	/^typedef struct RedsState SpiceServer;$/;"	t	typeref:struct:RedsState
SpiceStat	spice-common/spice-protocol/spice/stats.h	/^typedef struct SpiceStat {$/;"	s
SpiceStat	spice-common/spice-protocol/spice/stats.h	/^} SpiceStat;$/;"	t	typeref:struct:SpiceStat
SpiceStatNode	spice-common/spice-protocol/spice/stats.h	/^typedef struct SpiceStatNode {$/;"	s
SpiceStatNode	spice-common/spice-protocol/spice/stats.h	/^} SpiceStatNode;$/;"	t	typeref:struct:SpiceStatNode
SpiceStreamDataHeader	spice-common/common/messages.h	/^typedef struct SpiceStreamDataHeader {$/;"	s
SpiceStreamDataHeader	spice-common/common/messages.h	/^} SpiceStreamDataHeader;$/;"	t	typeref:struct:SpiceStreamDataHeader
SpiceStreamFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceStreamFlags {$/;"	g
SpiceStreamFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceStreamFlags;$/;"	t	typeref:enum:SpiceStreamFlags
SpiceString	spice-common/common/draw.h	/^typedef struct SpiceString {$/;"	s
SpiceString	spice-common/common/draw.h	/^} SpiceString;$/;"	t	typeref:struct:SpiceString
SpiceStringFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceStringFlags {$/;"	g
SpiceStringFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceStringFlags;$/;"	t	typeref:enum:SpiceStringFlags
SpiceStroke	spice-common/common/draw.h	/^typedef struct SpiceStroke {$/;"	s
SpiceStroke	spice-common/common/draw.h	/^} SpiceStroke;$/;"	t	typeref:struct:SpiceStroke
SpiceSubMessage	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceSubMessage {$/;"	s
SpiceSubMessage	spice-common/spice-protocol/spice/protocol.h	/^} SpiceSubMessage;$/;"	t	typeref:struct:SpiceSubMessage
SpiceSubMessageList	spice-common/spice-protocol/spice/protocol.h	/^typedef struct SPICE_ATTR_PACKED SpiceSubMessageList {$/;"	s
SpiceSubMessageList	spice-common/spice-protocol/spice/protocol.h	/^} SpiceSubMessageList;$/;"	t	typeref:struct:SpiceSubMessageList
SpiceSurface	spice-common/common/draw.h	/^typedef struct SpiceSurface {$/;"	s
SpiceSurface	spice-common/common/draw.h	/^} SpiceSurface;$/;"	t	typeref:struct:SpiceSurface
SpiceSurfaceFlags	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceSurfaceFlags {$/;"	g
SpiceSurfaceFlags	spice-common/spice-protocol/spice/enums.h	/^} SpiceSurfaceFlags;$/;"	t	typeref:enum:SpiceSurfaceFlags
SpiceSurfaceFmt	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceSurfaceFmt {$/;"	g
SpiceSurfaceFmt	spice-common/spice-protocol/spice/enums.h	/^} SpiceSurfaceFmt;$/;"	t	typeref:enum:SpiceSurfaceFmt
SpiceTabletInstance	server/spice.h	/^struct SpiceTabletInstance {$/;"	s
SpiceTabletInstance	server/spice.h	/^typedef struct SpiceTabletInstance SpiceTabletInstance;$/;"	t	typeref:struct:SpiceTabletInstance
SpiceTabletInterface	server/spice.h	/^struct SpiceTabletInterface {$/;"	s
SpiceTabletInterface	server/spice.h	/^typedef struct SpiceTabletInterface SpiceTabletInterface;$/;"	t	typeref:struct:SpiceTabletInterface
SpiceTabletState	server/inputs_channel.c	/^struct SpiceTabletState {$/;"	s	file:
SpiceTabletState	server/spice.h	/^typedef struct SpiceTabletState SpiceTabletState;$/;"	t	typeref:struct:SpiceTabletState
SpiceText	spice-common/common/draw.h	/^typedef struct SpiceText {$/;"	s
SpiceText	spice-common/common/draw.h	/^} SpiceText;$/;"	t	typeref:struct:SpiceText
SpiceTimer	server/spice.h	/^typedef struct SpiceTimer SpiceTimer;$/;"	t	typeref:struct:SpiceTimer
SpiceTimer	server/spice_timer_queue.c	/^struct SpiceTimer {$/;"	s	file:
SpiceTimer	server/tests/basic_event_loop.c	/^typedef struct SpiceTimer {$/;"	s	file:
SpiceTimer	server/tests/test_empty_success.c	/^struct SpiceTimer {$/;"	s	file:
SpiceTimerFunc	server/spice.h	/^typedef void (*SpiceTimerFunc)(void *opaque);$/;"	t
SpiceTimerQueue	server/spice_timer_queue.c	/^struct SpiceTimerQueue {$/;"	s	file:
SpiceTimerQueue	server/spice_timer_queue.h	/^typedef struct SpiceTimerQueue SpiceTimerQueue;$/;"	t	typeref:struct:SpiceTimerQueue
SpiceTransform	spice-common/common/draw.h	/^typedef struct SpiceTransform {$/;"	s
SpiceTransform	spice-common/common/draw.h	/^} SpiceTransform;$/;"	t	typeref:struct:SpiceTransform
SpiceTransparent	spice-common/common/draw.h	/^typedef struct SpiceTransparent {$/;"	s
SpiceTransparent	spice-common/common/draw.h	/^} SpiceTransparent;$/;"	t	typeref:struct:SpiceTransparent
SpiceTunnelIPv4	spice-common/common/messages.h	/^typedef uint8_t SpiceTunnelIPv4[4];$/;"	t
SpiceTunnelIpType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceTunnelIpType {$/;"	g
SpiceTunnelIpType	spice-common/spice-protocol/spice/enums.h	/^} SpiceTunnelIpType;$/;"	t	typeref:enum:SpiceTunnelIpType
SpiceTunnelServiceType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceTunnelServiceType {$/;"	g
SpiceTunnelServiceType	spice-common/spice-protocol/spice/enums.h	/^} SpiceTunnelServiceType;$/;"	t	typeref:enum:SpiceTunnelServiceType
SpiceVideoCodecType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceVideoCodecType {$/;"	g
SpiceVideoCodecType	spice-common/spice-protocol/spice/enums.h	/^} SpiceVideoCodecType;$/;"	t	typeref:enum:SpiceVideoCodecType
SpiceVmcPipeItem	server/spicevmc.c	/^typedef struct SpiceVmcPipeItem {$/;"	s	file:
SpiceVmcPipeItem	server/spicevmc.c	/^} SpiceVmcPipeItem;$/;"	t	typeref:struct:SpiceVmcPipeItem	file:
SpiceVmcState	server/spicevmc.c	/^typedef struct SpiceVmcState {$/;"	s	file:
SpiceVmcState	server/spicevmc.c	/^} SpiceVmcState;$/;"	t	typeref:struct:SpiceVmcState	file:
SpiceVolumeState	server/snd_worker.c	/^typedef struct SpiceVolumeState {$/;"	s	file:
SpiceVolumeState	server/snd_worker.c	/^} SpiceVolumeState;$/;"	t	typeref:struct:SpiceVolumeState	file:
SpiceVscMessageType	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceVscMessageType {$/;"	g
SpiceVscMessageType	spice-common/spice-protocol/spice/enums.h	/^} SpiceVscMessageType;$/;"	t	typeref:enum:SpiceVscMessageType
SpiceWaitForChannel	spice-common/common/messages.h	/^typedef struct SpiceWaitForChannel {$/;"	s
SpiceWaitForChannel	spice-common/common/messages.h	/^} SpiceWaitForChannel;$/;"	t	typeref:struct:SpiceWaitForChannel
SpiceWarnCode	spice-common/spice-protocol/spice/enums.h	/^typedef enum SpiceWarnCode {$/;"	g
SpiceWarnCode	spice-common/spice-protocol/spice/enums.h	/^} SpiceWarnCode;$/;"	t	typeref:enum:SpiceWarnCode
SpiceWatch	server/red_worker.c	/^struct SpiceWatch {$/;"	s	file:
SpiceWatch	server/spice.h	/^typedef struct SpiceWatch SpiceWatch;$/;"	t	typeref:struct:SpiceWatch
SpiceWatch	server/tests/basic_event_loop.c	/^struct SpiceWatch {$/;"	s	file:
SpiceWatchFunc	server/spice.h	/^typedef void (*SpiceWatchFunc)(int fd, int event, void *opaque);$/;"	t
SpiceWhiteness	spice-common/common/draw.h	/^} SpiceBlackness, SpiceInvers, SpiceWhiteness;$/;"	t	typeref:struct:SpiceBlackness
SpiceZlibDecoder	spice-common/common/canvas_base.h	/^typedef struct _SpiceZlibDecoder SpiceZlibDecoder;$/;"	t	typeref:struct:_SpiceZlibDecoder
SpiceZlibDecoderOps	spice-common/common/canvas_base.h	/^} SpiceZlibDecoderOps;$/;"	t	typeref:struct:__anon12
SpiceZlibGlzRGBData	spice-common/common/draw.h	/^typedef struct SpiceZlibGlzRGBData {$/;"	s
SpiceZlibGlzRGBData	spice-common/common/draw.h	/^} SpiceZlibGlzRGBData;$/;"	t	typeref:struct:SpiceZlibGlzRGBData
StatNodeRef	server/stat.h	/^typedef uint32_t StatNodeRef;$/;"	t
State	client/application.h	/^    enum State {$/;"	g	class:Application
StaticScreen	client/x11/platform.cpp	/^    StaticScreen(Display* display, int screen, int& next_mon_id)$/;"	f	class:StaticScreen
StaticScreen	client/x11/platform.cpp	/^class StaticScreen: public XScreen, public Monitor {$/;"	c	file:
StepAround	spice-common/common/lines.c	1873;"	d	file:
StickyInfo	client/application.h	/^typedef struct StickyInfo {$/;"	s
StickyInfo	client/application.h	/^} StickyInfo;$/;"	t	typeref:struct:StickyInfo
StickyKeyTimer	client/application.h	/^class StickyKeyTimer: public Timer {$/;"	c
Stream	server/red_worker.c	/^struct Stream {$/;"	s	file:
Stream	server/red_worker.c	/^typedef struct Stream Stream;$/;"	t	typeref:struct:Stream	file:
StreamActivateReportItem	server/red_worker.c	/^typedef struct StreamActivateReportItem {$/;"	s	file:
StreamActivateReportItem	server/red_worker.c	/^} StreamActivateReportItem;$/;"	t	typeref:struct:StreamActivateReportItem	file:
StreamAgent	server/red_worker.c	/^typedef struct StreamAgent {$/;"	s	file:
StreamAgent	server/red_worker.c	/^} StreamAgent;$/;"	t	typeref:struct:StreamAgent	file:
StreamClipItem	server/red_worker.c	/^typedef struct StreamClipItem {$/;"	s	file:
StreamClipItem	server/red_worker.c	/^} StreamClipItem;$/;"	t	typeref:struct:StreamClipItem	file:
StreamStats	server/red_worker.c	/^typedef struct StreamStats {$/;"	s	file:
StreamStats	server/red_worker.c	/^} StreamStats;$/;"	t	typeref:struct:StreamStats	file:
StreamsTimer	client/display_channel.cpp	/^StreamsTimer::StreamsTimer(DisplayChannel& channel)$/;"	f	class:StreamsTimer
StreamsTimer	client/display_channel.h	/^class StreamsTimer: public Timer {$/;"	c
StreamsTrigger	client/display_channel.cpp	/^StreamsTrigger::StreamsTrigger(DisplayChannel& channel)$/;"	f	class:StreamsTrigger
StreamsTrigger	client/display_channel.h	/^class StreamsTrigger: public EventSources::Trigger {$/;"	c
StringEnd	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
StringIO	spice-common/python_modules/codegen.py	/^from cStringIO import StringIO$/;"	i
StrokeGC	spice-common/common/canvas_base.c	/^} StrokeGC;$/;"	t	typeref:struct:__anon15	file:
StrokeLines	spice-common/common/canvas_base.c	/^} StrokeLines;$/;"	t	typeref:struct:__anon17	file:
StructType	spice-common/python_modules/ptypes.py	/^class StructType(ContainerType):$/;"	c
SubDemarshallingDestination	spice-common/python_modules/demarshal.py	/^class SubDemarshallingDestination(DemarshallingDestination):$/;"	c
SubMarshallingSource	spice-common/python_modules/marshal.py	/^class SubMarshallingSource(MarshallingSource):$/;"	c
SurfaceCreateItem	server/red_worker.c	/^typedef struct SurfaceCreateItem {$/;"	s	file:
SurfaceCreateItem	server/red_worker.c	/^} SurfaceCreateItem;$/;"	t	typeref:struct:SurfaceCreateItem	file:
SurfaceDestroyItem	server/red_worker.c	/^typedef struct SurfaceDestroyItem {$/;"	s	file:
SurfaceDestroyItem	server/red_worker.c	/^} SurfaceDestroyItem;$/;"	t	typeref:struct:SurfaceDestroyItem	file:
SurfacesCache	client/canvas.cpp	/^SurfacesCache::SurfacesCache()$/;"	f	class:SurfacesCache
SurfacesCache	client/canvas.h	/^class SurfacesCache: public SpiceImageSurfaces, public SurfacesCanvasesMap {$/;"	c
SurfacesCanvasesMap	client/canvas.h	/^typedef std::map<uint32_t, Canvas*> SurfacesCanvasesMap;$/;"	t
SwCanvas	spice-common/common/sw_canvas.c	/^struct SwCanvas {$/;"	s	file:
SwCanvas	spice-common/common/sw_canvas.c	/^typedef struct SwCanvas SwCanvas;$/;"	t	typeref:struct:SwCanvas	file:
Switch	spice-common/python_modules/ptypes.py	/^class Switch(Containee):$/;"	c
SwitchCase	spice-common/python_modules/ptypes.py	/^class SwitchCase:$/;"	c
SwitchHostEvent	client/application.cpp	/^SwitchHostEvent::SwitchHostEvent(const char* host, int port, int sport, const char* cert_subject)$/;"	f	class:SwitchHostEvent
SwitchHostEvent	client/application.h	/^class SwitchHostEvent: public Event {$/;"	c
SyncEvent	client/process_loop.cpp	/^SyncEvent::SyncEvent()$/;"	f	class:SyncEvent
SyncEvent	client/process_loop.h	/^class SyncEvent: public Event {$/;"	c
SyncInfo	client/red_channel.h	/^struct SyncInfo {$/;"	s
TABRAND_SEEDMASK	spice-common/common/quic.c	207;"	d	file:
TABRAND_TABSIZE	spice-common/common/quic.c	206;"	d	file:
TERMINATED_STATE	client/red_channel.h	/^    TERMINATED_STATE,$/;"	e	enum:__anon110
TESS_CALL_BACK_TYPE	spice-common/common/glc.c	1377;"	d	file:
TESS_CALL_BACK_TYPE	spice-common/common/glc.c	1379;"	d	file:
TESS_VERTEX_ALLOC_BUNCH	spice-common/common/glc.c	44;"	d	file:
THREAD_COUNT	server/red_worker.c	115;"	d	file:
THREE_BYTE	spice-common/common/quic.c	838;"	d	file:
THREE_BYTE	spice-common/common/quic_tmpl.c	29;"	d	file:
THROW	client/utils.h	39;"	d
THROW_ERR	client/utils.h	46;"	d
TILED_RASTER_OP	spice-common/common/pixman_utils.c	43;"	d	file:
TIMER_COMPENSATION	client/process_loop.cpp	163;"	d	file:
TO_RGB32	client/glz_decode_tmpl.c	330;"	d	file:
TO_RGB32	client/glz_decoder.cpp	164;"	d	file:
TO_RGB32	client/glz_decoder.cpp	169;"	d	file:
TO_RGB32	client/glz_decoder.cpp	174;"	d	file:
TO_RGB32	client/glz_decoder.cpp	179;"	d	file:
TO_RGB32	client/glz_decoder.cpp	184;"	d	file:
TO_RGB32	client/glz_decoder.cpp	191;"	d	file:
TO_RGB32	spice-common/common/lz.c	445;"	d	file:
TO_RGB32	spice-common/common/lz.c	450;"	d	file:
TO_RGB32	spice-common/common/lz.c	455;"	d	file:
TO_RGB32	spice-common/common/lz.c	460;"	d	file:
TO_RGB32	spice-common/common/lz.c	465;"	d	file:
TO_RGB32	spice-common/common/lz.c	473;"	d	file:
TO_RGB32	spice-common/common/lz.c	481;"	d	file:
TO_RGB32	spice-common/common/lz_decompress_tmpl.c	336;"	d	file:
TRACE_ITEMS_SHIFT	server/red_worker.c	936;"	d	file:
TREE_ITEM_TYPE_CONTAINER	server/red_worker.c	/^    TREE_ITEM_TYPE_CONTAINER,$/;"	e	enum:__anon187	file:
TREE_ITEM_TYPE_DRAWABLE	server/red_worker.c	/^    TREE_ITEM_TYPE_DRAWABLE,$/;"	e	enum:__anon187	file:
TREE_ITEM_TYPE_SHADOW	server/red_worker.c	/^    TREE_ITEM_TYPE_SHADOW,$/;"	e	enum:__anon187	file:
TRUE	spice-common/spice-protocol/spice/macros.h	109;"	d
TYPE_FULLSCREEN	client/red_window.h	/^        TYPE_FULLSCREEN,$/;"	e	enum:RedWindow::Type
TYPE_INVALID	client/red_window.h	/^        TYPE_INVALID,$/;"	e	enum:RedWindow::Type
TYPE_NORMAL	client/red_window.h	/^        TYPE_NORMAL,$/;"	e	enum:RedWindow::Type
T_2MDY	spice-common/common/lines.c	1182;"	d	file:
T_2NDX	spice-common/common/lines.c	1181;"	d	file:
T_ADDDX	spice-common/common/lines.c	1186;"	d	file:
T_ADDDY	spice-common/common/lines.c	1188;"	d	file:
T_ADDONE	spice-common/common/lines.c	1194;"	d	file:
T_BIASSUBONE	spice-common/common/lines.c	1190;"	d	file:
T_DIV2DX	spice-common/common/lines.c	1192;"	d	file:
T_DIV2DY	spice-common/common/lines.c	1193;"	d	file:
T_DXNOTY	spice-common/common/lines.c	1183;"	d	file:
T_DYNOTX	spice-common/common/lines.c	1184;"	d	file:
T_SUBBIAS	spice-common/common/lines.c	1191;"	d	file:
T_SUBDX	spice-common/common/lines.c	1187;"	d	file:
T_SUBDXORY	spice-common/common/lines.c	1185;"	d	file:
T_SUBDY	spice-common/common/lines.c	1189;"	d	file:
Tab	client/gui/gui.h	/^class GUI::Tab {$/;"	c	class:GUI
TabDialog	client/gui/gui.cpp	/^TabDialog::TabDialog(GUI& gui, bool connected)$/;"	f	class:TabDialog
TabDialog	client/gui/gui.cpp	/^class TabDialog : public GUI::Dialog {$/;"	c	file:
TabFactory	client/gui/gui.h	/^    TabFactory() : _order (-1) {}$/;"	f	class:GUI::TabFactory
TabFactory	client/gui/gui.h	/^    TabFactory(int order) : _order (order) {}$/;"	f	class:GUI::TabFactory
TabFactory	client/gui/gui.h	/^class GUI::TabFactory {$/;"	c	class:GUI
TabFactorys	client/gui/gui.h	/^    typedef std::list<TabFactory*> TabFactorys;$/;"	t	class:GUI
Tabs	client/gui/gui.cpp	/^    typedef std::list<GUI::Tab*> Tabs;$/;"	t	class:TabDialog	file:
TassVertex	spice-common/common/glc.c	/^struct TassVertex {$/;"	s	file:
TassVertex	spice-common/common/glc.c	/^typedef struct TassVertex TassVertex;$/;"	t	typeref:struct:TassVertex	file:
TassVertexBuf	spice-common/common/glc.c	/^struct TassVertexBuf {$/;"	s	file:
TassVertexBuf	spice-common/common/glc.c	/^typedef struct TassVertexBuf TassVertexBuf;$/;"	t	typeref:struct:TassVertexBuf	file:
Test	server/tests/test_display_base.h	/^struct Test {$/;"	s
Test	server/tests/test_display_base.h	/^typedef struct Test Test;$/;"	t	typeref:struct:Test
TestResponce	client/application.cpp	/^class TestResponce: public GUI::BoxResponse {$/;"	c	file:
TestTimer	client/application.cpp	/^    TestTimer(Application& app)$/;"	f	class:TestTimer
TestTimer	client/application.cpp	/^class TestTimer: public Timer {$/;"	c	file:
TexturesList	client/gui/softrenderer.h	/^        typedef std::list<SoftTexture *> TexturesList;$/;"	t	class:CEGUI::SoftRenderer
Thread	client/threads.cpp	/^Thread::Thread(thread_main_t thread_main, void* opaque)$/;"	f	class:Thread
Thread	client/threads.h	/^class Thread {$/;"	c
ThreadPriority	client/platform.h	/^    enum ThreadPriority {$/;"	g	class:Platform
TicketAuthentication	server/reds-private.h	/^typedef struct TicketAuthentication {$/;"	s
TicketAuthentication	server/reds-private.h	/^} TicketAuthentication;$/;"	t	typeref:struct:TicketAuthentication
TicketInfo	server/reds-private.h	/^typedef struct TicketInfo {$/;"	s
TicketInfo	server/reds-private.h	/^} TicketInfo;$/;"	t	typeref:struct:TicketInfo
Timer	client/process_loop.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	client/process_loop.h	/^class Timer: public EventBase {$/;"	c
Timer	server/tests/basic_event_loop.c	/^} Timer;$/;"	t	typeref:struct:SpiceTimer	file:
TimersQueue	client/process_loop.cpp	/^TimersQueue::TimersQueue(AbstractProcessLoop& owner)$/;"	f	class:TimersQueue
TimersQueue	client/process_loop.h	/^class TimersQueue {$/;"	c
TimersSet	client/process_loop.h	/^    typedef std::set<Timer*, Timer::Compare> TimersSet;$/;"	t	class:TimersQueue
TocEntry	docs/manual/manual.html	/^function TocEntry(el, text, toclevel) {$/;"	f
TokensPipeItem	server/main_channel.c	/^typedef struct TokensPipeItem {$/;"	s	file:
TokensPipeItem	server/main_channel.c	/^} TokensPipeItem;$/;"	t	typeref:struct:TokensPipeItem	file:
TopVariant	client/x11/platform.cpp	/^class TopVariant {$/;"	c	file:
TreeItem	server/red_worker.c	/^typedef struct TreeItem {$/;"	s	file:
TreeItem	server/red_worker.c	/^} TreeItem;$/;"	t	typeref:struct:TreeItem	file:
Trigger	client/event_sources.h	/^class EventSources::Trigger: public EventSource, private Trigger_p {$/;"	c	class:EventSources
Trigger	client/windows/event_sources_p.cpp	/^EventSources::Trigger::Trigger()$/;"	f	class:EventSources::Trigger
Trigger	client/x11/event_sources_p.cpp	/^EventSources::Trigger::Trigger()$/;"	f	class:EventSources::Trigger
Trigger_p	client/x11/event_sources_p.h	/^    Trigger_p() : _pending_int (false) {}$/;"	f	class:Trigger_p
Trigger_p	client/x11/event_sources_p.h	/^class Trigger_p {$/;"	c
Type	client/red_peer.h	/^        enum Type {$/;"	g	class:RedPeer::ConnectionOptions
Type	client/red_window.h	/^    enum Type {$/;"	g	class:RedWindow
Type	client/threads.h	/^    enum Type {$/;"	g	class:Mutex
Type	spice-common/python_modules/ptypes.py	/^class Type:$/;"	c
TypeAlias	spice-common/python_modules/ptypes.py	/^class TypeAlias(Type):$/;"	c
TypeRef	spice-common/python_modules/ptypes.py	/^class TypeRef(Type):$/;"	c
UINT16_C	client/windows/stdint.h	367;"	d
UINT16_FROM_LE	spice-common/common/pixman_utils.c	1041;"	d	file:
UINT16_FROM_LE	spice-common/common/pixman_utils.c	1044;"	d	file:
UINT16_MAX	client/windows/stdint.h	189;"	d
UINT32_C	client/windows/stdint.h	373;"	d
UINT32_FROM_LE	spice-common/common/pixman_utils.c	1042;"	d	file:
UINT32_FROM_LE	spice-common/common/pixman_utils.c	1045;"	d	file:
UINT32_MAX	client/windows/stdint.h	191;"	d
UINT64_C	client/windows/stdint.h	377;"	d
UINT64_MAX	client/windows/stdint.h	193;"	d
UINT8_C	client/windows/stdint.h	363;"	d
UINT8_MAX	client/windows/stdint.h	187;"	d
UINTMAX_C	client/windows/stdint.h	385;"	d
UINTMAX_MAX	client/windows/stdint.h	279;"	d
UINTPTR_MAX	client/windows/stdint.h	269;"	d
UINT_FAST16_MAX	client/windows/stdint.h	253;"	d
UINT_FAST32_MAX	client/windows/stdint.h	255;"	d
UINT_FAST64_MAX	client/windows/stdint.h	257;"	d
UINT_FAST8_MAX	client/windows/stdint.h	251;"	d
UINT_LEAST16_MAX	client/windows/stdint.h	221;"	d
UINT_LEAST32_MAX	client/windows/stdint.h	223;"	d
UINT_LEAST64_MAX	client/windows/stdint.h	225;"	d
UINT_LEAST8_MAX	client/windows/stdint.h	219;"	d
UNCOMPRESS_ONE	spice-common/common/quic_rgb_tmpl.c	583;"	d	file:
UNCOMPRESS_ONE	spice-common/common/quic_rgb_tmpl.c	750;"	d	file:
UNCOMPRESS_ONE_0	spice-common/common/quic_rgb_tmpl.c	575;"	d	file:
UNCOMPRESS_ONE_0	spice-common/common/quic_rgb_tmpl.c	749;"	d	file:
UNCOMPRESS_ONE_ROW0	spice-common/common/quic_rgb_tmpl.c	468;"	d	file:
UNCOMPRESS_ONE_ROW0	spice-common/common/quic_rgb_tmpl.c	748;"	d	file:
UNCOMPRESS_ONE_ROW0_0	spice-common/common/quic_rgb_tmpl.c	461;"	d	file:
UNCOMPRESS_ONE_ROW0_0	spice-common/common/quic_rgb_tmpl.c	747;"	d	file:
UNCOMPRESS_PIX_START	spice-common/common/quic_rgb_tmpl.c	103;"	d	file:
UNCOMPRESS_PIX_START	spice-common/common/quic_rgb_tmpl.c	40;"	d	file:
UNCOMPRESS_PIX_START	spice-common/common/quic_rgb_tmpl.c	61;"	d	file:
UNCOMPRESS_PIX_START	spice-common/common/quic_rgb_tmpl.c	765;"	d	file:
UNCOMPRESS_PIX_START	spice-common/common/quic_rgb_tmpl.c	82;"	d	file:
UNICODE	client/common.h	45;"	d
UPDATE_HASH	server/glz_encoder_dictionary_protected.h	160;"	d
UPDATE_HASH	server/glz_encoder_dictionary_protected.h	168;"	d
UPDATE_MODEL	spice-common/common/quic_rgb_tmpl.c	179;"	d	file:
UPDATE_MODEL	spice-common/common/quic_rgb_tmpl.c	738;"	d	file:
USE_CXIMAGE	client/windows/platform.cpp	40;"	d	file:
USE_LINE_ANTIALIAS	spice-common/common/glc.c	113;"	d	file:
USE_SMARTCARD	spice-common/config.h	149;"	d
USE_X11_KEYCODE	client/x11/red_window.cpp	80;"	d	file:
USE_XINERAMA_1_0	client/x11/platform.cpp	79;"	d	file:
USE_XRANDR_1_2	client/x11/platform.cpp	74;"	d	file:
UndimInfo	client/gui/gui.cpp	/^        UndimInfo(const CEGUI::String& name, float alpha, bool inherits)$/;"	f	class:GUI::Dialog::UndimInfo
UndimInfo	client/gui/gui.cpp	/^    class UndimInfo {$/;"	c	class:GUI::Dialog	file:
UniquifySpansX	spice-common/common/lines.c	/^UniquifySpansX (Spans * spans, DDXPointRec * newPoints, int *newWidths)$/;"	f	file:
UnlockScreenEvent	client/display_channel.cpp	/^    UnlockScreenEvent(RedScreen* screen)$/;"	f	class:UnlockScreenEvent
UnlockScreenEvent	client/display_channel.cpp	/^class UnlockScreenEvent: public Event {$/;"	c	file:
UnsupportedCursor	client/cursor_channel.cpp	/^UnsupportedCursor::UnsupportedCursor(const SpiceCursorHeader& header)$/;"	f	class:UnsupportedCursor
UnsupportedCursor	client/cursor_channel.cpp	/^class UnsupportedCursor: public NaitivCursor {$/;"	c	file:
UpdateDisplayChannel	client/cursor_channel.cpp	/^        UpdateDisplayChannel(CursorChannel& channel)$/;"	f	class:AttachDispayEvent::UpdateDisplayChannel
UpdateDisplayChannel	client/cursor_channel.cpp	/^    class UpdateDisplayChannel: public ForEachChannelFunc {$/;"	c	class:AttachDispayEvent	file:
UpdateEvent	client/screen.cpp	/^    UpdateEvent(int screen) : _screen (screen) {}$/;"	f	class:UpdateEvent
UpdateEvent	client/screen.cpp	/^class UpdateEvent: public Event {$/;"	c	file:
UpdateTimer	client/screen.h	/^    UpdateTimer(RedScreen* screen) : _screen (screen) {}$/;"	f	class:UpdateTimer
UpdateTimer	client/screen.h	/^class UpdateTimer: public Timer {$/;"	c
UpgradeItem	server/red_worker.c	/^typedef struct UpgradeItem {$/;"	s	file:
UpgradeItem	server/red_worker.c	/^} UpgradeItem;$/;"	t	typeref:struct:UpgradeItem	file:
UuidPipeItem	server/main_channel.c	/^typedef struct UuidPipeItem {$/;"	s	file:
UuidPipeItem	server/main_channel.c	/^} UuidPipeItem;$/;"	t	typeref:struct:UuidPipeItem	file:
VALIDATE_SURFACE_BREAK	server/red_worker.c	165;"	d	file:
VALIDATE_SURFACE_RET	server/red_worker.c	153;"	d	file:
VALIDATE_SURFACE_RETVAL	server/red_worker.c	159;"	d	file:
VAR_NAME	server/red_client_cache.h	136;"	d
VAR_NAME	server/red_client_cache.h	25;"	d
VAR_NAME	server/red_client_cache.h	36;"	d
VAR_NAME	server/red_client_shared_cache.h	233;"	d
VDAgentAnnounceCapabilities	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentAnnounceCapabilities {$/;"	s
VDAgentAnnounceCapabilities	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentAnnounceCapabilities;$/;"	t	typeref:struct:VDAgentAnnounceCapabilities
VDAgentClipboard	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentClipboard {$/;"	s
VDAgentClipboard	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentClipboard;$/;"	t	typeref:struct:VDAgentClipboard
VDAgentClipboardGrab	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentClipboardGrab {$/;"	s
VDAgentClipboardGrab	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentClipboardGrab;$/;"	t	typeref:struct:VDAgentClipboardGrab
VDAgentClipboardRelease	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentClipboardRelease {$/;"	s
VDAgentClipboardRelease	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentClipboardRelease;$/;"	t	typeref:struct:VDAgentClipboardRelease
VDAgentClipboardRequest	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentClipboardRequest {$/;"	s
VDAgentClipboardRequest	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentClipboardRequest;$/;"	t	typeref:struct:VDAgentClipboardRequest
VDAgentDisplayConfig	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentDisplayConfig {$/;"	s
VDAgentDisplayConfig	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentDisplayConfig;$/;"	t	typeref:struct:VDAgentDisplayConfig
VDAgentFileXferDataMessage	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentFileXferDataMessage {$/;"	s
VDAgentFileXferDataMessage	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentFileXferDataMessage;$/;"	t	typeref:struct:VDAgentFileXferDataMessage
VDAgentFileXferStartMessage	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentFileXferStartMessage {$/;"	s
VDAgentFileXferStartMessage	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentFileXferStartMessage;$/;"	t	typeref:struct:VDAgentFileXferStartMessage
VDAgentFileXferStatusMessage	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentFileXferStatusMessage {$/;"	s
VDAgentFileXferStatusMessage	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentFileXferStatusMessage;$/;"	t	typeref:struct:VDAgentFileXferStatusMessage
VDAgentMaxClipboard	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentMaxClipboard {$/;"	s
VDAgentMaxClipboard	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentMaxClipboard;$/;"	t	typeref:struct:VDAgentMaxClipboard
VDAgentMessage	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentMessage {$/;"	s
VDAgentMessage	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentMessage;$/;"	t	typeref:struct:VDAgentMessage
VDAgentMonConfig	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentMonConfig {$/;"	s
VDAgentMonConfig	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentMonConfig;$/;"	t	typeref:struct:VDAgentMonConfig
VDAgentMonitorsConfig	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentMonitorsConfig {$/;"	s
VDAgentMonitorsConfig	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentMonitorsConfig;$/;"	t	typeref:struct:VDAgentMonitorsConfig
VDAgentMouseState	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentMouseState {$/;"	s
VDAgentMouseState	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentMouseState;$/;"	t	typeref:struct:VDAgentMouseState
VDAgentReply	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDAgentReply {$/;"	s
VDAgentReply	spice-common/spice-protocol/spice/vd_agent.h	/^} VDAgentReply;$/;"	t	typeref:struct:VDAgentReply
VDIChunkHeader	spice-common/spice-protocol/spice/vd_agent.h	/^typedef struct SPICE_ATTR_PACKED VDIChunkHeader {$/;"	s
VDIChunkHeader	spice-common/spice-protocol/spice/vd_agent.h	/^} VDIChunkHeader;$/;"	t	typeref:struct:VDIChunkHeader
VDIPortPacket	spice-common/spice-protocol/spice/vdi_dev.h	/^typedef struct SPICE_ATTR_PACKED VDIPortPacket {$/;"	s
VDIPortPacket	spice-common/spice-protocol/spice/vdi_dev.h	/^} VDIPortPacket;$/;"	t	typeref:struct:VDIPortPacket
VDIPortRam	spice-common/spice-protocol/spice/vdi_dev.h	/^typedef struct SPICE_ATTR_PACKED VDIPortRam {$/;"	s
VDIPortRam	spice-common/spice-protocol/spice/vdi_dev.h	/^} VDIPortRam;$/;"	t	typeref:struct:VDIPortRam
VDIPortState	server/reds-private.h	/^typedef struct VDIPortState {$/;"	s
VDIPortState	server/reds-private.h	/^} VDIPortState;$/;"	t	typeref:struct:VDIPortState
VDIReadBuf	server/reds-private.h	/^typedef struct VDIReadBuf {$/;"	s
VDIReadBuf	server/reds-private.h	/^} VDIReadBuf;$/;"	t	typeref:struct:VDIReadBuf
VDI_PORT_DEVICE_ID	spice-common/spice-protocol/spice/vdi_dev.h	42;"	d
VDI_PORT_INTERRUPT	spice-common/spice-protocol/spice/vdi_dev.h	45;"	d
VDI_PORT_IO_CONNECTION	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_IO_CONNECTION,$/;"	e	enum:__anon65
VDI_PORT_IO_NOTIFY	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_IO_NOTIFY = 4,$/;"	e	enum:__anon65
VDI_PORT_IO_RANGE_INDEX	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_IO_RANGE_INDEX,$/;"	e	enum:__anon64
VDI_PORT_IO_RANGE_SIZE	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_IO_RANGE_SIZE = 12$/;"	e	enum:__anon65
VDI_PORT_IO_UPDATE_IRQ	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_IO_UPDATE_IRQ = 8,$/;"	e	enum:__anon65
VDI_PORT_MAGIC	spice-common/spice-protocol/spice/vdi_dev.h	47;"	d
VDI_PORT_RAM_RANGE_INDEX	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDI_PORT_RAM_RANGE_INDEX,$/;"	e	enum:__anon64
VDI_PORT_READ_STATE_GET_BUFF	server/reds-private.h	/^    VDI_PORT_READ_STATE_GET_BUFF,$/;"	e	enum:__anon151
VDI_PORT_READ_STATE_READ_DATA	server/reds-private.h	/^    VDI_PORT_READ_STATE_READ_DATA,$/;"	e	enum:__anon151
VDI_PORT_READ_STATE_READ_HEADER	server/reds-private.h	/^    VDI_PORT_READ_STATE_READ_HEADER,$/;"	e	enum:__anon151
VDI_PORT_REVISION	spice-common/spice-protocol/spice/vdi_dev.h	43;"	d
VDInternalBuf	server/reds-private.h	/^typedef struct __attribute__ ((__packed__)) VDInternalBuf {$/;"	s
VDInternalBuf	server/reds-private.h	/^} VDInternalBuf;$/;"	t	typeref:struct:VDInternalBuf
VDP_CLIENT_PORT	spice-common/spice-protocol/spice/vd_agent.h	/^    VDP_CLIENT_PORT = 1,$/;"	e	enum:__anon92
VDP_END_PORT	spice-common/spice-protocol/spice/vd_agent.h	/^    VDP_END_PORT$/;"	e	enum:__anon92
VDP_SERVER_PORT	spice-common/spice-protocol/spice/vd_agent.h	/^    VDP_SERVER_PORT,$/;"	e	enum:__anon92
VD_AGENT_ANNOUNCE_CAPABILITIES	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_ANNOUNCE_CAPABILITIES,$/;"	e	enum:__anon93
VD_AGENT_CAPS_BYTES	spice-common/spice-protocol/spice/vd_agent.h	240;"	d
VD_AGENT_CAPS_SIZE	spice-common/spice-protocol/spice/vd_agent.h	238;"	d
VD_AGENT_CAPS_SIZE_FROM_MSG_SIZE	spice-common/spice-protocol/spice/vd_agent.h	235;"	d
VD_AGENT_CAP_CLIPBOARD	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_CLIPBOARD,$/;"	e	enum:__anon99
VD_AGENT_CAP_CLIPBOARD_BY_DEMAND	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_CLIPBOARD_BY_DEMAND,$/;"	e	enum:__anon99
VD_AGENT_CAP_CLIPBOARD_SELECTION	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_CLIPBOARD_SELECTION,$/;"	e	enum:__anon99
VD_AGENT_CAP_DISPLAY_CONFIG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_DISPLAY_CONFIG,$/;"	e	enum:__anon99
VD_AGENT_CAP_GUEST_LINEEND_CRLF	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_GUEST_LINEEND_CRLF,$/;"	e	enum:__anon99
VD_AGENT_CAP_GUEST_LINEEND_LF	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_GUEST_LINEEND_LF,$/;"	e	enum:__anon99
VD_AGENT_CAP_MAX_CLIPBOARD	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_MAX_CLIPBOARD,$/;"	e	enum:__anon99
VD_AGENT_CAP_MONITORS_CONFIG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_MONITORS_CONFIG,$/;"	e	enum:__anon99
VD_AGENT_CAP_MOUSE_STATE	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_MOUSE_STATE = 0,$/;"	e	enum:__anon99
VD_AGENT_CAP_REPLY	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_REPLY,$/;"	e	enum:__anon99
VD_AGENT_CAP_SPARSE_MONITORS_CONFIG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CAP_SPARSE_MONITORS_CONFIG,$/;"	e	enum:__anon99
VD_AGENT_CLIENT_DISCONNECTED	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIENT_DISCONNECTED,$/;"	e	enum:__anon93
VD_AGENT_CLIPBOARD	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD,$/;"	e	enum:__anon93
VD_AGENT_CLIPBOARD_GRAB	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_GRAB,$/;"	e	enum:__anon93
VD_AGENT_CLIPBOARD_IMAGE_BMP	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_IMAGE_BMP,  \/* optional *\/$/;"	e	enum:__anon98
VD_AGENT_CLIPBOARD_IMAGE_JPG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_IMAGE_JPG,  \/* optional *\/$/;"	e	enum:__anon98
VD_AGENT_CLIPBOARD_IMAGE_PNG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_IMAGE_PNG,  \/* All clients with image support should support this one *\/$/;"	e	enum:__anon98
VD_AGENT_CLIPBOARD_IMAGE_TIFF	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_IMAGE_TIFF, \/* optional *\/$/;"	e	enum:__anon98
VD_AGENT_CLIPBOARD_MAX_SIZE_DEFAULT	spice-common/spice-protocol/spice/vd_agent.h	61;"	d
VD_AGENT_CLIPBOARD_MAX_SIZE_ENV	spice-common/spice-protocol/spice/vd_agent.h	62;"	d
VD_AGENT_CLIPBOARD_NONE	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_NONE = 0,$/;"	e	enum:__anon98
VD_AGENT_CLIPBOARD_RELEASE	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_RELEASE,$/;"	e	enum:__anon93
VD_AGENT_CLIPBOARD_REQUEST	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_REQUEST,$/;"	e	enum:__anon93
VD_AGENT_CLIPBOARD_SELECTION_CLIPBOARD	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_SELECTION_CLIPBOARD = 0,$/;"	e	enum:__anon100
VD_AGENT_CLIPBOARD_SELECTION_PRIMARY	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_SELECTION_PRIMARY,$/;"	e	enum:__anon100
VD_AGENT_CLIPBOARD_SELECTION_SECONDARY	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_SELECTION_SECONDARY,$/;"	e	enum:__anon100
VD_AGENT_CLIPBOARD_UTF8_TEXT	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CLIPBOARD_UTF8_TEXT,$/;"	e	enum:__anon98
VD_AGENT_CONFIG_MONITORS_FLAG_USE_POS	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_CONFIG_MONITORS_FLAG_USE_POS = (1 << 0),$/;"	e	enum:__anon95
VD_AGENT_DBUTTON_MASK	spice-common/spice-protocol/spice/vd_agent.h	145;"	d
VD_AGENT_DISPLAY_CONFIG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_DISPLAY_CONFIG,$/;"	e	enum:__anon93
VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_ANIMATION	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_ANIMATION = (1 << 2),$/;"	e	enum:__anon96
VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_FONT_SMOOTH	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_FONT_SMOOTH = (1 << 1),$/;"	e	enum:__anon96
VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_WALLPAPER	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_DISPLAY_CONFIG_FLAG_DISABLE_WALLPAPER = (1 << 0),$/;"	e	enum:__anon96
VD_AGENT_DISPLAY_CONFIG_FLAG_SET_COLOR_DEPTH	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_DISPLAY_CONFIG_FLAG_SET_COLOR_DEPTH = (1 << 3),$/;"	e	enum:__anon96
VD_AGENT_END_CAP	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_END_CAP,$/;"	e	enum:__anon99
VD_AGENT_END_MESSAGE	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_END_MESSAGE,$/;"	e	enum:__anon93
VD_AGENT_ERROR	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_ERROR,$/;"	e	enum:__anon97
VD_AGENT_FILE_XFER_DATA	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_DATA,$/;"	e	enum:__anon93
VD_AGENT_FILE_XFER_START	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_START,$/;"	e	enum:__anon93
VD_AGENT_FILE_XFER_STATUS	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_STATUS,$/;"	e	enum:__anon93
VD_AGENT_FILE_XFER_STATUS_CANCELLED	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_STATUS_CANCELLED,$/;"	e	enum:__anon94
VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA,$/;"	e	enum:__anon94
VD_AGENT_FILE_XFER_STATUS_ERROR	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_STATUS_ERROR,$/;"	e	enum:__anon94
VD_AGENT_FILE_XFER_STATUS_SUCCESS	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_FILE_XFER_STATUS_SUCCESS,$/;"	e	enum:__anon94
VD_AGENT_HAS_CAPABILITY	spice-common/spice-protocol/spice/vd_agent.h	242;"	d
VD_AGENT_LBUTTON_MASK	spice-common/spice-protocol/spice/vd_agent.h	141;"	d
VD_AGENT_MAX_CLIPBOARD	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_MAX_CLIPBOARD,$/;"	e	enum:__anon93
VD_AGENT_MAX_DATA_SIZE	spice-common/spice-protocol/spice/vd_agent.h	58;"	d
VD_AGENT_MBUTTON_MASK	spice-common/spice-protocol/spice/vd_agent.h	142;"	d
VD_AGENT_MONITORS_CONFIG	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_MONITORS_CONFIG,$/;"	e	enum:__anon93
VD_AGENT_MOUSE_STATE	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_MOUSE_STATE = 1,$/;"	e	enum:__anon93
VD_AGENT_PROTOCOL	spice-common/spice-protocol/spice/vd_agent.h	57;"	d
VD_AGENT_RBUTTON_MASK	spice-common/spice-protocol/spice/vd_agent.h	143;"	d
VD_AGENT_REPLY	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_REPLY,$/;"	e	enum:__anon93
VD_AGENT_SET_CAPABILITY	spice-common/spice-protocol/spice/vd_agent.h	245;"	d
VD_AGENT_SUCCESS	spice-common/spice-protocol/spice/vd_agent.h	/^    VD_AGENT_SUCCESS = 1,$/;"	e	enum:__anon97
VD_AGENT_UBUTTON_MASK	spice-common/spice-protocol/spice/vd_agent.h	144;"	d
VERSION	Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	client/Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	config.h	131;"	d
VERSION	docs/Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	docs/manual/Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	server/Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	server/tests/Makefile	/^VERSION = 0.12.5$/;"	m
VERSION	spice-common/Makefile	/^VERSION = noversion$/;"	m
VERSION	spice-common/common/Makefile	/^VERSION = noversion$/;"	m
VERSION	spice-common/config.h	152;"	d
VERSION	spice-common/python_modules/Makefile	/^VERSION = noversion$/;"	m
VERSION	spice-common/spice-protocol/Makefile	/^VERSION = 0.12.6$/;"	m
VERSION	spice-common/spice-protocol/config.h	26;"	d
VERSION	spice-common/spice-protocol/spice/Makefile	/^VERSION = 0.12.6$/;"	m
VERTEX2	spice-common/common/glc.c	159;"	d	file:
VEventEvent	client/smartcard_channel.cpp	/^VEventEvent::VEventEvent(SmartCardChannel* smartcard_channel, VEvent* vevent)$/;"	f	class:VEventEvent
VEventEvent	client/smartcard_channel.h	/^class VEventEvent : public Event {$/;"	c
VISIBILITY	client/application.h	/^        VISIBILITY,$/;"	e	enum:Application::State
VISIBILITY_HIDDEN_CFLAGS	Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VISIBILITY_HIDDEN_CFLAGS	client/Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VISIBILITY_HIDDEN_CFLAGS	docs/Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VISIBILITY_HIDDEN_CFLAGS	docs/manual/Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VISIBILITY_HIDDEN_CFLAGS	server/Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VISIBILITY_HIDDEN_CFLAGS	server/tests/Makefile	/^VISIBILITY_HIDDEN_CFLAGS = -fvisibility=hidden$/;"	m
VNAME	spice-common/common/quic_family_tmpl.c	112;"	d	file:
VNAME	spice-common/common/quic_family_tmpl.c	25;"	d	file:
VNAME	spice-common/common/quic_family_tmpl.c	33;"	d	file:
VSCMessageEvent	client/smartcard_channel.cpp	/^VSCMessageEvent::VSCMessageEvent(SmartCardChannel* smartcard_channel,$/;"	f	class:VSCMessageEvent
VSCMessageEvent	client/smartcard_channel.h	/^class VSCMessageEvent: public Event {$/;"	c
V_BOTTOM	spice-common/common/lines.c	2962;"	d	file:
V_LEFT	spice-common/common/lines.c	2963;"	d	file:
V_RIGHT	spice-common/common/lines.c	2961;"	d	file:
V_TOP	spice-common/common/lines.c	2960;"	d	file:
VerbItem	server/red_worker.c	/^typedef struct VerbItem {$/;"	s	file:
VerbItem	server/red_worker.c	/^} VerbItem;$/;"	t	typeref:struct:VerbItem	file:
Vertex	spice-common/common/glc.c	/^typedef GLdouble Vertex[3];$/;"	t	file:
VideoFrame	client/display_channel.cpp	/^    struct VideoFrame {$/;"	s	class:VideoStream	file:
VideoStream	client/display_channel.cpp	/^VideoStream::VideoStream(RedClient& client, Canvas& canvas, DisplayChannel& channel,$/;"	f	class:VideoStream
VideoStream	client/display_channel.cpp	/^class VideoStream {$/;"	c	file:
VisibilityEvent	client/application.h	/^    VisibilityEvent(int screen_id) : _screen_id (screen_id) {}$/;"	f	class:VisibilityEvent
VisibilityEvent	client/application.h	/^class VisibilityEvent: public Event {$/;"	c
WAIT_ACTION	client/red_channel.h	/^    WAIT_ACTION,$/;"	e	enum:__anon111
WARNING	client/gui/gui.h	/^        WARNING,$/;"	e	enum:GUI::MessageType
WARN_CFLAGS	Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CFLAGS	client/Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CFLAGS	docs/Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CFLAGS	docs/manual/Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CFLAGS	server/Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CFLAGS	server/tests/Makefile	/^WARN_CFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_CXXFLAGS	Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_CXXFLAGS	client/Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_CXXFLAGS	docs/Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_CXXFLAGS	docs/manual/Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_CXXFLAGS	server/Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_CXXFLAGS	server/tests/Makefile	/^WARN_CXXFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const$/;"	m
WARN_LDFLAGS	Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_LDFLAGS	client/Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_LDFLAGS	docs/Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_LDFLAGS	docs/manual/Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_LDFLAGS	server/Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WARN_LDFLAGS	server/tests/Makefile	/^WARN_LDFLAGS =  -Wall -W -Wformat-y2k -Wformat-security -Winit-self -Wmissing-include-dirs -Wunused -Wunknown-pragmas -Wstrict-aliasing -Wpointer-arith -Wcast-align -Wwrite-strings -Wlogical-op -Wmissing-noreturn -Wredundant-decls -Winvalid-pch -Wvolatile-register-var -Wdisabled-optimization -Wbuiltin-macro-redefined -Wmudflap -Wpacked-bitfield-compat -Wsync-nand -Wattributes -Wcoverage-mismatch -Wmultichar -Wdeprecated-declarations -Wdiv-by-zero -Wendif-labels -Wextra -Wformat-contains-nul -Wformat-extra-args -Wformat=2 -Wmultichar -Wnormalized=nfc -Woverflow -Wpragmas -Wno-missing-field-initializers -Wno-sign-compare -Wno-unused-parameter -Wno-format-nonliteral -Wno-ignored-qualifiers -Wno-format-nonliteral -Wframe-larger-than=20460 -fstack-protector-all --param=ssp-buffer-size=4 -fexceptions -fasynchronous-unwind-tables -fdiagnostics-show-option -funit-at-a-time -fipa-pure-const -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnested-externs -Wformat-zero-length -Wpointer-to-int-cast$/;"	m
WAVE_BUF_SIZE	client/playback_channel.cpp	31;"	d	file:
WCHAR_MAX	client/windows/stdint.h	305;"	d
WCHAR_MIN	client/windows/stdint.h	303;"	d
WIDE_CLIENT_ACK_WINDOW	server/red_worker.c	404;"	d	file:
WINDRES	Makefile	/^WINDRES = $/;"	m
WINDRES	client/Makefile	/^WINDRES = $/;"	m
WINDRES	docs/Makefile	/^WINDRES = $/;"	m
WINDRES	docs/manual/Makefile	/^WINDRES = $/;"	m
WINDRES	server/Makefile	/^WINDRES = $/;"	m
WINDRES	server/tests/Makefile	/^WINDRES = $/;"	m
WINT_MAX	client/windows/stdint.h	319;"	d
WINT_MIN	client/windows/stdint.h	317;"	d
WINVER	client/common.h	48;"	d
WIN_REALLOC_FACTOR	client/glz_decoder_window.cpp	27;"	d	file:
WORDS_BIGENDIAN	config.h	137;"	d
WORKER_FOREACH_DCC_SAFE	server/red_worker.c	1137;"	d	file:
WORKER_TO_DCC	server/red_worker.c	1158;"	d	file:
WOULDBLOCK_ERR	client/windows/platform_utils.h	95;"	d
WOULDBLOCK_ERR	client/x11/platform_utils.h	34;"	d
WRITE_BUFFER_ORIGIN_CLIENT	server/char_device.c	/^    WRITE_BUFFER_ORIGIN_CLIENT,$/;"	e	enum:__anon136	file:
WRITE_BUFFER_ORIGIN_NONE	server/char_device.c	/^    WRITE_BUFFER_ORIGIN_NONE,$/;"	e	enum:__anon136	file:
WRITE_BUFFER_ORIGIN_SERVER	server/char_device.c	/^    WRITE_BUFFER_ORIGIN_SERVER,$/;"	e	enum:__anon136	file:
WRITE_BUFFER_ORIGIN_SERVER_NO_TOKEN	server/char_device.c	/^    WRITE_BUFFER_ORIGIN_SERVER_NO_TOKEN,$/;"	e	enum:__anon136	file:
WaitForChannels	server/red_worker.c	/^typedef struct WaitForChannels {$/;"	s	file:
WaitForChannels	server/red_worker.c	/^} WaitForChannels;$/;"	t	typeref:struct:WaitForChannels	file:
WakeupTrigger	client/process_loop.h	/^    class WakeupTrigger: public EventSources::Trigger {$/;"	c	class:ProcessLoop
WavePlaybackAbstract	client/audio_devices.h	/^    WavePlaybackAbstract() {}$/;"	f	class:WavePlaybackAbstract
WavePlaybackAbstract	client/audio_devices.h	/^class WavePlaybackAbstract {$/;"	c
WavePlayer	client/windows/playback.cpp	/^WavePlayer::WavePlayer(uint32_t samples_per_sec, uint32_t bits_per_sample, uint32_t channels)$/;"	f	class:WavePlayer
WavePlayer	client/windows/playback.h	/^class WavePlayer: public WavePlaybackAbstract {$/;"	c
WavePlayer	client/x11/playback.cpp	/^WavePlayer::WavePlayer(uint32_t samples_per_sec, uint32_t bits_per_sample, uint32_t channels, uint32_t frame_size)$/;"	f	class:WavePlayer
WavePlayer	client/x11/playback.h	/^class WavePlayer: public WavePlaybackAbstract {$/;"	c
WaveRecordAbstract	client/audio_devices.h	/^    WaveRecordAbstract() {}$/;"	f	class:WaveRecordAbstract
WaveRecordAbstract	client/audio_devices.h	/^class WaveRecordAbstract {$/;"	c
WaveRecorder	client/windows/record.cpp	/^WaveRecorder::WaveRecorder(Platform::RecordClient& client, uint32_t samples_per_sec,$/;"	f	class:WaveRecorder
WaveRecorder	client/windows/record.h	/^class WaveRecorder: public WaveRecordAbstract, public EventSources::Trigger {$/;"	c
WaveRecorder	client/x11/record.cpp	/^WaveRecorder::WaveRecorder(Platform::RecordClient& client,$/;"	f	class:WaveRecorder
WaveRecorder	client/x11/record.h	/^class WaveRecorder: public WaveRecordAbstract {$/;"	c
Win	client/x11/red_window_p.h	/^typedef Window Win;$/;"	t
WinBaseLocalCursor	client/windows/platform.cpp	/^    WinBaseLocalCursor() : _handle (0) {}$/;"	f	class:WinBaseLocalCursor
WinBaseLocalCursor	client/windows/platform.cpp	/^class WinBaseLocalCursor: public LocalCursor {$/;"	c	file:
WinConnection	client/windows/named_pipe.cpp	/^WinConnection::WinConnection(HANDLE pipe, ProcessLoop& process_loop)$/;"	f	class:WinConnection
WinConnection	client/windows/named_pipe.h	/^class WinConnection {$/;"	c
WinDefaultCursor	client/windows/platform.cpp	/^    WinDefaultCursor() { _handle = LoadCursor(NULL, IDC_ARROW);}$/;"	f	class:WinDefaultCursor
WinDefaultCursor	client/windows/platform.cpp	/^class WinDefaultCursor: public WinBaseLocalCursor {$/;"	c	file:
WinIcon	client/windows/win_platform.h	/^    WinIcon(HICON icon) : _icon (icon) {}$/;"	f	class:WinIcon
WinIcon	client/windows/win_platform.h	/^class WinIcon: public Icon {$/;"	c
WinInactiveCursor	client/windows/platform.cpp	/^    WinInactiveCursor() { _handle = LoadCursor(NULL, IDC_NO);}$/;"	f	class:WinInactiveCursor
WinInactiveCursor	client/windows/platform.cpp	/^class WinInactiveCursor: public WinBaseLocalCursor {$/;"	c	file:
WinListener	client/windows/named_pipe.cpp	/^WinListener::WinListener(const char *name, NamedPipe::ListenerInterface &listener_interface,$/;"	f	class:WinListener
WinListener	client/windows/named_pipe.h	/^class WinListener: public EventSources::Handle {$/;"	c
WinLocalCursor	client/windows/platform.cpp	/^WinLocalCursor::WinLocalCursor(CursorData* cursor_data)$/;"	f	class:WinLocalCursor
WinLocalCursor	client/windows/platform.cpp	/^class WinLocalCursor: public WinBaseLocalCursor {$/;"	c	file:
WinMain	client/windows/main.cpp	/^int WINAPI WinMain(HINSTANCE hInstance,$/;"	f
WinMonitor	client/windows/platform.cpp	/^WinMonitor::WinMonitor(int id, const wchar_t* name, const wchar_t* string)$/;"	f	class:WinMonitor
WinMonitor	client/windows/platform.cpp	/^class WinMonitor: public Monitor {$/;"	c	file:
WinPlatform	client/windows/win_platform.h	/^class WinPlatform {$/;"	c
Window	client/windows/red_window_p.h	/^typedef HWND Window;$/;"	t
WindowDC	client/windows/platform_utils.h	/^    WindowDC(HWND window): _window (window), _dc (GetDC(window)) {}$/;"	f	class:WindowDC
WindowDC	client/windows/platform_utils.h	/^class WindowDC {$/;"	c
WindowImage	server/glz_encoder_dictionary_protected.h	/^struct WindowImage {$/;"	s
WindowImage	server/glz_encoder_dictionary_protected.h	/^typedef struct WindowImage WindowImage;$/;"	t	typeref:struct:WindowImage
WindowImageSegment	server/glz_encoder_dictionary_protected.h	/^struct WindowImageSegment {$/;"	s
WindowImageSegment	server/glz_encoder_dictionary_protected.h	/^typedef struct WindowImageSegment WindowImageSegment;$/;"	t	typeref:struct:WindowImageSegment
WindowProc	client/windows/red_window.cpp	/^LRESULT CALLBACK RedWindow_p::WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:RedWindow_p
Word	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
WorkerInitData	server/red_worker.h	/^typedef struct WorkerInitData {$/;"	s
WorkerInitData	server/red_worker.h	/^} WorkerInitData;$/;"	t	typeref:struct:WorkerInitData
X11_CAPS_LOCK_LED	client/x11/platform.cpp	/^    X11_CAPS_LOCK_LED = 1,$/;"	e	enum:XLed	file:
X11_NUM_LOCK_LED	client/x11/platform.cpp	/^    X11_NUM_LOCK_LED,$/;"	e	enum:XLed	file:
X11_SCROLL_LOCK_LED	client/x11/platform.cpp	/^    X11_SCROLL_LOCK_LED,$/;"	e	enum:XLed	file:
X509_NAME	spice-common/common/ssl_verify.h	34;"	d
XBaseLocalCursor	client/x11/platform.cpp	/^    XBaseLocalCursor() : _handle (0) {}$/;"	f	class:XBaseLocalCursor
XBaseLocalCursor	client/x11/platform.cpp	/^class XBaseLocalCursor: public LocalCursor {$/;"	c	file:
XDECREASING	spice-common/common/lines.c	136;"	d	file:
XDefaultCursor	client/x11/platform.cpp	/^    XDefaultCursor()$/;"	f	class:XDefaultCursor
XDefaultCursor	client/x11/platform.cpp	/^class XDefaultCursor: public XBaseLocalCursor {$/;"	c	file:
XEventHandler	client/x11/platform.cpp	/^XEventHandler::XEventHandler(Display& x_display, XContext& win_proc_context)$/;"	f	class:XEventHandler
XEventHandler	client/x11/platform.cpp	/^class XEventHandler: public EventSources::File {$/;"	c	file:
XFIXES_CFLAGS	Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_CFLAGS	client/Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_CFLAGS	docs/Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_CFLAGS	docs/manual/Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_CFLAGS	server/Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_CFLAGS	server/tests/Makefile	/^XFIXES_CFLAGS = $/;"	m
XFIXES_LIBS	Makefile	/^XFIXES_LIBS = $/;"	m
XFIXES_LIBS	client/Makefile	/^XFIXES_LIBS = $/;"	m
XFIXES_LIBS	docs/Makefile	/^XFIXES_LIBS = $/;"	m
XFIXES_LIBS	docs/manual/Makefile	/^XFIXES_LIBS = $/;"	m
XFIXES_LIBS	server/Makefile	/^XFIXES_LIBS = $/;"	m
XFIXES_LIBS	server/tests/Makefile	/^XFIXES_LIBS = $/;"	m
XINERAMA_CFLAGS	Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_CFLAGS	client/Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_CFLAGS	docs/Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_CFLAGS	docs/manual/Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_CFLAGS	server/Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_CFLAGS	server/tests/Makefile	/^XINERAMA_CFLAGS =  $/;"	m
XINERAMA_LIBS	Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XINERAMA_LIBS	client/Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XINERAMA_LIBS	docs/Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XINERAMA_LIBS	docs/manual/Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XINERAMA_LIBS	server/Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XINERAMA_LIBS	server/tests/Makefile	/^XINERAMA_LIBS = -lXinerama  $/;"	m
XIcon	client/x11/x_icon.cpp	/^XIcon::XIcon(int id, const IconHeader *icon)$/;"	f	class:XIcon
XIcon	client/x11/x_icon.h	/^class XIcon: public Icon {$/;"	c
XInactiveCursor	client/x11/platform.cpp	/^    XInactiveCursor() { _handle = XCreateFontCursor(x_display, XC_X_cursor);}$/;"	f	class:XInactiveCursor
XInactiveCursor	client/x11/platform.cpp	/^class XInactiveCursor: public XBaseLocalCursor {$/;"	c	file:
XLed	client/x11/platform.cpp	/^enum XLed {$/;"	g	file:
XLocalCursor	client/x11/platform.cpp	/^XLocalCursor::XLocalCursor(CursorData* cursor_data)$/;"	f	class:XLocalCursor
XLocalCursor	client/x11/platform.cpp	/^class XLocalCursor: public XBaseLocalCursor {$/;"	c	file:
XMAJOROCTANTS	spice-common/common/lines.c	149;"	d	file:
XMD_H	client/jpeg_decoder.h	27;"	d
XMD_H	client/mjpeg_decoder.h	26;"	d
XMKMF	spice-common/Makefile	/^XMKMF = $/;"	m
XMKMF	spice-common/common/Makefile	/^XMKMF = $/;"	m
XMKMF	spice-common/python_modules/Makefile	/^XMKMF = $/;"	m
XMonitor	client/x11/platform.cpp	/^XMonitor::XMonitor(MultyMonScreen& container, int id, RRCrtc crtc)$/;"	f	class:XMonitor
XMonitor	client/x11/platform.cpp	/^class XMonitor: public Monitor {$/;"	c	file:
XMonitorsList	client/x11/platform.cpp	/^typedef std::list<XMonitor*> XMonitorsList;$/;"	t	file:
XPlatform	client/x11/x_platform.h	/^class XPlatform {$/;"	c
XRANDR12_CFLAGS	Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_CFLAGS	client/Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_CFLAGS	docs/Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_CFLAGS	docs/manual/Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_CFLAGS	server/Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_CFLAGS	server/tests/Makefile	/^XRANDR12_CFLAGS = $/;"	m
XRANDR12_LIBS	Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR12_LIBS	client/Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR12_LIBS	docs/Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR12_LIBS	docs/manual/Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR12_LIBS	server/Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR12_LIBS	server/tests/Makefile	/^XRANDR12_LIBS = $/;"	m
XRANDR_CFLAGS	Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_CFLAGS	client/Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_CFLAGS	docs/Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_CFLAGS	docs/manual/Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_CFLAGS	server/Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_CFLAGS	server/tests/Makefile	/^XRANDR_CFLAGS = $/;"	m
XRANDR_LIBS	Makefile	/^XRANDR_LIBS = $/;"	m
XRANDR_LIBS	client/Makefile	/^XRANDR_LIBS = $/;"	m
XRANDR_LIBS	docs/Makefile	/^XRANDR_LIBS = $/;"	m
XRANDR_LIBS	docs/manual/Makefile	/^XRANDR_LIBS = $/;"	m
XRANDR_LIBS	server/Makefile	/^XRANDR_LIBS = $/;"	m
XRANDR_LIBS	server/tests/Makefile	/^XRANDR_LIBS = $/;"	m
XScreen	client/x11/platform.cpp	/^XScreen::XScreen(Display* display, int screen)$/;"	f	class:XScreen
XScreen	client/x11/platform.cpp	/^class XScreen {$/;"	c	file:
X_AXIS	spice-common/common/lines.c	182;"	d	file:
X_DEBUG_SYNC	client/x11/platform.cpp	72;"	d	file:
X_RETRIES	client/x11/red_window.cpp	52;"	d	file:
X_RETRY_DELAY_MICRO	client/x11/red_window.cpp	53;"	d	file:
XineramaMonitor	client/x11/platform.cpp	/^XineramaMonitor::XineramaMonitor(int id, XineramaScreenInfo& screen_info)$/;"	f	class:XineramaMonitor
XineramaMonitor	client/x11/platform.cpp	/^class XineramaMonitor : public Monitor {$/;"	c	file:
XineramaMonitorsList	client/x11/platform.cpp	/^typedef std::list<XineramaMonitor*> XineramaMonitorsList;$/;"	t	file:
XineramaScreen	client/x11/platform.cpp	/^XineramaScreen::XineramaScreen(Display* display, int screen, int& next_mon_id,$/;"	f	class:XineramaScreen
XineramaScreen	client/x11/platform.cpp	/^class XineramaScreen : public XScreen {$/;"	c	file:
XrmInitialize	spice-common/configure	/^XrmInitialize ()$/;"	f
Y	spice-common/common/glc.c	158;"	d	file:
YDECREASING	spice-common/common/lines.c	137;"	d	file:
YMAJOR	spice-common/common/lines.c	138;"	d	file:
YMAX	spice-common/common/lines.c	447;"	d	file:
YMIN	spice-common/common/lines.c	446;"	d	file:
Y_AXIS	spice-common/common/lines.c	183;"	d	file:
ZERO_BUF_SIZE	server/main_channel.c	51;"	d	file:
ZLIB_DEFAULT_COMPRESSION_LEVEL	server/red_worker.c	148;"	d	file:
ZLIB_WINAPI	client/zlib_decoder.h	26;"	d
Z_LIBS	Makefile	/^Z_LIBS = -lz$/;"	m
Z_LIBS	client/Makefile	/^Z_LIBS = -lz$/;"	m
Z_LIBS	docs/Makefile	/^Z_LIBS = -lz$/;"	m
Z_LIBS	docs/manual/Makefile	/^Z_LIBS = -lz$/;"	m
Z_LIBS	server/Makefile	/^Z_LIBS = -lz$/;"	m
Z_LIBS	server/tests/Makefile	/^Z_LIBS = -lz$/;"	m
Z_POSITION_RETRIES	client/x11/red_window.cpp	55;"	d	file:
ZeroOrMore	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
ZlibData	server/red_worker.c	/^} ZlibData;$/;"	t	typeref:struct:__anon185	file:
ZlibDecoder	client/zlib_decoder.cpp	/^ZlibDecoder::ZlibDecoder()$/;"	f	class:ZlibDecoder
ZlibDecoder	client/zlib_decoder.h	/^class ZlibDecoder : public SpiceZlibDecoder {$/;"	c
ZlibEncoder	server/zlib_encoder.c	/^struct ZlibEncoder {$/;"	s	file:
ZlibEncoder	server/zlib_encoder.h	/^typedef struct ZlibEncoder ZlibEncoder;$/;"	t	typeref:struct:ZlibEncoder
ZlibEncoderUsrContext	server/zlib_encoder.h	/^struct ZlibEncoderUsrContext {$/;"	s
ZlibEncoderUsrContext	server/zlib_encoder.h	/^typedef struct ZlibEncoderUsrContext ZlibEncoderUsrContext;$/;"	t	typeref:struct:ZlibEncoderUsrContext
_APS_NEXT_COMMAND_VALUE	client/windows/resource.h	14;"	d
_APS_NEXT_CONTROL_VALUE	client/windows/resource.h	15;"	d
_APS_NEXT_RESOURCE_VALUE	client/windows/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	client/windows/resource.h	16;"	d
_AutoRes	client/utils.h	/^    _AutoRes() : _res (NULL) {}$/;"	f	class:_AutoRes
_AutoRes	client/utils.h	/^    _AutoRes(T* res) : _res (res) {}$/;"	f	class:_AutoRes
_AutoRes	client/utils.h	/^class _AutoRes {$/;"	c
_CursorItem	server/red_worker.c	/^struct _CursorItem {$/;"	s	file:
_CursorItem	server/red_worker.c	/^typedef struct _CursorItem _CursorItem;$/;"	t	typeref:struct:_CursorItem	file:
_Drawable	server/red_worker.c	/^struct _Drawable {$/;"	s	file:
_Drawable	server/red_worker.c	/^typedef struct _Drawable _Drawable;$/;"	t	typeref:struct:_Drawable	file:
_FORTIFY_SOURCE	config.h	17;"	d
_GENERATED_HEADERS_H	spice-common/common/generated_server_marshallers.h	24;"	d
_GL_CONCAT	spice-common/common/verify.h	144;"	d
_GL_CONCAT0	spice-common/common/verify.h	145;"	d
_GL_COUNTER	spice-common/common/verify.h	152;"	d
_GL_COUNTER	spice-common/common/verify.h	154;"	d
_GL_GENSYM	spice-common/common/verify.h	159;"	d
_GL_HAVE_STATIC_ASSERT	spice-common/common/verify.h	40;"	d
_GL_HAVE__STATIC_ASSERT	spice-common/common/verify.h	35;"	d
_GL_VERIFY	spice-common/common/verify.h	197;"	d
_GL_VERIFY	spice-common/common/verify.h	199;"	d
_GL_VERIFY_H	spice-common/common/verify.h	21;"	d
_GL_VERIFY_TRUE	spice-common/common/verify.h	165;"	d
_GL_VERIFY_TYPE	spice-common/common/verify.h	176;"	d
_GL_VERIFY_TYPE	spice-common/common/verify.h	179;"	d
_GL_VERIFY_TYPE	spice-common/common/verify.h	185;"	d
_H264Encoder	server/h264_encoder.h	/^typedef struct _H264Encoder$/;"	s
_H264StreamInfo	server/h264_type.h	/^typedef struct _H264StreamInfo$/;"	s
_H_AGENT_MSG_FILTER	server/agent-msg-filter.h	22;"	d
_H_APPLICATION	client/application.h	19;"	d
_H_ATOMIC_COUNT	client/windows/atomic_count.h	19;"	d
_H_ATOMIC_COUNT	client/x11/atomic_count.h	19;"	d
_H_AUDIO_CHANNELS	client/audio_channels.h	19;"	d
_H_AUDIO_DEVICES	client/audio_devices.h	19;"	d
_H_CACHE	client/cache.hpp	19;"	d
_H_CANVAS	client/canvas.h	20;"	d
_H_CANVAS_BASE	spice-common/common/canvas_base.h	20;"	d
_H_CANVAS_UTILS	spice-common/common/canvas_utils.h	20;"	d
_H_CCANVAS	client/red_sw_canvas.h	20;"	d
_H_CLIENT_NET_SOCKET	client/client_net_socket.h	22;"	d
_H_CMD_LINE_PARSER	client/cmd_line_parser.h	19;"	d
_H_COMMON	client/common.h	19;"	d
_H_CONTROLLER_MENU	client/controller.h	19;"	d
_H_CONTROLLER_PROT	spice-common/spice-protocol/spice/controller_prot.h	19;"	d
_H_CURSOR_	client/cursor.h	19;"	d
_H_CURSOR_CHANNEL	client/cursor_channel.h	19;"	d
_H_DEBUG	client/debug.h	19;"	d
_H_DEMARSHAL	server/demarshallers.h	18;"	d
_H_DEMARSHAL	spice-common/common/client_demarshallers.h	18;"	d
_H_DISPLAY_CHANNEL	client/display_channel.h	20;"	d
_H_EVENT_SOURCES	client/event_sources.h	19;"	d
_H_EVENT_SOURCES_P	client/x11/event_sources_p.h	19;"	d
_H_FOREIGN_MENU	client/foreign_menu.h	19;"	d
_H_FOREIGN_MENU_PROT	spice-common/spice-protocol/spice/foreign_menu_prot.h	19;"	d
_H_GCANVAS	client/red_gl_canvas.h	19;"	d
_H_GDICANVAS	client/red_gdi_canvas.h	19;"	d
_H_GLCTX	spice-common/common/ogl_ctx.h	20;"	d
_H_GLZ_DECODED_IMAGE	client/glz_decoded_image.h	19;"	d
_H_GLZ_DECODER	client/glz_decoder.h	20;"	d
_H_GLZ_DECODER_CONFIG	client/glz_decoder_config.h	19;"	d
_H_GLZ_DECODER_WINDOW	client/glz_decoder_window.h	19;"	d
_H_GLZ_ENCODER	server/glz_encoder.h	19;"	d
_H_GLZ_ENCODER_CONFIG	server/glz_encoder_config.h	19;"	d
_H_GLZ_ENCODER_DICTIONARY	server/glz_encoder_dictionary.h	19;"	d
_H_GLZ_ENCODER_DICTIONARY_PROTECTED	server/glz_encoder_dictionary_protected.h	19;"	d
_H_GL_CANVASE	spice-common/common/glc.h	22;"	d
_H_GUI	client/gui/gui.h	19;"	d
_H_HOT_KEYS	client/hot_keys.h	19;"	d
_H_ICON	client/icon.h	19;"	d
_H_INPUTS_CHANNEL	client/inputs_channel.h	19;"	d
_H_INPUTS_HANDLER	client/inputs_handler.h	19;"	d
_H_JPEG_DECODER	client/jpeg_decoder.h	20;"	d
_H_JPEG_ENCODER	server/jpeg_encoder.h	31;"	d
_H_LINUX_PLAYBACK	client/x11/playback.h	19;"	d
_H_LINUX_RECORD	client/x11/record.h	19;"	d
_H_MARSHALLER	spice-common/common/marshaller.h	20;"	d
_H_MARSHALLERS	spice-common/common/client_marshallers.h	20;"	d
_H_MEM	spice-common/common/mem.h	20;"	d
_H_MENU	client/menu.h	19;"	d
_H_MESSAGES	spice-common/common/messages.h	32;"	d
_H_MIGRATION_PROTOCOL	server/migration_protocol.h	19;"	d
_H_MJPEG_DECODER	client/mjpeg_decoder.h	20;"	d
_H_MJPEG_ENCODER	server/mjpeg_encoder.h	20;"	d
_H_MONITOR	client/monitor.h	19;"	d
_H_MUTEX	spice-common/common/mutex.h	20;"	d
_H_NAMED_PIPE	client/windows/named_pipe.h	19;"	d
_H_NAMED_PIPE	client/x11/named_pipe.h	19;"	d
_H_PIXELE_SOURSR_P	client/windows/pixels_source_p.h	19;"	d
_H_PIXELE_SOURSR_P	client/x11/pixels_source_p.h	19;"	d
_H_PIXELS_SOURCE	client/pixels_source.h	19;"	d
_H_PLATFORM	client/platform.h	19;"	d
_H_PLATFORM_UTILS	client/windows/platform_utils.h	19;"	d
_H_PLATFORM_UTILS	client/x11/platform_utils.h	19;"	d
_H_PROCESS_LOOP	client/process_loop.h	19;"	d
_H_QXL_DEV	spice-common/spice-protocol/spice/qxl_dev.h	33;"	d
_H_QXL_WINDOWS	spice-common/spice-protocol/spice/qxl_windows.h	2;"	d
_H_READ_WRITE_MUTEX	client/read_write_mutex.h	19;"	d
_H_RECT	spice-common/common/rect.h	20;"	d
_H_REDCHANNEL	client/red_channel.h	19;"	d
_H_REDCLIENT	client/red_client.h	19;"	d
_H_REDMEMSLOTS	server/red_memslots.h	20;"	d
_H_REDPEER	client/red_peer.h	19;"	d
_H_REDS	server/reds.h	19;"	d
_H_REDS_GL_CANVAS	server/reds_gl_canvas.h	19;"	d
_H_REDS_STREAM	server/reds_stream.h	19;"	d
_H_REDS_SW_CANVAS	server/reds_sw_canvas.h	18;"	d
_H_REDWORKER	server/red_worker.h	19;"	d
_H_RED_CANVAS_BASE	client/red_canvas_base.h	18;"	d
_H_RED_CHANNEL	server/red_channel.h	23;"	d
_H_RED_COMMON	server/red_common.h	19;"	d
_H_RED_DISPATCHER	server/red_dispatcher.h	19;"	d
_H_RED_DRAWABLE	client/red_drawable.h	19;"	d
_H_RED_KEY	client/red_key.h	19;"	d
_H_RED_PIXMAP	client/red_pixmap.h	20;"	d
_H_RED_PIXMAP_GDI	client/red_pixmap_gdi.h	20;"	d
_H_RED_PIXMAP_GL	client/red_pixmap_gl.h	19;"	d
_H_RED_PIXMAP_SW	client/red_pixmap_sw.h	19;"	d
_H_RED_RESOURCES	client/x11/resource.h	19;"	d
_H_RED_TYPES	client/red_types.h	19;"	d
_H_RED_WINDOW	client/red_window.h	19;"	d
_H_RED_WINDOW_P	client/windows/red_window_p.h	19;"	d
_H_RED_WINDOW_P	client/x11/red_window_p.h	19;"	d
_H_REGION	spice-common/common/region.h	20;"	d
_H_RES	client/x11/res.h	19;"	d
_H_RESOURCE_PROVIDER	client/gui/resource_provider.h	19;"	d
_H_RING2	spice-common/common/ring.h	20;"	d
_H_ROP3	spice-common/common/rop3.h	20;"	d
_H_SCREEN	client/screen.h	19;"	d
_H_SCREEN_LAYER	client/screen_layer.h	19;"	d
_H_SHARED_CACHE	client/shared_cache.hpp	19;"	d
_H_SND_CODEC	spice-common/common/snd_codec.h	20;"	d
_H_SND_WORKER	server/snd_worker.h	19;"	d
_H_SPICE	server/spice.h	19;"	d
_H_SPICE_BARRIER	spice-common/spice-protocol/spice/barrier.h	33;"	d
_H_SPICE_DRAW	spice-common/common/draw.h	32;"	d
_H_SPICE_ENUMS	spice-common/spice-protocol/spice/enums.h	20;"	d
_H_SPICE_ERROR_CODES	spice-common/spice-protocol/spice/error_codes.h	32;"	d
_H_SPICE_MACROS	spice-common/spice-protocol/spice/macros.h	29;"	d
_H_SPICE_PROTOCOL	spice-common/spice-protocol/spice/protocol.h	32;"	d
_H_SPICE_RING	spice-common/spice-protocol/spice/ipc_ring.h	33;"	d
_H_SPICE_STATS	spice-common/spice-protocol/spice/stats.h	32;"	d
_H_SPICE_TIMER_QUEUE	server/spice_timer_queue.h	19;"	d
_H_SPICE_TYPES	spice-common/spice-protocol/spice/types.h	33;"	d
_H_STAT	server/stat.h	19;"	d
_H_THREADS	client/threads.h	19;"	d
_H_UTILS	client/utils.h	19;"	d
_H_VDI_DEV	spice-common/spice-protocol/spice/vdi_dev.h	32;"	d
_H_VD_AGENT	spice-common/spice-protocol/spice/vd_agent.h	32;"	d
_H_WINDOWS_AUDIO_PLAYBACK	client/windows/playback.h	19;"	d
_H_WINDOWS_RECORD	client/windows/record.h	19;"	d
_H_WINPLATFORM	client/windows/win_platform.h	19;"	d
_H_XPLATFORM	client/x11/x_platform.h	19;"	d
_H_X_ICON	client/x11/x_icon.h	19;"	d
_H_ZLIB_DECODER	client/zlib_decoder.h	20;"	d
_H_ZLIB_ENCODER	server/zlib_encoder.h	31;"	d
_H__CANVAS	spice-common/common/sw_canvas.h	20;"	d
_H__GDI_CANVAS	spice-common/common/gdi_canvas.h	20;"	d
_H__GL_CANVAS	spice-common/common/gl_canvas.h	20;"	d
_H__PIXMAN_UTILS	spice-common/common/pixman_utils.h	20;"	d
_INPUTS_CHANNEL_H_	server/inputs_channel.h	19;"	d
_LZ_COMMON_H	spice-common/common/lz_common.h	24;"	d
_LineFace	spice-common/common/lines.c	/^typedef struct _LineFace {$/;"	s	file:
_PIXEL_A	spice-common/common/quic_rgb_tmpl.c	111;"	d	file:
_PIXEL_A	spice-common/common/quic_rgb_tmpl.c	731;"	d	file:
_PIXEL_A	spice-common/common/quic_tmpl.c	49;"	d	file:
_PIXEL_A	spice-common/common/quic_tmpl.c	623;"	d	file:
_PIXEL_B	spice-common/common/quic_rgb_tmpl.c	112;"	d	file:
_PIXEL_B	spice-common/common/quic_rgb_tmpl.c	732;"	d	file:
_PIXEL_B	spice-common/common/quic_tmpl.c	50;"	d	file:
_PIXEL_B	spice-common/common/quic_tmpl.c	624;"	d	file:
_PIXEL_C	spice-common/common/quic_rgb_tmpl.c	113;"	d	file:
_PIXEL_C	spice-common/common/quic_rgb_tmpl.c	733;"	d	file:
_PIXEL_C	spice-common/common/quic_tmpl.c	51;"	d	file:
_PIXEL_C	spice-common/common/quic_tmpl.c	625;"	d	file:
_PolyEdge	spice-common/common/lines.c	/^typedef struct _PolyEdge {$/;"	s	file:
_PolySlope	spice-common/common/lines.c	/^typedef struct _PolySlope {$/;"	s	file:
_PolyVertex	spice-common/common/lines.c	/^typedef struct _PolyVertex {$/;"	s	file:
_SPICE_BOOLEAN_EXPR	spice-common/spice-protocol/spice/macros.h	170;"	d
_SPICE_MSB_MASK	spice-common/spice-protocol/spice/ipc_ring.h	49;"	d
_SPICE_MSB_MASK16	spice-common/spice-protocol/spice/ipc_ring.h	46;"	d
_SPICE_MSB_MASK4	spice-common/spice-protocol/spice/ipc_ring.h	37;"	d
_SPICE_MSB_MASK8	spice-common/spice-protocol/spice/ipc_ring.h	43;"	d
_SPICE_NEW	spice-common/common/mem.h	104;"	d
_SPICE_NEW	spice-common/common/mem.h	136;"	d
_SPICE_POWER2_ALIGN	spice-common/spice-protocol/spice/ipc_ring.h	52;"	d
_SPICE_POWER2_TO_SHIFT	spice-common/spice-protocol/spice/ipc_ring.h	66;"	d
_SPICE_RENEW	spice-common/common/mem.h	118;"	d
_SPICE_RENEW	spice-common/common/mem.h	138;"	d
_SPICE_TOSHIFT_16	spice-common/spice-protocol/spice/ipc_ring.h	63;"	d
_SPICE_TOSHIFT_4	spice-common/spice-protocol/spice/ipc_ring.h	55;"	d
_SPICE_TOSHIFT_8	spice-common/spice-protocol/spice/ipc_ring.h	60;"	d
_STDINT_H	client/windows/stdint.h	41;"	d
_SpanData	spice-common/common/lines.c	/^typedef struct _SpanData {$/;"	s	file:
_SpiceCanvas	spice-common/common/canvas_base.h	/^struct _SpiceCanvas {$/;"	s
_SpiceGlzDecoder	spice-common/common/canvas_base.h	/^struct _SpiceGlzDecoder {$/;"	s
_SpiceImageCache	spice-common/common/canvas_base.h	/^struct _SpiceImageCache {$/;"	s
_SpiceImageSurfaces	spice-common/common/canvas_base.h	/^struct _SpiceImageSurfaces {$/;"	s
_SpiceJpegDecoder	spice-common/common/canvas_base.h	/^struct _SpiceJpegDecoder {$/;"	s
_SpicePaletteCache	spice-common/common/canvas_base.h	/^struct _SpicePaletteCache {$/;"	s
_SpiceZlibDecoder	spice-common/common/canvas_base.h	/^struct _SpiceZlibDecoder {$/;"	s
_Static_assert	spice-common/common/verify.h	207;"	d
_UNICODE	client/common.h	46;"	d
_XOPEN_SOURCE	spice-common/common/lines.c	57;"	d	file:
_XOPEN_SOURCE	spice-common/common/lines.c	59;"	d	file:
__BASIC_EVENT_LOOP_H__	server/tests/basic_event_loop.h	2;"	d
__CHAR_DEVICE_H__	server/char_device.h	2;"	d
__LZ_CONFIG_H	spice-common/common/lz_config.h	22;"	d
__LZ_H	spice-common/common/lz.h	7;"	d
__MACROS_H	spice-common/common/macros.h	20;"	d
__MAIN_CHANNEL_H__	server/main_channel.h	19;"	d
__QUIC_CONFIG_H	spice-common/common/quic_config.h	20;"	d
__QUIC_H	spice-common/common/quic.h	20;"	d
__SMART_CARD_H__	client/smartcard_channel.h	18;"	d
__SMART_CARD_H__	server/smartcard.h	19;"	d
__SPICE_EXPERIMENTAL_H__	server/spice-experimental.h	2;"	d
__STDC_FORMAT_MACROS	config.h	146;"	d
__TEST_DISPLAY_BASE_H__	server/tests/test_display_base.h	2;"	d
__TEST_UTIL_H__	server/tests/test_util.h	2;"	d
__add__	spice-common/python_modules/ptypes.py	/^    def __add__(self, other):$/;"	m	class:FixedSize	file:
__blend_image	spice-common/common/sw_canvas.c	/^static void __blend_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__blend_scale_image	spice-common/common/sw_canvas.c	/^static void __blend_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__blit_image	spice-common/common/sw_canvas.c	/^static void __blit_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__blit_image_rop	spice-common/common/sw_canvas.c	/^static void __blit_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
__canvas_put_bits	spice-common/common/canvas_base.c	/^static inline void __canvas_put_bits(uint8_t *dest, int offset, uint8_t val, int n)$/;"	f	file:
__colorkey_image	spice-common/common/sw_canvas.c	/^static void __colorkey_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__colorkey_scale_image	spice-common/common/sw_canvas.c	/^static void __colorkey_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__contained_by	server/red_worker.c	/^static inline int __contained_by(RedWorker *worker, TreeItem *item, Ring *ring)$/;"	f	file:
__current_add_drawable	server/red_worker.c	/^static inline void __current_add_drawable(RedWorker *worker, Drawable *drawable, RingItem *pos)$/;"	f	file:
__enter__	spice-common/python_modules/codegen.py	/^        def __enter__(self):$/;"	m	class:CodeWriter.Block	file:
__enter__	spice-common/python_modules/codegen.py	/^        def __enter__(self):$/;"	m	class:CodeWriter.Index	file:
__enter__	spice-common/python_modules/codegen.py	/^        def __enter__(self):$/;"	m	class:CodeWriter.NoBlock	file:
__enter__	spice-common/python_modules/codegen.py	/^        def __enter__(self):$/;"	m	class:CodeWriter.PartialBlock	file:
__exclude_region	server/red_worker.c	/^static inline void __exclude_region(RedWorker *worker, Ring *ring, TreeItem *item, QRegion *rgn,$/;"	f	file:
__exclude_stat	server/red_worker.c	/^    stat_info_t __exclude_stat;$/;"	m	struct:RedWorker	file:
__exclude_stat_name	server/red_worker.c	/^static const char *__exclude_stat_name = "__exclude";$/;"	v	file:
__exit__	spice-common/python_modules/codegen.py	/^        def __exit__(self, exc_type, exc_value, traceback):$/;"	m	class:CodeWriter.Block	file:
__exit__	spice-common/python_modules/codegen.py	/^        def __exit__(self, exc_type, exc_value, traceback):$/;"	m	class:CodeWriter.Index	file:
__exit__	spice-common/python_modules/codegen.py	/^        def __exit__(self, exc_type, exc_value, traceback):$/;"	m	class:CodeWriter.NoBlock	file:
__exit__	spice-common/python_modules/codegen.py	/^        def __exit__(self, exc_type, exc_value, traceback):$/;"	m	class:CodeWriter.PartialBlock	file:
__fill_mask	spice-common/common/glc.c	/^static void __fill_mask(InternaCtx *ctx, void *data)$/;"	f	file:
__fill_tiled_rects	spice-common/common/sw_canvas.c	/^static void __fill_tiled_rects(SpiceCanvas *spice_canvas,$/;"	f	file:
__fill_tiled_rects_rop	spice-common/common/sw_canvas.c	/^static void __fill_tiled_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
__find_shadow	server/red_worker.c	/^static inline Shadow *__find_shadow(TreeItem *item)$/;"	f	file:
__get_clean_virt	server/red_memslots.c	/^static unsigned long __get_clean_virt(RedMemSlotInfo *info, QXLPHYSICAL addr)$/;"	f	file:
__get_pixels_num	server/glz_encoder_dictionary.c	/^static INLINE int __get_pixels_num(LzImageType image_type, unsigned int num_lines, int stride)$/;"	f	file:
__get_position	client/x11/red_window.cpp	/^static bool __get_position(Window window, SpicePoint& pos)$/;"	f	file:
__glz_dictionary_window_alloc_image	server/glz_encoder_dictionary.c	/^static WindowImage *__glz_dictionary_window_alloc_image(SharedDictionary *dict)$/;"	f	file:
__glz_dictionary_window_alloc_image_seg	server/glz_encoder_dictionary.c	/^static uint32_t __glz_dictionary_window_alloc_image_seg(SharedDictionary *dict)$/;"	f	file:
__glz_dictionary_window_free_image	server/glz_encoder_dictionary.c	/^static INLINE void __glz_dictionary_window_free_image(SharedDictionary *dict, WindowImage *image)$/;"	f	file:
__glz_dictionary_window_free_image_segs	server/glz_encoder_dictionary.c	/^static INLINE void __glz_dictionary_window_free_image_segs(SharedDictionary *dict,$/;"	f	file:
__glz_dictionary_window_reset_images	server/glz_encoder_dictionary.c	/^static INLINE void __glz_dictionary_window_reset_images(SharedDictionary *dict)$/;"	f	file:
__glz_dictionary_window_segs_realloc	server/glz_encoder_dictionary.c	/^static void __glz_dictionary_window_segs_realloc(SharedDictionary *dict)$/;"	f	file:
__init__	spice-common/python_modules/codegen.py	/^        def __init__(self, scope):$/;"	m	class:CodeWriter.NoBlock
__init__	spice-common/python_modules/codegen.py	/^        def __init__(self, writer, scope, semicolon, newline):$/;"	m	class:CodeWriter.PartialBlock
__init__	spice-common/python_modules/codegen.py	/^        def __init__(self, writer, semicolon, newline):$/;"	m	class:CodeWriter.Block
__init__	spice-common/python_modules/codegen.py	/^        def __init__(self, writer, val):$/;"	m	class:CodeWriter.Index
__init__	spice-common/python_modules/codegen.py	/^    def __init__(self):$/;"	m	class:CodeWriter
__init__	spice-common/python_modules/demarshal.py	/^    def __init__(self):$/;"	m	class:DemarshallingDestination
__init__	spice-common/python_modules/demarshal.py	/^    def __init__(self, member, container, start):$/;"	m	class:MemberItemInfo
__init__	spice-common/python_modules/demarshal.py	/^    def __init__(self, parent_dest, c_type, sizeof, pointer = None):$/;"	m	class:RootDemarshallingDestination
__init__	spice-common/python_modules/demarshal.py	/^    def __init__(self, parent_dest, member):$/;"	m	class:SubDemarshallingDestination
__init__	spice-common/python_modules/demarshal.py	/^    def __init__(self, type, prefix, position):$/;"	m	class:ItemInfo
__init__	spice-common/python_modules/marshal.py	/^    def __init__(self):$/;"	m	class:MarshallingSource
__init__	spice-common/python_modules/marshal.py	/^    def __init__(self, parent_src, c_type, sizeof, pointer = None):$/;"	m	class:RootMarshallingSource
__init__	spice-common/python_modules/marshal.py	/^    def __init__(self, parent_src, containee):$/;"	m	class:SubMarshallingSource
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self):$/;"	m	class:Containee
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self):$/;"	m	class:Type
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, bits, name, enums, attribute_list):$/;"	m	class:EnumType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, bits, name, flags, attribute_list):$/;"	m	class:FlagsType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, bits, signed):$/;"	m	class:IntegerType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, element_type, size):$/;"	m	class:ArrayType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name):$/;"	m	class:TypeRef
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, base, members, attribute_list):$/;"	m	class:ChannelType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, channel_type, value):$/;"	m	class:ProtocolMember
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, channels):$/;"	m	class:ProtocolType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, member_type, attribute_list):$/;"	m	class:Member
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, members, attribute_list):$/;"	m	class:MessageType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, members, attribute_list):$/;"	m	class:StructType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, message_type, value):$/;"	m	class:ChannelMember
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, name, the_type, attribute_list):$/;"	m	class:TypeAlias
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, target_type):$/;"	m	class:PointerType
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, val = 0, minor = 0):$/;"	m	class:FixedSize
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, values, member):$/;"	m	class:SwitchCase
__init__	spice-common/python_modules/ptypes.py	/^    def __init__(self, variable, cases, name, attribute_list):$/;"	m	class:Switch
__lz_free_image_seg	spice-common/common/lz.c	/^static inline void __lz_free_image_seg(Encoder *encoder, LzImageSegment *seg)$/;"	f	file:
__need_wchar_t	client/windows/stdint.h	45;"	d
__need_wint_t	client/windows/stdint.h	43;"	d
__new_channel	server/red_worker.c	/^static RedChannel *__new_channel(RedWorker *worker, int size, uint32_t channel_type,$/;"	f	file:
__new_channel	server/snd_worker.c	/^static SndChannel *__new_channel(SndWorker *worker, int size, uint32_t channel_id,$/;"	f	file:
__new_container	server/red_worker.c	/^static inline Container *__new_container(RedWorker *worker, DrawItem *item)$/;"	f	file:
__new_shadow	server/red_worker.c	/^static inline Shadow *__new_shadow(RedWorker *worker, Drawable *item, SpicePoint *delta)$/;"	f	file:
__new_stream_clip	server/red_worker.c	/^static StreamClipItem *__new_stream_clip(DisplayChannelClient* dcc, StreamAgent *agent)$/;"	f	file:
__radd__	spice-common/python_modules/ptypes.py	/^    def __radd__(self, other):$/;"	m	class:FixedSize	file:
__read_io_word	spice-common/common/quic.c	/^static void __read_io_word(Encoder *encoder)$/;"	f	file:
__read_io_word_ptr	spice-common/common/quic.c	/^static void (*__read_io_word_ptr)(Encoder *encoder) = __read_io_word;$/;"	v	file:
__red_collect_for_update	server/red_worker.c	/^static inline void __red_collect_for_update(RedWorker *worker, Ring *ring, RingItem *ring_item,$/;"	f	file:
__red_display_free_compress_buf	server/red_worker.c	/^static inline void __red_display_free_compress_buf(DisplayChannel *dc,$/;"	f	file:
__red_is_next_stream_frame	server/red_worker.c	/^static inline int __red_is_next_stream_frame(RedWorker *worker,$/;"	f	file:
__remove_key_handler	client/application.cpp	/^void Application::__remove_key_handler(KeyHandler& handler)$/;"	f	class:Application
__repr__	spice-common/python_modules/ptypes.py	/^    def __repr__(self):$/;"	m	class:ChannelMember	file:
__repr__	spice-common/python_modules/ptypes.py	/^    def __repr__(self):$/;"	m	class:Member	file:
__repr__	spice-common/python_modules/ptypes.py	/^    def __repr__(self):$/;"	m	class:ProtocolMember	file:
__repr__	spice-common/python_modules/ptypes.py	/^    def __repr__(self):$/;"	m	class:Switch	file:
__repr__	spice-common/python_modules/ptypes.py	/^    def __repr__(self):$/;"	m	class:Type	file:
__ring_remove	spice-common/common/ring.h	/^static inline void __ring_remove(RingItem *item)$/;"	f
__scale_image	spice-common/common/sw_canvas.c	/^static void __scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
__scale_image_rop	spice-common/common/sw_canvas.c	/^static void __scale_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
__show_current	server/red_worker.c	/^void __show_current(TreeItem *item, void *data)$/;"	f
__show_full_screen	client/screen.cpp	/^void RedScreen::__show_full_screen()$/;"	f	class:RedScreen
__show_tree_call	server/red_worker.c	/^static void __show_tree_call(TreeItem *item, void *data)$/;"	f	file:
__spice_char_device_write_buffer_get	server/char_device.c	/^static SpiceCharDeviceWriteBuffer *__spice_char_device_write_buffer_get($/;"	f	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:ArrayType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:ChannelType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:EnumType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:FixedSize	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:FlagsType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:MessageType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:PointerType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:ProtocolType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:StructType	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:Type	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:TypeAlias	file:
__str__	spice-common/python_modules/ptypes.py	/^    def __str__(self):$/;"	m	class:TypeRef	file:
__surface_create_stride	spice-common/common/canvas_utils.c	/^static inline pixman_image_t *__surface_create_stride(pixman_format_code_t format, int width, int height,$/;"	f	file:
__validate_surface	server/red_worker.c	/^static inline void __validate_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
__write_io_word	spice-common/common/quic.c	/^static void __write_io_word(Encoder *encoder)$/;"	f	file:
__write_io_word_ptr	spice-common/common/quic.c	/^static void (*__write_io_word_ptr)(Encoder *encoder) = __write_io_word;$/;"	v	file:
_abort_trigger	client/red_channel.h	/^    AbortTrigger _abort_trigger;$/;"	m	class:RedChannel
_aborting	client/glz_decoder_window.h	/^    bool _aborting;$/;"	m	class:GlzDecoderWindow
_aborting	client/red_client.h	/^    bool _aborting;$/;"	m	class:Migrate
_aborting	client/red_client.h	/^    bool _aborting;$/;"	m	class:RedClient
_aborting	client/shared_cache.hpp	/^    bool _aborting;$/;"	m	class:SharedCache
_action	client/red_channel.h	/^    int _action;$/;"	m	class:RedChannel
_action_cond	client/red_channel.h	/^    Condition _action_cond;$/;"	m	class:RedChannel
_action_lock	client/red_channel.h	/^    Mutex _action_lock;$/;"	m	class:RedChannel
_active	client/application.h	/^    bool _active;$/;"	m	class:Application
_active	client/foreign_menu.h	/^    bool _active;$/;"	m	class:ForeignMenu
_active	client/screen.h	/^    bool _active;$/;"	m	class:RedScreen
_active	client/windows/platform.cpp	/^    bool _active;$/;"	m	class:WinMonitor	file:
_active_layer_change_event	client/screen.h	/^    bool _active_layer_change_event;$/;"	m	class:RedScreen
_active_modifiers_event	client/inputs_channel.h	/^    bool _active_modifiers_event;$/;"	m	class:InputsChannel
_active_motion	client/inputs_channel.h	/^    bool _active_motion;$/;"	m	class:InputsChannel
_active_pointer	client/display_channel.h	/^    bool _active_pointer;$/;"	m	class:DisplayChannel
_active_screen	client/application.h	/^    RedScreen* _active_screen;$/;"	m	class:Application
_active_streams	client/display_channel.h	/^    VideoStream* _active_streams;$/;"	m	class:DisplayChannel
_agent_caps	client/red_client.h	/^    uint32_t *_agent_caps;$/;"	m	class:RedClient
_agent_caps_size	client/red_client.h	/^    uint32_t _agent_caps_size;$/;"	m	class:RedClient
_agent_connected	client/red_client.h	/^    bool _agent_connected;$/;"	m	class:RedClient
_agent_disp_config_sent	client/red_client.h	/^    bool _agent_disp_config_sent;$/;"	m	class:RedClient
_agent_mon_config_sent	client/red_client.h	/^    bool _agent_mon_config_sent;$/;"	m	class:RedClient
_agent_msg	client/red_client.h	/^    VDAgentMessage* _agent_msg;$/;"	m	class:RedClient
_agent_msg_data	client/red_client.h	/^    uint8_t* _agent_msg_data;$/;"	m	class:RedClient
_agent_msg_pos	client/red_client.h	/^    uint32_t _agent_msg_pos;$/;"	m	class:RedClient
_agent_out_msg	client/red_client.h	/^    VDAgentMessage* _agent_out_msg;$/;"	m	class:RedClient
_agent_out_msg_pos	client/red_client.h	/^    uint32_t _agent_out_msg_pos;$/;"	m	class:RedClient
_agent_out_msg_size	client/red_client.h	/^    uint32_t _agent_out_msg_size;$/;"	m	class:RedClient
_agent_reply_wait_type	client/red_client.h	/^    uint32_t _agent_reply_wait_type;$/;"	m	class:RedClient
_agent_timer	client/red_client.h	/^    AutoRef<AgentTimer> _agent_timer;$/;"	m	class:RedClient
_agent_tokens	client/red_client.h	/^    uint32_t _agent_tokens;$/;"	m	class:RedClient
_alpha	client/gui/gui.cpp	/^        float _alpha;$/;"	m	class:GUI::Dialog::UndimInfo	file:
_alt_image	client/x11/images/alt_image.c	/^} _alt_image = { 81, 54, {$/;"	v	typeref:struct:__anon122	file:
_app	client/application.cpp	/^    Application& _app;$/;"	m	class:AutoAbort	file:
_app	client/application.cpp	/^    Application& _app;$/;"	m	class:TestTimer	file:
_app	client/gui/gui.h	/^    Application& _app;$/;"	m	class:GUI
_app	client/smartcard_channel.h	/^    Application* _app;$/;"	m	class:SmartCardChannel
_app_menu	client/application.h	/^    AutoRef<Menu> _app_menu;$/;"	m	class:Application
_app_menu_items	client/application.h	/^    AppMenuItemMap _app_menu_items;$/;"	m	class:Application
_application	client/red_client.h	/^    Application& _application;$/;"	m	class:RedClient
_area	client/screen_layer.h	/^    QRegion _area;$/;"	m	class:ScreenLayer
_area_lock	client/screen_layer.h	/^    Mutex _area_lock;$/;"	m	class:ScreenLayer
_argc	client/cmd_line_parser.h	/^    int _argc;$/;"	m	class:CmdLineParser
_argv	client/cmd_line_parser.h	/^    char** _argv;$/;"	m	class:CmdLineParser
_armed_timers	client/process_loop.h	/^    TimersSet _armed_timers;$/;"	m	class:TimersQueue
_array	client/utils.h	/^    T* _array;$/;"	m	class:AutoArray
_atomic	client/cursor.h	/^    AtomicCount _atomic;$/;"	m	class:CursorData
_atomic	client/cursor.h	/^    AtomicCount _atomic;$/;"	m	class:LocalCursor
_auth_options	client/red_client.h	/^    RedPeer::HostAuthOptions _auth_options;$/;"	m	class:Migrate
_auto_display_res	client/controller.h	/^    bool _auto_display_res;$/;"	m	class:ControllerConnection
_auto_display_res	client/red_client.h	/^    bool _auto_display_res;$/;"	m	class:RedClient
_back_compat	client/mjpeg_decoder.h	/^    bool _back_compat;$/;"	m	class:MJpegDecoder
_box_response	client/gui/gui.cpp	/^    BoxResponse* _box_response;$/;"	m	class:GUI::Dialog	file:
_box_response	client/gui/gui.cpp	/^    GUI::BoxResponse* _box_response;$/;"	m	class:BoxAbortEvent	file:
_box_response	client/gui/gui.cpp	/^    GUI::BoxResponse* _box_response;$/;"	m	class:BoxResponseEvent	file:
_broken	client/x11/platform.cpp	/^    bool _broken;$/;"	m	class:XScreen	file:
_buckets_ptrs	spice-common/common/quic.c	/^    s_bucket **_buckets_ptrs;$/;"	m	struct:Channel	file:
_buttons_state	client/display_channel.h	/^    int _buttons_state;$/;"	m	class:DisplayChannel
_bytes_per_pixel	client/glz_decoded_image.h	/^    int _bytes_per_pixel;  \/\/ if image is with palette pixel=byte$/;"	m	class:GlzDecodedImage
_canvas	client/canvas.h	/^    SpiceCanvas* _canvas;$/;"	m	class:Canvas
_canvas	client/display_channel.cpp	/^    Canvas& _canvas;$/;"	m	class:VideoStream	file:
_canvas_types	client/application.h	/^    std::vector<int> _canvas_types;$/;"	m	class:Application
_caps	client/red_channel.h	/^    ChannelCaps _caps;$/;"	m	class:RedChannelBase
_capture_mode	client/red_client.cpp	/^        bool _capture_mode;$/;"	m	class:MouseModeEvent::SetModeFunc	file:
_capture_mouse_mode	client/display_channel.h	/^    bool _capture_mouse_mode;$/;"	m	class:DisplayChannel
_cert_subject	client/application.h	/^    std::string _cert_subject;$/;"	m	class:SwitchHostEvent
_changing_screens	client/application.h	/^    bool _changing_screens;$/;"	m	class:Application
_channel	client/cursor_channel.cpp	/^        CursorChannel& _channel;$/;"	m	class:AttachDispayEvent::UpdateDisplayChannel	file:
_channel	client/cursor_channel.cpp	/^    CursorChannel& _channel;$/;"	m	class:AttachDispayEvent	file:
_channel	client/cursor_channel.cpp	/^    CursorChannel& _channel;$/;"	m	class:CursorUpdateEvent	file:
_channel	client/display_channel.cpp	/^        DisplayChannel& _channel;$/;"	m	class:AttachChannelsEvent::AttachChannels	file:
_channel	client/display_channel.cpp	/^        DisplayChannel& _channel;$/;"	m	class:DetachChannelsEvent::DetatchChannels	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:ActivateTimerEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:AttachChannelsEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:CreatePrimarySurfaceEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:CreateSurfaceEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:DestroyAllSurfacesEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:DestroyPrimarySurfaceEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:DestroySurfaceEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:DetachChannelsEvent	file:
_channel	client/display_channel.cpp	/^    DisplayChannel& _channel;$/;"	m	class:VideoStream	file:
_channel	client/display_channel.h	/^    DisplayChannel& _channel;$/;"	m	class:GLInterruptRecreate
_channel	client/display_channel.h	/^    DisplayChannel& _channel;$/;"	m	class:InterruptUpdate
_channel	client/display_channel.h	/^    DisplayChannel& _channel;$/;"	m	class:StreamsTimer
_channel	client/display_channel.h	/^    DisplayChannel& _channel;$/;"	m	class:StreamsTrigger
_channel	client/inputs_channel.cpp	/^        InputsChannel& _channel;$/;"	m	class:SetInputsHandlerEvent::AttachFunc	file:
_channel	client/inputs_channel.cpp	/^    InputsChannel& _channel;$/;"	m	class:KeyModifiersEvent	file:
_channel	client/inputs_channel.cpp	/^    InputsChannel& _channel;$/;"	m	class:MotionMessage	file:
_channel	client/inputs_channel.cpp	/^    InputsChannel& _channel;$/;"	m	class:PositionMessage	file:
_channel	client/inputs_channel.cpp	/^    InputsChannel& _channel;$/;"	m	class:RemoveInputsHandlerEvent	file:
_channel	client/inputs_channel.cpp	/^    InputsChannel& _channel;$/;"	m	class:SetInputsHandlerEvent	file:
_channel	client/record_channel.cpp	/^    RecordChannel& _channel;$/;"	m	class:RecordSamplesMessage	file:
_channel	client/red_channel.h	/^    RedChannel& _channel;$/;"	m	class:SendTrigger
_channels	client/red_client.h	/^    Channels _channels;$/;"	m	class:RedClient
_channels	client/red_client.h	/^    MigChannels _channels;$/;"	m	class:Migrate
_channels_lock	client/red_client.h	/^    Mutex _channels_lock;$/;"	m	class:RedClient
_check_diff	client/display_channel.h	/^    bool _check_diff;$/;"	m	class:DisplayChannel
_cinfo	client/jpeg_decoder.h	/^    struct jpeg_decompress_struct _cinfo;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::jpeg_decompress_struct
_cinfo	client/mjpeg_decoder.h	/^    struct jpeg_decompress_struct _cinfo;$/;"	m	class:MJpegDecoder	typeref:struct:MJpegDecoder::jpeg_decompress_struct
_client	client/application.h	/^    RedClient _client;$/;"	m	class:Application
_client	client/display_channel.cpp	/^    RedClient& _client;$/;"	m	class:ResetTimer	file:
_client	client/display_channel.cpp	/^    RedClient& _client;$/;"	m	class:VideoStream	file:
_client	client/red_channel.h	/^    RedClient& _client;$/;"	m	class:RedChannel
_client	client/red_client.cpp	/^    RedClient& _client;$/;"	m	class:MouseModeEvent	file:
_client	client/red_client.h	/^    RedClient *_client;$/;"	m	class:AgentTimer
_client	client/red_client.h	/^    RedClient& _client;$/;"	m	class:Migrate
_client	client/windows/record.h	/^    Platform::RecordClient& _client;$/;"	m	class:WaveRecorder
_client	client/x11/record.h	/^    Platform::RecordClient& _client;$/;"	m	class:WaveRecorder
_clip	client/display_channel.cpp	/^    QRegion* _clip;$/;"	m	class:VideoStream	file:
_clip_region	client/display_channel.cpp	/^    QRegion _clip_region;$/;"	m	class:VideoStream	file:
_clipboard_owner	client/platform.h	/^    static int _clipboard_owner;$/;"	m	class:Platform
_clipboard_owner	client/windows/platform.cpp	/^int Platform::_clipboard_owner = Platform::owner_none;$/;"	m	class:Platform	file:
_clipboard_owner	client/x11/platform.cpp	/^int Platform::_clipboard_owner = Platform::owner_none;$/;"	m	class:Platform	file:
_clones	client/x11/platform.cpp	/^    XMonitorsList _clones;$/;"	m	class:XMonitor	file:
_close_on_message_click	client/gui/gui.cpp	/^    bool _close_on_message_click;$/;"	m	class:GUI::Dialog	file:
_close_pending	client/client_net_socket.h	/^    bool _close_pending;$/;"	m	class:ClientNetSocket
_cmd_id	client/menu.h	/^        int _cmd_id;$/;"	m	class:Menu::MenuCommand
_codec	client/audio_channels.h	/^    SndCodec  _codec;$/;"	m	class:PlaybackChannel
_codec	client/audio_channels.h	/^    SndCodec _codec;$/;"	m	class:RecordChannel
_color_depth	client/red_client.h	/^    uint32_t _color_depth;$/;"	m	class:DisplaySetting
_colormap	client/x11/red_window_p.h	/^    Colormap _colormap;$/;"	m	class:RedWindow_p
_commands_map	client/application.h	/^    CommandsMap _commands_map;$/;"	m	class:Application
_commands_map	client/windows/red_window_p.h	/^    CommandMap _commands_map;$/;"	m	class:RedWindow_p
_common_caps	client/red_channel.h	/^    ChannelCaps _common_caps;$/;"	m	class:RedChannelBase
_composit_area	client/screen.h	/^    RedDrawable* _composit_area;$/;"	m	class:RedScreen
_composit_area	client/screen_layer.h	/^    QRegion _composit_area;$/;"	m	class:ScreenLayer
_con_ciphers	client/application.h	/^    std::string _con_ciphers;$/;"	m	class:Application
_con_ciphers	client/red_client.h	/^    std::string _con_ciphers;$/;"	m	class:Migrate
_con_ciphers	client/red_client.h	/^    std::string _con_ciphers;$/;"	m	class:RedClient
_con_opt_map	client/red_client.h	/^    PeerConnectionOptMap _con_opt_map;$/;"	m	class:RedClient
_cond	client/display_channel.h	/^    Condition _cond;$/;"	m	class:GLInterruptRecreate
_cond	client/red_client.h	/^    Condition _cond;$/;"	m	class:Migrate
_condition	client/process_loop.h	/^    Condition _condition;$/;"	m	class:SyncEvent
_condition	client/threads.h	/^    pthread_cond_t _condition;$/;"	m	class:Condition
_conn_interface	client/x11/named_pipe.h	/^    NamedPipe::ConnectionInterface *_conn_interface;$/;"	m	class:Session
_connected	client/red_client.h	/^    bool _connected;$/;"	m	class:Migrate
_connection_id	client/red_client.h	/^    uint32_t _connection_id;$/;"	m	class:RedClient
_connections	client/controller.h	/^    std::map<NamedPipe::ConnectionRef, ControllerConnection*> _connections;$/;"	m	class:Controller
_connections	client/foreign_menu.h	/^    std::map<NamedPipe::ConnectionRef, ForeignMenuConnection*> _connections;$/;"	m	class:ForeignMenu
_container	client/x11/platform.cpp	/^    MultyMonScreen& _container;$/;"	m	class:XMonitor	file:
_controller	client/application.h	/^    AutoRef<Controller> _controller;$/;"	m	class:Application
_count	client/windows/atomic_count.h	/^    LONG _count;$/;"	m	class:AtomicCount
_count	client/x11/atomic_count.h	/^    uint32_t _count;$/;"	m	class:AtomicCount
_crtc	client/x11/platform.cpp	/^    RRCrtc _crtc;$/;"	m	class:XMonitor	file:
_ctx	client/red_peer.h	/^    SSL_CTX *_ctx;$/;"	m	class:RedPeer
_cursor	client/application.cpp	/^    AutoRef<LocalCursor> _cursor;$/;"	m	class:GUIBarrier	file:
_cursor	client/cursor_channel.h	/^    CursorData* _cursor;$/;"	m	class:CursorChannel
_cursor	client/display_channel.h	/^    AutoRef<CursorData> _cursor;$/;"	m	class:DisplayChannel
_cursor	server/red_worker.c	/^    SpiceCursor _cursor;$/;"	m	struct:CursorData	file:
_cursor_cache	client/cursor_channel.h	/^    CursorCache _cursor_cache;$/;"	m	class:CursorChannel
_cursor_count	server/red_worker.c	/^static int _cursor_count = 0;$/;"	v	file:
_cursor_rect	client/cursor_channel.h	/^    SpiceRect _cursor_rect;$/;"	m	class:CursorChannel
_cursor_visibal	client/display_channel.h	/^    bool _cursor_visibal;$/;"	m	class:DisplayChannel
_cursor_visible	client/cursor_channel.h	/^    bool _cursor_visible;$/;"	m	class:CursorChannel
_cursor_visible	client/red_window.h	/^    bool _cursor_visible;$/;"	m	class:RedWindow
_data	client/cursor.h	/^    uint8_t* _data;$/;"	m	class:CursorData
_data	client/glz_decoded_image.h	/^    uint8_t *_data;$/;"	m	class:GlzDecodedImage
_data	client/jpeg_decoder.h	/^    uint8_t* _data;$/;"	m	class:JpegDecoder
_data	client/mjpeg_decoder.h	/^    uint8_t *_data;$/;"	m	class:MJpegDecoder
_data	client/red_client.h	/^    uint8_t *_data;$/;"	m	class:ClipboardNotifyEvent
_data	client/red_peer.h	/^    uint8_t* _data;$/;"	m	class:RedPeer::InMessage
_data	client/red_pixmap.h	/^    uint8_t* _data;$/;"	m	class:RedPixmap
_data	client/windows/named_pipe.h	/^    uint8_t _data[PIPE_BUF_SIZE];$/;"	m	class:PipeBuffer
_data_end	client/mjpeg_decoder.h	/^    size_t _data_end;$/;"	m	class:MJpegDecoder
_data_size	client/jpeg_decoder.h	/^    int _data_size;$/;"	m	class:JpegDecoder
_data_size	client/mjpeg_decoder.h	/^    size_t _data_size;$/;"	m	class:MJpegDecoder
_data_start	client/mjpeg_decoder.h	/^    size_t _data_start;$/;"	m	class:MJpegDecoder
_dc	client/display_channel.cpp	/^    HDC _dc;$/;"	m	class:VideoStream	file:
_dc	client/red_gdi_canvas.h	/^    HDC _dc;$/;"	m	class:GDICanvas
_dc	client/windows/platform_utils.h	/^    HDC _dc;$/;"	m	class:WindowDC
_debug_calls	client/glz_decoder.h	/^    GlzDecoderDebug  &_debug_calls;$/;"	m	class:GlzDecoder
_debug_calls	client/glz_decoder_window.h	/^    GlzDecoderDebug &_debug_calls;$/;"	m	class:GlzDecoderWindow
_default_cursor	client/screen.h	/^    LocalCursor* _default_cursor;$/;"	m	class:RedScreen
_depth	client/windows/platform.cpp	/^    int _depth;$/;"	m	class:WinMonitor	file:
_description	client/cmd_line_parser.h	/^    std::string _description;$/;"	m	class:CmdLineParser
_dest	client/display_channel.cpp	/^    SpiceRect _dest;$/;"	m	class:VideoStream	file:
_destroy_image_codec	client/gui/softrenderer.h	/^        void (*_destroy_image_codec)(ImageCodec*);$/;"	m	class:CEGUI::SoftRenderer
_dev_name	client/windows/platform.cpp	/^    std::wstring _dev_name;$/;"	m	class:WinMonitor	file:
_dev_string	client/windows/platform.cpp	/^    std::wstring _dev_string;$/;"	m	class:WinMonitor	file:
_dialog	client/gui/gui.cpp	/^        Dialog& _dialog;$/;"	m	class:GUI::Dialog::BottonAction	file:
_dialog	client/gui/gui.h	/^    Dialog* _dialog;$/;"	m	class:GUI
_direct_area	client/screen_layer.h	/^    QRegion _direct_area;$/;"	m	class:ScreenLayer
_directfbrenderer_h_	client/gui/softrenderer.h	19;"	d
_dirty_region	client/screen.h	/^    QRegion _dirty_region;$/;"	m	class:RedScreen
_disable_animation	client/red_client.h	/^    bool _disable_animation;$/;"	m	class:DisplaySetting
_disable_font_smooth	client/red_client.h	/^    bool _disable_font_smooth;$/;"	m	class:DisplaySetting
_disable_wallpaper	client/red_client.h	/^    bool _disable_wallpaper;$/;"	m	class:DisplaySetting
_disconnect_reason	client/red_channel.h	/^    uint64_t _disconnect_reason;$/;"	m	class:RedChannel
_disconnect_stamp	client/red_channel.h	/^    uint64_t _disconnect_stamp;$/;"	m	class:RedChannel
_display	client/x11/platform.cpp	/^    Display* _display;$/;"	m	class:XScreen	file:
_display_channel	client/cursor_channel.h	/^    DisplayChannel* _display_channel;$/;"	m	class:CursorChannel
_display_id	client/inputs_channel.h	/^    int _display_id;$/;"	m	class:InputsChannel
_display_setting	client/red_client.h	/^    DisplaySetting _display_setting;$/;"	m	class:RedClient
_done	client/cmd_line_parser.h	/^    bool _done;$/;"	m	class:CmdLineParser
_during_host_switch	client/application.h	/^    bool _during_host_switch;$/;"	m	class:Application
_during_migration	client/red_client.h	/^    bool _during_migration;$/;"	m	class:RedClient
_enable_controller	client/application.h	/^    bool _enable_controller;$/;"	m	class:Application
_enabled_channels	client/application.h	/^    std::vector<bool> _enabled_channels;$/;"	m	class:Application
_end	client/windows/named_pipe.h	/^    uint32_t _end;$/;"	m	class:PipeBuffer
_err	client/process_loop.h	/^    bool _err;$/;"	m	class:SyncEvent
_erro_code	client/utils.h	/^    int _erro_code;$/;"	m	class:Exception
_error	client/red_channel.h	/^    int _error;$/;"	m	class:RedChannel
_error_code	client/application.h	/^    int _error_code;$/;"	m	class:DisconnectedEvent
_error_code	client/process_loop.cpp	/^    int _error_code;$/;"	m	class:ProcessLoop::QuitEvent	file:
_event_fd	client/x11/event_sources_p.h	/^    int _event_fd;$/;"	m	class:Trigger_p
_event_handler	client/client_net_socket.h	/^    EventHandler& _event_handler;$/;"	m	class:ClientNetSocket
_event_sources	client/process_loop.h	/^    EventSources _event_sources;$/;"	m	class:ProcessLoop
_event_thread	client/smartcard_channel.h	/^    Thread* _event_thread;$/;"	m	class:SmartCardChannel
_event_trigger	client/x11/record.h	/^    EventTrigger* _event_trigger;$/;"	m	class:WaveRecorder
_event_write_fd	client/x11/event_sources_p.h	/^    int _event_write_fd;$/;"	m	class:Trigger_p
_events	client/process_loop.h	/^    std::list<Event*> _events;$/;"	m	class:EventsQueue
_events	client/x11/event_sources_p.h	/^    std::vector<EventSource*> _events;$/;"	m	class:EventSources_p
_events_gen	client/process_loop.h	/^    uint32_t _events_gen;$/;"	m	class:EventsQueue
_events_lock	client/process_loop.h	/^    Mutex _events_lock;$/;"	m	class:EventsQueue
_events_loop	client/x11/named_pipe.h	/^    ProcessLoop &_events_loop;$/;"	m	class:LinuxListener
_events_loop	client/x11/named_pipe.h	/^    ProcessLoop &_events_loop;$/;"	m	class:Session
_events_queue	client/process_loop.h	/^    EventsQueue _events_queue;$/;"	m	class:ProcessLoop
_exclusive	client/controller.h	/^    bool _exclusive;$/;"	m	class:Controller
_exit_code	client/application.h	/^    int _exit_code;$/;"	m	class:Application
_exit_code	client/process_loop.h	/^    int _exit_code;$/;"	m	class:ProcessLoop
_expect_parent	client/x11/red_window_p.h	/^    bool _expect_parent;$/;"	m	class:RedWindow_p
_expiration	client/process_loop.h	/^    uint64_t _expiration;$/;"	m	class:Timer
_extra_skip	client/mjpeg_decoder.h	/^    size_t _extra_skip;$/;"	m	class:MJpegDecoder
_factorys	client/red_client.h	/^    Factorys _factorys;$/;"	m	class:RedClient
_fd	client/x11/record.cpp	/^    int _fd;$/;"	m	class:WaveRecorder::EventTrigger	file:
_fd_client	client/x11/named_pipe.h	/^    int _fd_client;$/;"	m	class:Session
_fds	client/x11/event_sources_p.h	/^    std::vector<int> _fds;$/;"	m	class:EventSources_p
_fin_pending	client/client_net_socket.h	/^    bool _fin_pending;$/;"	m	class:ClientNetSocket
_focused	client/windows/red_window_p.h	/^    bool _focused;$/;"	m	class:RedWindow_p
_focused	client/x11/red_window_p.h	/^    bool _focused;$/;"	m	class:RedWindow_p
_force_update_timer	client/screen.h	/^    int _force_update_timer;$/;"	m	class:RedScreen
_foreign_menu	client/application.h	/^    AutoRef<ForeignMenu> _foreign_menu;$/;"	m	class:Application
_foreign_menu	client/foreign_menu.h	/^    NamedPipe::ListenerRef _foreign_menu;$/;"	m	class:ForeignMenu
_format	client/display_channel.cpp	/^    uint32_t _format;$/;"	m	class:CreatePrimarySurfaceEvent	file:
_format	client/display_channel.cpp	/^    uint32_t _format;$/;"	m	class:CreateSurfaceEvent	file:
_format	client/display_channel.h	/^    uint32_t _format;$/;"	m	class:DisplayChannel
_format	client/red_pixmap.h	/^    Format _format;$/;"	m	class:RedPixmap
_format	client/windows/red_window_p.h	/^    RedDrawable::Format _format;$/;"	m	class:RedWindow_p
_frame	client/mjpeg_decoder.h	/^    uint8_t *_frame;$/;"	m	class:MJpegDecoder
_frame	client/windows/record.h	/^    uint8_t* _frame;$/;"	m	class:WaveRecorder
_frame	client/x11/record.h	/^    uint8_t* _frame;$/;"	m	class:WaveRecorder
_frame_area	client/screen.h	/^    bool _frame_area;$/;"	m	class:RedScreen
_frame_bytes	client/audio_channels.h	/^    uint32_t _frame_bytes;$/;"	m	class:PlaybackChannel
_frame_bytes	client/audio_channels.h	/^    uint32_t _frame_bytes;$/;"	m	class:RecordChannel
_frame_bytes	client/windows/playback.h	/^    uint32_t _frame_bytes;$/;"	m	class:WavePlayer
_frame_count	client/audio_channels.h	/^    uint32_t _frame_count;$/;"	m	class:PlaybackChannel
_frame_end	client/windows/record.h	/^    uint8_t* _frame_end;$/;"	m	class:WaveRecorder
_frame_end	client/x11/record.h	/^    uint8_t* _frame_end;$/;"	m	class:WaveRecorder
_frame_pos	client/windows/record.h	/^    uint8_t* _frame_pos;$/;"	m	class:WaveRecorder
_frame_pos	client/x11/record.h	/^    uint8_t* _frame_pos;$/;"	m	class:WaveRecorder
_frame_size	client/x11/playback.h	/^    uint32_t _frame_size;$/;"	m	class:WavePlayer
_frame_size	client/x11/record.h	/^    uint32_t _frame_size;$/;"	m	class:WaveRecorder
_frames	client/display_channel.cpp	/^    VideoFrame _frames[MAX_VIDEO_FRAMES];$/;"	m	class:VideoStream	file:
_frames_head	client/display_channel.cpp	/^    uint32_t _frames_head;$/;"	m	class:VideoStream	file:
_frames_tail	client/display_channel.cpp	/^    uint32_t _frames_tail;$/;"	m	class:VideoStream	file:
_free	client/monitor.h	/^    bool _free;$/;"	m	class:Monitor
_free_res	client/utils.h	/^    FreeRes _free_res;$/;"	m	class:_AutoRes
_ftime_s	client/common.h	53;"	d
_ftime_s	client/threads.cpp	36;"	d	file:
_full_screen	client/application.h	/^    bool _full_screen;$/;"	m	class:Application
_full_screen	client/controller.h	/^    bool _full_screen;$/;"	m	class:ControllerConnection
_full_screen	client/screen.h	/^    bool _full_screen;$/;"	m	class:RedScreen
_generation	client/process_loop.h	/^    uint32_t _generation;$/;"	m	class:Event
_get_bitmap_graduality_level	server/red_worker.c	/^static BitmapGradualType _get_bitmap_graduality_level(RedWorker *worker, SpiceBitmap *bitmap,$/;"	f	file:
_gl_interrupt_recreate	client/display_channel.h	/^    GLInterruptRecreate _gl_interrupt_recreate;$/;"	m	class:DisplayChannel
_gl_verify_error_if_negative	spice-common/common/verify.h	/^    unsigned int _gl_verify_error_if_negative: w;$/;"	m	struct:_gl_verify_type
_gl_verify_type	spice-common/common/verify.h	/^  struct _gl_verify_type {$/;"	s
_glc_fill_mask	spice-common/common/glc.c	/^void _glc_fill_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	f
_glcont	client/red_pixmap_gl.h	/^    RedGlContext _glcont;$/;"	m	class:RedPixmapGL
_glz_debug	client/canvas.h	/^    GlzDecoderCanvasDebug _glz_debug;$/;"	m	class:Canvas
_glz_debug	client/red_client.h	/^    GlzDecoderWindowDebug _glz_debug;$/;"	m	class:RedClient
_glz_decoder	client/canvas.h	/^    GlzDecoder _glz_decoder;$/;"	m	class:Canvas
_glz_handler	client/canvas.h	/^    GlzDecodeSurfaceHandler _glz_handler;$/;"	m	class:Canvas
_glz_window	client/display_channel.h	/^    GlzDecoderWindow& _glz_window;$/;"	m	class:DisplayChannel
_glz_window	client/red_client.h	/^    GlzDecoderWindow _glz_window;$/;"	m	class:RedClient
_glz_window_size	client/red_client.h	/^    unsigned int _glz_window_size; \/\/ in pixels$/;"	m	class:RedClient
_gnutls_hostname_compare	spice-common/common/ssl_verify.c	/^static int _gnutls_hostname_compare(const char *certname,$/;"	f	file:
_gui	client/application.cpp	/^    GUI& _gui;$/;"	m	class:GUITimer	file:
_gui	client/application.h	/^    std::auto_ptr<GUI> _gui;$/;"	m	class:Application
_gui	client/gui/gui.cpp	/^    GUI& _gui;$/;"	m	class:GUI::Dialog	file:
_gui_barriers	client/application.h	/^    GUIBarriers _gui_barriers;$/;"	m	class:Application
_gui_mode	client/application.h	/^    GuiMode _gui_mode;$/;"	m	class:Application
_gui_system	client/gui/gui.h	/^    CEGUI::System* _gui_system;$/;"	m	class:GUI
_gui_test_timer	client/application.h	/^    AutoRef<TestTimer> _gui_test_timer;$/;"	m	class:Application
_gui_timer	client/application.h	/^    AutoRef<GUITimer> _gui_timer;$/;"	m	class:Application
_handle	client/windows/platform.cpp	/^    HCURSOR _handle;$/;"	m	class:WinBaseLocalCursor	file:
_handle	client/x11/platform.cpp	/^    Cursor _handle;$/;"	m	class:XBaseLocalCursor	file:
_handler	client/controller.h	/^    ControllerInterface *_handler;$/;"	m	class:Controller
_handler	client/controller.h	/^    ControllerInterface *_handler;$/;"	m	class:ControllerConnection
_handler	client/foreign_menu.h	/^    ForeignMenuInterface *_handler;$/;"	m	class:ForeignMenu
_handler	client/foreign_menu.h	/^    ForeignMenuInterface *_handler;$/;"	m	class:ForeignMenuConnection
_handler	client/windows/named_pipe.h	/^    NamedPipe::ConnectionInterface *_handler;$/;"	m	class:PipeBuffer
_handlers	client/red_channel.h	/^    Handler *_handlers;$/;"	m	class:MessageHandlerImp
_hash	client/cache.hpp	/^    Item* _hash[HASH_SIZE];$/;"	m	class:Cache
_hash	client/shared_cache.hpp	/^    Item* _hash[HASH_SIZE];$/;"	m	class:SharedCache
_head	client/windows/playback.h	/^    uint32_t _head;$/;"	m	class:WavePlayer
_head	client/windows/record.h	/^    uint32_t _head;$/;"	m	class:WaveRecorder
_head_idx	client/glz_decoder_window.h	/^    int _head_idx;            \/\/ index in images array (not image id)$/;"	m	class:GlzDecoderWindow
_header	client/cursor.h	/^    SpiceCursorHeader _header;$/;"	m	class:CursorData
_height	client/cursor_channel.cpp	/^    int _height;$/;"	m	class:MonoCursor	file:
_height	client/display_channel.cpp	/^    int _height;$/;"	m	class:CreatePrimarySurfaceEvent	file:
_height	client/display_channel.cpp	/^    int _height;$/;"	m	class:CreateSurfaceEvent	file:
_height	client/gui/softrenderer.h	/^        int _height;$/;"	m	class:CEGUI::SoftRenderer
_height	client/gui/softtexture.h	/^        ushort _height;$/;"	m	class:CEGUI::SoftTexture
_height	client/jpeg_decoder.h	/^    int _height;$/;"	m	class:JpegDecoder
_height	client/mjpeg_decoder.h	/^    unsigned _height;$/;"	m	class:MJpegDecoder
_height	client/red_pixmap.h	/^    int _height;$/;"	m	class:RedPixmap
_height	client/windows/platform.cpp	/^    int _height;$/;"	m	class:WinMonitor	file:
_height	client/x11/platform.cpp	/^    int _height;$/;"	m	class:XScreen	file:
_height	client/x11/red_window_p.h	/^    int _height;$/;"	m	class:RedWindow_p
_helper_pixmap	client/red_gdi_canvas.h	/^    RedPixmapGdi *_helper_pixmap;$/;"	m	class:GDICanvas
_host	client/application.h	/^    std::string _host;$/;"	m	class:SwitchHostEvent
_host	client/controller.h	/^    std::string _host;$/;"	m	class:ControllerConnection
_host	client/red_client.h	/^    std::string _host;$/;"	m	class:Migrate
_host	client/red_client.h	/^    std::string _host;$/;"	m	class:RedClient
_host_auth_opt	client/application.h	/^    RedPeer::HostAuthOptions _host_auth_opt;$/;"	m	class:Application
_host_auth_opt	client/red_client.h	/^    RedPeer::HostAuthOptions _host_auth_opt;$/;"	m	class:RedClient
_host_box	client/gui/gui.cpp	/^    CEGUI::Window* _host_box;$/;"	m	class:LoginDialog	file:
_hot_keys	client/application.h	/^    HotKeys _hot_keys;$/;"	m	class:Application
_hot_keys	client/hot_keys.h	/^    HotKeys _hot_keys;$/;"	m	class:HotKeysParser
_hot_pos	client/cursor_channel.h	/^    SpicePoint _hot_pos;$/;"	m	class:CursorChannel
_hot_x	client/cursor_channel.cpp	/^    int _hot_x;$/;"	m	class:UnsupportedCursor	file:
_hot_y	client/cursor_channel.cpp	/^    int _hot_y;$/;"	m	class:UnsupportedCursor	file:
_hw_params	client/x11/playback.h	/^    snd_pcm_hw_params_t* _hw_params;$/;"	m	class:WavePlayer
_hw_params	client/x11/record.h	/^    snd_pcm_hw_params_t* _hw_params;$/;"	m	class:WaveRecorder
_icon	client/windows/win_platform.h	/^    HICON _icon;$/;"	m	class:WinIcon
_icon	client/x11/red_window_p.h	/^    Icon* _icon;$/;"	m	class:RedWindow_p
_id	client/application.cpp	/^    int _id;$/;"	m	class:GUIBarrier	file:
_id	client/client_net_socket.h	/^    uint16_t _id;$/;"	m	class:ClientNetSocket
_id	client/glz_decoded_image.h	/^    uint64_t _id;$/;"	m	class:GlzDecodedImage
_id	client/gui/gui.cpp	/^        int _id;$/;"	m	class:GUI::Dialog::BottonAction	file:
_id	client/gui/gui.cpp	/^    int _id;$/;"	m	class:BoxResponseEvent	file:
_id	client/gui/gui.cpp	/^    int _id;$/;"	m	class:SampleTabFactory	file:
_id	client/menu.h	/^    int _id;$/;"	m	class:Menu
_id	client/monitor.h	/^    int _id;$/;"	m	class:Monitor
_id	client/red_channel.h	/^    uint8_t _id;$/;"	m	class:RedChannelBase
_id	client/screen.h	/^    int _id;$/;"	m	class:RedScreen
_id	client/x11/x_icon.h	/^    int _id;$/;"	m	class:XIcon
_ignore_foucs	client/x11/red_window_p.h	/^    bool _ignore_foucs;$/;"	m	class:RedWindow_p
_ignore_pointer	client/x11/red_window_p.h	/^    bool _ignore_pointer;$/;"	m	class:RedWindow_p
_image	client/glz_decoder.h	/^    } _image;$/;"	m	class:GlzDecoder	typeref:struct:GlzDecoder::__anon112
_image_codec	client/gui/softrenderer.h	/^        ImageCodec* _image_codec;$/;"	m	class:CEGUI::SoftRenderer
_image_codec_module	client/gui/softrenderer.h	/^        DynamicModule* _image_codec_module;$/;"	m	class:CEGUI::SoftRenderer
_images	client/glz_decoder_window.h	/^    GlzDecodedImage **_images; \/\/ cyclic window$/;"	m	class:GlzDecoderWindow
_images_capacity	client/glz_decoder_window.h	/^    int _images_capacity;$/;"	m	class:GlzDecoderWindow
_images_window	client/glz_decoder.h	/^    GlzDecoderWindow &_images_window;$/;"	m	class:GlzDecoder
_in_now	client/glz_decoder.h	/^    uint8_t *_in_now;$/;"	m	class:GlzDecoder
_in_start	client/glz_decoder.h	/^    uint8_t *_in_start;$/;"	m	class:GlzDecoder
_in_use	client/windows/playback.h	/^    uint32_t _in_use;$/;"	m	class:WavePlayer
_in_use	client/windows/record.h	/^    uint32_t _in_use;$/;"	m	class:WaveRecorder
_inactive_cursor	client/screen.h	/^    LocalCursor* _inactive_cursor;$/;"	m	class:RedScreen
_include_primary	client/display_channel.cpp	/^    bool _include_primary;$/;"	m	class:DestroyAllSurfacesEvent	file:
_incomming_header	client/red_channel.h	/^    SpiceDataHeader _incomming_header;$/;"	m	class:RedChannel
_incomming_header_pos	client/red_channel.h	/^    uint32_t _incomming_header_pos;$/;"	m	class:RedChannel
_incomming_message	client/red_channel.h	/^    RedPeer::CompoundInMessage* _incomming_message;$/;"	m	class:RedChannel
_incomming_message_pos	client/red_channel.h	/^    uint32_t _incomming_message_pos;$/;"	m	class:RedChannel
_info_layer	client/application.h	/^    std::auto_ptr<InfoLayer> _info_layer;$/;"	m	class:Application
_inherits	client/gui/gui.cpp	/^        bool _inherits;$/;"	m	class:GUI::Dialog::UndimInfo	file:
_initialized	client/controller.h	/^    bool _initialized;$/;"	m	class:ControllerConnection
_initialized	client/foreign_menu.h	/^    bool _initialized;$/;"	m	class:ForeignMenuConnection
_inputs_channel	client/display_channel.h	/^    InputsChannel* _inputs_channel;$/;"	m	class:DisplayChannel
_interrupt_update	client/display_channel.h	/^    InterruptUpdate _interrupt_update;$/;"	m	class:DisplayChannel
_interval	client/process_loop.h	/^    uint32_t _interval;$/;"	m	class:Timer
_invalidate	client/screen.cpp	/^bool RedScreen::_invalidate(const SpiceRect& rect, bool urgent, uint64_t& update_mark)$/;"	f	class:RedScreen
_invers	client/cursor_channel.cpp	/^    std::auto_ptr<RedPixmap> _invers;$/;"	m	class:ColorCursor	file:
_invisible_cursor	client/x11/red_window_p.h	/^    Cursor _invisible_cursor;$/;"	m	class:RedWindow_p
_is_armed	client/process_loop.h	/^    bool _is_armed;$/;"	m	class:Timer
_items	client/menu.h	/^    std::vector<MenuItem> _items;$/;"	m	class:Menu
_jerr	client/jpeg_decoder.h	/^    struct jpeg_error_mgr _jerr;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::jpeg_error_mgr
_jerr	client/mjpeg_decoder.h	/^    struct jpeg_error_mgr _jerr;$/;"	m	class:MJpegDecoder	typeref:struct:MJpegDecoder::jpeg_error_mgr
_jpeg_decoder	client/canvas.h	/^    JpegDecoder _jpeg_decoder;$/;"	m	class:Canvas
_jsrc	client/jpeg_decoder.h	/^    struct jpeg_source_mgr _jsrc;$/;"	m	class:JpegDecoder	typeref:struct:JpegDecoder::jpeg_source_mgr
_jsrc	client/mjpeg_decoder.h	/^    struct jpeg_source_mgr _jsrc;$/;"	m	class:MJpegDecoder	typeref:struct:MJpegDecoder::jpeg_source_mgr
_key_handler	client/application.h	/^    KeyHandler* _key_handler;$/;"	m	class:Application
_key_handlers	client/application.h	/^    KeyHandlersStack _key_handlers;$/;"	m	class:Application
_key_interception	client/screen.h	/^    bool _key_interception;$/;"	m	class:RedScreen
_key_interception_on	client/red_window.h	/^    bool _key_interception_on;$/;"	m	class:RedWindow
_keyboard_state	client/application.h	/^    bool _keyboard_state[REDKEY_NUM_KEYS];$/;"	m	class:Application
_kill_mark	client/display_channel.cpp	/^    uint32_t _kill_mark;$/;"	m	class:VideoStream	file:
_label	client/gui/gui.cpp	/^         CEGUI::Window* _label;$/;"	m	class:SampleTabFactory::SampleTab	file:
_last_event_time	client/x11/red_window_p.h	/^    Time _last_event_time;$/;"	m	class:RedWindow_p
_layer	client/screen_layer.cpp	/^    ScreenLayer& _layer;$/;"	m	class:AttachLayerEvent	file:
_layer	client/screen_layer.cpp	/^    ScreenLayer& _layer;$/;"	m	class:DetachLayerEvent	file:
_layer_changed_lock	client/screen.h	/^    Mutex _layer_changed_lock;$/;"	m	class:RedScreen
_layers	client/screen.h	/^    std::vector<ScreenLayer*> _layers;$/;"	m	class:RedScreen
_list	client/gui/gui.cpp	/^         CEGUI::Listbox* _list;$/;"	m	class:SampleTabFactory::SampleTab	file:
_listen_socket	client/x11/named_pipe.h	/^    int _listen_socket;$/;"	m	class:LinuxListener
_listener	client/red_window.h	/^    Listener& _listener;$/;"	m	class:RedWindow
_listener_interface	client/windows/named_pipe.h	/^    NamedPipe::ListenerInterface &_listener_interface;$/;"	m	class:WinListener
_listener_interface	client/x11/named_pipe.h	/^    NamedPipe::ListenerInterface &_listener_interface;$/;"	m	class:LinuxListener
_local_addr	client/client_net_socket.h	/^    struct in_addr _local_addr;$/;"	m	class:ClientNetSocket	typeref:struct:ClientNetSocket::in_addr
_local_cursor	client/cursor.h	/^    LocalCursor* _local_cursor;$/;"	m	class:CursorData
_local_cursor	client/red_window.h	/^    LocalCursor* _local_cursor;$/;"	m	class:RedWindow
_local_port	client/client_net_socket.h	/^    uint16_t _local_port;$/;"	m	class:ClientNetSocket
_lock	client/display_channel.h	/^    Mutex _lock;$/;"	m	class:GLInterruptRecreate
_lock	client/red_client.h	/^    Mutex _lock;$/;"	m	class:Migrate
_lock	client/red_peer.h	/^    Mutex _lock;$/;"	m	class:RedPeer
_lock	client/shared_cache.hpp	/^    Mutex _lock;$/;"	m	class:SharedCache
_lock	client/x11/event_sources_p.h	/^    Mutex _lock;$/;"	m	class:Trigger_p
_locked	client/threads.h	/^    bool _locked;$/;"	m	class:Lock
_login_dialog	client/gui/gui.cpp	/^    LoginDialog* _login_dialog;$/;"	m	class:PreLoginDialog	file:
_long_options	client/cmd_line_parser.h	/^    std::vector<struct option> _long_options;$/;"	m	class:CmdLineParser
_loop	client/red_channel.h	/^    ProcessLoop _loop;$/;"	m	class:RedChannel
_main_screen	client/application.h	/^    RedScreen* _main_screen;$/;"	m	class:Application
_main_win	client/gui/gui.cpp	/^    CEGUI::Window* _main_win;$/;"	m	class:TabDialog	file:
_mark	client/display_channel.h	/^    bool _mark;$/;"	m	class:DisplayChannel
_mark_lock	client/display_channel.h	/^    Mutex _mark_lock;$/;"	m	class:DisplayChannel
_marshaller	client/red_peer.h	/^    SpiceMarshaller *_marshaller;$/;"	m	class:RedPeer::OutMessage
_marshallers	client/red_channel.h	/^    SpiceMessageMarshallers *_marshallers;$/;"	m	class:RedChannel
_max_height	client/x11/platform.cpp	/^    int _max_height;$/;"	m	class:MultyMonScreen	file:
_max_messages	client/red_channel.h	/^    unsigned int _max_messages;$/;"	m	class:MessageHandlerImp
_max_width	client/x11/platform.cpp	/^    int _max_width;$/;"	m	class:MultyMonScreen	file:
_menu	client/red_window.h	/^    Menu* _menu;$/;"	m	class:RedWindow
_menu_needs_update	client/screen.h	/^    bool _menu_needs_update;$/;"	m	class:RedScreen
_mess	client/glz_decoder_config.h	/^    std::string _mess;$/;"	m	class:GlzException
_mess	client/utils.h	/^    std::string _mess;$/;"	m	class:Exception
_message	client/record_channel.cpp	/^    RedPeer::OutMessage *_message;$/;"	m	class:RecordSamplesMessage	file:
_message	client/red_channel.cpp	/^    RedChannel::OutMessage* _message;$/;"	m	class:AutoMessage	file:
_message_ack_count	client/red_channel.h	/^    uint32_t _message_ack_count;$/;"	m	class:RedChannel
_message_ack_window	client/red_channel.h	/^    uint32_t _message_ack_window;$/;"	m	class:RedChannel
_message_box	client/gui/gui.cpp	/^    CEGUI::Window* _message_box;$/;"	m	class:GUI::Dialog	file:
_message_handler	client/red_channel.h	/^    std::auto_ptr<MessageHandler> _message_handler;$/;"	m	class:RedChannel
_messages	client/audio_channels.h	/^    std::list<RecordSamplesMessage *> _messages;$/;"	m	class:RecordChannel
_messages_lock	client/audio_channels.h	/^    Mutex _messages_lock;$/;"	m	class:RecordChannel
_mig_wait_primary	client/display_channel.h	/^    bool _mig_wait_primary;$/;"	m	class:DisplayChannel
_migrate	client/red_client.h	/^    Migrate _migrate;$/;"	m	class:RedClient
_min_height	client/x11/platform.cpp	/^    int _min_height;$/;"	m	class:MultyMonScreen	file:
_min_width	client/x11/platform.cpp	/^    int _min_width;$/;"	m	class:MultyMonScreen	file:
_minimized	client/windows/red_window_p.h	/^    bool _minimized;$/;"	m	class:RedWindow_p
_missing_list	client/glz_decoder_window.h	/^    std::list<uint64_t> _missing_list;$/;"	m	class:GlzDecoderWindow
_mjpeg_decoder	client/display_channel.cpp	/^    MJpegDecoder *_mjpeg_decoder;$/;"	m	class:VideoStream	file:
_mm_clock_last_update	client/red_client.h	/^    uint64_t _mm_clock_last_update;$/;"	m	class:RedClient
_mm_clock_lock	client/red_client.h	/^    Mutex _mm_clock_lock;$/;"	m	class:RedClient
_mm_time	client/red_client.h	/^    uint32_t _mm_time;$/;"	m	class:RedClient
_modal_refs	client/windows/red_window_p.h	/^    uint32_t _modal_refs;$/;"	m	class:RedWindow_p
_mode	client/audio_channels.h	/^    int _mode;$/;"	m	class:RecordChannel
_mode	client/audio_channels.h	/^    uint32_t _mode;$/;"	m	class:PlaybackChannel
_mode	client/x11/platform.cpp	/^    RRMode _mode;$/;"	m	class:XMonitor	file:
_modifiers	client/inputs_channel.h	/^    uint32_t _modifiers;$/;"	m	class:InputsChannel
_monitor	client/screen.h	/^    Monitor* _monitor;$/;"	m	class:RedScreen
_monitors	client/application.h	/^    const MonitorsList* _monitors;$/;"	m	class:Application
_monitors	client/application.h	/^    std::vector<MonitorInfo> _monitors;$/;"	m	class:MonitorsQuery
_monitors	client/x11/platform.cpp	/^    XMonitorsList _monitors;$/;"	m	class:MultyMonScreen	file:
_monitors	client/x11/platform.cpp	/^    XineramaMonitorsList _monitors;$/;"	m	class:XineramaScreen	file:
_motion_count	client/inputs_channel.h	/^    int _motion_count;$/;"	m	class:InputsChannel
_motion_lock	client/inputs_channel.h	/^    Mutex _motion_lock;$/;"	m	class:InputsChannel
_mouse_anchor_point	client/screen.h	/^    SpicePoint _mouse_anchor_point;$/;"	m	class:RedScreen
_mouse_botton_state	client/screen.h	/^    unsigned int _mouse_botton_state;$/;"	m	class:RedScreen
_mouse_buttons_state	client/inputs_channel.h	/^    int _mouse_buttons_state;$/;"	m	class:InputsChannel
_mouse_captured	client/screen.h	/^    bool _mouse_captured;$/;"	m	class:RedScreen
_mouse_dx	client/inputs_channel.h	/^    int _mouse_dx;$/;"	m	class:InputsChannel
_mouse_dy	client/inputs_channel.h	/^    int _mouse_dy;$/;"	m	class:InputsChannel
_mouse_handler	client/application.h	/^    MouseHandler* _mouse_handler;$/;"	m	class:Application
_mouse_mode	client/red_client.h	/^    uint32_t _mouse_mode;$/;"	m	class:RedClient
_mouse_x	client/inputs_channel.h	/^    unsigned int _mouse_x;$/;"	m	class:InputsChannel
_mouse_y	client/inputs_channel.h	/^    unsigned int _mouse_y;$/;"	m	class:InputsChannel
_msg_attach_channels_sent	client/red_client.h	/^    bool _msg_attach_channels_sent;$/;"	m	class:RedClient
_multi_args	client/cmd_line_parser.h	/^    char* _multi_args;$/;"	m	class:CmdLineParser
_multi_next	client/cmd_line_parser.h	/^    char* _multi_next;$/;"	m	class:CmdLineParser
_multi_separator	client/cmd_line_parser.h	/^    char _multi_separator;$/;"	m	class:CmdLineParser
_mutex	client/process_loop.h	/^    Mutex _mutex;$/;"	m	class:SyncEvent
_mutex	client/threads.h	/^    Mutex& _mutex;$/;"	m	class:Lock
_mutex	client/threads.h	/^    pthread_mutex_t _mutex;$/;"	m	class:Mutex
_mutex	client/windows/pixels_source_p.h	/^    RecurciveMutex* _mutex;$/;"	m	struct:PixelsSource_p
_my_getopt_internal	client/windows/my_getopt.cpp	/^int _my_getopt_internal(int argc, char * argv[], const char *shortopts,$/;"	f
_n_images	client/glz_decoder_window.h	/^    int _n_images;            \/\/ _n_images counts all the images in$/;"	m	class:GlzDecoderWindow
_name	client/gui/gui.cpp	/^         std::string _name;$/;"	m	class:SampleTabFactory::SampleTab	file:
_name	client/gui/gui.cpp	/^        CEGUI::String _name;$/;"	m	class:GUI::Dialog::UndimInfo	file:
_name	client/menu.h	/^        std::string _name;$/;"	m	class:Menu::MenuCommand
_name	client/menu.h	/^    std::string _name;$/;"	m	class:Menu
_name	client/screen.h	/^    std::string _name;$/;"	m	class:RedScreen
_name	client/x11/named_pipe.h	/^    std::string _name;$/;"	m	class:LinuxListener
_new_image_cond	client/glz_decoder_window.h	/^    Condition _new_image_cond;          \/\/ when get_pixel_ref waits for an image$/;"	m	class:GlzDecoderWindow
_new_image_mutex	client/glz_decoder_window.h	/^    Mutex _new_image_mutex;$/;"	m	class:GlzDecoderWindow
_new_item_cond	client/shared_cache.hpp	/^    Condition _new_item_cond;$/;"	m	class:SharedCache
_next_sync_vevent	client/smartcard_channel.h	/^    VEventType _next_sync_vevent;$/;"	m	class:SmartCardChannel
_next_timer_time	client/display_channel.h	/^    uint32_t _next_timer_time;$/;"	m	class:DisplayChannel
_no_taskmgr_dll	client/windows/red_window_p.h	/^    HMODULE _no_taskmgr_dll;$/;"	m	class:RedWindow_p
_no_taskmgr_hook	client/windows/red_window_p.h	/^    HHOOK _no_taskmgr_hook;$/;"	m	class:RedWindow_p
_notify_disconnect	client/red_client.h	/^    bool _notify_disconnect;$/;"	m	class:RedClient
_notify_lock	client/red_client.h	/^    Mutex _notify_lock;$/;"	m	class:RedClient
_noutput	client/x11/platform.cpp	/^    int _noutput;$/;"	m	class:XMonitor	file:
_num_keys_pressed	client/application.h	/^    int _num_keys_pressed;$/;"	m	class:Application
_num_recv_tokens	client/client_net_socket.h	/^    uint32_t _num_recv_tokens;$/;"	m	class:ClientNetSocket
_obj	client/red_channel.h	/^    HandlerClass& _obj;$/;"	m	class:MessageHandlerImp
_obj	client/utils.h	/^    T* _obj;$/;"	m	class:AutoRef
_on_focus_modifiers	client/inputs_channel.h	/^    uint32_t _on_focus_modifiers;$/;"	m	class:InputsChannel
_opaque	client/cursor.h	/^    CursorOpaque* _opaque;$/;"	m	class:CursorData
_opaque	client/pixels_source.h	/^    uint8_t _opaque[PIXELES_SOURCE_OPAQUE_SIZE];$/;"	m	class:PixelsSource
_opaque	client/platform.h	/^        ConnectionRef _opaque;$/;"	m	class:NamedPipe::ConnectionInterface
_opaque	client/screen_layer.h	/^    bool _opaque;$/;"	m	class:ScreenLayer
_options	client/cmd_line_parser.h	/^    Options _options;$/;"	m	class:CmdLineParser
_order	client/gui/gui.h	/^    int _order;$/;"	m	class:GUI::TabFactory
_origin	client/pixels_source.h	/^    SpicePoint _origin;$/;"	m	class:PixelsSource
_origin	client/screen.h	/^    SpicePoint _origin;$/;"	m	class:RedScreen
_out_of_sync	client/application.h	/^    bool _out_of_sync;$/;"	m	class:Application
_out_of_sync	client/screen.h	/^    bool _out_of_sync;$/;"	m	class:RedScreen
_out_of_sync	client/windows/platform.cpp	/^    bool _out_of_sync;$/;"	m	class:WinMonitor	file:
_out_of_sync	client/x11/platform.cpp	/^    bool _out_of_sync;$/;"	m	class:DynamicScreen	file:
_out_of_sync	client/x11/platform.cpp	/^    bool _out_of_sync;$/;"	m	class:StaticScreen	file:
_out_of_sync	client/x11/platform.cpp	/^    bool _out_of_sync;$/;"	m	class:XMonitor	file:
_out_of_sync	client/x11/platform.cpp	/^    bool _out_of_sync;$/;"	m	class:XineramaMonitor	file:
_outgoing_lock	client/red_channel.h	/^    Mutex _outgoing_lock;$/;"	m	class:RedChannel
_outgoing_message	client/red_channel.h	/^    RedChannel::OutMessage* _outgoing_message;$/;"	m	class:RedChannel
_outgoing_messages	client/red_channel.h	/^    std::list<RedChannel::OutMessage*> _outgoing_messages;$/;"	m	class:RedChannel
_outgoing_pos	client/red_channel.h	/^    uint32_t _outgoing_pos;$/;"	m	class:RedChannel
_outputs	client/x11/platform.cpp	/^    RROutput* _outputs;$/;"	m	class:XMonitor	file:
_overlap	client/windows/named_pipe.h	/^    OVERLAPPED _overlap;$/;"	m	class:PipeBuffer
_overlap	client/windows/named_pipe.h	/^    OVERLAPPED _overlap;$/;"	m	class:WinListener
_owner	client/process_loop.h	/^    AbstractProcessLoop& _owner;$/;"	m	class:EventsQueue
_owner	client/process_loop.h	/^    AbstractProcessLoop& _owner;$/;"	m	class:TimersQueue
_owner	client/process_loop.h	/^    void* _owner;$/;"	m	class:ProcessLoop
_owner	client/screen.h	/^    Application& _owner;$/;"	m	class:RedScreen
_palette	client/canvas.h	/^    SpicePalette* _palette;$/;"	m	class:CachedPalette
_palette	client/cursor_channel.cpp	/^    uint32_t* _palette;$/;"	m	class:ColorCursor4	file:
_palette_cache	client/canvas.h	/^    PaletteCache& _palette_cache;$/;"	m	class:Canvas
_palette_cache	client/display_channel.h	/^    PaletteCache _palette_cache;$/;"	m	class:DisplayChannel
_parent	client/controller.h	/^    Controller& _parent;$/;"	m	class:ControllerConnection
_parent	client/foreign_menu.h	/^    ForeignMenu& _parent;$/;"	m	class:ForeignMenuConnection
_parser	client/red_channel.h	/^    spice_parse_channel_func_t _parser;$/;"	m	class:MessageHandlerImp
_pass_box	client/gui/gui.cpp	/^    CEGUI::Window* _pass_box;$/;"	m	class:LoginDialog	file:
_password	client/controller.h	/^    std::string _password;$/;"	m	class:ControllerConnection
_password	client/red_client.h	/^    std::string _password;$/;"	m	class:Migrate
_password	client/red_client.h	/^    std::string _password;$/;"	m	class:RedClient
_paused	client/windows/playback.h	/^    bool _paused;$/;"	m	class:WavePlayer
_pcm	client/x11/playback.h	/^    snd_pcm_t* _pcm;$/;"	m	class:WavePlayer
_pcm	client/x11/record.h	/^    snd_pcm_t* _pcm;$/;"	m	class:WaveRecorder
_peer	client/client_net_socket.h	/^    SOCKET _peer;$/;"	m	class:ClientNetSocket
_peer	client/red_peer.h	/^    SOCKET _peer;$/;"	m	class:RedPeer
_peer_con_opt	client/application.h	/^    PeerConnectionOptMap _peer_con_opt;$/;"	m	class:Application
_pending	client/windows/named_pipe.h	/^    bool _pending;$/;"	m	class:PipeBuffer
_pending_con	client/red_client.h	/^    int _pending_con;$/;"	m	class:Migrate
_pending_int	client/x11/event_sources_p.h	/^    bool _pending_int;$/;"	m	class:Trigger_p
_pending_mig_disconnect_channels	client/red_client.h	/^    Channels _pending_mig_disconnect_channels;$/;"	m	class:RedClient
_periodic_update	client/screen.h	/^    bool _periodic_update;$/;"	m	class:RedScreen
_pin_count	client/x11/platform.cpp	/^    int _pin_count;$/;"	m	class:XMonitor	file:
_pipe	client/controller.h	/^    NamedPipe::ListenerRef _pipe;$/;"	m	class:Controller
_pipe	client/windows/named_pipe.h	/^    HANDLE _pipe;$/;"	m	class:PipeBuffer
_pipe	client/windows/named_pipe.h	/^    HANDLE _pipe;$/;"	m	class:WinConnection
_pipe	client/windows/named_pipe.h	/^    HANDLE _pipe;$/;"	m	class:WinListener
_pipename	client/windows/named_pipe.h	/^    TCHAR *_pipename;$/;"	m	class:WinListener
_pixel_format_index	client/screen.h	/^    int _pixel_format_index;$/;"	m	class:RedScreen
_pixmap	client/cursor_channel.cpp	/^    std::auto_ptr<RedPixmap> _pixmap;$/;"	m	class:AlphaCursor	file:
_pixmap	client/cursor_channel.cpp	/^    std::auto_ptr<RedPixmap> _pixmap;$/;"	m	class:ColorCursor	file:
_pixmap	client/cursor_channel.cpp	/^    std::auto_ptr<RedPixmap> _pixmap;$/;"	m	class:MonoCursor	file:
_pixmap	client/display_channel.cpp	/^    PixmapHeader _pixmap;$/;"	m	class:VideoStream	file:
_pixmap	client/gui/gui.h	/^    RedPixmapSw* _pixmap;$/;"	m	class:GUI
_pixmap	client/red_gdi_canvas.h	/^    RedPixmapGdi *_pixmap;$/;"	m	class:GDICanvas
_pixmap	client/red_gl_canvas.h	/^    RedPixmapGL *_pixmap;$/;"	m	class:GCanvas
_pixmap	client/red_sw_canvas.h	/^    RedPixmap *_pixmap;$/;"	m	class:SCanvas
_pixmap_cache	client/canvas.h	/^    PixmapCache& _pixmap_cache;$/;"	m	class:Canvas
_pixmap_cache	client/display_channel.h	/^    PixmapCache& _pixmap_cache;$/;"	m	class:DisplayChannel
_pixmap_cache	client/red_client.h	/^    PixmapCache _pixmap_cache;$/;"	m	class:RedClient
_pixmap_cache_size	client/red_client.h	/^    uint64_t _pixmap_cache_size;$/;"	m	class:RedClient
_playing	client/audio_channels.h	/^    bool _playing;$/;"	m	class:PlaybackChannel
_pointer_in_window	client/windows/red_window_p.h	/^    bool _pointer_in_window;$/;"	m	class:RedWindow_p
_pointer_in_window	client/x11/red_window_p.h	/^    bool _pointer_in_window;$/;"	m	class:RedWindow_p
_pointer_layer	client/screen.h	/^    ScreenLayer* _pointer_layer;$/;"	m	class:RedScreen
_pointer_on_screen	client/screen.h	/^    bool _pointer_on_screen;$/;"	m	class:RedScreen
_pointer_pos	client/display_channel.h	/^    SpicePoint _pointer_pos;$/;"	m	class:DisplayChannel
_pointer_pos	client/screen.h	/^    SpicePoint _pointer_pos;$/;"	m	class:RedScreen
_port	client/application.h	/^    int _port;$/;"	m	class:SwitchHostEvent
_port	client/controller.h	/^    int _port;$/;"	m	class:ControllerConnection
_port	client/red_client.h	/^    int _port;$/;"	m	class:Migrate
_port	client/red_client.h	/^    int _port;$/;"	m	class:RedClient
_port_box	client/gui/gui.cpp	/^    CEGUI::Window* _port_box;$/;"	m	class:LoginDialog	file:
_position	client/windows/platform.cpp	/^    SpicePoint _position;$/;"	m	class:WinMonitor	file:
_position	client/x11/platform.cpp	/^    SpicePoint _position;$/;"	m	class:XMonitor	file:
_position	client/x11/platform.cpp	/^    SpicePoint _position;$/;"	m	class:XScreen	file:
_position	client/x11/platform.cpp	/^    SpicePoint _position;$/;"	m	class:XineramaMonitor	file:
_positional_args	client/cmd_line_parser.h	/^    bool _positional_args;$/;"	m	class:CmdLineParser
_prev_bitmap	client/display_channel.cpp	/^    HBITMAP _prev_bitmap;$/;"	m	class:VideoStream	file:
_prev_bitmap	client/red_gdi_canvas.h	/^    HBITMAP _prev_bitmap;$/;"	m	class:GDICanvas
_prev_matrix_mode	client/red_pixmap_gl.h	/^    GLint _prev_matrix_mode;$/;"	m	class:RedPixmapGL
_prev_tex	client/red_pixmap_gl.h	/^    GLint _prev_tex;$/;"	m	class:RedPixmapGL
_prev_time	client/gui/gui.h	/^    uint64_t _prev_time;$/;"	m	class:GUI
_process_loop	client/client_net_socket.h	/^    ProcessLoop& _process_loop;$/;"	m	class:ClientNetSocket
_process_loop	client/process_loop.h	/^    AbstractProcessLoop* _process_loop;$/;"	m	class:Event
_process_loop	client/windows/named_pipe.h	/^    ProcessLoop& _process_loop;$/;"	m	class:PipeBuffer
_process_loop	client/windows/named_pipe.h	/^    ProcessLoop& _process_loop;$/;"	m	class:WinListener
_protocol	client/red_client.h	/^    int _protocol;$/;"	m	class:Migrate
_protocol	client/red_client.h	/^    int _protocol;$/;"	m	class:RedClient
_pusher	client/x11/platform.cpp	/^    XMonitor* _pusher;$/;"	m	class:XMonitor	file:
_queue	client/gui/softrenderer.h	/^        QuadQueue _queue;$/;"	m	class:CEGUI::SoftRenderer
_queueing	client/gui/softrenderer.h	/^        bool _queueing;$/;"	m	class:CEGUI::SoftRenderer
_quitting	client/process_loop.h	/^    bool _quitting;$/;"	m	class:ProcessLoop
_raw_icon	client/x11/x_icon.h	/^    const IconHeader* _raw_icon;$/;"	m	class:XIcon
_read_buf	client/controller.h	/^    uint8_t _read_buf[CONTROLLER_BUF_SIZE];$/;"	m	class:ControllerConnection
_read_buf	client/foreign_menu.h	/^    uint8_t _read_buf[FOREIGN_MENU_BUF_SIZE];$/;"	m	class:ForeignMenuConnection
_read_cond	client/read_write_mutex.h	/^    Condition _read_cond;$/;"	m	class:ReadWriteMutex
_read_pos	client/controller.h	/^    uint8_t *_read_pos;$/;"	m	class:ControllerConnection
_read_pos	client/foreign_menu.h	/^    uint8_t *_read_pos;$/;"	m	class:ForeignMenuConnection
_reader	client/windows/named_pipe.h	/^    PipeReader _reader;$/;"	m	class:WinConnection
_reader_list	client/smartcard_channel.h	/^    VReaderList *_reader_list;$/;"	m	class:SmartCardChannel
_readers_by_id	client/smartcard_channel.h	/^    readers_by_id_t _readers_by_id;$/;"	m	class:SmartCardChannel
_readers_by_vreader	client/smartcard_channel.h	/^    readers_by_vreader_t _readers_by_vreader;$/;"	m	class:SmartCardChannel
_ready	client/process_loop.h	/^    bool _ready;$/;"	m	class:SyncEvent
_recorder	client/x11/record.cpp	/^    WaveRecorder& _recorder;$/;"	m	class:WaveRecorder::EventTrigger	file:
_red_create_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *_red_create_glz_dictionary(RedClient *client, uint8_t id,$/;"	f	file:
_red_find_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *_red_find_glz_dictionary(RedClient *client, uint8_t dict_id)$/;"	f	file:
_red_icon	client/x11/images/red_icon.c	/^} _red_icon = { 32, 32, {$/;"	v	typeref:struct:__anon123	file:
_red_rotation	client/x11/platform.cpp	/^    RedScreenRotation _red_rotation;$/;"	m	class:XMonitor	file:
_red_window	client/x11/red_window_p.h	/^    RedWindow *_red_window;$/;"	m	class:RedWindow_p
_refs	client/canvas.h	/^    int _refs;$/;"	m	class:CachedPalette
_refs	client/controller.h	/^    int _refs;$/;"	m	class:Controller
_refs	client/foreign_menu.h	/^    int _refs;$/;"	m	class:ForeignMenu
_refs	client/icon.h	/^    int _refs;$/;"	m	class:Icon
_refs	client/menu.h	/^    int _refs;$/;"	m	class:Menu
_refs	client/process_loop.h	/^    AtomicCount _refs;$/;"	m	class:EventBase
_refs	client/red_peer.h	/^    int _refs;$/;"	m	class:RedPeer::CompoundInMessage
_refs	client/screen.h	/^    AtomicCount _refs;$/;"	m	class:RedScreen
_region	client/windows/red_window.cpp	/^    HRGN _region;$/;"	m	class:Region_p	file:
_region	client/x11/red_window.cpp	/^    QRegion* _region;$/;"	m	class:Region_p	file:
_release_image_cond	client/glz_decoder_window.h	/^    Condition _release_image_cond;      \/\/ when waiting for the window to narrow.$/;"	m	class:GlzDecoderWindow
_remote_caps	client/red_channel.h	/^    ChannelCaps _remote_caps;$/;"	m	class:RedChannelBase
_remote_common_caps	client/red_channel.h	/^    ChannelCaps _remote_common_caps;$/;"	m	class:RedChannelBase
_remote_major	client/red_channel.h	/^    uint32_t _remote_major;$/;"	m	class:RedChannelBase
_remote_minor	client/red_channel.h	/^    uint32_t _remote_minor;$/;"	m	class:RedChannelBase
_renderer	client/gui/gui.h	/^    CEGUI::SoftRenderer* _renderer;$/;"	m	class:GUI
_rendertype	client/display_channel.h	/^    RenderType _rendertype;$/;"	m	class:DisplayChannel
_replace_data_cond	client/shared_cache.hpp	/^    Condition _replace_data_cond;$/;"	m	class:SharedCache
_res	client/utils.h	/^    T* _res;$/;"	m	class:_AutoRes
_rgb2bgr	client/jpeg_decoder.h	/^    RGBToBGRConverter _rgb2bgr;$/;"	m	class:JpegDecoder
_rgb2bgrx	client/jpeg_decoder.h	/^    RGBToBGRXConverter _rgb2bgrx;$/;"	m	class:JpegDecoder
_ring	client/windows/playback.h	/^    uint8_t* _ring;$/;"	m	class:WavePlayer
_ring	client/windows/record.h	/^    uint8_t* _ring;$/;"	m	class:WaveRecorder
_ring_item_size	client/windows/playback.h	/^    uint32_t _ring_item_size;$/;"	m	class:WavePlayer
_ring_item_size	client/windows/record.h	/^    uint32_t _ring_item_size;$/;"	m	class:WaveRecorder
_ring_size	client/windows/playback.h	/^    uint32_t _ring_size;$/;"	m	class:WavePlayer
_ring_size	client/windows/record.h	/^    uint32_t _ring_size;$/;"	m	class:WaveRecorder
_root	client/gui/gui.cpp	/^    CEGUI::Window* _root;$/;"	m	class:GUI::Dialog	file:
_root_window	client/gui/gui.cpp	/^         CEGUI::Window* _root_window;$/;"	m	class:SampleTabFactory::SampleTab	file:
_rop3_brush	spice-common/common/gdi_canvas.c	54;"	d	file:
_rop3_dest	spice-common/common/gdi_canvas.c	56;"	d	file:
_rop3_src	spice-common/common/gdi_canvas.c	55;"	d	file:
_rotation	client/x11/platform.cpp	/^    Rotation _rotation;$/;"	m	class:XMonitor	file:
_running	client/red_client.h	/^    bool _running;$/;"	m	class:Migrate
_sample_bytes	client/x11/record.h	/^    uint32_t _sample_bytes;$/;"	m	class:WaveRecorder
_samples_per_ms	client/windows/playback.h	/^    uint32_t _samples_per_ms;$/;"	m	class:WavePlayer
_samples_per_ms	client/x11/playback.h	/^    uint32_t _samples_per_ms;$/;"	m	class:WavePlayer
_save_pos	client/screen.h	/^    SpicePoint _save_pos;$/;"	m	class:RedScreen
_saved_height	client/x11/platform.cpp	/^    int _saved_height;$/;"	m	class:DynamicScreen	file:
_saved_height	client/x11/platform.cpp	/^    int _saved_height;$/;"	m	class:MultyMonScreen	file:
_saved_height_mm	client/x11/platform.cpp	/^    int _saved_height_mm;$/;"	m	class:MultyMonScreen	file:
_saved_mode	client/x11/platform.cpp	/^    RRMode _saved_mode;$/;"	m	class:XMonitor	file:
_saved_position	client/x11/platform.cpp	/^    SpicePoint _saved_position;$/;"	m	class:XMonitor	file:
_saved_rotation	client/x11/platform.cpp	/^    Rotation _saved_rotation;$/;"	m	class:XMonitor	file:
_saved_size	client/x11/platform.cpp	/^    SpicePoint _saved_size;$/;"	m	class:XMonitor	file:
_saved_width	client/x11/platform.cpp	/^    int _saved_width;$/;"	m	class:DynamicScreen	file:
_saved_width	client/x11/platform.cpp	/^    int _saved_width;$/;"	m	class:MultyMonScreen	file:
_saved_width_mm	client/x11/platform.cpp	/^    int _saved_width_mm;$/;"	m	class:MultyMonScreen	file:
_scan_table	client/inputs_channel.cpp	/^InputsChannel::KeyInfo InputsChannel::_scan_table[REDKEY_NUM_KEYS];$/;"	m	class:InputsChannel	file:
_scan_table	client/inputs_channel.h	/^    static KeyInfo _scan_table[REDKEY_NUM_KEYS];$/;"	m	class:InputsChannel
_scanline	client/mjpeg_decoder.h	/^    uint8_t *_scanline;$/;"	m	class:MJpegDecoder
_screen	client/display_channel.cpp	/^    AutoRef<RedScreen> _screen;$/;"	m	class:UnlockScreenEvent	file:
_screen	client/display_channel.cpp	/^    RedScreen* _screen;$/;"	m	class:ResetTimer	file:
_screen	client/screen.cpp	/^    int _screen;$/;"	m	class:LayerChangedEvent	file:
_screen	client/screen.cpp	/^    int _screen;$/;"	m	class:UpdateEvent	file:
_screen	client/screen.h	/^    RedScreen* _screen;$/;"	m	class:UpdateTimer
_screen	client/screen_layer.h	/^    RedScreen* _screen;$/;"	m	class:ScreenLayer
_screen	client/x11/platform.cpp	/^    int _screen;$/;"	m	class:XScreen	file:
_screen	client/x11/red_window_p.h	/^    int _screen;$/;"	m	class:RedWindow_p
_screen_icons	client/x11/x_icon.h	/^    std::map<int, ScreenIcon> _screen_icons;$/;"	m	class:XIcon
_screen_id	client/application.h	/^    int _screen_id;$/;"	m	class:VisibilityEvent
_screen_id	client/screen_layer.cpp	/^    int _screen_id;$/;"	m	class:AttachLayerEvent	file:
_screens	client/application.h	/^    std::vector<RedScreen*> _screens;$/;"	m	class:Application
_send_message	client/client_net_socket.h	/^    SendBuffer* _send_message;$/;"	m	class:ClientNetSocket
_send_messages	client/client_net_socket.h	/^    std::list<SendBuffer*> _send_messages;$/;"	m	class:ClientNetSocket
_send_pos	client/client_net_socket.h	/^    uint32_t _send_pos;$/;"	m	class:ClientNetSocket
_send_trigger	client/red_channel.h	/^    SendTrigger _send_trigger;$/;"	m	class:RedChannel
_serial	client/red_peer.h	/^    uint64_t _serial;$/;"	m	class:RedPeer
_serial	client/red_peer.h	/^    uint64_t _serial;$/;"	m	class:RedPeer::CompoundInMessage
_set_color_depth	client/red_client.h	/^    bool _set_color_depth;$/;"	m	class:DisplaySetting
_shadow_focus_event	client/x11/red_window_p.h	/^    XEvent _shadow_focus_event;$/;"	m	class:RedWindow_p
_shadow_foucs_state	client/x11/red_window_p.h	/^    bool _shadow_foucs_state;$/;"	m	class:RedWindow_p
_shadow_pointer_event	client/x11/red_window_p.h	/^    XEvent _shadow_pointer_event;$/;"	m	class:RedWindow_p
_shadow_pointer_state	client/x11/red_window_p.h	/^    bool _shadow_pointer_state;$/;"	m	class:RedWindow_p
_shared	client/windows/platform.cpp	/^    bool _shared;$/;"	m	class:WinLocalCursor	file:
_short_options	client/cmd_line_parser.h	/^    std::string _short_options;$/;"	m	class:CmdLineParser
_show_pos	client/x11/red_window_p.h	/^    SpicePoint _show_pos;$/;"	m	class:RedWindow_p
_show_pos_valid	client/x11/red_window_p.h	/^    bool _show_pos_valid;$/;"	m	class:RedWindow_p
_shut	client/red_peer.h	/^    bool _shut;$/;"	m	class:RedPeer
_size	client/glz_decoded_image.h	/^    int _size;             \/\/ number of pixels$/;"	m	class:GlzDecodedImage
_size	client/red_client.h	/^    uint32_t _size;$/;"	m	class:ClipboardNotifyEvent
_size	client/red_peer.h	/^    uint32_t _size;$/;"	m	class:RedPeer::InMessage
_size	client/screen.h	/^    SpicePoint _size;$/;"	m	class:RedScreen
_size	client/x11/platform.cpp	/^    SpicePoint _size;$/;"	m	class:XMonitor	file:
_size	client/x11/platform.cpp	/^    SpicePoint _size;$/;"	m	class:XineramaMonitor	file:
_size_locked	client/screen.h	/^    bool _size_locked;$/;"	m	class:RedScreen
_smartcard_channel	client/smartcard_channel.h	/^    SmartCardChannel* _smartcard_channel;$/;"	m	class:VEventEvent
_smartcard_channel	client/smartcard_channel.h	/^    SmartCardChannel* _smartcard_channel;$/;"	m	class:VSCMessageEvent
_smartcard_options	client/application.h	/^    SmartcardOptions* _smartcard_options;$/;"	m	class:Application
_socket_in_loop	client/red_channel.h	/^    bool _socket_in_loop;$/;"	m	class:RedChannel
_softtexture_h_	client/gui/softtexture.h	19;"	d
_spice_timer_set	server/spice_timer_queue.c	/^static void _spice_timer_set(SpiceTimer *timer, uint32_t ms, uint64_t now)$/;"	f	file:
_sport	client/application.h	/^    int _sport;$/;"	m	class:SwitchHostEvent
_sport	client/controller.h	/^    int _sport;$/;"	m	class:ControllerConnection
_sport	client/red_client.h	/^    int _sport;$/;"	m	class:Migrate
_sport	client/red_client.h	/^    int _sport;$/;"	m	class:RedClient
_sport_box	client/gui/gui.cpp	/^    CEGUI::Window* _sport_box;$/;"	m	class:LoginDialog	file:
_src_stride	client/cursor_channel.cpp	/^    int _src_stride;$/;"	m	class:ColorCursor16	file:
_src_stride	client/cursor_channel.cpp	/^    int _src_stride;$/;"	m	class:ColorCursor32	file:
_src_stride	client/cursor_channel.cpp	/^    int _src_stride;$/;"	m	class:ColorCursor4	file:
_ssl	client/red_peer.h	/^    SSL *_ssl;$/;"	m	class:RedPeer
_start	client/windows/named_pipe.h	/^    uint32_t _start;$/;"	m	class:PipeBuffer
_start_mark	client/windows/playback.h	/^    uint32_t _start_mark;$/;"	m	class:WavePlayer
_started	client/process_loop.h	/^    bool _started;$/;"	m	class:ProcessLoop
_state	client/application.h	/^    State _state;$/;"	m	class:Application
_state	client/gui/gui.h	/^    Application::State _state;$/;"	m	class:GUI
_state	client/menu.h	/^        int _state;$/;"	m	class:Menu::MenuCommand
_state	client/mjpeg_decoder.h	/^    int _state;$/;"	m	class:MJpegDecoder
_state	client/read_write_mutex.h	/^    } _state;$/;"	m	class:ReadWriteMutex	typeref:struct:ReadWriteMutex::__anon114
_state	client/red_channel.h	/^    int _state;$/;"	m	class:RedChannel
_state_cond	client/red_channel.h	/^    Condition _state_cond;$/;"	m	class:RedChannel
_state_lock	client/red_channel.h	/^    Mutex _state_lock;$/;"	m	class:RedChannel
_state_mutex	client/read_write_mutex.h	/^    Mutex _state_mutex;$/;"	m	class:ReadWriteMutex
_status	client/client_net_socket.h	/^    SocketStatus _status;$/;"	m	class:ClientNetSocket
_sticky_info	client/application.h	/^    StickyInfo _sticky_info;$/;"	m	class:Application
_sticky_on	client/application.cpp	/^    bool _sticky_on;$/;"	m	class:InfoLayer	file:
_sticky_pixmap	client/application.cpp	/^    AlphaImageFromRes _sticky_pixmap;$/;"	m	class:InfoLayer	file:
_sticky_pos	client/application.cpp	/^    SpicePoint _sticky_pos;$/;"	m	class:InfoLayer	file:
_sticky_rect	client/application.cpp	/^    SpiceRect _sticky_rect;$/;"	m	class:InfoLayer	file:
_stream_height	client/display_channel.cpp	/^    int _stream_height;$/;"	m	class:VideoStream	file:
_stream_width	client/display_channel.cpp	/^    int _stream_width;$/;"	m	class:VideoStream	file:
_streams	client/display_channel.h	/^    std::vector<VideoStream*> _streams;$/;"	m	class:DisplayChannel
_streams_lock	client/display_channel.h	/^    Mutex _streams_lock;$/;"	m	class:DisplayChannel
_streams_timer	client/display_channel.h	/^    AutoRef<StreamsTimer> _streams_timer;$/;"	m	class:DisplayChannel
_streams_trigger	client/display_channel.h	/^    StreamsTrigger _streams_trigger;$/;"	m	class:DisplayChannel
_stride	client/display_channel.cpp	/^    int _stride;$/;"	m	class:VideoStream	file:
_stride	client/mjpeg_decoder.h	/^    int _stride;$/;"	m	class:MJpegDecoder
_stride	client/red_pixmap.h	/^    int _stride;$/;"	m	class:RedPixmap
_stride_is_extra	server/red_worker.c	/^static inline int _stride_is_extra(SpiceBitmap *bitmap)$/;"	f	file:
_sub_list	client/red_peer.h	/^    uint32_t _sub_list;$/;"	m	class:RedPeer::CompoundInMessage
_sub_menu	client/foreign_menu.h	/^    Menu* _sub_menu;$/;"	m	class:ForeignMenuConnection
_subpixel_order	client/x11/platform.cpp	/^    RedSubpixelOrder _subpixel_order;$/;"	m	class:XMonitor	file:
_surf	client/gui/softtexture.h	/^        uint32_t* _surf;$/;"	m	class:CEGUI::SoftTexture
_surface	client/canvas.h	/^    pixman_image_t *_surface;$/;"	m	class:GlzDecodedSurface
_surface	client/gui/softrenderer.h	/^        uint8_t* _surface;$/;"	m	class:CEGUI::SoftRenderer
_surface_id	client/display_channel.cpp	/^    int _surface_id;$/;"	m	class:CreateSurfaceEvent	file:
_surface_id	client/display_channel.cpp	/^    int _surface_id;$/;"	m	class:DestroySurfaceEvent	file:
_surfaces_cache	client/canvas.h	/^    SurfacesCache& _surfaces_cache;$/;"	m	class:Canvas
_surfaces_cache	client/display_channel.h	/^    SurfacesCache _surfaces_cache;$/;"	m	class:DisplayChannel
_sw_params	client/x11/playback.h	/^    snd_pcm_sw_params_t* _sw_params;$/;"	m	class:WavePlayer
_sw_params	client/x11/record.h	/^    snd_pcm_sw_params_t* _sw_params;$/;"	m	class:WaveRecorder
_swsurfaces_cache	client/display_channel.h	/^    SurfacesCache _swsurfaces_cache;$/;"	m	class:DisplayChannel
_sync_condition	client/red_client.h	/^    Condition _sync_condition;$/;"	m	class:RedClient
_sync_events	client/smartcard_channel.h	/^    std::list<SmartCardEvent> _sync_events;$/;"	m	class:SmartCardChannel
_sync_info	client/red_channel.h	/^    SyncInfo _sync_info;$/;"	m	class:RedChannel
_sync_info	client/red_client.h	/^    uint64_t _sync_info[SPICE_END_CHANNEL][256];$/;"	m	class:RedClient
_sync_lock	client/red_client.h	/^    Mutex _sync_lock;$/;"	m	class:RedClient
_sys_key_intercept_mode	client/application.h	/^    bool _sys_key_intercept_mode;$/;"	m	class:Application
_sys_menu	client/windows/red_window_p.h	/^    HMENU _sys_menu;$/;"	m	class:RedWindow_p
_tab_factorys	client/gui/gui.h	/^    TabFactorys _tab_factorys;$/;"	m	class:GUI
_tabs	client/gui/gui.cpp	/^    Tabs _tabs;$/;"	m	class:TabDialog	file:
_tail_image_id	client/glz_decoder_window.h	/^    uint64_t _tail_image_id;$/;"	m	class:GlzDecoderWindow
_target	client/menu.h	/^    CommandTarget& _target;$/;"	m	class:Menu
_tex_enabled	client/red_pixmap_gl.h	/^    bool _tex_enabled;$/;"	m	class:RedPixmapGL
_textures	client/gui/softrenderer.h	/^        TexturesList _textures;$/;"	m	class:CEGUI::SoftRenderer
_textures_lost	client/red_gl_canvas.h	/^    bool _textures_lost;$/;"	m	class:GCanvas
_textures_lost	client/red_pixmap_gl.h	/^    bool _textures_lost;$/;"	m	class:RedPixmapGL
_thread	client/process_loop.h	/^    pthread_t _thread;$/;"	m	class:ProcessLoop
_thread	client/red_client.h	/^    Thread* _thread;$/;"	m	class:Migrate
_thread	client/threads.h	/^    pthread_t _thread;$/;"	m	class:Thread
_timer_lock	client/display_channel.h	/^    Mutex _timer_lock;$/;"	m	class:DisplayChannel
_timers_lock	client/process_loop.h	/^    RecurciveMutex _timers_lock;$/;"	m	class:TimersQueue
_timers_queue	client/process_loop.h	/^    TimersQueue _timers_queue;$/;"	m	class:ProcessLoop
_title	client/application.h	/^    std::string _title;$/;"	m	class:Application
_top_bottom	client/red_pixmap.h	/^    bool _top_bottom;$/;"	m	class:RedPixmap
_top_down	client/display_channel.cpp	/^    bool _top_down;$/;"	m	class:VideoStream	file:
_trace_key_interception	client/red_window.h	/^    bool _trace_key_interception;$/;"	m	class:RedWindow
_trans_area	client/x11/platform.cpp	/^    SpiceRect _trans_area[MAX_TRANS_DEPTH];$/;"	m	class:XMonitor	file:
_trans_depth	client/x11/platform.cpp	/^    int _trans_depth;$/;"	m	class:XMonitor	file:
_type	client/red_channel.h	/^    uint8_t _type;$/;"	m	class:RedChannelBase
_type	client/red_client.h	/^    uint32_t _type;$/;"	m	class:ChannelFactory
_type	client/red_client.h	/^    uint32_t _type;$/;"	m	class:ClipboardNotifyEvent
_type	client/red_client.h	/^    uint32_t _type;$/;"	m	class:ClipboardRequestEvent
_type	client/red_peer.h	/^    uint16_t _type;$/;"	m	class:RedPeer::InMessage
_type	client/red_window.h	/^    Type _type;$/;"	m	class:RedWindow
_type_count	client/red_client.h	/^    uint32_t _type_count;$/;"	m	class:ClipboardGrabEvent
_types	client/red_client.h	/^    uint32_t *_types;$/;"	m	class:ClipboardGrabEvent
_types	spice-common/python_modules/ptypes.py	/^_types = []$/;"	v
_types_by_name	spice-common/python_modules/ptypes.py	/^_types_by_name = {}$/;"	v
_unallocated_readers_by_vreader	client/smartcard_channel.h	/^    readers_by_vreader_t _unallocated_readers_by_vreader;$/;"	m	class:SmartCardChannel
_uncompressed_data	client/display_channel.cpp	/^    uint8_t *_uncompressed_data;$/;"	m	class:VideoStream	file:
_undim_info_list	client/gui/gui.cpp	/^    std::list<UndimInfo*> _undim_info_list;$/;"	m	class:GUI::Dialog	file:
_update_by_timer	client/screen.h	/^    bool _update_by_timer;$/;"	m	class:RedScreen
_update_interrupt_trigger	client/screen.h	/^    EventSources::Trigger *_update_interrupt_trigger;$/;"	m	class:RedScreen
_update_lock	client/application.cpp	/^    RecurciveMutex _update_lock;$/;"	m	class:InfoLayer	file:
_update_lock	client/cursor_channel.h	/^    Mutex _update_lock;$/;"	m	class:CursorChannel
_update_lock	client/screen.h	/^    RecurciveMutex _update_lock;$/;"	m	class:RedScreen
_update_mark	client/display_channel.cpp	/^    uint64_t _update_mark;$/;"	m	class:VideoStream	file:
_update_mark	client/display_channel.h	/^    uint64_t _update_mark;$/;"	m	class:DisplayChannel
_update_mark	client/screen.h	/^    uint64_t _update_mark;$/;"	m	class:RedScreen
_update_modifiers_lock	client/inputs_channel.h	/^    Mutex _update_modifiers_lock;$/;"	m	class:InputsChannel
_update_time	client/display_channel.cpp	/^    uint32_t _update_time;$/;"	m	class:VideoStream	file:
_update_timer	client/screen.h	/^    AutoRef<UpdateTimer> _update_timer;$/;"	m	class:RedScreen
_using_ogl	client/screen_layer.h	/^    bool _using_ogl;$/;"	m	class:ScreenLayer
_usr_handler	client/glz_decoder.h	/^    GlzDecodeHandler &_usr_handler;$/;"	m	class:GlzDecoder
_valid	client/red_client.h	/^    bool _valid;$/;"	m	class:MigChannel
_valid_pos	client/windows/red_window_p.h	/^    bool _valid_pos;$/;"	m	class:RedWindow_p
_version_string	client/windows/main.cpp	/^static char _version_string[40];$/;"	v	file:
_vevent	client/smartcard_channel.h	/^    VEvent* _vevent;$/;"	m	class:VEventEvent
_vheader	client/smartcard_channel.h	/^    VSCMsgHeader* _vheader;$/;"	m	class:VSCMessageEvent
_visibale	client/x11/red_window_p.h	/^    bool _visibale;$/;"	m	class:RedWindow_p
_vreader	client/smartcard_channel.h	/^    VReader* _vreader;$/;"	m	class:VEventEvent
_wait_for_threads	client/red_channel.h	/^    bool _wait_for_threads;$/;"	m	class:RedChannel
_wakeup_trigger	client/process_loop.h	/^    WakeupTrigger _wakeup_trigger;$/;"	m	class:ProcessLoop
_wave_in	client/windows/record.h	/^    HWAVEIN _wave_in;$/;"	m	class:WaveRecorder
_wave_out	client/windows/playback.h	/^    HWAVEOUT _wave_out;$/;"	m	class:WavePlayer
_wave_player	client/audio_channels.h	/^    WavePlaybackAbstract* _wave_player;$/;"	m	class:PlaybackChannel
_wave_recorder	client/audio_channels.h	/^    WaveRecordAbstract* _wave_recorder;$/;"	m	class:RecordChannel
_width	client/display_channel.cpp	/^    int _width;$/;"	m	class:CreatePrimarySurfaceEvent	file:
_width	client/display_channel.cpp	/^    int _width;$/;"	m	class:CreateSurfaceEvent	file:
_width	client/gui/softrenderer.h	/^        int _width;$/;"	m	class:CEGUI::SoftRenderer
_width	client/gui/softtexture.h	/^        ushort _width;$/;"	m	class:CEGUI::SoftTexture
_width	client/jpeg_decoder.h	/^    int _width;$/;"	m	class:JpegDecoder
_width	client/mjpeg_decoder.h	/^    unsigned _width;$/;"	m	class:MJpegDecoder
_width	client/red_pixmap.h	/^    int _width;$/;"	m	class:RedPixmap
_width	client/windows/platform.cpp	/^    int _width;$/;"	m	class:WinMonitor	file:
_width	client/x11/platform.cpp	/^    int _width;$/;"	m	class:XScreen	file:
_width	client/x11/red_window_p.h	/^    int _width;$/;"	m	class:RedWindow_p
_win	client/windows/red_window_p.h	/^    HWND _win;$/;"	m	class:RedWindow_p
_win	client/x11/red_window_p.h	/^    Window _win;$/;"	m	class:RedWindow_p
_win_alloc_cond	client/glz_decoder_window.h	/^    Condition _win_alloc_cond;$/;"	m	class:GlzDecoderWindow
_win_alloc_rw_mutex	client/glz_decoder_window.h	/^    ReadWriteMutex _win_alloc_rw_mutex;$/;"	m	class:GlzDecoderWindow
_win_head_id	client/glz_decoded_image.h	/^    uint64_t _win_head_id;$/;"	m	class:GlzDecodedImage
_win_modifiers_mutex	client/glz_decoder_window.h	/^    Mutex _win_modifiers_mutex;$/;"	m	class:GlzDecoderWindow
_win_proc_context	client/x11/platform.cpp	/^    XContext& _win_proc_context;$/;"	m	class:XEventHandler	file:
_window	client/screen.h	/^    RedWindow _window;$/;"	m	class:RedScreen
_window	client/windows/platform_utils.h	/^    HWND _window;$/;"	m	class:WindowDC
_window_size	client/red_window.h	/^    SpicePoint _window_size;$/;"	m	class:RedWindow
_worker	client/red_channel.h	/^    Thread* _worker;$/;"	m	class:RedChannel
_worker_priority	client/red_channel.h	/^    Platform::ThreadPriority _worker_priority;$/;"	m	class:RedChannel
_write_buf	client/controller.h	/^    uint8_t _write_buf[CONTROLLER_BUF_SIZE];$/;"	m	class:ControllerConnection
_write_buf	client/foreign_menu.h	/^    uint8_t _write_buf[FOREIGN_MENU_BUF_SIZE];$/;"	m	class:ForeignMenuConnection
_write_cond	client/read_write_mutex.h	/^    Condition _write_cond;$/;"	m	class:ReadWriteMutex
_write_lock	client/controller.h	/^    RecurciveMutex _write_lock;$/;"	m	class:ControllerConnection
_write_lock	client/foreign_menu.h	/^    RecurciveMutex _write_lock;$/;"	m	class:ForeignMenuConnection
_write_pending	client/controller.h	/^    int _write_pending;$/;"	m	class:ControllerConnection
_write_pending	client/foreign_menu.h	/^    int _write_pending;$/;"	m	class:ForeignMenuConnection
_write_pos	client/controller.h	/^    uint8_t *_write_pos;$/;"	m	class:ControllerConnection
_write_pos	client/foreign_menu.h	/^    uint8_t *_write_pos;$/;"	m	class:ForeignMenuConnection
_writer	client/windows/named_pipe.h	/^    PipeWriter _writer;$/;"	m	class:WinConnection
_x	client/windows/red_window_p.h	/^    int _x;$/;"	m	class:RedWindow_p
_x_display	client/x11/platform.cpp	/^    Display& _x_display;$/;"	m	class:XEventHandler	file:
_x_fd	client/x11/platform.cpp	/^    int _x_fd;$/;"	m	class:XEventHandler	file:
_x_res	client/display_channel.h	/^    int _x_res;$/;"	m	class:DisplayChannel
_y	client/mjpeg_decoder.h	/^    unsigned _y;$/;"	m	class:MJpegDecoder
_y	client/windows/red_window_p.h	/^    int _y;$/;"	m	class:RedWindow_p
_y_res	client/display_channel.h	/^    int _y_res;$/;"	m	class:DisplayChannel
_z_order	client/screen_layer.h	/^    int _z_order;$/;"	m	class:ScreenLayer
_z_strm	client/zlib_decoder.h	/^    z_stream _z_strm;$/;"	m	class:ZlibDecoder
_zlib_decoder	client/canvas.h	/^    ZlibDecoder _zlib_decoder;$/;"	m	class:Canvas
a	client/glz_decoder.cpp	/^    uint8_t a;$/;"	m	struct:one_byte_pixel_t	file:
a	client/gui/softrenderer.h	/^            uint8_t a;$/;"	m	class:CEGUI::SoftRenderer::ColourI
a	server/glz_encoder.c	/^    BYTE a;$/;"	m	struct:one_byte_pixel_t	file:
a	server/tests/test_empty_success.c	/^    int a,b;$/;"	m	struct:SpiceTimer	file:
a	spice-common/common/lz.c	/^    uint8_t a;$/;"	m	struct:one_byte_pixel_t	file:
a	spice-common/common/quic.c	/^    BYTE a;$/;"	m	struct:four_bytes_pixel_t	file:
a	spice-common/common/quic.c	/^    BYTE a;$/;"	m	struct:one_byte_pixel_t	file:
a	spice-common/common/quic.c	/^    BYTE a;$/;"	m	struct:three_bytes_pixel_t	file:
abort	client/application.cpp	/^void Application::abort()$/;"	f	class:Application
abort	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::abort()$/;"	f	class:GlzDecoderWindow
abort	client/playback_channel.cpp	/^bool PlaybackChannel::abort(void)$/;"	f	class:PlaybackChannel
abort	client/record_channel.cpp	/^bool RecordChannel::abort(void)$/;"	f	class:RecordChannel
abort	client/red_channel.cpp	/^bool RedChannel::abort()$/;"	f	class:RedChannel
abort	client/red_client.cpp	/^bool Migrate::abort()$/;"	f	class:Migrate
abort	client/red_client.cpp	/^bool RedClient::abort()$/;"	f	class:RedClient
abort	client/shared_cache.hpp	/^    void abort()$/;"	f	class:SharedCache
abort	client/windows/playback.cpp	/^bool WavePlayer::abort()$/;"	f	class:WavePlayer
abort	client/windows/record.cpp	/^bool WaveRecorder::abort()$/;"	f	class:WaveRecorder
abort	client/x11/playback.cpp	/^bool WavePlayer::abort()$/;"	f	class:WavePlayer
abort	client/x11/record.cpp	/^bool WaveRecorder::abort()$/;"	f	class:WaveRecorder
abort_channels	client/red_client.cpp	/^bool RedClient::abort_channels()$/;"	f	class:RedClient
abort_handler	client/x11/platform.cpp	/^static void abort_handler(int sig)$/;"	f	file:
abort_level	spice-common/common/log.c	/^static int abort_level = -1;$/;"	v	file:
aborted	client/application.cpp	/^    virtual void aborted()$/;"	f	class:TestResponce
abs_builddir	Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_builddir	client/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/client$/;"	m
abs_builddir	docs/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/docs$/;"	m
abs_builddir	docs/manual/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/docs\/manual$/;"	m
abs_builddir	server/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/server$/;"	m
abs_builddir	server/tests/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/server\/tests$/;"	m
abs_builddir	spice-common/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_builddir	spice-common/common/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/common$/;"	m
abs_builddir	spice-common/python_modules/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/python_modules$/;"	m
abs_builddir	spice-common/spice-protocol/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
abs_builddir	spice-common/spice-protocol/spice/Makefile	/^abs_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/spice$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_srcdir	client/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/client$/;"	m
abs_srcdir	docs/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/docs$/;"	m
abs_srcdir	docs/manual/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/docs\/manual$/;"	m
abs_srcdir	server/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/server$/;"	m
abs_srcdir	server/tests/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/server\/tests$/;"	m
abs_srcdir	spice-common/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_srcdir	spice-common/common/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/common$/;"	m
abs_srcdir	spice-common/python_modules/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/python_modules$/;"	m
abs_srcdir	spice-common/spice-protocol/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
abs_srcdir	spice-common/spice-protocol/spice/Makefile	/^abs_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/spice$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	client/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	docs/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	docs/manual/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	server/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	server/tests/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_builddir	spice-common/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_builddir	spice-common/common/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_builddir	spice-common/python_modules/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_builddir	spice-common/spice-protocol/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
abs_top_builddir	spice-common/spice-protocol/spice/Makefile	/^abs_top_builddir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	client/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	docs/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	docs/manual/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	server/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	server/tests/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5$/;"	m
abs_top_srcdir	spice-common/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_srcdir	spice-common/common/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_srcdir	spice-common/python_modules/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common$/;"	m
abs_top_srcdir	spice-common/spice-protocol/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
abs_top_srcdir	spice-common/spice-protocol/spice/Makefile	/^abs_top_srcdir = \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	client/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	docs/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	docs/manual/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	server/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	server/tests/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	spice-common/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	spice-common/common/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	spice-common/python_modules/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	client/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	docs/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	docs/manual/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	server/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	server/tests/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	spice-common/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	spice-common/common/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	spice-common/python_modules/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	client/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	docs/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	docs/manual/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	server/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	server/tests/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	client/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	docs/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	docs/manual/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	server/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	server/tests/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	spice-common/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	spice-common/common/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	spice-common/python_modules/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	spice-common/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	spice-common/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_header_mongrel	spice-common/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_check_type	spice-common/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_find_intX_t	spice-common/configure	/^ac_fn_c_find_intX_t ()$/;"	f
ac_fn_c_find_uintX_t	spice-common/configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	spice-common/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	spice-common/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	spice-common/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	spice-common/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
ack	server/dispatcher.h	/^    int ack;$/;"	m	struct:DispatcherMessage
ack_data	server/red_channel.h	/^    } ack_data;$/;"	m	struct:RedChannelClient	typeref:struct:RedChannelClient::__anon147
ack_generation	server/snd_worker.c	/^    uint32_t ack_generation;$/;"	m	struct:SndChannel	file:
ack_messages	server/snd_worker.c	/^    uint32_t ack_messages;$/;"	m	struct:SndChannel	file:
action	client/event_sources.h	/^    virtual void action() {on_event();}$/;"	f	class:EventSource
action	client/windows/event_sources_p.cpp	/^void EventSources::Trigger::action()$/;"	f	class:EventSources::Trigger
action	client/x11/event_sources_p.cpp	/^void EventSources::Trigger::action()$/;"	f	class:EventSources::Trigger
action	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t action; \/\/FOREIGN_MENU_EVENT_?$/;"	m	struct:FrgMenuEvent
activate	client/screen.cpp	/^void RedScreen::activate()$/;"	f	class:RedScreen
activate	client/windows/red_window.cpp	/^void RedWindow::activate()$/;"	f	class:RedWindow
activate	client/x11/red_window.cpp	/^void RedWindow::activate()$/;"	f	class:RedWindow
activate_interval_timer	client/process_loop.cpp	/^void ProcessLoop::activate_interval_timer(Timer* timer, unsigned int millisec)$/;"	f	class:ProcessLoop
activate_interval_timer	client/process_loop.cpp	/^void TimersQueue::activate_interval_timer(Timer* timer, unsigned int millisec)$/;"	f	class:TimersQueue
activate_interval_timer	client/red_client.cpp	/^void RedClient::activate_interval_timer(Timer* timer, unsigned int millisec)$/;"	f	class:RedClient
activate_modifiers_watch	server/inputs_channel.c	/^static void activate_modifiers_watch(void)$/;"	f	file:
activate_streams_timer	client/display_channel.cpp	/^void DisplayChannel::activate_streams_timer()$/;"	f	class:DisplayChannel
activate_timer	client/screen.cpp	/^void RedScreen::activate_timer()$/;"	f	class:RedScreen
active	server/char_device.c	/^    int active; \/* has read\/write been performed since the device was started *\/$/;"	m	struct:SpiceCharDeviceState	file:
active	server/snd_worker.c	/^    int active;$/;"	m	struct:SndChannel	file:
active	server/snd_worker.c	/^    int active;$/;"	m	struct:SndWorker	file:
active_link	server/spice_timer_queue.c	/^    RingItem active_link;$/;"	m	struct:SpiceTimer	file:
active_timers	server/spice_timer_queue.c	/^    Ring active_timers;$/;"	m	struct:SpiceTimerQueue	file:
add	client/cache.hpp	/^    void add(uint64_t id, T* data)$/;"	f	class:Cache
add	client/cmd_line_parser.cpp	/^void CmdLineParser::add(int id, const std::string& name, const std::string& help, char short_name)$/;"	f	class:CmdLineParser
add	client/cmd_line_parser.cpp	/^void CmdLineParser::add(int id, const std::string& name, const std::string& help,$/;"	f	class:CmdLineParser
add	client/shared_cache.hpp	/^    void add(uint64_t id, T* data, bool is_lossy = FALSE)$/;"	f	class:SharedCache
add	server/red_client_cache.h	/^static int FUNC_NAME(add)(CHANNELCLIENT *channel_client, uint64_t id, size_t size)$/;"	f
add	server/red_client_shared_cache.h	/^static int FUNC_NAME(add)(CACHE *cache, uint64_t id, uint32_t size, int lossy, DisplayChannelClient *dcc)$/;"	f
add	spice-common/common/messages.h	/^        VSCMsgReaderAdd add;$/;"	m	union:SpiceMsgcSmartcard::__anon24
addQuad	client/gui/softrenderer.cpp	/^void SoftRenderer::addQuad(const Rect& dest_rect, float z, const Texture* texture,$/;"	f	class:CEGUI::SoftRenderer
add_bottom_button	client/gui/gui.cpp	/^static void add_bottom_button(CEGUI::Window* parent, const char *str,$/;"	f	file:
add_buf_from_info	server/red_worker.c	/^static void add_buf_from_info(SpiceMarshaller *m, AddBufInfo *info)$/;"	f	file:
add_capability	server/red_channel.c	/^static void add_capability(uint32_t **caps, int *num_caps, uint32_t cap)$/;"	f	file:
add_channel	client/red_client.cpp	/^void Migrate::add_channel(MigChannel* channel)$/;"	f	class:Migrate
add_clip_rects	server/red_worker.c	/^static void add_clip_rects(QRegion *rgn, SpiceClipRects *data)$/;"	f	file:
add_clone	client/x11/platform.cpp	/^void XMonitor::add_clone(XMonitor *clone)$/;"	f	class:XMonitor
add_command	client/menu.cpp	/^void Menu::add_command(const std::string& name, int cmd_id, int state)$/;"	f	class:Menu
add_connection	client/controller.cpp	/^void Controller::add_connection(NamedPipe::ConnectionRef conn_ref, ControllerConnection *conn)$/;"	f	class:Controller
add_connection	client/foreign_menu.cpp	/^void ForeignMenu::add_connection(NamedPipe::ConnectionRef conn_ref, ForeignMenuConnection *conn)$/;"	f	class:ForeignMenu
add_count	server/red_worker.c	/^    uint32_t add_count;$/;"	m	struct:RedWorker	file:
add_decoded_image	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::add_decoded_image(GlzDecodedImage *image)$/;"	f	class:GlzDecoderWindow
add_event	client/windows/event_sources_p.cpp	/^void EventSources_p::add_event(HANDLE event, EventSource* source)$/;"	f	class:EventSources_p
add_event	client/x11/event_sources_p.cpp	/^void EventSources_p::add_event(int fd, EventSource* source)$/;"	f	class:EventSources_p
add_event_source	client/record_channel.cpp	/^void RecordChannel::add_event_source(EventSources::File& event_source)$/;"	f	class:RecordChannel
add_event_source	client/record_channel.cpp	/^void RecordChannel::add_event_source(EventSources::Trigger& event_source)$/;"	f	class:RecordChannel
add_file	client/process_loop.cpp	/^void ProcessLoop::add_file(EventSources::File& file)$/;"	f	class:ProcessLoop
add_file	client/windows/event_sources_p.cpp	/^void EventSources::add_file(File& file)$/;"	f	class:EventSources
add_file	client/x11/event_sources_p.cpp	/^void EventSources::add_file(File& file)$/;"	f	class:EventSources
add_function_variable	spice-common/python_modules/codegen.py	/^    def add_function_variable(self, ctype, name):$/;"	m	class:CodeWriter
add_handle	client/process_loop.cpp	/^void ProcessLoop::add_handle(EventSources::Handle& handle)$/;"	f	class:ProcessLoop
add_handle	client/windows/event_sources_p.cpp	/^void EventSources::add_handle(Handle& handle)$/;"	f	class:EventSources
add_handle	client/x11/event_sources_p.cpp	/^void EventSources::add_handle(Handle& file)$/;"	f	class:EventSources
add_hotkey	client/hot_keys.cpp	/^void HotKeysParser::add_hotkey(const std::string& hotkey, const CommandsMap& commands_map)$/;"	f	class:HotKeysParser
add_item	client/menu.cpp	/^void Menu::add_item(MenuItem& item)$/;"	f	class:Menu
add_key	client/hot_keys.cpp	/^void HotKeysParser::add_key(HotkeySet& keys, const char* key)$/;"	f	class:HotKeysParser
add_ms_to_timeval	server/tests/basic_event_loop.c	/^static void add_ms_to_timeval(struct timeval *tv, int ms)$/;"	f	file:
add_pre_decoded_image	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::add_pre_decoded_image(uint64_t image_id)$/;"	f	class:GlzDecoderWindow
add_private	client/cmd_line_parser.cpp	/^void CmdLineParser::add_private(int id, const std::string& name, char short_name,$/;"	f	class:CmdLineParser
add_reader	client/smartcard_channel.cpp	/^ReaderData* SmartCardChannel::add_reader(uint32_t reader_id)$/;"	f	class:SmartCardChannel
add_rect_area	client/screen_layer.cpp	/^void ScreenLayer::add_rect_area(const SpiceRect& r)$/;"	f	class:ScreenLayer
add_recv_tokens	client/client_net_socket.cpp	/^void ClientNetSocket::add_recv_tokens(uint32_t num_tokens)$/;"	f	class:ClientNetSocket
add_segment_common	spice-common/common/glc.c	/^static void add_segment_common(InternalPath *internal, int type, int num_points)$/;"	f	file:
add_separator	client/menu.cpp	/^void Menu::add_separator()$/;"	f	class:Menu
add_socket	client/process_loop.cpp	/^void ProcessLoop::add_socket(EventSources::Socket& socket)$/;"	f	class:ProcessLoop
add_socket	client/windows/event_sources_p.cpp	/^void EventSources::add_socket(Socket& socket)$/;"	f	class:EventSources
add_socket	client/x11/event_sources_p.cpp	/^void EventSources::add_socket(Socket& socket)$/;"	f	class:EventSources
add_stat	server/red_worker.c	/^    stat_info_t add_stat;$/;"	m	struct:RedWorker	file:
add_stat_name	server/red_worker.c	/^static const char *add_stat_name = "add";$/;"	v	file:
add_stencil_client	spice-common/common/glc.c	/^static inline void add_stencil_client(InternaCtx *ctx)$/;"	f	file:
add_sub	client/menu.cpp	/^void Menu::add_sub(Menu* menu)$/;"	f	class:Menu
add_sub_menu	client/foreign_menu.cpp	/^void ForeignMenuConnection::add_sub_menu()$/;"	f	class:ForeignMenuConnection
add_sub_menus	client/foreign_menu.cpp	/^void ForeignMenu::add_sub_menus()$/;"	f	class:ForeignMenu
add_to_cache_counter	server/red_worker.c	/^    uint64_t *add_to_cache_counter;$/;"	m	struct:DisplayChannel	file:
add_to_surface_dependency	server/red_worker.c	/^static inline void add_to_surface_dependency(RedWorker *worker, int depend_on_surface_id,$/;"	f	file:
add_trigger	client/process_loop.cpp	/^void ProcessLoop::add_trigger(EventSources::Trigger& trigger)$/;"	f	class:ProcessLoop
add_trigger	client/windows/event_sources_p.cpp	/^void EventSources::add_trigger(Trigger& trigger)$/;"	f	class:EventSources
add_trigger	client/x11/event_sources_p.cpp	/^void EventSources::add_trigger(Trigger& trigger)$/;"	f	class:EventSources
add_unallocated_reader	client/smartcard_channel.cpp	/^void SmartCardChannel::add_unallocated_reader(VReader* vreader, const char* name)$/;"	f	class:SmartCardChannel
add_with_shadow_count	server/red_worker.c	/^    uint32_t add_with_shadow_count;$/;"	m	struct:RedWorker	file:
add_worker	server/snd_worker.c	/^static void add_worker(SndWorker *worker)$/;"	f	file:
addr_delta	server/spice.h	/^    uint64_t addr_delta;$/;"	m	struct:QXLDevMemSlot
addr_to_string	server/reds_stream.c	/^static char *addr_to_string(const char *format,$/;"	f	file:
address_delta	server/red_memslots.h	/^    long address_delta;$/;"	m	struct:MemSlot
adjust_window_rect	client/screen.cpp	/^void RedScreen::adjust_window_rect(int x, int y)$/;"	f	class:RedScreen
adjusted_fps	server/mjpeg_encoder.c	/^    double adjusted_fps;$/;"	m	struct:MJpegEncoderRateControl	file:
adjusted_fps_num_frames	server/mjpeg_encoder.c	/^    uint64_t adjusted_fps_num_frames;$/;"	m	struct:MJpegEncoderRateControl	file:
adjusted_fps_start_time	server/mjpeg_encoder.c	/^    uint64_t adjusted_fps_start_time;$/;"	m	struct:MJpegEncoderRateControl	file:
age	server/spice_image_cache.h	/^    uint32_t age;$/;"	m	struct:ImageCache
age	server/spice_image_cache.h	/^    uint32_t age;$/;"	m	struct:ImageCacheItem
agent2client	server/migration_protocol.h	/^    } agent2client;$/;"	m	struct:SpiceMigrateDataMain	typeref:struct:SpiceMigrateDataMain::__anon137
agent_base	server/migration_protocol.h	/^    SpiceMigrateDataCharDevice agent_base;$/;"	m	struct:SpiceMigrateDataMain
agent_connected	spice-common/common/messages.h	/^    uint32_t agent_connected;$/;"	m	struct:SpiceMsgMainInit
agent_copypaste	server/reds.c	/^int agent_copypaste = TRUE;$/;"	v
agent_file_xfer	server/reds.c	/^int agent_file_xfer = TRUE;$/;"	v
agent_mouse	server/reds.c	/^int agent_mouse = TRUE;$/;"	v
agent_msg_filter_init	server/agent-msg-filter.c	/^void agent_msg_filter_init(struct AgentMsgFilter *filter,$/;"	f
agent_msg_filter_process_data	server/agent-msg-filter.c	/^int agent_msg_filter_process_data(struct AgentMsgFilter *filter,$/;"	f
agent_state	server/reds-private.h	/^    VDIPortState agent_state;$/;"	m	struct:RedsState
agent_tokens	spice-common/common/messages.h	/^    uint32_t agent_tokens;$/;"	m	struct:SpiceMsgMainInit
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
aix_post_process_depfile	spice-common/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
all_preverify_ok	spice-common/common/ssl_verify.h	/^    int                 all_preverify_ok;$/;"	m	struct:__anon4
alloc_cursor_item	server/red_worker.c	/^static inline CursorItem *alloc_cursor_item(RedWorker *worker)$/;"	f	file:
alloc_drawable	server/red_worker.c	/^static inline Drawable *alloc_drawable(RedWorker *worker)$/;"	f	file:
alloc_frame_slot	client/display_channel.cpp	/^uint32_t VideoStream::alloc_frame_slot()$/;"	f	class:VideoStream
alloc_image	client/canvas.h	/^    virtual GlzDecodedImage *alloc_image(void *opaque_usr_info, uint64_t image_id,$/;"	f	class:GlzDecodeSurfaceHandler
alloc_lz_image_surface	spice-common/common/canvas_utils.c	/^pixman_image_t *alloc_lz_image_surface(LzDecodeUsrData *canvas_data,$/;"	f
alloc_msg_buf	server/red_channel.h	/^    alloc_msg_recv_buf_proc alloc_msg_buf;$/;"	m	struct:IncomingHandlerInterface
alloc_msg_recv_buf_proc	server/red_channel.h	/^typedef uint8_t *(*alloc_msg_recv_buf_proc)(void *opaque, uint16_t type, uint32_t size);$/;"	t
alloc_recv_buf	server/red_channel.h	/^    channel_alloc_msg_recv_buf_proc alloc_recv_buf;$/;"	m	struct:__anon145
alloc_sys_cmd_id	client/windows/red_window.cpp	/^static int alloc_sys_cmd_id()$/;"	f	file:
alloc_tess_vertex	spice-common/common/glc.c	/^static TassVertex *alloc_tess_vertex(InternaCtx *ctx)$/;"	f	file:
allow_multiple_clients	server/reds-private.h	/^    int allow_multiple_clients;$/;"	m	struct:RedsState
allow_secure	client/red_peer.h	/^        bool allow_secure() const$/;"	f	class:RedPeer::ConnectionOptions
allow_unsecure	client/red_peer.h	/^        bool allow_unsecure() const$/;"	f	class:RedPeer::ConnectionOptions
alpha	spice-common/common/draw.h	/^    uint8_t alpha;$/;"	m	struct:SpiceAlphaBlend
alpha	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t alpha;$/;"	m	struct:QXLAlphaBlend
alpha	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t alpha;$/;"	m	struct:QXLCompatAlphaBlend
alpha_blend	server/red_parse_qxl.h	/^        SpiceAlphaBlend alpha_blend;$/;"	m	union:RedDrawable::__anon161
alpha_blend	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLAlphaBlend alpha_blend;$/;"	m	union:QXLDrawable::__anon77
alpha_blend	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLCompatAlphaBlend alpha_blend;$/;"	m	union:QXLCompatDrawable::__anon76
alpha_flags	spice-common/common/draw.h	/^    uint16_t alpha_flags;$/;"	m	struct:SpiceAlphaBlend
alpha_flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t alpha_flags;$/;"	m	struct:QXLAlphaBlend
alphanums	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
alphas	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
alt_image	client/x11/res.cpp	/^static const PixmapHeader alt_image = {$/;"	v	file:
alter	client/hot_keys.h	/^    RedKey alter;$/;"	m	struct:HotkeyKey
alu	spice-common/common/lines.h	/^    unsigned char alu;$/;"	m	struct:lineGC
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	spice-common/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	spice-common/spice-protocol/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	client/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	server/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	server/tests/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	spice-common/common/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__EXEEXT_1	server/tests/Makefile	/^am__EXEEXT_1 =$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	client/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	docs/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	docs/manual/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	server/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	server/tests/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	spice-common/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	spice-common/common/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	spice-common/python_modules/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/libtool.m4 \\$/;"	m
am__aclocal_m4_deps	spice-common/spice-protocol/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__aclocal_m4_deps	spice-common/spice-protocol/spice/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__append_1	docs/manual/Makefile	/^am__append_1 = manual.html$/;"	m
am__append_1	server/Makefile	/^am__append_1 = \\$/;"	m
am__append_2	client/Makefile	/^am__append_2 = \\$/;"	m
am__append_2	docs/manual/Makefile	/^am__append_2 = manual.chunked$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__base_list	server/Makefile	/^am__base_list = \\$/;"	m
am__base_list	spice-common/spice-protocol/Makefile	/^am__base_list = \\$/;"	m
am__base_list	spice-common/spice-protocol/spice/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	client/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	docs/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	docs/manual/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	server/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	server/tests/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	spice-common/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	spice-common/common/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	spice-common/python_modules/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	spice-common/spice-protocol/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	spice-common/spice-protocol/spice/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	client/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	docs/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	docs/manual/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	server/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	server/tests/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	spice-common/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	spice-common/common/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	spice-common/python_modules/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	spice-common/spice-protocol/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	spice-common/spice-protocol/spice/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	client/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	docs/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	docs/manual/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	server/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	server/tests/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	spice-common/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	spice-common/common/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	spice-common/python_modules/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	spice-common/spice-protocol/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	spice-common/spice-protocol/spice/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	client/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	docs/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	server/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	server/tests/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	spice-common/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	spice-common/common/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	spice-common/spice-protocol/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	spice-common/spice-protocol/spice/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	client/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	server/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	server/tests/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	spice-common/common/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	client/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	spice-common/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__distuninstallcheck_listfiles	spice-common/spice-protocol/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	client/Makefile	/^am__include = include$/;"	m
am__include	docs/Makefile	/^am__include = include$/;"	m
am__include	docs/manual/Makefile	/^am__include = include$/;"	m
am__include	server/Makefile	/^am__include = include$/;"	m
am__include	server/tests/Makefile	/^am__include = include$/;"	m
am__include	spice-common/Makefile	/^am__include = include$/;"	m
am__include	spice-common/common/Makefile	/^am__include = include$/;"	m
am__include	spice-common/python_modules/Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__install_max	server/Makefile	/^am__install_max = 40$/;"	m
am__install_max	spice-common/spice-protocol/Makefile	/^am__install_max = 40$/;"	m
am__install_max	spice-common/spice-protocol/spice/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(pkgconfigdir)"$/;"	m
am__installdirs	client/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	server/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" \\$/;"	m
am__installdirs	spice-common/spice-protocol/Makefile	/^am__installdirs = "$(DESTDIR)$(pkgconfigdir)"$/;"	m
am__installdirs	spice-common/spice-protocol/spice/Makefile	/^am__installdirs = "$(DESTDIR)$(spice_protocol_includedir)"$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	client/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	docs/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	docs/manual/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	server/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	server/tests/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	spice-common/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	spice-common/common/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	spice-common/python_modules/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	spice-common/spice-protocol/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	spice-common/spice-protocol/spice/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	client/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	docs/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	docs/manual/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	server/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	server/tests/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	spice-common/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	spice-common/common/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	spice-common/python_modules/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	spice-common/spice-protocol/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	spice-common/spice-protocol/spice/Makefile	/^am__leading_dot = .$/;"	m
am__libspice_common_la_SOURCES_DIST	spice-common/common/Makefile	/^am__libspice_common_la_SOURCES_DIST = backtrace.c backtrace.h bitops.h \\$/;"	m
am__libspice_server_la_SOURCES_DIST	server/Makefile	/^am__libspice_server_la_SOURCES_DIST = agent-msg-filter.c \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	client/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	docs/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	docs/manual/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	server/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	server/tests/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	spice-common/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	spice-common/common/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	spice-common/python_modules/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	spice-common/spice-protocol/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	spice-common/spice-protocol/spice/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	client/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	docs/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	docs/manual/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	server/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	server/tests/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	spice-common/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	spice-common/common/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	spice-common/python_modules/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	spice-common/spice-protocol/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	spice-common/spice-protocol/spice/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	client/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	docs/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	docs/manual/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	server/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	server/tests/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	spice-common/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	spice-common/common/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	spice-common/python_modules/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	spice-common/spice-protocol/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	spice-common/spice-protocol/spice/Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	client/Makefile	/^am__mv = mv -f$/;"	m
am__mv	server/Makefile	/^am__mv = mv -f$/;"	m
am__mv	server/tests/Makefile	/^am__mv = mv -f$/;"	m
am__mv	spice-common/common/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	server/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	spice-common/spice-protocol/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	spice-common/spice-protocol/spice/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	server/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	spice-common/spice-protocol/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	spice-common/spice-protocol/spice/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	server/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	spice-common/spice-protocol/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	spice-common/spice-protocol/spice/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	client/Makefile	/^am__objects_1 =$/;"	m
am__objects_1	server/Makefile	/^am__objects_1 =$/;"	m
am__objects_1	server/tests/Makefile	/^am__objects_1 =$/;"	m
am__objects_1	spice-common/common/Makefile	/^am__objects_1 =$/;"	m
am__objects_2	server/tests/Makefile	/^am__objects_2 = basic_event_loop.$(OBJEXT) $(am__objects_1)$/;"	m
am__objects_2	spice-common/common/Makefile	/^am__objects_2 = generated_client_demarshallers.lo \\$/;"	m
am__objects_3	client/Makefile	/^am__objects_3 = x11\/event_sources_p.$(OBJEXT) \\$/;"	m
am__objects_3	spice-common/common/Makefile	/^am__objects_3 =  \\$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	spice-common/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__post_remove_distdir	spice-common/spice-protocol/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	client/Makefile	/^am__quote = $/;"	m
am__quote	docs/Makefile	/^am__quote = $/;"	m
am__quote	docs/manual/Makefile	/^am__quote = $/;"	m
am__quote	server/Makefile	/^am__quote = $/;"	m
am__quote	server/tests/Makefile	/^am__quote = $/;"	m
am__quote	spice-common/Makefile	/^am__quote = $/;"	m
am__quote	spice-common/common/Makefile	/^am__quote = $/;"	m
am__quote	spice-common/python_modules/Makefile	/^am__quote = $/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__recursive_targets	docs/Makefile	/^am__recursive_targets = \\$/;"	m
am__recursive_targets	server/Makefile	/^am__recursive_targets = \\$/;"	m
am__recursive_targets	spice-common/Makefile	/^am__recursive_targets = \\$/;"	m
am__recursive_targets	spice-common/spice-protocol/Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__relativize	docs/Makefile	/^am__relativize = \\$/;"	m
am__relativize	server/Makefile	/^am__relativize = \\$/;"	m
am__relativize	spice-common/Makefile	/^am__relativize = \\$/;"	m
am__relativize	spice-common/spice-protocol/Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	spice-common/Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	spice-common/spice-protocol/Makefile	/^am__remove_distdir = \\$/;"	m
am__spicec_SOURCES_DIST	client/Makefile	/^am__spicec_SOURCES_DIST = application.cpp application.h \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	server/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	spice-common/spice-protocol/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	spice-common/spice-protocol/spice/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tagged_files	client/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	docs/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	docs/manual/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	server/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	server/tests/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	spice-common/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tagged_files	spice-common/common/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	spice-common/python_modules/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	spice-common/spice-protocol/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tagged_files	spice-common/spice-protocol/spice/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	client/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	docs/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	docs/manual/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	server/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	server/tests/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	spice-common/Makefile	/^am__tar = tar --format=ustar -chf - "$$tardir"$/;"	m
am__tar	spice-common/common/Makefile	/^am__tar = tar --format=ustar -chf - "$$tardir"$/;"	m
am__tar	spice-common/python_modules/Makefile	/^am__tar = tar --format=ustar -chf - "$$tardir"$/;"	m
am__tar	spice-common/spice-protocol/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	spice-common/spice-protocol/spice/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	server/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	spice-common/spice-protocol/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	spice-common/spice-protocol/spice/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	client/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	docs/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	server/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	server/tests/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	spice-common/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	spice-common/common/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	spice-common/spice-protocol/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	spice-common/spice-protocol/spice/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	client/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	docs/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	docs/manual/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	server/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	server/tests/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	spice-common/Makefile	/^am__untar = tar -xf -$/;"	m
am__untar	spice-common/common/Makefile	/^am__untar = tar -xf -$/;"	m
am__untar	spice-common/python_modules/Makefile	/^am__untar = tar -xf -$/;"	m
am__untar	spice-common/spice-protocol/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	spice-common/spice-protocol/spice/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	client/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	server/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	server/tests/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	spice-common/common/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	client/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	server/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	server/tests/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	spice-common/common/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	client/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	server/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	server/tests/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	spice-common/common/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	client/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	server/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	server/tests/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	spice-common/common/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	client/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	server/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	server/tests/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	spice-common/common/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	client/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	server/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	server/tests/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	spice-common/common/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	client/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	client/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	client/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	client/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	client/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	client/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	client/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	docs/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	docs/manual/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	server/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	server/tests/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	spice-common/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	spice-common/common/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	spice-common/python_modules/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	spice-common/spice-protocol/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	spice-common/spice-protocol/spice/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	client/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	docs/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	docs/manual/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	server/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	server/tests/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	spice-common/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	spice-common/common/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	spice-common/python_modules/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	spice-common/spice-protocol/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	spice-common/spice-protocol/spice/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	client/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	docs/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	docs/manual/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	server/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	server/tests/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	spice-common/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	spice-common/common/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	spice-common/python_modules/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	spice-common/spice-protocol/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	spice-common/spice-protocol/spice/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	client/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	docs/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	docs/manual/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	server/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	server/tests/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	spice-common/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	spice-common/common/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	spice-common/python_modules/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	spice-common/spice-protocol/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	spice-common/spice-protocol/spice/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	client/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	docs/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	docs/manual/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	server/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	server/tests/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	spice-common/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	spice-common/common/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	spice-common/python_modules/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	spice-common/spice-protocol/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	spice-common/spice-protocol/spice/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	client/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	docs/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	docs/manual/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	server/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	server/tests/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	spice-common/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	spice-common/common/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	spice-common/python_modules/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	spice-common/spice-protocol/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	spice-common/spice-protocol/spice/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	client/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	docs/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	docs/manual/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	server/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	server/tests/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	spice-common/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	spice-common/common/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	spice-common/python_modules/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	spice-common/spice-protocol/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	spice-common/spice-protocol/spice/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	client/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	docs/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	docs/manual/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	server/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	server/tests/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	spice-common/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	spice-common/common/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	spice-common/python_modules/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	spice-common/spice-protocol/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	spice-common/spice-protocol/spice/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	client/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	docs/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	docs/manual/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	server/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	server/tests/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	spice-common/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	spice-common/common/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	spice-common/python_modules/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	spice-common/spice-protocol/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	spice-common/spice-protocol/spice/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	client/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	server/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	server/tests/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	spice-common/common/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	client/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	server/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	server/tests/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	spice-common/common/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	client/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	server/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	server/tests/Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	spice-common/common/Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	server/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	spice-common/spice-protocol/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	spice-common/spice-protocol/spice/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	server/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	spice-common/spice-protocol/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	spice-common/spice-protocol/spice/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_libspice_common_client_la_OBJECTS	spice-common/common/Makefile	/^am_libspice_common_client_la_OBJECTS = $(am__objects_2) \\$/;"	m
am_libspice_common_la_OBJECTS	spice-common/common/Makefile	/^am_libspice_common_la_OBJECTS = backtrace.lo canvas_utils.lo lines.lo \\$/;"	m
am_libspice_common_server_la_OBJECTS	spice-common/common/Makefile	/^am_libspice_common_server_la_OBJECTS = $(am__objects_3) \\$/;"	m
am_libspice_server_la_OBJECTS	server/Makefile	/^am_libspice_server_la_OBJECTS = agent-msg-filter.lo char_device.lo \\$/;"	m
am_spicec_OBJECTS	client/Makefile	/^am_spicec_OBJECTS = application.$(OBJEXT) canvas.$(OBJEXT) \\$/;"	m
am_test_display_no_ssl_OBJECTS	server/tests/Makefile	/^am_test_display_no_ssl_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_display_resolution_changes_OBJECTS	server/tests/Makefile	/^am_test_display_resolution_changes_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_display_streaming_OBJECTS	server/tests/Makefile	/^am_test_display_streaming_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_display_width_stride_OBJECTS	server/tests/Makefile	/^am_test_display_width_stride_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_empty_success_OBJECTS	server/tests/Makefile	/^am_test_empty_success_OBJECTS = test_empty_success.$(OBJEXT) \\$/;"	m
am_test_fail_on_null_core_interface_OBJECTS	server/tests/Makefile	/^am_test_fail_on_null_core_interface_OBJECTS =  \\$/;"	m
am_test_just_sockets_no_ssl_OBJECTS	server/tests/Makefile	/^am_test_just_sockets_no_ssl_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_playback_OBJECTS	server/tests/Makefile	/^am_test_playback_OBJECTS = $(am__objects_2) test_playback.$(OBJEXT) \\$/;"	m
am_test_two_servers_OBJECTS	server/tests/Makefile	/^am_test_two_servers_OBJECTS = $(am__objects_2) \\$/;"	m
am_test_vdagent_OBJECTS	server/tests/Makefile	/^am_test_vdagent_OBJECTS = $(am__objects_2) test_display_base.$(OBJEXT) \\$/;"	m
angle_parts	server/tests/test_display_base.c	/^static const int angle_parts = 64 \/ SINGLE_PART;$/;"	v	file:
app_name	client/application.cpp	/^static const char* app_name = "spicec";$/;"	v	file:
append_data	client/mjpeg_decoder.cpp	/^void MJpegDecoder::append_data(uint8_t *data, size_t length)$/;"	f	class:MJpegDecoder
application	client/gui/gui.cpp	/^    Application& application() { return _gui.get_application();}$/;"	f	class:GUI::Dialog
apply_disconnect	client/client_net_socket.cpp	/^void ClientNetSocket::apply_disconnect()$/;"	f	class:ClientNetSocket
apply_guest_fin	client/client_net_socket.cpp	/^void ClientNetSocket::apply_guest_fin()$/;"	f	class:ClientNetSocket
area	client/screen_layer.h	/^    QRegion& area() { return _area;}$/;"	f	class:ScreenLayer
area	server/red_parse_qxl.h	/^    SpiceRect area;$/;"	m	struct:RedUpdateCmd
area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect area;$/;"	m	struct:QXLCompatUpdateCmd
area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect area;$/;"	m	struct:QXLUpdateCmd
arg_name	client/cmd_line_parser.h	/^        std::string arg_name;$/;"	m	class:CmdLineParser::Option
arm	client/process_loop.cpp	/^void Timer::arm(uint32_t msec)$/;"	f	class:Timer
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_append	spice-common/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	spice-common/configure	/^  as_fn_append ()$/;"	f
as_fn_append	spice-common/spice-protocol/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	spice-common/spice-protocol/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	spice-common/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	spice-common/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	spice-common/spice-protocol/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	spice-common/spice-protocol/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_error	spice-common/config.status	/^as_fn_error ()$/;"	f
as_fn_error	spice-common/configure	/^as_fn_error ()$/;"	f
as_fn_error	spice-common/spice-protocol/config.status	/^as_fn_error ()$/;"	f
as_fn_error	spice-common/spice-protocol/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	spice-common/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	spice-common/configure	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	spice-common/spice-protocol/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	spice-common/spice-protocol/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_exit	spice-common/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	spice-common/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	spice-common/spice-protocol/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	spice-common/spice-protocol/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	spice-common/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	spice-common/spice-protocol/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	spice-common/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	spice-common/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	spice-common/spice-protocol/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	spice-common/spice-protocol/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	spice-common/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	spice-common/spice-protocol/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	spice-common/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	spice-common/spice-protocol/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	spice-common/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	spice-common/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	spice-common/spice-protocol/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	spice-common/spice-protocol/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	spice-common/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	spice-common/spice-protocol/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
as_fn_unset	spice-common/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	spice-common/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	spice-common/spice-protocol/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	spice-common/spice-protocol/configure	/^as_fn_unset ()$/;"	f
assign	spice-common/python_modules/codegen.py	/^    def assign(self, var, val):$/;"	m	class:CodeWriter
assign_monitors	client/application.cpp	/^void Application::assign_monitors()$/;"	f	class:Application
async_command_alloc	server/red_dispatcher.c	/^static AsyncCommand *async_command_alloc(RedDispatcher *dispatcher,$/;"	f	file:
async_commands	server/red_dispatcher.c	/^    Ring async_commands;$/;"	m	struct:RedDispatcher	file:
async_complete	server/spice.h	/^    void (*async_complete)(QXLInstance *qin, uint64_t cookie);$/;"	m	struct:QXLInterface
async_lock	server/red_dispatcher.c	/^    pthread_mutex_t  async_lock;$/;"	m	struct:RedDispatcher	file:
async_read	server/reds_stream.c	/^    AsyncRead async_read;$/;"	m	struct:RedsStreamPrivate	file:
async_read_clear_handlers	server/reds_stream.c	/^static inline void async_read_clear_handlers(AsyncRead *async)$/;"	f	file:
async_read_handler	server/reds_stream.c	/^static void async_read_handler(G_GNUC_UNUSED int fd,$/;"	f	file:
atom_count	client/x11/platform.cpp	/^    int atom_count;$/;"	m	struct:clipboard_format_info	file:
atom_lists_overlap	client/x11/platform.cpp	/^static Atom atom_lists_overlap(Atom *atoms1, Atom *atoms2, int l1, int l2)$/;"	f	file:
atom_name	client/x11/platform.cpp	/^static const char *atom_name(Atom atom)$/;"	f	file:
atom_names	client/x11/platform.cpp	/^    const char *atom_names[16];$/;"	m	struct:clipboard_format_info	file:
atoms	client/x11/platform.cpp	/^    Atom atoms[16];$/;"	m	struct:clipboard_format_info	file:
atr_data	spice-common/common/messages.h	/^        VSCMsgATR atr_data;$/;"	m	union:SpiceMsgcSmartcard::__anon24
attach	client/application.cpp	/^    void attach(RedScreen& in_screen)$/;"	f	class:GUIBarrier
attach_display	client/cursor_channel.cpp	/^void CursorChannel::attach_display(DisplayChannel* channel)$/;"	f	class:CursorChannel
attach_gui_barriers	client/application.cpp	/^void Application::attach_gui_barriers()$/;"	f	class:Application
attach_inputs	client/display_channel.cpp	/^void DisplayChannel::attach_inputs(InputsChannel* inputs_channel)$/;"	f	class:DisplayChannel
attach_layer	client/screen.cpp	/^void RedScreen::attach_layer(ScreenLayer& layer)$/;"	f	class:RedScreen
attach_to_red_agent	server/reds.c	/^static SpiceCharDeviceState *attach_to_red_agent(SpiceCharDeviceInstance *sin)$/;"	f	file:
attach_to_screen	client/screen_layer.cpp	/^void ScreenLayer::attach_to_screen(Application& application, int screen_id)$/;"	f	class:ScreenLayer
attache_worker	server/spice.h	/^    void (*attache_worker)(QXLInstance *qin, QXLWorker *qxl_worker);$/;"	m	struct:QXLInterface
attache_worker	server/tests/test_display_base.c	/^static void attache_worker(QXLInstance *qin, QXLWorker *_qxl_worker)$/;"	f	file:
attr	spice-common/common/draw.h	/^    SpiceLineAttr attr;$/;"	m	struct:SpiceStroke
attr	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLLineAttr attr;$/;"	m	struct:QXLStroke
audio_delay	spice-common/common/messages.h	/^    uint32_t audio_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport
auth_mechanism	server/reds.c	/^    SpiceLinkAuthMechanism auth_mechanism;$/;"	m	struct:RedLinkInfo	file:
auth_mechanism	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t auth_mechanism;$/;"	m	struct:SpiceLinkAuthMechanism
auth_sasl_check_ssf	server/reds_stream.c	/^static int auth_sasl_check_ssf(RedsSASL *sasl, int *runSSF)$/;"	f	file:
available	server/red_worker.c	/^    int64_t available;$/;"	m	struct:PixmapCache	file:
average	server/reds-private.h	/^    uint32_t average;$/;"	m	struct:RedsStatValue
average_bytes_per_second	client/playback_channel.cpp	/^    uint32_t average_bytes_per_second;$/;"	m	struct:FormatInfo	file:
avg_quality	server/mjpeg_encoder.c	/^    uint64_t avg_quality;$/;"	m	struct:MJpegEncoder	file:
avg_quality	server/mjpeg_encoder.h	/^    double avg_quality;$/;"	m	struct:MJpegEncoderStats
b	client/glz_decoder.cpp	/^    uint8_t b;$/;"	m	struct:rgb24_pixel_t	file:
b	client/glz_decoder.cpp	/^    uint8_t b;$/;"	m	struct:rgb32_pixel_t	file:
b	client/gui/softrenderer.h	/^            uint8_t b;$/;"	m	class:CEGUI::SoftRenderer::ColourI
b	server/glz_encoder.c	/^    BYTE b;$/;"	m	struct:rgb24_pixel_t	file:
b	server/glz_encoder.c	/^    BYTE b;$/;"	m	struct:rgb32_pixel_t	file:
b	server/red_worker.c	/^    uint8_t b;$/;"	m	struct:rgb24_pixel_t	file:
b	server/red_worker.c	/^    uint8_t b;$/;"	m	struct:rgb32_pixel_t	file:
b	server/tests/test_empty_success.c	/^    int a,b;$/;"	m	struct:SpiceTimer	file:
b	spice-common/common/lz.c	/^    uint8_t b;$/;"	m	struct:rgb24_pixel_t	file:
b	spice-common/common/lz.c	/^    uint8_t b;$/;"	m	struct:rgb32_pixel_t	file:
b	spice-common/common/quic.c	/^    BYTE b;$/;"	m	struct:four_bytes_pixel_t	file:
b	spice-common/common/quic.c	/^    BYTE b;$/;"	m	struct:rgb24_pixel_t	file:
b	spice-common/common/quic.c	/^    BYTE b;$/;"	m	struct:rgb32_pixel_t	file:
b	spice-common/common/quic.c	/^    BYTE b;$/;"	m	struct:three_bytes_pixel_t	file:
back_area	spice-common/common/draw.h	/^    SpiceRect back_area;$/;"	m	struct:SpiceText
back_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect back_area;$/;"	m	struct:QXLText
back_brush	spice-common/common/draw.h	/^    SpiceBrush back_brush;$/;"	m	struct:SpiceText
back_brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush back_brush;$/;"	m	struct:QXLText
back_mode	spice-common/common/draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceStroke
back_mode	spice-common/common/draw.h	/^    uint16_t back_mode;$/;"	m	struct:SpiceText
back_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t back_mode;$/;"	m	struct:QXLStroke
back_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t back_mode;$/;"	m	struct:QXLText
back_rop	spice-common/common/canvas_base.c	/^    SpiceROP back_rop;$/;"	m	struct:__anon15	file:
backed_surface_data	server/red_worker.c	/^    uint8_t *backed_surface_data;$/;"	m	struct:Drawable	file:
base	client/canvas.h	/^    SpiceImageCache base;$/;"	m	class:SpiceImageCacheBase
base	client/canvas.h	/^    SpicePaletteCache base;$/;"	m	class:SpicePaletteCacheBase
base	client/red_peer.h	/^    uint8_t* base() { return spice_marshaller_get_ptr(_marshaller);}$/;"	f	class:RedPeer::OutMessage
base	server/inputs_channel.c	/^    PipeItem base;$/;"	m	struct:InputsInitPipeItem	file:
base	server/inputs_channel.c	/^    PipeItem base;$/;"	m	struct:InputsPipeItem	file:
base	server/inputs_channel.c	/^    PipeItem base;$/;"	m	struct:KeyModifiersPipeItem	file:
base	server/inputs_channel.c	/^    RedChannel base;$/;"	m	struct:InputsChannel	file:
base	server/inputs_channel.c	/^    RedChannelClient base;$/;"	m	struct:InputsChannelClient	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:AgentDataPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:InitPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:MouseModePipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:MultiMediaTimePipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:NamePipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:NotifyPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:PingPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:RedsOutItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:RefsPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:TokensPipeItem	file:
base	server/main_channel.c	/^    PipeItem base;$/;"	m	struct:UuidPipeItem	file:
base	server/main_channel.c	/^    RedChannelClient base;$/;"	m	struct:MainChannelClient	file:
base	server/main_channel.h	/^    RedChannel base;$/;"	m	struct:MainChannel
base	server/main_dispatcher.c	/^    Dispatcher base;$/;"	m	struct:__anon142	file:
base	server/migration_protocol.h	/^    SpiceMigrateDataCharDevice base;$/;"	m	struct:SpiceMigrateDataSmartcard
base	server/migration_protocol.h	/^    SpiceMigrateDataCharDevice base;$/;"	m	struct:SpiceMigrateDataSpiceVmc
base	server/red_channel.c	/^    PipeItem base;$/;"	m	struct:EmptyMsgPipeItem	file:
base	server/red_dispatcher.c	/^    QXLWorker base;$/;"	m	struct:RedDispatcher	file:
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageAddMemslotAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageCreatePrimarySurfaceAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageDestroyPrimarySurfaceAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageDestroySurfaceWaitAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageDestroySurfacesAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageFlushSurfacesAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageMonitorsConfigAsync
base	server/red_dispatcher.h	/^    RedWorkerMessageAsync base;$/;"	m	struct:RedWorkerMessageUpdateAsync
base	server/red_worker.c	/^    CursorItem base;$/;"	m	struct:LocalCursor	file:
base	server/red_worker.c	/^    PipeItem base;$/;"	m	struct:CursorPipeItem	file:
base	server/red_worker.c	/^    PipeItem base;$/;"	m	struct:StreamClipItem	file:
base	server/red_worker.c	/^    PipeItem base;$/;"	m	struct:UpgradeItem	file:
base	server/red_worker.c	/^    PipeItem base;$/;"	m	struct:VerbItem	file:
base	server/red_worker.c	/^    RedChannel base; \/\/ Must be the first thing$/;"	m	struct:CommonChannel	file:
base	server/red_worker.c	/^    RedChannelClient base;$/;"	m	struct:CommonChannelClient	file:
base	server/red_worker.c	/^    RingItem base;  \/* link for a list of pipe items held by Drawable *\/$/;"	m	struct:DrawablePipeItem	file:
base	server/red_worker.c	/^    RingItem base;$/;"	m	struct:GlzSharedDictionary	file:
base	server/red_worker.c	/^    RingItem base;$/;"	m	struct:PixmapCache	file:
base	server/red_worker.c	/^    TreeItem base;$/;"	m	struct:Container	file:
base	server/red_worker.c	/^    TreeItem base;$/;"	m	struct:DrawItem	file:
base	server/red_worker.c	/^    TreeItem base;$/;"	m	struct:Shadow	file:
base	server/reds-private.h	/^    SpiceCharDeviceState *base;$/;"	m	struct:VDIPortState
base	server/smartcard.c	/^    PipeItem base;$/;"	m	struct:ErrorItem	file:
base	server/smartcard.c	/^    PipeItem base;$/;"	m	struct:MsgItem	file:
base	server/smartcard.c	/^    RedChannel base;$/;"	m	struct:SmartCardChannel	file:
base	server/smartcard.c	/^    RedChannelClient base;$/;"	m	struct:SmartCardChannelClient	file:
base	server/snd_worker.c	/^    SndChannel base;$/;"	m	struct:PlaybackChannel	file:
base	server/snd_worker.c	/^    SndChannel base;$/;"	m	struct:RecordChannel	file:
base	server/spice-experimental.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceNetWireInstance
base	server/spice-experimental.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceNetWireInterface
base	server/spice.h	/^    SpiceBaseInstance  base;$/;"	m	struct:QXLInstance
base	server/spice.h	/^    SpiceBaseInstance  base;$/;"	m	struct:SpicePlaybackInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceCharDeviceInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceKbdInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceMigrateInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceMouseInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceRecordInstance
base	server/spice.h	/^    SpiceBaseInstance base;$/;"	m	struct:SpiceTabletInstance
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:QXLInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceCharDeviceInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceCoreInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceKbdInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceMigrateInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceMouseInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpicePlaybackInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceRecordInterface
base	server/spice.h	/^    SpiceBaseInterface base;$/;"	m	struct:SpiceTabletInterface
base	server/spice_image_cache.h	/^    SpiceImageCache base;$/;"	m	struct:ImageCache
base	server/spicevmc.c	/^    PipeItem base;$/;"	m	struct:PortEventPipeItem	file:
base	server/spicevmc.c	/^    PipeItem base;$/;"	m	struct:PortInitPipeItem	file:
base	server/spicevmc.c	/^    PipeItem base;$/;"	m	struct:SpiceVmcPipeItem	file:
base	spice-common/common/canvas_base.c	/^    lineGC base;$/;"	m	struct:__anon15	file:
base	spice-common/common/gdi_canvas.c	/^    CanvasBase base;$/;"	m	struct:GdiCanvas	file:
base	spice-common/common/gl_canvas.c	/^    CanvasBase base;$/;"	m	struct:GLCanvas	file:
base	spice-common/common/marshaller.c	/^    size_t base;$/;"	m	struct:SpiceMarshallerData	file:
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayCopyBits
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawBlackness
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawComposite
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawCopy
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawFill
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawInvers
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawOpaque
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawRop3
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawStroke
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawText
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawTransparent
base	spice-common/common/messages.h	/^    SpiceMsgDisplayBase base;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness
base	spice-common/common/messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamData
base	spice-common/common/messages.h	/^    SpiceStreamDataHeader base;$/;"	m	struct:SpiceMsgDisplayStreamDataSized
base	spice-common/common/ogl_ctx.c	/^    OGLCtx base;$/;"	m	struct:OGLPixmapCtx	file:
base	spice-common/common/sw_canvas.c	/^    CanvasBase base;$/;"	m	struct:SwCanvas	file:
base	spice-common/spice-protocol/spice/controller_prot.h	/^    ControllerInitHeader base;$/;"	m	struct:ControllerInit
base	spice-common/spice-protocol/spice/controller_prot.h	/^    ControllerMsg base;$/;"	m	struct:ControllerData
base	spice-common/spice-protocol/spice/controller_prot.h	/^    ControllerMsg base;$/;"	m	struct:ControllerValue
base	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FrgMenuInitHeader base;$/;"	m	struct:FrgMenuInit
base	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FrgMenuMsg base;$/;"	m	struct:FrgMenuAddItem
base	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FrgMenuMsg base;$/;"	m	struct:FrgMenuEvent
base	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FrgMenuMsg base;$/;"	m	struct:FrgMenuRmItem
base	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    FrgMenuMsg base;$/;"	m	struct:FrgMenuSetTitle
base_channel	server/snd_worker.c	/^    RedChannel *base_channel;$/;"	m	struct:SndWorker	file:
base_enc_size	server/mjpeg_encoder.c	/^    uint64_t base_enc_size;$/;"	m	struct:MJpegEncoderRateControl	file:
basic_event_loop_init	server/tests/basic_event_loop.c	/^SpiceCoreInterface *basic_event_loop_init(void)$/;"	f
basic_event_loop_mainloop	server/tests/basic_event_loop.c	/^void basic_event_loop_mainloop(void)$/;"	f
bbox	server/red_parse_qxl.h	/^    SpiceRect bbox;$/;"	m	struct:RedDrawable
bbox	server/tests/test_display_base.h	/^    QXLRect bbox;$/;"	m	struct:CommandDrawBitmap
bbox	server/tests/test_display_base.h	/^    QXLRect bbox;$/;"	m	struct:CommandDrawSolid
bbox	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect bbox;$/;"	m	struct:QXLCompatDrawable
bbox	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect bbox;$/;"	m	struct:QXLDrawable
begin	client/cmd_line_parser.cpp	/^void CmdLineParser::begin(int argc, char** argv)$/;"	f	class:CmdLineParser
begin_block	spice-common/python_modules/codegen.py	/^    def begin_block(self, prefix= "", comment = ""):$/;"	m	class:CodeWriter
begin_decode	client/jpeg_decoder.cpp	/^void JpegDecoder::begin_decode(uint8_t* data, int data_size, int& out_width, int& out_height)$/;"	f	class:JpegDecoder
begin_decode	spice-common/common/canvas_base.h	/^    void (*begin_decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps
begin_draw	client/canvas.cpp	/^void Canvas::begin_draw(SpiceMsgDisplayBase& base, int size, size_t min_size)$/;"	f	class:Canvas
begin_trans	client/x11/platform.cpp	/^void XMonitor::begin_trans()$/;"	f	class:XMonitor
begin_update	client/screen.cpp	/^inline void RedScreen::begin_update(QRegion& direct_rgn, QRegion& composit_rgn,$/;"	f	class:RedScreen
begin_update	client/screen_layer.cpp	/^void ScreenLayer::begin_update(QRegion& direct_rgn, QRegion& composit_rgn)$/;"	f	class:ScreenLayer
best_display_setting	client/windows/platform.cpp	/^bool WinMonitor::best_display_setting(uint32_t width, uint32_t height, uint32_t depth)$/;"	f	class:WinMonitor
bestcode	spice-common/common/quic.c	/^    unsigned int bestcode;  \/* best code so far *\/$/;"	m	struct:s_bucket	file:
besttrigtab	spice-common/common/quic.c	/^static const unsigned short besttrigtab[3][11] = { \/* array of wm_trigger for waitmask and evol,$/;"	v	file:
bezier_flattener	spice-common/common/glc.c	/^static TassVertex *bezier_flattener(InternaCtx *ctx, PathPoint *points)$/;"	f	file:
bgGroup	spice-common/common/lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:
bin_PROGRAMS	client/Makefile	/^bin_PROGRAMS = spicec$(EXEEXT)$/;"	m
bind	client/controller.cpp	/^void ControllerConnection::bind(NamedPipe::ConnectionRef conn_ref)$/;"	f	class:ControllerConnection
bind	client/foreign_menu.cpp	/^void ForeignMenuConnection::bind(NamedPipe::ConnectionRef conn_ref)$/;"	f	class:ForeignMenuConnection
bind	client/x11/named_pipe.cpp	/^void Session::bind(NamedPipe::ConnectionInterface* conn_interface)$/;"	f	class:Session
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	client/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	docs/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	docs/manual/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	server/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	server/tests/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	spice-common/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	spice-common/common/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	spice-common/python_modules/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	spice-common/spice-protocol/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	spice-common/spice-protocol/spice/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	client/windows/platform.cpp	/^    int bit;$/;"	m	struct:KeyboardModifier	file:
bit_rate	server/h264_type.h	/^    int bit_rate;$/;"	m	struct:_H264StreamInfo
bit_rate_info	server/mjpeg_encoder.c	/^    MJpegEncoderBitRateInfo bit_rate_info;$/;"	m	struct:MJpegEncoderRateControl	file:
bitat	spice-common/common/quic.c	/^static const unsigned int bitat[32] = {$/;"	v	file:
bitmap	server/tests/test_display_base.c	/^    uint8_t *bitmap;$/;"	m	struct:SimpleSpiceUpdate	file:
bitmap	server/tests/test_display_base.h	/^        CommandDrawBitmap bitmap;$/;"	m	union:Command::__anon131
bitmap	server/tests/test_display_base.h	/^    uint8_t *bitmap;$/;"	m	struct:CommandDrawBitmap
bitmap	spice-common/common/canvas_utils.h	/^    HBITMAP bitmap;$/;"	m	struct:PixmanData
bitmap	spice-common/common/draw.h	/^        SpiceBitmap         bitmap;$/;"	m	union:SpiceImage::__anon35
bitmap	spice-common/common/draw.h	/^    SpiceImage *bitmap;$/;"	m	struct:SpiceQMask
bitmap	spice-common/common/glc.c	/^    const uint8_t *bitmap;$/;"	m	struct:FillMaskInfo	file:
bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLBitmap bitmap;$/;"	m	union:QXLImage::__anon82
bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL bitmap;$/;"	m	struct:QXLQMask
bitmap_16_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_16_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_16_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_1be_16_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_1be_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_1be_32_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_1be_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_24_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_24_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_24_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_24_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_32_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_32_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_32_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_4be_16_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_4be_16_to_16_555(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_4be_32_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_4be_32_to_32(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_8_16_to_16_555	spice-common/common/pixman_utils.c	/^static void bitmap_8_16_to_16_555(uint8_t *dest, int dest_stride,$/;"	f	file:
bitmap_8_32_to_32	spice-common/common/pixman_utils.c	/^static void bitmap_8_32_to_32(uint8_t *dest, int dest_stride,$/;"	f	file:
bitmap_8_to_8	spice-common/common/pixman_utils.c	/^static void bitmap_8_to_8(uint8_t* dest, int dest_stride,$/;"	f	file:
bitmap_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect bitmap_area;$/;"	m	struct:QXLCompatDrawable
bitmap_consistent	server/red_parse_qxl.c	/^static int bitmap_consistent(SpiceBitmap *bitmap)$/;"	f	file:
bitmap_fmt_is_rgb	server/red_common.h	/^static inline int bitmap_fmt_is_rgb(uint8_t fmt)$/;"	f
bitmap_format_to_string	server/red_parse_qxl.c	/^static const char *bitmap_format_to_string(int format)$/;"	f	file:
bitmap_offset	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t bitmap_offset;$/;"	m	struct:QXLCompatDrawable
bitrate_per_sec	server/main_channel.c	/^    uint64_t bitrate_per_sec;$/;"	m	struct:MainChannelClient	file:
bits	server/red_dispatcher.c	/^    uint32_t bits;$/;"	m	struct:RedWorkeState	file:
bits	server/spice.h	/^    uint32_t bits;$/;"	m	struct:QXLDevInfo
bits	spice-common/common/messages.h	/^    uint32_t bits;$/;"	m	struct:SpiceMsgDisplayMode
bits	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t bits;$/;"	m	struct:QXLMode
bits_cache	spice-common/common/canvas_base.c	/^    SpiceImageCache *bits_cache;$/;"	m	struct:CanvasBase	file:
bits_per_sample	client/playback_channel.cpp	/^    uint16_t bits_per_sample;$/;"	m	struct:FormatInfo	file:
bits_unique	server/red_worker.c	/^    uint32_t bits_unique;$/;"	m	struct:RedWorker	file:
blackness	server/red_parse_qxl.h	/^        SpiceBlackness blackness;$/;"	m	union:RedDrawable::__anon161
blackness	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLBlackness blackness;$/;"	m	union:QXLCompatDrawable::__anon76
blackness	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLBlackness blackness;$/;"	m	union:QXLDrawable::__anon77
blend	server/red_parse_qxl.h	/^        SpiceBlend blend;$/;"	m	union:RedDrawable::__anon161
blend	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLBlend blend;$/;"	m	union:QXLCompatDrawable::__anon76
blend	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLBlend blend;$/;"	m	union:QXLDrawable::__anon77
blend_image	spice-common/common/canvas_base.h	/^    void (*blend_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blend_image	spice-common/common/sw_canvas.c	/^static void blend_image(SpiceCanvas *spice_canvas,$/;"	f	file:
blend_image_from_surface	spice-common/common/canvas_base.h	/^    void (*blend_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blend_image_from_surface	spice-common/common/sw_canvas.c	/^static void blend_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
blend_pixels	client/windows/red_drawable.cpp	/^void RedDrawable::blend_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& dest)$/;"	f	class:RedDrawable
blend_pixels	client/x11/red_drawable.cpp	/^void RedDrawable::blend_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& area)$/;"	f	class:RedDrawable
blend_scale_image	spice-common/common/canvas_base.h	/^    void (*blend_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blend_scale_image	spice-common/common/sw_canvas.c	/^static void blend_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
blend_scale_image_from_surface	spice-common/common/canvas_base.h	/^    void (*blend_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blend_scale_image_from_surface	spice-common/common/sw_canvas.c	/^static void blend_scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
blend_to_drawable	client/x11/red_drawable.cpp	/^static inline void blend_to_drawable(const RedDrawable_p* dest,$/;"	f	file:
blend_to_pixmap	client/x11/red_drawable.cpp	/^static inline void blend_to_pixmap(const RedDrawable_p* dest,$/;"	f	file:
blend_to_pixmap_from_drawable	client/x11/red_drawable.cpp	/^static inline void blend_to_pixmap_from_drawable(const RedDrawable_p* dest,$/;"	f	file:
blend_to_pixmap_from_pixmap	client/x11/red_drawable.cpp	/^static inline void blend_to_pixmap_from_pixmap(const RedDrawable_p* dest,$/;"	f	file:
blit_image	spice-common/common/canvas_base.h	/^    void (*blit_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blit_image	spice-common/common/sw_canvas.c	/^static void blit_image(SpiceCanvas *spice_canvas,$/;"	f	file:
blit_image_from_surface	spice-common/common/canvas_base.h	/^    void (*blit_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blit_image_from_surface	spice-common/common/sw_canvas.c	/^static void blit_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
blit_image_rop	spice-common/common/canvas_base.h	/^    void (*blit_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blit_image_rop	spice-common/common/sw_canvas.c	/^static void blit_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
blit_image_rop_from_surface	spice-common/common/canvas_base.h	/^    void (*blit_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
blit_image_rop_from_surface	spice-common/common/sw_canvas.c	/^static void blit_image_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
block	spice-common/python_modules/codegen.py	/^    def block(self, prefix= "", comment = "", semicolon=False, newline=True):$/;"	m	class:CodeWriter
block_align	client/playback_channel.cpp	/^    uint16_t block_align;$/;"	m	struct:FormatInfo	file:
blocked	server/red_channel.h	/^        int blocked;$/;"	m	struct:RedChannelClient::__anon148
blocked	server/snd_worker.c	/^    int blocked;$/;"	m	struct:SndChannel	file:
bmp_generator1	server/red_worker.c	/^int bmp_generator1(int width,int height,unsigned char *data)$/;"	f
bn	server/reds-private.h	/^    BIGNUM *bn;$/;"	m	struct:TicketInfo
bnf	spice-common/python_modules/spice_parser.py	/^bnf = None$/;"	v
bottom	client/gui/softrenderer.h	/^            int bottom;$/;"	m	struct:CEGUI::SoftRenderer::RectI
bottom	server/migration_protocol.h	/^    int32_t bottom;$/;"	m	struct:SpiceMigrateDataRect
bottom	spice-common/common/draw.h	/^    int32_t bottom;$/;"	m	struct:SpiceRect
bottom	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t bottom;$/;"	m	struct:QXLRect
bottom	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t bottom;$/;"	m	struct:QXLURect
bottom_left	client/gui/softrenderer.h	/^            ColourI bottom_left;$/;"	m	struct:CEGUI::SoftRenderer::ColourIRect
bottom_right	client/gui/softrenderer.h	/^            ColourI bottom_right;$/;"	m	struct:CEGUI::SoftRenderer::ColourIRect
bounce_back	client/x11/platform.cpp	/^static void bounce_back(XMonitor& monitor, const XMonitorsList& monitors, int head, int distance)$/;"	f	file:
box	spice-common/common/messages.h	/^    SpiceRect box;$/;"	m	struct:SpiceMsgDisplayBase
bpp	spice-common/spice-protocol/spice/qxl_windows.h	/^    uint32_t bpp;$/;"	m	struct:QXLEscapeSetCustomDisplay
bppmask	spice-common/common/quic.c	/^static const unsigned long int bppmask[33] = {$/;"	v	file:
break_scan	client/inputs_channel.h	/^        uint32_t break_scan;$/;"	m	struct:InputsChannel::KeyInfo
brush	spice-common/common/draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceFill
brush	spice-common/common/draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceOpaque
brush	spice-common/common/draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceRop3
brush	spice-common/common/draw.h	/^    SpiceBrush brush;$/;"	m	struct:SpiceStroke
brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush brush;$/;"	m	struct:QXLFill
brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush brush;$/;"	m	struct:QXLOpaque
brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush brush;$/;"	m	struct:QXLRop3
brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush brush;$/;"	m	struct:QXLStroke
buckets_buf	spice-common/common/quic.c	/^    s_bucket *buckets_buf;$/;"	m	struct:FamilyStat	file:
buckets_ptrs	spice-common/common/quic.c	/^    s_bucket **buckets_ptrs;$/;"	m	struct:FamilyStat	file:
buf	server/char_device.h	/^    uint8_t *buf;$/;"	m	struct:SpiceCharDeviceWriteBuffer
buf	server/red_worker.c	/^    SpiceWaitForChannel buf[MAX_CACHE_CLIENTS];$/;"	m	struct:WaitForChannels	file:
buf	server/red_worker.c	/^    uint32_t buf[RED_COMPRESS_BUF_SIZE \/ 4];$/;"	m	struct:RedCompressBuf	file:
buf	server/smartcard.c	/^    uint8_t             *buf;$/;"	m	struct:SmartCardDeviceState	file:
buf	server/snd_worker.c	/^        uint8_t buf[SND_RECEIVE_BUF_SIZE];$/;"	m	struct:SndChannel::__anon140	file:
buf	server/spice.h	/^    uint8_t *buf;$/;"	m	struct:QXLDrawArea
buf	server/spicevmc.c	/^    uint8_t buf[BUF_SIZE];$/;"	m	struct:SpiceVmcPipeItem	file:
buf_pos	server/smartcard.c	/^    uint8_t             *buf_pos;$/;"	m	struct:SmartCardDeviceState	file:
buf_size	server/char_device.h	/^    uint32_t buf_size;$/;"	m	struct:SpiceCharDeviceWriteBuffer
buf_size	server/smartcard.c	/^    uint32_t             buf_size;$/;"	m	struct:SmartCardDeviceState	file:
buf_used	server/char_device.h	/^    uint32_t buf_used;$/;"	m	struct:SpiceCharDeviceWriteBuffer
buf_used	server/smartcard.c	/^    uint32_t             buf_used;$/;"	m	struct:SmartCardDeviceState	file:
buf_used	server/spicevmc.c	/^    uint32_t buf_used;$/;"	m	struct:SpiceVmcPipeItem	file:
buffer	server/mjpeg_encoder.c	/^  uint8_t * buffer;		\/* start of buffer *\/$/;"	m	struct:__anon196	file:
buffer	server/reds-private.h	/^    uint8_t *buffer;$/;"	m	struct:RedsClientMonitorsConfig
buffer	spice-common/common/mem.h	/^    uint8_t *buffer;$/;"	m	struct:SpiceBuffer
buffer_pos	server/reds-private.h	/^    int buffer_pos;$/;"	m	struct:RedsClientMonitorsConfig
buffer_size	server/reds-private.h	/^    int buffer_size;$/;"	m	struct:RedsClientMonitorsConfig
buffers	spice-common/common/marshaller.c	/^    MarshallerBuffer *buffers;$/;"	m	struct:SpiceMarshallerData	file:
bufs_head	server/red_worker.c	/^    RedCompressBuf *bufs_head;$/;"	m	struct:__anon177	file:
bufs_tail	server/red_worker.c	/^    RedCompressBuf *bufs_tail;$/;"	m	struct:__anon177	file:
bufsize	server/mjpeg_encoder.c	/^  size_t bufsize;$/;"	m	struct:__anon196	file:
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	client/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	client/cmd_line_parser.cpp	/^void CmdLineParser::build()$/;"	f	class:CmdLineParser
build	docs/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	docs/manual/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	server/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	server/tests/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	spice-common/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	spice-common/common/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	spice-common/python_modules/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	client/Makefile	/^build_alias = $/;"	m
build_alias	docs/Makefile	/^build_alias = $/;"	m
build_alias	docs/manual/Makefile	/^build_alias = $/;"	m
build_alias	server/Makefile	/^build_alias = $/;"	m
build_alias	server/tests/Makefile	/^build_alias = $/;"	m
build_alias	spice-common/Makefile	/^build_alias = $/;"	m
build_alias	spice-common/common/Makefile	/^build_alias = $/;"	m
build_alias	spice-common/python_modules/Makefile	/^build_alias = $/;"	m
build_alias	spice-common/spice-protocol/Makefile	/^build_alias = $/;"	m
build_alias	spice-common/spice-protocol/spice/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	client/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	docs/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	docs/manual/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	server/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	server/tests/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	spice-common/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	spice-common/common/Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	spice-common/python_modules/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	client/Makefile	/^build_os = linux-gnu$/;"	m
build_os	docs/Makefile	/^build_os = linux-gnu$/;"	m
build_os	docs/manual/Makefile	/^build_os = linux-gnu$/;"	m
build_os	server/Makefile	/^build_os = linux-gnu$/;"	m
build_os	server/tests/Makefile	/^build_os = linux-gnu$/;"	m
build_os	spice-common/Makefile	/^build_os = linux-gnu$/;"	m
build_os	spice-common/common/Makefile	/^build_os = linux-gnu$/;"	m
build_os	spice-common/python_modules/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	client/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	docs/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	docs/manual/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	server/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	server/tests/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	spice-common/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	spice-common/common/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	spice-common/python_modules/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
build_vendor	client/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	docs/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	docs/manual/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	server/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	server/tests/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	spice-common/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	spice-common/common/Makefile	/^build_vendor = unknown$/;"	m
build_vendor	spice-common/python_modules/Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	client/Makefile	/^builddir = .$/;"	m
builddir	docs/Makefile	/^builddir = .$/;"	m
builddir	docs/manual/Makefile	/^builddir = .$/;"	m
builddir	server/Makefile	/^builddir = .$/;"	m
builddir	server/tests/Makefile	/^builddir = .$/;"	m
builddir	spice-common/Makefile	/^builddir = .$/;"	m
builddir	spice-common/common/Makefile	/^builddir = .$/;"	m
builddir	spice-common/python_modules/Makefile	/^builddir = .$/;"	m
builddir	spice-common/spice-protocol/Makefile	/^builddir = .$/;"	m
builddir	spice-common/spice-protocol/spice/Makefile	/^builddir = .$/;"	m
button	spice-common/common/messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMousePress
button	spice-common/common/messages.h	/^    int32_t button;$/;"	m	struct:SpiceMsgcMouseRelease
buttons	server/spice.h	/^    void (*buttons)(SpiceMouseInstance *sin, uint32_t buttons_state);$/;"	m	struct:SpiceMouseInterface
buttons	server/spice.h	/^    void (*buttons)(SpiceTabletInstance* tablet, uint32_t buttons_state);$/;"	m	struct:SpiceTabletInterface
buttons	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t buttons;$/;"	m	struct:VDAgentMouseState
buttons_state	spice-common/common/messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePress
buttons_state	spice-common/common/messages.h	/^    int32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseRelease
buttons_state	spice-common/common/messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMouseMotion
buttons_state	spice-common/common/messages.h	/^    uint32_t buttons_state;$/;"	m	struct:SpiceMsgcMousePosition
byte_rate	server/mjpeg_encoder.c	/^    uint64_t byte_rate;$/;"	m	struct:MJpegEncoderRateControl	file:
bytes_count	server/glz_encoder.c	/^        size_t bytes_count;$/;"	m	struct:Encoder::__anon203	file:
bytes_per_pixel	server/mjpeg_encoder.c	/^    unsigned int bytes_per_pixel; \/* bytes per pixel of the input buffer *\/$/;"	m	struct:MJpegEncoder	file:
c	spice-common/common/quic.c	/^    BYTE c;$/;"	m	struct:four_bytes_pixel_t	file:
c	spice-common/common/quic.c	/^    BYTE c;$/;"	m	struct:three_bytes_pixel_t	file:
cStyleComment	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
c_define	spice-common/python_modules/ptypes.py	/^    def c_define(self, writer):$/;"	m	class:EnumType
c_define	spice-common/python_modules/ptypes.py	/^    def c_define(self, writer):$/;"	m	class:FlagsType
c_describe	spice-common/python_modules/ptypes.py	/^    def c_describe(self, writer):$/;"	m	class:EnumBaseType
c_enumname	spice-common/python_modules/ptypes.py	/^    def c_enumname(self, value):$/;"	m	class:EnumBaseType
c_enumname_by_name	spice-common/python_modules/ptypes.py	/^    def c_enumname_by_name(self, name):$/;"	m	class:EnumBaseType
c_i	server/tests/test_display_base.c	/^static int c_i = 0;$/;"	v	file:
c_name	spice-common/python_modules/ptypes.py	/^    def c_name(self):$/;"	m	class:EnumBaseType
c_name	spice-common/python_modules/ptypes.py	/^    def c_name(self):$/;"	m	class:MessageType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:ArrayType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:EnumBaseType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:IntegerType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:MessageType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:PointerType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:StructType
c_type	spice-common/python_modules/ptypes.py	/^    def c_type(self):$/;"	m	class:TypeAlias
ca_certificate_file	server/reds.c	/^    char ca_certificate_file[256];$/;"	m	struct:RedSSLParameters	file:
cac_card_events_thread_entry	client/smartcard_channel.cpp	/^void* SmartCardChannel::cac_card_events_thread_entry(void* data)$/;"	f	class:SmartCardChannel
cac_card_events_thread_main	client/smartcard_channel.cpp	/^void SmartCardChannel::cac_card_events_thread_main()$/;"	f	class:SmartCardChannel
cache	spice-common/common/gdi_canvas.c	/^    int cache;$/;"	m	struct:BitmapData	file:
cache_data	server/red_worker.c	/^        } cache_data;$/;"	m	union:CacheItem::__anon173	typeref:struct:CacheItem::__anon173::__anon174	file:
cache_hits_counter	server/red_worker.c	/^    uint64_t *cache_hits_counter;$/;"	m	struct:DisplayChannel	file:
cache_lock	server/red_worker.c	/^pthread_mutex_t cache_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
cache_size	spice-common/common/messages.h	/^    uint64_t cache_size;$/;"	m	struct:SpiceMsgcClientInfo
calac_pixel	client/gui/softrenderer.cpp	/^static inline uint8_t calac_pixel(uint64_t c1, uint64_t c2, uint64_t c3, uint64_t a_mul)$/;"	f	namespace:CEGUI
calc_compression_level	server/red_dispatcher.c	/^static inline int calc_compression_level(void)$/;"	f	file:
calc_image_win_idx	client/glz_decoder_window.cpp	/^inline int GlzDecoderWindow::calc_image_win_idx(uint64_t image_id)$/;"	f	class:GlzDecoderWindow
calc_next_expiration_time	client/process_loop.cpp	/^void Timer::calc_next_expiration_time(uint64_t now)$/;"	f	class:Timer
calc_next_expiration_time	client/process_loop.h	/^    void calc_next_expiration_time() { _expiration += _interval;}$/;"	f	class:Timer
calc_next_timeout	server/tests/basic_event_loop.c	/^void calc_next_timeout(SpiceTimer *next, struct timeval *timeout)$/;"	f
calc_pixmap_cach_and_glz_window_size	client/red_client.cpp	/^void RedClient::calc_pixmap_cach_and_glz_window_size(uint32_t display_channels_hint,$/;"	f	class:RedClient
calc_realloc_size	client/glz_decoder_window.cpp	/^inline int GlzDecoderWindow::calc_realloc_size(uint64_t new_tail_image_id)$/;"	f	class:GlzDecoderWindow
calc_rop3	spice-common/common/gdi_canvas.c	/^uint8_t calc_rop3(uint16_t rop3_bits, int brush)$/;"	f
calc_rop3_src_brush	spice-common/common/gdi_canvas.c	/^uint8_t calc_rop3_src_brush(uint16_t rop3_bits)$/;"	f
camel_to_underscores	spice-common/python_modules/codegen.py	/^def camel_to_underscores(s, upper = False):$/;"	f
can_lossy	server/red_worker.c	/^    int can_lossy;$/;"	m	struct:ImageItem	file:
can_receive	client/client_net_socket.cpp	/^inline bool ClientNetSocket::can_receive()$/;"	f	class:ClientNetSocket
can_send	client/client_net_socket.cpp	/^inline bool ClientNetSocket::can_send()$/;"	f	class:ClientNetSocket
can_send_packet	server/spice-experimental.h	/^    int (*can_send_packet)(SpiceNetWireInstance *sin);$/;"	m	struct:SpiceNetWireInterface
canvas	server/red_worker.c	/^    SpiceCanvas *canvas;$/;"	m	struct:DrawContext	file:
canvas	spice-common/common/canvas_base.c	/^    SpiceCanvas *canvas;$/;"	m	struct:__anon15	file:
canvas_16bpp_to_32bpp	spice-common/common/canvas_base.c	/^static inline uint32_t canvas_16bpp_to_32bpp(uint32_t color)$/;"	f	file:
canvas_A1_invers	spice-common/common/canvas_base.c	/^static inline pixman_image_t *canvas_A1_invers(pixman_image_t *src_surf)$/;"	f	file:
canvas_base_destroy	spice-common/common/canvas_base.c	/^static void canvas_base_destroy(CanvasBase *canvas)$/;"	f	file:
canvas_base_group_end	spice-common/common/canvas_base.c	/^static void canvas_base_group_end(SpiceCanvas *spice_canvas)$/;"	f	file:
canvas_base_group_start	spice-common/common/canvas_base.c	/^static void canvas_base_group_start(SpiceCanvas *spice_canvas, QRegion *region)$/;"	f	file:
canvas_base_init	spice-common/common/canvas_base.c	/^static int canvas_base_init(CanvasBase *canvas, SpiceCanvasOps *ops,$/;"	f	file:
canvas_base_init_ops	spice-common/common/canvas_base.c	/^inline static void canvas_base_init_ops(SpiceCanvasOps *ops)$/;"	f	file:
canvas_bitmap_to_surface	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_bitmap_to_surface(CanvasBase *canvas, SpiceBitmap* bitmap,$/;"	f	file:
canvas_clear	spice-common/common/sw_canvas.c	/^static void canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:
canvas_clip_pixman	spice-common/common/canvas_base.c	/^static void canvas_clip_pixman(CanvasBase *canvas,$/;"	f	file:
canvas_copy_bits	spice-common/common/canvas_base.c	/^static void canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:
canvas_create	spice-common/common/sw_canvas.c	/^SpiceCanvas *canvas_create(int width, int height, uint32_t format$/;"	f
canvas_create_common	spice-common/common/sw_canvas.c	/^static SpiceCanvas *canvas_create_common(pixman_image_t *image,$/;"	f	file:
canvas_create_for_data	spice-common/common/sw_canvas.c	/^SpiceCanvas *canvas_create_for_data(int width, int height, uint32_t format,$/;"	f
canvas_destroy	spice-common/common/sw_canvas.c	/^static void canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:
canvas_draw_alpha_blend	spice-common/common/canvas_base.c	/^static void canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)$/;"	f	file:
canvas_draw_blackness	spice-common/common/canvas_base.c	/^static void canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:
canvas_draw_blend	spice-common/common/canvas_base.c	/^static void canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:
canvas_draw_composite	spice-common/common/canvas_base.c	/^static void canvas_draw_composite(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:
canvas_draw_copy	spice-common/common/canvas_base.c	/^static void canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:
canvas_draw_fill	spice-common/common/canvas_base.c	/^static void canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:
canvas_draw_invers	spice-common/common/canvas_base.c	/^static void canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:
canvas_draw_opaque	spice-common/common/canvas_base.c	/^static void canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:
canvas_draw_rop3	spice-common/common/canvas_base.c	/^static void canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:
canvas_draw_stroke	spice-common/common/canvas_base.c	/^static void canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:
canvas_draw_text	spice-common/common/sw_canvas.c	/^static void canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox,$/;"	f	file:
canvas_draw_transparent	spice-common/common/canvas_base.c	/^static void canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent)$/;"	f	file:
canvas_draw_whiteness	spice-common/common/canvas_base.c	/^static void canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:
canvas_draws_on_surface	server/red_worker.c	/^    int canvas_draws_on_surface;$/;"	m	struct:DrawContext	file:
canvas_get_as_surface	spice-common/common/sw_canvas.c	/^static pixman_image_t *canvas_get_as_surface(SwCanvas *canvas,$/;"	f	file:
canvas_get_bitmap_mask	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_bitmap_mask(CanvasBase *canvas, SpiceBitmap* bitmap, int invers)$/;"	f	file:
canvas_get_bits	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,$/;"	f	file:
canvas_get_glz	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_glz(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:
canvas_get_glz_rgb_common	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_glz_rgb_common(CanvasBase *canvas, uint8_t *data,$/;"	f	file:
canvas_get_image	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_image(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:
canvas_get_image_from_self	spice-common/common/canvas_base.c	/^static pixman_image_t* canvas_get_image_from_self(SpiceCanvas *canvas,$/;"	f	file:
canvas_get_image_internal	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_image_internal(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:
canvas_get_jpeg	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_jpeg(CanvasBase *canvas, SpiceImage *image, int invers)$/;"	f	file:
canvas_get_jpeg_alpha	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_jpeg_alpha(CanvasBase *canvas,$/;"	f	file:
canvas_get_localized_palette	spice-common/common/canvas_base.c	/^static inline SpicePalette *canvas_get_localized_palette(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags, int *free_palette)$/;"	f	file:
canvas_get_lz	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_lz(CanvasBase *canvas, SpiceImage *image, int invers,$/;"	f	file:
canvas_get_mask	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_mask(CanvasBase *canvas, SpiceQMask *mask, int *needs_invert_out)$/;"	f	file:
canvas_get_palette	spice-common/common/canvas_base.c	/^static inline SpicePalette *canvas_get_palette(CanvasBase *canvas, SpicePalette *base_palette, uint64_t palette_id, uint8_t flags)$/;"	f	file:
canvas_get_pixman_brush	spice-common/common/sw_canvas.c	/^static pixman_image_t *canvas_get_pixman_brush(SwCanvas *canvas,$/;"	f	file:
canvas_get_quic	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_quic(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:
canvas_get_str_mask	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_str_mask(CanvasBase *canvas, SpiceString *str, int bpp, SpicePoint *pos)$/;"	f	file:
canvas_get_surface	spice-common/common/canvas_base.c	/^static SpiceCanvas *canvas_get_surface(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:
canvas_get_surface_internal	spice-common/common/canvas_base.c	/^static SpiceCanvas *canvas_get_surface_internal(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:
canvas_get_surface_mask	spice-common/common/canvas_base.c	/^static SpiceCanvas *canvas_get_surface_mask(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:
canvas_get_surface_mask_internal	spice-common/common/canvas_base.c	/^static SpiceCanvas *canvas_get_surface_mask_internal(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:
canvas_get_target_format	spice-common/common/canvas_base.c	/^static pixman_format_code_t canvas_get_target_format(CanvasBase *canvas,$/;"	f	file:
canvas_get_zlib_glz_rgb	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_get_zlib_glz_rgb(CanvasBase *canvas, SpiceImage *image,$/;"	f	file:
canvas_mask_pixman	spice-common/common/canvas_base.c	/^static void canvas_mask_pixman(CanvasBase *canvas,$/;"	f	file:
canvas_put_bits	spice-common/common/canvas_base.c	/^static inline void canvas_put_bits(uint8_t *dest, int dest_offset, uint8_t *src, int n)$/;"	f	file:
canvas_put_glyph_bits	spice-common/common/canvas_base.c	/^static void canvas_put_glyph_bits(SpiceRasterGlyph *glyph, int bpp, uint8_t *dest, int dest_stride,$/;"	f	file:
canvas_put_image	spice-common/common/sw_canvas.c	/^static void canvas_put_image(SpiceCanvas *spice_canvas,$/;"	f	file:
canvas_raster_glyph_box	spice-common/common/canvas_base.c	/^static inline void canvas_raster_glyph_box(const SpiceRasterGlyph *glyph, SpiceRect *r)$/;"	f	file:
canvas_read_bits	spice-common/common/sw_canvas.c	/^static void canvas_read_bits(SpiceCanvas *spice_canvas, uint8_t *dest,$/;"	f	file:
canvas_region	spice-common/common/canvas_base.c	/^    pixman_region32_t canvas_region;$/;"	m	struct:CanvasBase	file:
canvas_scale_surface	spice-common/common/canvas_base.c	/^static pixman_image_t *canvas_scale_surface(pixman_image_t *src, const SpiceRect *src_area, int width,$/;"	f	file:
canvas_surf_to_trans_surf	spice-common/common/gl_canvas.c	/^static pixman_image_t *canvas_surf_to_trans_surf(GLCImage *image,$/;"	f	file:
canvas_touch_image	spice-common/common/canvas_base.c	/^static void canvas_touch_image(CanvasBase *canvas, SpiceImage *image)$/;"	f	file:
capStyle	spice-common/common/lines.h	/^    unsigned int capStyle:2;$/;"	m	struct:lineGC
capacity	spice-common/common/mem.h	/^    size_t capacity;$/;"	m	struct:SpiceBuffer
caps	server/red_channel.h	/^    uint32_t *caps;$/;"	m	struct:RedChannelCapabilities
caps	server/red_dispatcher.h	/^    uint32_t *caps;        \/\/ red_worker should free$/;"	m	struct:RedWorkerMessageCursorConnect
caps	server/red_dispatcher.h	/^    uint32_t *caps;        \/\/ red_worker should free$/;"	m	struct:RedWorkerMessageDisplayConnect
caps	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t caps[0];$/;"	m	struct:VDAgentAnnounceCapabilities
caps_lock_mask	client/x11/platform.cpp	/^static unsigned int caps_lock_mask = 0;$/;"	v	file:
caps_offset	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t caps_offset;$/;"	m	struct:SpiceLinkMess
caps_offset	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t caps_offset;$/;"	m	struct:SpiceLinkReply
capture_mouse	client/application.cpp	/^void Application::capture_mouse()$/;"	f	class:Application
capture_mouse	client/screen.cpp	/^void RedScreen::capture_mouse()$/;"	f	class:RedScreen
capture_mouse	client/windows/red_window.cpp	/^void RedWindow::capture_mouse()$/;"	f	class:RedWindow
capture_mouse	client/x11/red_window.cpp	/^void RedWindow::capture_mouse()$/;"	f	class:RedWindow
card_insert_pending	client/smartcard_channel.h	/^    bool card_insert_pending;$/;"	m	struct:ReaderData
cb	server/red_channel.h	/^    IncomingHandlerInterface *cb;$/;"	m	struct:IncomingHandler
cb	server/red_channel.h	/^    OutgoingHandlerInterface *cb;$/;"	m	struct:OutgoingHandler
cb	server/tests/test_display_base.h	/^    void (*cb)(Test *test, Command *command);$/;"	m	struct:Command
cb_opaque	server/tests/test_display_base.h	/^    void *cb_opaque;$/;"	m	struct:Command
cbs	server/char_device.c	/^    SpiceCharDeviceCallbacks cbs;$/;"	m	struct:SpiceCharDeviceState	file:
cbs	server/mjpeg_encoder.c	/^    MJpegEncoderRateControlCbs cbs;$/;"	m	struct:MJpegEncoder	file:
cbs_opaque	server/mjpeg_encoder.c	/^    void *cbs_opaque;$/;"	m	struct:MJpegEncoder	file:
ceil_log_2	spice-common/common/quic.c	/^static int ceil_log_2(int val) \/* ceil(log_2(val)) *\/$/;"	f	file:
celt_decoder	spice-common/common/snd_codec.c	/^    CELTDecoder *celt_decoder;$/;"	m	struct:__anon37	file:
celt_encoder	spice-common/common/snd_codec.c	/^    CELTEncoder *celt_encoder;$/;"	m	struct:__anon37	file:
celt_mode	spice-common/common/snd_codec.c	/^    CELTMode *celt_mode;$/;"	m	struct:__anon37	file:
cert_subject	server/reds.h	/^    char *cert_subject;$/;"	m	struct:RedsMigSpice
cert_subject_data	spice-common/common/messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMigrationDstInfo
cert_subject_data	spice-common/common/messages.h	/^    uint8_t *cert_subject_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
cert_subject_size	spice-common/common/messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMigrationDstInfo
cert_subject_size	spice-common/common/messages.h	/^    uint32_t cert_subject_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
certs	client/smartcard_channel.h	/^    std::vector<std::string> certs;$/;"	m	struct:SmartcardOptions
certs_file	server/reds.c	/^    char certs_file[256];$/;"	m	struct:RedSSLParameters	file:
change_display_settings	client/windows/platform.cpp	/^bool WinMonitor::change_display_settings(int width, int height, int depth)$/;"	f	class:WinMonitor
change_start_mm_time	server/mjpeg_encoder.c	/^    uint32_t change_start_mm_time;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
change_start_time	server/mjpeg_encoder.c	/^    uint64_t change_start_time;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
changed	client/x11/platform.cpp	/^bool MultyMonScreen::changed()$/;"	f	class:MultyMonScreen
channel	server/red_channel.h	/^    RedChannel *channel;$/;"	m	struct:RedChannelClient
channel	server/red_worker.c	/^    int channel;$/;"	m	struct:RedWorker	file:
channel	server/snd_worker.c	/^    PlaybackChannel *channel;$/;"	m	struct:AudioFrame	file:
channel	server/spicevmc.c	/^    RedChannel channel; \/* Must be the first item *\/$/;"	m	struct:SpiceVmcState	file:
channel_alloc_msg_recv_buf_proc	server/red_channel.h	/^typedef uint8_t *(*channel_alloc_msg_recv_buf_proc)(RedChannelClient *channel,$/;"	t
channel_cbs	server/red_channel.h	/^    ChannelCbs channel_cbs;$/;"	m	struct:RedChannel
channel_client	server/snd_worker.c	/^    RedChannelClient *channel_client;$/;"	m	struct:SndChannel	file:
channel_client_callback	server/red_channel.h	/^typedef void (*channel_client_callback)(RedChannelClient *rcc);$/;"	t
channel_client_callback_data	server/red_channel.h	/^typedef void (*channel_client_callback_data)(RedChannelClient *rcc, void *data);$/;"	t
channel_client_connect_proc	server/red_channel.h	/^typedef void (*channel_client_connect_proc)(RedChannel *channel, RedClient *client, RedsStream *stream,$/;"	t
channel_client_disconnect_proc	server/red_channel.h	/^typedef void (*channel_client_disconnect_proc)(RedChannelClient *base);$/;"	t
channel_client_migrate_proc	server/red_channel.h	/^typedef void (*channel_client_migrate_proc)(RedChannelClient *base);$/;"	t
channel_configure_socket_proc	server/red_channel.h	/^typedef int (*channel_configure_socket_proc)(RedChannelClient *rcc);$/;"	t
channel_disconnect_proc	server/red_channel.h	/^typedef void (*channel_disconnect_proc)(RedChannelClient *rcc);$/;"	t
channel_event	server/spice.h	/^    void (*channel_event)(int event, SpiceChannelEventInfo *info);$/;"	m	struct:SpiceCoreInterface
channel_event	server/tests/basic_event_loop.c	/^static void channel_event(int event, SpiceChannelEventInfo *info)$/;"	f	file:
channel_event	server/tests/test_empty_success.c	/^void channel_event(int event, SpiceChannelEventInfo *info)$/;"	f
channel_handle_message_proc	server/red_channel.h	/^typedef int (*channel_handle_message_proc)(RedChannelClient *rcc,$/;"	t
channel_handle_migrate_data_get_serial_proc	server/red_channel.h	/^typedef uint64_t (*channel_handle_migrate_data_get_serial_proc)(RedChannelClient *base,$/;"	t
channel_handle_migrate_data_proc	server/red_channel.h	/^typedef int (*channel_handle_migrate_data_proc)(RedChannelClient *base,$/;"	t
channel_handle_migrate_flush_mark_proc	server/red_channel.h	/^typedef int (*channel_handle_migrate_flush_mark_proc)(RedChannelClient *base);$/;"	t
channel_handle_parsed_proc	server/red_channel.h	/^typedef int (*channel_handle_parsed_proc)(RedChannelClient *rcc, uint32_t size, uint16_t type,$/;"	t
channel_hold_pipe_item_proc	server/red_channel.h	/^typedef void (*channel_hold_pipe_item_proc)(RedChannelClient *rcc, PipeItem *item);$/;"	t
channel_id	server/reds.c	/^    uint32_t channel_id;$/;"	m	struct:ChannelSecurityOptions	file:
channel_id	spice-common/common/messages.h	/^    uint8_t channel_id;$/;"	m	struct:SpiceWaitForChannel
channel_id	spice-common/spice-protocol/spice/protocol.h	/^    uint8_t channel_id;$/;"	m	struct:SpiceLinkMess
channel_is_secondary	server/reds.c	/^static int channel_is_secondary(RedChannel *channel)$/;"	f	file:
channel_link	server/red_channel.h	/^    RingItem channel_link;$/;"	m	struct:RedChannelClient
channel_on_incoming_error_proc	server/red_channel.h	/^typedef void (*channel_on_incoming_error_proc)(RedChannelClient *rcc);$/;"	t
channel_on_outgoing_error_proc	server/red_channel.h	/^typedef void (*channel_on_outgoing_error_proc)(RedChannelClient *rcc);$/;"	t
channel_release_msg_recv_buf_proc	server/red_channel.h	/^typedef void (*channel_release_msg_recv_buf_proc)(RedChannelClient *channel,$/;"	t
channel_release_pipe_item_proc	server/red_channel.h	/^typedef void (*channel_release_pipe_item_proc)(RedChannelClient *rcc,$/;"	t
channel_send_pipe_item_proc	server/red_channel.h	/^typedef void (*channel_send_pipe_item_proc)(RedChannelClient *rcc, PipeItem *item);$/;"	t
channel_type	spice-common/common/messages.h	/^    uint8_t channel_type;$/;"	m	struct:SpiceWaitForChannel
channel_type	spice-common/spice-protocol/spice/protocol.h	/^    uint8_t channel_type;$/;"	m	struct:SpiceLinkMess
channels	server/red_channel.h	/^    Ring channels;$/;"	m	struct:RedClient
channels	server/reds-private.h	/^    Ring channels;$/;"	m	struct:RedsState
channels	spice-common/common/messages.h	/^    SpiceChannelId channels[0];$/;"	m	struct:SpiceMsgChannels
channels	spice-common/common/messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgPlaybackStart
channels	spice-common/common/messages.h	/^    uint32_t channels;$/;"	m	struct:SpiceMsgRecordStart
channels	spice-common/common/quic.c	/^    Channel channels[MAX_CHANNELS];$/;"	m	struct:Encoder	file:
channels_num	server/red_channel.h	/^    int channels_num;$/;"	m	struct:RedClient
channels_security	server/reds.c	/^static ChannelSecurityOptions *channels_security = NULL;$/;"	v	file:
char_devs_states	server/reds-private.h	/^    Ring char_devs_states; \/* list of SpiceCharDeviceStateItem *\/$/;"	m	struct:RedsState
chardev_sin	server/spicevmc.c	/^    SpiceCharDeviceInstance *chardev_sin;$/;"	m	struct:SpiceVmcState	file:
chardev_st	server/smartcard.c	/^    SpiceCharDeviceState *chardev_st;$/;"	m	struct:SmartCardDeviceState	file:
chardev_st	server/spicevmc.c	/^    SpiceCharDeviceState *chardev_st;$/;"	m	struct:SpiceVmcState	file:
check_diff	client/display_channel.cpp	/^void check_diff(Canvas *a, Canvas *b, const SpiceRect& rect)$/;"	f
child_at_end	spice-common/python_modules/demarshal.py	/^    def child_at_end(self, writer, t):$/;"	m	class:DemarshallingDestination
child_at_end	spice-common/python_modules/marshal.py	/^    def child_at_end(self, t):$/;"	m	class:MarshallingSource
child_sub	spice-common/python_modules/demarshal.py	/^    def child_sub(self, member):$/;"	m	class:DemarshallingDestination
child_sub	spice-common/python_modules/marshal.py	/^    def child_sub(self, containee):$/;"	m	class:MarshallingSource
chunk	spice-common/common/mem.h	/^    SpiceChunk   chunk[0];$/;"	m	struct:SpiceChunks
chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLDataChunk chunk;$/;"	m	struct:QXLClipRects
chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLDataChunk chunk;$/;"	m	struct:QXLCursor
chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLDataChunk chunk;$/;"	m	struct:QXLPath
chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLDataChunk chunk;$/;"	m	struct:QXLString
chunk_header	server/migration_protocol.h	/^        VDIChunkHeader chunk_header;$/;"	m	struct:SpiceMigrateDataMain::__anon137
chunk_header	server/reds-private.h	/^    VDIChunkHeader chunk_header;$/;"	m	struct:VDInternalBuf
chunk_header_size	server/migration_protocol.h	/^        uint32_t chunk_header_size;$/;"	m	struct:SpiceMigrateDataMain::__anon137
chunks	server/red_worker.c	/^            SpiceChunks *chunks;$/;"	m	struct:__anon177::__anon178::__anon179	file:
chunks	spice-common/common/canvas_base.c	/^    SpiceChunks *chunks;$/;"	m	struct:QuicData	file:
cinfo	server/jpeg_encoder.c	/^    struct jpeg_compress_struct cinfo;$/;"	m	struct:JpegEncoder	typeref:struct:JpegEncoder::jpeg_compress_struct	file:
cinfo	server/mjpeg_encoder.c	/^    struct jpeg_compress_struct cinfo;$/;"	m	struct:MJpegEncoder	typeref:struct:MJpegEncoder::jpeg_compress_struct	file:
ciphers	client/red_peer.h	/^        std::string ciphers;$/;"	m	class:RedPeer::ConnectionOptions
ciphersuite	server/reds.c	/^    char ciphersuite[256];$/;"	m	struct:RedSSLParameters	file:
class_atom	client/windows/red_window.cpp	/^static ATOM class_atom = 0;$/;"	v	file:
cleanup	client/red_peer.cpp	/^void RedPeer::cleanup()$/;"	f	class:RedPeer
cleanup	client/windows/platform.cpp	/^static void cleanup()$/;"	f	file:
cleanup	client/windows/red_window.cpp	/^void RedWindow::cleanup()$/;"	f	class:RedWindow
cleanup	client/x11/main.cpp	/^static void cleanup()$/;"	f	file:
cleanup	client/x11/platform.cpp	/^static void cleanup(void)$/;"	f	file:
cleanup	client/x11/playback.cpp	/^void WavePlayer::cleanup()$/;"	f	class:WavePlayer
cleanup	client/x11/record.cpp	/^void WaveRecorder::cleanup()$/;"	f	class:WaveRecorder
cleanup	client/x11/red_window.cpp	/^void RedWindow::cleanup()$/;"	f	class:RedWindow
cleanup	server/snd_worker.c	/^    snd_channel_cleanup_channel_proc cleanup;$/;"	m	struct:SndChannel	file:
cleanupImageCodec	client/gui/softrenderer.cpp	/^void SoftRenderer::cleanupImageCodec()$/;"	f	class:CEGUI::SoftRenderer
cleanup_globals	client/application.cpp	/^void Application::cleanup_globals()$/;"	f	class:Application
cleanup_platform_globals	client/application.cpp	/^void Application::cleanup_platform_globals()$/;"	f	class:Application
clear	client/cache.hpp	/^    void clear()$/;"	f	class:Cache
clear	client/canvas.cpp	/^void Canvas::clear()$/;"	f	class:Canvas
clear	client/display_channel.cpp	/^void DisplayChannel::clear(bool destroy_primary)$/;"	f	class:DisplayChannel
clear	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::clear()$/;"	f	class:GlzDecoderWindow
clear	client/menu.cpp	/^void Menu::clear()$/;"	f	class:Menu
clear	client/playback_channel.cpp	/^void PlaybackChannel::clear()$/;"	f	class:PlaybackChannel
clear	client/record_channel.cpp	/^void RecordChannel::clear()$/;"	f	class:RecordChannel
clear	client/shared_cache.hpp	/^    void clear()$/;"	f	class:SharedCache
clear	server/red_client_shared_cache.h	/^static void PRIVATE_FUNC_NAME(clear)(CACHE *cache)$/;"	f
clear	spice-common/common/canvas_base.h	/^    void (*clear)(SpiceCanvas *canvas);$/;"	m	struct:__anon13
clearRenderList	client/gui/softrenderer.cpp	/^void SoftRenderer::clearRenderList()$/;"	f	class:CEGUI::SoftRenderer
clear_area	client/screen_layer.cpp	/^void ScreenLayer::clear_area()$/;"	f	class:ScreenLayer
clear_bit	server/spice_server_utils.h	/^static inline void clear_bit(int index, uint32_t *addr)$/;"	f
clear_channels	client/red_client.cpp	/^void Migrate::clear_channels()$/;"	f	class:Migrate
clear_dest_alpha	spice-common/common/sw_canvas.c	/^static void clear_dest_alpha(pixman_image_t *dest,$/;"	f	file:
clear_dirty_region	server/red_dispatcher.h	/^    uint32_t clear_dirty_region;$/;"	m	struct:RedWorkerMessageUpdate
clear_dirty_region	server/red_dispatcher.h	/^    uint32_t clear_dirty_region;$/;"	m	struct:RedWorkerMessageUpdateAsync
clear_draw_handlers	client/display_channel.cpp	/^void DisplayChannel::clear_draw_handlers()$/;"	f	class:DisplayChannel
clear_menu_items	client/application.cpp	/^void Application::clear_menu_items(int32_t opaque_conn_ref)$/;"	f	class:Application
clear_outgoing_messages	client/red_channel.cpp	/^void RedChannel::clear_outgoing_messages()$/;"	f	class:RedChannel
clear_queue	client/process_loop.cpp	/^void EventsQueue::clear_queue()$/;"	f	class:EventsQueue
clear_queue	client/process_loop.cpp	/^void TimersQueue::clear_queue()$/;"	f	class:TimersQueue
clear_row	spice-common/common/quic.c	/^static void clear_row(four_bytes_t *row, int width)$/;"	f	file:
cleare_win_proc	client/x11/platform.cpp	/^void XPlatform::cleare_win_proc(Window win)$/;"	f	class:XPlatform
client	server/char_device.c	/^    RedClient *client;$/;"	m	struct:SpiceCharDeviceClientState	file:
client	server/char_device.h	/^    RedClient *client; \/* The client that sent the message to the device.$/;"	m	struct:SpiceCharDeviceWriteBuffer
client	server/main_dispatcher.c	/^    RedClient *client;$/;"	m	struct:MainDispatcherClientDisconnectMessage	file:
client	server/main_dispatcher.c	/^    RedClient *client;$/;"	m	struct:MainDispatcherMigrateSeamlessDstCompleteMessage	file:
client	server/main_dispatcher.c	/^    RedClient *client;$/;"	m	struct:MainDispatcherMmTimeLatencyMessage	file:
client	server/red_channel.h	/^    RedClient  *client;$/;"	m	struct:RedChannelClient
client	server/red_dispatcher.h	/^    RedClient * client;$/;"	m	struct:RedWorkerMessageDisplayConnect
client	server/red_dispatcher.h	/^    RedClient *client;$/;"	m	struct:RedWorkerMessageCursorConnect
client	server/red_worker.c	/^        uint8_t client;$/;"	m	struct:PixmapCache::__anon176	file:
client	server/red_worker.c	/^    RedClient *client; \/\/ channel clients of the same client share the dict$/;"	m	struct:GlzSharedDictionary	file:
client	server/red_worker.c	/^    RedClient *client;$/;"	m	struct:PixmapCache	file:
client	server/reds-private.h	/^    RedClient *client;$/;"	m	struct:RedsMigTargetClient
client	server/reds-private.h	/^    RedClient *client;$/;"	m	struct:RedsMigWaitDisconnectClient
client2agent	server/migration_protocol.h	/^    } client2agent;$/;"	m	struct:SpiceMigrateDataMain	typeref:struct:SpiceMigrateDataMain::__anon138
client_ack_generation	server/snd_worker.c	/^    uint32_t client_ack_generation;$/;"	m	struct:SndChannel	file:
client_active	server/snd_worker.c	/^    int client_active;$/;"	m	struct:SndChannel	file:
client_agent_started	server/migration_protocol.h	/^    uint8_t client_agent_started; \/* for discarding messages *\/$/;"	m	struct:SpiceMigrateDataMain
client_agent_started	server/reds-private.h	/^    int client_agent_started;$/;"	m	struct:VDIPortState
client_capabilities	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t client_capabilities[58];$/;"	m	struct:QXLRom
client_cbs	server/red_channel.h	/^    ClientCbs client_cbs;$/;"	m	struct:RedChannel
client_generation	server/red_channel.h	/^        uint32_t client_generation;$/;"	m	struct:RedChannelClient::__anon147
client_link	server/red_channel.h	/^    RingItem client_link;$/;"	m	struct:RedChannelClient
client_monitors_config	server/reds-private.h	/^    RedsClientMonitorsConfig client_monitors_config;$/;"	m	struct:RedsState
client_monitors_config	server/spice.h	/^    int (*client_monitors_config)(QXLInstance *qin,$/;"	m	struct:QXLInterface
client_monitors_config	server/tests/test_display_base.c	/^static int client_monitors_config(QXLInstance *qin,$/;"	f	file:
client_monitors_config	spice-common/spice-protocol/spice/qxl_dev.h	/^    } client_monitors_config;$/;"	m	struct:QXLRom	typeref:struct:QXLRom::__anon69
client_monitors_config_crc	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t client_monitors_config_crc;$/;"	m	struct:QXLRom
client_present	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t client_present;$/;"	m	struct:QXLRom
client_required_latency	server/red_worker.c	/^    uint32_t client_required_latency;$/;"	m	struct:StreamAgent	file:
client_state	server/mjpeg_encoder.c	/^    MJpegEncoderClientState client_state;$/;"	m	struct:MJpegEncoderRateControl	file:
client_to_window_size	client/windows/red_window.cpp	/^static void client_to_window_size(HWND win, int width, int height, SpicePoint& win_size,$/;"	f	file:
client_tokens_interval	server/char_device.c	/^    uint64_t client_tokens_interval; \/* frequency of returning tokens to the client *\/$/;"	m	struct:SpiceCharDeviceState	file:
client_window	server/red_channel.h	/^        uint32_t client_window;$/;"	m	struct:RedChannelClient::__anon147
clients	server/char_device.c	/^    Ring clients; \/* list of SpiceCharDeviceClientState *\/$/;"	m	struct:SpiceCharDeviceState	file:
clients	server/red_channel.h	/^    Ring clients;$/;"	m	struct:RedChannel
clients	server/reds-private.h	/^    Ring clients;$/;"	m	struct:RedsState
clients_num	server/red_channel.h	/^    uint32_t clients_num;$/;"	m	struct:RedChannel
clip	server/red_parse_qxl.h	/^    SpiceClip clip;$/;"	m	struct:RedDrawable
clip	server/red_worker.c	/^    QRegion clip;       \/* the current video clipping. It can be different from vis_region:$/;"	m	struct:StreamAgent	file:
clip	spice-common/common/messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayBase
clip	spice-common/common/messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamClip
clip	spice-common/common/messages.h	/^    SpiceClip clip;$/;"	m	struct:SpiceMsgDisplayStreamCreate
clip	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLClip clip;$/;"	m	struct:QXLCompatDrawable
clip	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLClip clip;$/;"	m	struct:QXLDrawable
clip_common	spice-common/common/glc.c	/^static void clip_common(InternaCtx *ctx, GLCClipOp op, void (*fill_func)(InternaCtx *, void *),$/;"	f	file:
clip_rects	server/tests/test_display_base.h	/^    QXLRect *clip_rects;$/;"	m	struct:CommandDrawBitmap
clip_type	server/red_worker.c	/^    int clip_type;$/;"	m	struct:StreamClipItem	file:
clipboard_agent_types	client/x11/platform.cpp	/^static uint32_t clipboard_agent_types[256];$/;"	v	file:
clipboard_data	client/x11/platform.cpp	/^static uint8_t* clipboard_data = NULL;$/;"	v	file:
clipboard_data_size	client/x11/platform.cpp	/^static uint32_t clipboard_data_size = 0;$/;"	v	file:
clipboard_data_space	client/x11/platform.cpp	/^static uint32_t clipboard_data_space = 0;$/;"	v	file:
clipboard_event	client/windows/platform.cpp	/^static HANDLE clipboard_event = NULL;$/;"	v	file:
clipboard_format_count	client/x11/platform.cpp	139;"	d	file:
clipboard_format_info	client/x11/platform.cpp	/^struct clipboard_format_info {$/;"	s	file:
clipboard_formats	client/windows/platform.cpp	/^static ClipboardFormat clipboard_formats[] = {$/;"	v	file:
clipboard_formats	client/x11/platform.cpp	/^static struct clipboard_format_info clipboard_formats[] = {$/;"	v	typeref:struct:clipboard_format_info	file:
clipboard_formats_count	client/windows/platform.cpp	92;"	d	file:
clipboard_listener	client/windows/platform.cpp	/^static Platform::ClipboardListener* clipboard_listener = &default_clipboard_listener;$/;"	v	file:
clipboard_listener	client/x11/platform.cpp	/^static Platform::ClipboardListener* clipboard_listener = &default_clipboard_listener;$/;"	v	file:
clipboard_lock	client/x11/platform.cpp	/^static Mutex clipboard_lock;$/;"	v	file:
clipboard_prop	client/x11/platform.cpp	/^static Atom clipboard_prop;$/;"	v	file:
clipboard_request_target	client/x11/platform.cpp	/^static Atom clipboard_request_target = None;$/;"	v	file:
clipboard_type_count	client/x11/platform.cpp	/^static int clipboard_type_count = 0;$/;"	v	file:
clipboard_x11_targets	client/x11/platform.cpp	/^static Atom clipboard_x11_targets[256];$/;"	v	file:
clock_id	server/red_worker.c	/^static clockid_t clock_id;$/;"	v	file:
close	client/client_net_socket.cpp	/^void ClientNetSocket::close()$/;"	f	class:ClientNetSocket
close	client/red_peer.cpp	/^void RedPeer::close()$/;"	f	class:RedPeer
close_and_tell	client/client_net_socket.cpp	/^void ClientNetSocket::close_and_tell()$/;"	f	class:ClientNetSocket
close_channels	client/red_client.cpp	/^void Migrate::close_channels()$/;"	f	class:Migrate
closesocket	client/x11/platform_utils.h	31;"	d
cmd	server/red_dispatcher.h	/^    AsyncCommand *cmd;$/;"	m	struct:RedWorkerMessageAsync
cmd	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLCommand cmd;$/;"	m	struct:QXLCommandExt
cmd_index	server/tests/test_display_base.h	/^    int cmd_index;$/;"	m	struct:Test
cmd_ring	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLCommandRing cmd_ring;$/;"	m	struct:QXLRam
cnt_l_zeroes	spice-common/common/quic.c	/^static unsigned int cnt_l_zeroes(const unsigned int bits)$/;"	f	file:
code	spice-common/common/messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyDown
code	spice-common/common/messages.h	/^    uint32_t code;$/;"	m	struct:SpiceMsgcKeyUp
codec	server/snd_worker.c	/^    SndCodec codec;$/;"	m	struct:PlaybackChannel	file:
codec	server/snd_worker.c	/^    SndCodec codec;$/;"	m	struct:RecordChannel	file:
codec_context	server/h264_encoder.h	/^   AVCodecContext *codec_context;$/;"	m	struct:_H264Encoder
codec_type	spice-common/common/messages.h	/^    uint32_t codec_type;$/;"	m	struct:SpiceMsgDisplayStreamCreate
codegen	spice-common/python_modules/demarshal.py	/^import codegen$/;"	i
codegen	spice-common/python_modules/marshal.py	/^import codegen$/;"	i
codegen	spice-common/python_modules/ptypes.py	/^import codegen$/;"	i
codegen	spice-common/spice_codegen.py	/^from python_modules import codegen$/;"	i
collect_link	server/red_worker.c	/^    RingItem collect_link;$/;"	m	struct:Drawable	file:
color	server/tests/test_display_base.c	/^static int color = -1;$/;"	v	file:
color	server/tests/test_display_base.h	/^    uint32_t color;$/;"	m	struct:CommandDrawSolid
color	spice-common/common/canvas_base.c	/^    uint32_t color;$/;"	m	struct:__anon15	file:
color	spice-common/common/draw.h	/^        uint32_t color;$/;"	m	union:SpiceBrush::__anon36
color	spice-common/spice-protocol/spice/qxl_dev.h	/^        uint32_t color;$/;"	m	union:QXLBrush::__anon73
color_16_to_32	server/red_parse_qxl.c	/^static inline uint32_t color_16_to_32(uint32_t color)$/;"	f	file:
color_mask	spice-common/common/canvas_base.c	/^    uint32_t color_mask;$/;"	m	struct:CanvasBase	file:
color_shift	spice-common/common/canvas_base.c	/^    uint32_t color_shift;$/;"	m	struct:CanvasBase	file:
colorkey_image	spice-common/common/canvas_base.h	/^    void (*colorkey_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
colorkey_image	spice-common/common/sw_canvas.c	/^static void colorkey_image(SpiceCanvas *spice_canvas,$/;"	f	file:
colorkey_image_from_surface	spice-common/common/canvas_base.h	/^    void (*colorkey_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
colorkey_image_from_surface	spice-common/common/sw_canvas.c	/^static void colorkey_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
colorkey_scale_image	spice-common/common/canvas_base.h	/^    void (*colorkey_scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
colorkey_scale_image	spice-common/common/sw_canvas.c	/^static void colorkey_scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
colorkey_scale_image_from_surface	spice-common/common/canvas_base.h	/^    void (*colorkey_scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
colorkey_scale_image_from_surface	spice-common/common/sw_canvas.c	/^static void colorkey_scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
colors	client/gui/softrenderer.h	/^            ColourIRect colors;$/;"	m	struct:CEGUI::SoftRenderer::QuadInfo
colourAtPoint	client/gui/softrenderer.cpp	/^void SoftRenderer::colourAtPoint(int x, int x_max, int y, int y_max,$/;"	f	class:CEGUI::SoftRenderer
combine_pixels	client/windows/red_drawable.cpp	/^void RedDrawable::combine_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& dest,$/;"	f	class:RedDrawable
combine_pixels	client/x11/red_drawable.cpp	/^void RedDrawable::combine_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& area,$/;"	f	class:RedDrawable
combine_to_drawable	client/x11/red_drawable.cpp	/^static inline void combine_to_drawable(const RedDrawable_p* dest,$/;"	f	file:
combine_to_pixmap	client/x11/red_drawable.cpp	/^static inline void combine_to_pixmap(const RedDrawable_p* dest,$/;"	f	file:
combine_to_pixmap_from_drawable	client/x11/red_drawable.cpp	/^static inline void combine_to_pixmap_from_drawable(const RedDrawable_p* dest,$/;"	f	file:
combine_to_pixmap_from_pixmap	client/x11/red_drawable.cpp	/^static inline void combine_to_pixmap_from_pixmap(const RedDrawable_p* dest,$/;"	f	file:
command	client/windows/red_window_p.h	/^    int command;$/;"	m	class:CommandInfo
command	server/snd_worker.c	/^    uint32_t command;$/;"	m	struct:SndChannel	file:
command	server/tests/test_display_base.h	/^    CommandType command;$/;"	m	struct:Command
command_at	client/menu.cpp	/^void Menu::command_at(int pos, std::string& name, int& cmd_id, int& state)$/;"	f	class:Menu
command_counter	server/red_worker.c	/^    uint64_t *command_counter;$/;"	m	struct:RedWorker	file:
commands	server/tests/test_display_base.c	/^struct QXLCommandExt* commands[1024];$/;"	v	typeref:struct:QXLCommandExt
commands	server/tests/test_display_base.h	/^    Command *commands;$/;"	m	struct:Test
commands	server/tests/test_display_resolution_changes.c	/^static Command commands[] = {$/;"	v	file:
commands	server/tests/test_display_width_stride.c	/^static Command commands[] = {$/;"	v	file:
commands_end	server/tests/test_display_base.c	/^int commands_end = 0;$/;"	v
commands_start	server/tests/test_display_base.c	/^int commands_start = 0;$/;"	v
comment	spice-common/python_modules/codegen.py	/^    def comment(self, str):$/;"	m	class:CodeWriter
commit_trans_position	client/x11/platform.cpp	/^void XMonitor::commit_trans_position()$/;"	f	class:XMonitor
common	server/red_worker.c	/^    CommonChannel common; \/\/ Must be the first thing$/;"	m	struct:CursorChannel	file:
common	server/red_worker.c	/^    CommonChannel common; \/\/ Must be the first thing$/;"	m	struct:DisplayChannel	file:
common	server/red_worker.c	/^    CommonChannelClient common;$/;"	m	struct:CursorChannelClient	file:
common	server/red_worker.c	/^    CommonChannelClient common;$/;"	m	struct:DisplayChannelClient	file:
common_alloc_recv_buf	server/red_worker.c	/^static uint8_t *common_alloc_recv_buf(RedChannelClient *rcc, uint16_t type, uint32_t size)$/;"	f	file:
common_caps	server/red_channel.h	/^    uint32_t *common_caps;$/;"	m	struct:RedChannelCapabilities
common_caps	server/red_dispatcher.h	/^    uint32_t *common_caps; \/\/ red_worker should free$/;"	m	struct:RedWorkerMessageCursorConnect
common_caps	server/red_dispatcher.h	/^    uint32_t *common_caps; \/\/ red_worker should free$/;"	m	struct:RedWorkerMessageDisplayConnect
common_channel_client_create	server/red_worker.c	/^static CommonChannelClient *common_channel_client_create(int size,$/;"	f	file:
common_channel_config_socket	server/red_worker.c	/^static int common_channel_config_socket(RedChannelClient *rcc)$/;"	f	file:
common_release_recv_buf	server/red_worker.c	/^static void common_release_recv_buf(RedChannelClient *rcc, uint16_t type, uint32_t size,$/;"	f	file:
commonv2c_ttf	client/gui/commonv2c.ttf.c	/^const unsigned char commonv2c_ttf[] = {$/;"	v
commonwealth_10_font	client/gui/commonwealth-10.font.c	/^const unsigned char commonwealth_10_font[] = {$/;"	v
comp_buf	server/red_worker.c	/^    void*    comp_buf;$/;"	m	struct:compress_send_data_t	file:
comp_buf_size	server/red_worker.c	/^    uint32_t comp_buf_size;$/;"	m	struct:compress_send_data_t	file:
comp_factorys	client/gui/gui.cpp	/^bool comp_factorys(GUI::TabFactory* f1, GUI::TabFactory* f2)$/;"	f
comp_size	server/red_worker.c	/^    uint64_t comp_size;$/;"	m	struct:stat_info_s	file:
componnentAtPoint	client/gui/softrenderer.cpp	/^inline void SoftRenderer::componnentAtPoint(int x_pos, int y_pos,$/;"	f	class:CEGUI::SoftRenderer
composit_area	client/screen_layer.h	/^    QRegion& composit_area() { return _composit_area;}$/;"	f	class:ScreenLayer
composit_to_screen	client/screen.cpp	/^void RedScreen::composit_to_screen(RedDrawable& win_dc, const QRegion& region)$/;"	f	class:RedScreen
composite	server/red_parse_qxl.h	/^        SpiceComposite composite;$/;"	m	union:RedDrawable::__anon161
composite	spice-common/spice-protocol/spice/qxl_dev.h	/^	QXLComposite composite;$/;"	m	union:QXLDrawable::__anon77
compound_size	client/red_peer.h	/^    uint32_t compound_size() {return _size;}$/;"	f	class:RedPeer::CompoundInMessage
compress	server/glz_encode_tmpl.c	/^static void FNAME(compress)(Encoder *encoder)$/;"	f	file:
compress	spice-common/common/lz_compress_tmpl.c	/^static void FNAME(compress)(Encoder *encoder)$/;"	f	file:
compress_output_prev	server/glz_encoder.c	/^static INLINE void compress_output_prev(Encoder *encoder)$/;"	f	file:
compress_output_prev	spice-common/common/lz.c	/^static inline void compress_output_prev(Encoder *encoder)$/;"	f	file:
compress_row	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(compress_row)(Encoder *encoder,$/;"	f	file:
compress_row	spice-common/common/quic_tmpl.c	/^static void FNAME(compress_row)(Encoder *encoder, Channel *channel,$/;"	f	file:
compress_row0	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(compress_row0)(Encoder *encoder, const PIXEL *cur_row,$/;"	f	file:
compress_row0	spice-common/common/quic_tmpl.c	/^static void FNAME(compress_row0)(Encoder *encoder, Channel *channel, const PIXEL *cur_row,$/;"	f	file:
compress_row0_seg	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(compress_row0_seg)(Encoder *encoder, int i,$/;"	f	file:
compress_row0_seg	spice-common/common/quic_tmpl.c	/^static void FNAME(compress_row0_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:
compress_row_seg	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(compress_row_seg)(Encoder *encoder, int i,$/;"	f	file:
compress_row_seg	spice-common/common/quic_tmpl.c	/^static void FNAME(compress_row_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:
compress_seg	server/glz_encode_tmpl.c	/^static void FNAME(compress_seg)(Encoder *encoder, uint32_t seg_idx, PIXEL *from, int copied)$/;"	f	file:
compress_seg	spice-common/common/lz_compress_tmpl.c	/^static void FNAME(compress_seg)(Encoder *encoder, LzImageSegment *seg, PIXEL *from, int copied)$/;"	f	file:
compress_send_data_t	server/red_worker.c	/^typedef struct compress_send_data_t {$/;"	s	file:
compress_send_data_t	server/red_worker.c	/^} compress_send_data_t;$/;"	t	typeref:struct:compress_send_data_t	file:
compressed_buf	client/audio_channels.h	/^    uint8_t compressed_buf[SND_CODEC_MAX_COMPRESSED_BYTES];$/;"	m	class:RecordChannel
compressed_data	client/display_channel.cpp	/^        uint8_t* compressed_data;$/;"	m	struct:VideoStream::VideoFrame	file:
compressed_data	server/red_worker.c	/^        } compressed_data; \/\/ for encoding data that was already compressed by another method$/;"	m	union:__anon177::__anon178	typeref:struct:__anon177::__anon178::__anon180	file:
compressed_data_size	client/display_channel.cpp	/^        uint32_t compressed_data_size;$/;"	m	struct:VideoStream::VideoFrame	file:
compression_code	client/playback_channel.cpp	/^    uint16_t compression_code;$/;"	m	struct:FormatInfo	file:
compression_level	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t compression_level;$/;"	m	struct:QXLRom
compute_lines_gradual_score	server/red_bitmap_utils.h	/^static void FNAME(compute_lines_gradual_score)(PIXEL *lines, int width, int num_lines,$/;"	f
condition	client/red_channel.h	/^    Condition* condition;$/;"	m	struct:SyncInfo
conditional_update	client/gui/gui.cpp	/^void GUI::conditional_update()$/;"	f	class:GUI
config_socket	server/red_channel.h	/^    channel_configure_socket_proc config_socket;$/;"	m	struct:__anon145
conn	server/reds_stream.c	/^    sasl_conn_t *conn;$/;"	m	struct:RedsSASL	file:
conn_ref	client/application.h	/^    int32_t conn_ref;$/;"	m	struct:AppMenuItem
connect	client/application.cpp	/^bool Application::connect(const std::string& host, int port, int sport, const std::string& password)$/;"	f	class:Application
connect	client/application.cpp	/^void Application::connect()$/;"	f	class:Application
connect	client/client_net_socket.cpp	/^bool ClientNetSocket::connect(uint32_t recv_tokens)$/;"	f	class:ClientNetSocket
connect	client/red_channel.cpp	/^void RedChannel::connect()$/;"	f	class:RedChannel
connect	client/red_channel.cpp	/^void RedChannelBase::connect(const ConnectionOptions& options, uint32_t connection_id,$/;"	f	class:RedChannelBase
connect	client/red_client.cpp	/^void RedClient::connect()$/;"	f	class:RedClient
connect	client/red_client.cpp	/^void RedClient::connect(bool wait_main_disconnect)$/;"	f	class:RedClient
connect	server/red_channel.h	/^    channel_client_connect_proc connect;$/;"	m	struct:__anon146
connect_migration_target	client/red_channel.cpp	/^void RedChannel::connect_migration_target()$/;"	f	class:RedChannel
connect_one	client/red_client.cpp	/^void Migrate::connect_one(MigChannel& channel, const RedPeer::ConnectionOptions& options,$/;"	f	class:Migrate
connect_secure	client/red_peer.cpp	/^void RedPeer::connect_secure(const ConnectionOptions& options, const char* host)$/;"	f	class:RedPeer
connect_to_peer	client/red_peer.cpp	/^void RedPeer::connect_to_peer(const char* host, int portnr)$/;"	f	class:RedPeer
connect_unsecure	client/red_peer.cpp	/^void RedPeer::connect_unsecure(const char* host, int portnr)$/;"	f	class:RedPeer
connected	server/migration_protocol.h	/^    uint8_t connected;$/;"	m	struct:SpiceMigrateDataCharDevice
connection	server/snd_worker.c	/^    SndChannel *connection;$/;"	m	struct:SndWorker	file:
connection_id	server/main_channel.c	/^    int connection_id;$/;"	m	struct:InitPipeItem	file:
connection_id	server/main_channel.c	/^    uint32_t connection_id;$/;"	m	struct:MainChannelClient	file:
connection_id	server/reds.c	/^    uint32_t connection_id;$/;"	m	struct:RedsMigSpiceMessage	file:
connection_id	server/spice.h	/^    int connection_id;$/;"	m	struct:SpiceChannelEventInfo
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClose
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketClosedAck
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketData
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketFin
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgTunnelSocketTokens
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosed
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketClosedAck
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketData
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketFin
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketOpenNack
connection_id	spice-common/common/messages.h	/^    uint16_t connection_id;$/;"	m	struct:SpiceMsgcTunnelSocketTokens
connection_id	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t connection_id;$/;"	m	struct:SpiceLinkMess
connectivity_monitor	server/red_channel.h	/^    RedChannelClientConnectivityMonitor connectivity_monitor;$/;"	m	struct:RedChannelClient
console_wait	client/windows/platform.cpp	/^} console_wait;$/;"	v	typeref:class:ConsoleWait
construct	client/cursor_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:CursorFactory
construct	client/display_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:DisplayFactory
construct	client/inputs_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:InputsFactory
construct	client/playback_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:PlaybackFactory
construct	client/record_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:RecordFactory
construct	client/smartcard_channel.cpp	/^    virtual RedChannel* construct(RedClient& client, uint32_t id)$/;"	f	class:SmartCardFactory
consume_int16	spice-common/common/generated_client_demarshallers.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:
consume_int16	spice-common/common/generated_client_demarshallers1.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:
consume_int16	spice-common/common/generated_server_demarshallers.c	/^static int16_t SPICE_GNUC_UNUSED consume_int16(uint8_t **ptr)$/;"	f	file:
consume_int32	spice-common/common/generated_client_demarshallers.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:
consume_int32	spice-common/common/generated_client_demarshallers1.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:
consume_int32	spice-common/common/generated_server_demarshallers.c	/^static int32_t SPICE_GNUC_UNUSED consume_int32(uint8_t **ptr)$/;"	f	file:
consume_int64	spice-common/common/generated_client_demarshallers.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:
consume_int64	spice-common/common/generated_client_demarshallers1.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:
consume_int64	spice-common/common/generated_server_demarshallers.c	/^static int64_t SPICE_GNUC_UNUSED consume_int64(uint8_t **ptr)$/;"	f	file:
consume_int8	spice-common/common/generated_client_demarshallers.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:
consume_int8	spice-common/common/generated_client_demarshallers1.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:
consume_int8	spice-common/common/generated_server_demarshallers.c	/^static int8_t SPICE_GNUC_UNUSED consume_int8(uint8_t **ptr)$/;"	f	file:
consume_uint16	spice-common/common/generated_client_demarshallers.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:
consume_uint16	spice-common/common/generated_client_demarshallers1.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:
consume_uint16	spice-common/common/generated_server_demarshallers.c	/^static uint16_t SPICE_GNUC_UNUSED consume_uint16(uint8_t **ptr)$/;"	f	file:
consume_uint32	spice-common/common/generated_client_demarshallers.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:
consume_uint32	spice-common/common/generated_client_demarshallers1.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:
consume_uint32	spice-common/common/generated_server_demarshallers.c	/^static uint32_t SPICE_GNUC_UNUSED consume_uint32(uint8_t **ptr)$/;"	f	file:
consume_uint64	spice-common/common/generated_client_demarshallers.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:
consume_uint64	spice-common/common/generated_client_demarshallers1.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:
consume_uint64	spice-common/common/generated_server_demarshallers.c	/^static uint64_t SPICE_GNUC_UNUSED consume_uint64(uint8_t **ptr)$/;"	f	file:
consume_uint8	spice-common/common/generated_client_demarshallers.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:
consume_uint8	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:
consume_uint8	spice-common/common/generated_server_demarshallers.c	/^static uint8_t SPICE_GNUC_UNUSED consume_uint8(uint8_t **ptr)$/;"	f	file:
container	server/red_worker.c	/^    Container *container;$/;"	m	struct:ShowTreeData	file:
container	server/red_worker.c	/^    struct Container *container;$/;"	m	struct:TreeItem	typeref:struct:TreeItem::Container	file:
container_cleanup	server/red_worker.c	/^static inline void container_cleanup(RedWorker *worker, Container *container)$/;"	f	file:
container_root	server/red_worker.c	/^    uint8_t container_root;$/;"	m	struct:DrawItem	file:
containers_count	server/red_worker.c	/^    uint32_t containers_count;$/;"	m	struct:RedWorker	file:
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:ArrayType
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:ContainerType
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:Member
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:PointerType
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:Switch
contains_extra_size	spice-common/python_modules/ptypes.py	/^    def contains_extra_size(self):$/;"	m	class:Type
contains_member	spice-common/python_modules/ptypes.py	/^    def contains_member(self, member):$/;"	m	class:ContainerType
contains_member	spice-common/python_modules/ptypes.py	/^    def contains_member(self, member):$/;"	m	class:Member
contains_member	spice-common/python_modules/ptypes.py	/^    def contains_member(self, member):$/;"	m	class:Switch
contains_member	spice-common/python_modules/ptypes.py	/^    def contains_member(self, member):$/;"	m	class:Type
contains_point	client/screen_layer.cpp	/^bool ScreenLayer::contains_point(int x, int y)$/;"	f	class:ScreenLayer
contains_point	client/windows/red_window.cpp	/^    bool contains_point(int x, int y) const$/;"	f	class:Region_p
contains_point	client/x11/red_window.cpp	/^    bool contains_point(int x, int y) const$/;"	f	class:Region_p
content	spice-common/spice_codegen.py	/^    content = writer.getvalue()$/;"	v
content	spice-common/spice_codegen.py	/^    content = writer.header.getvalue()$/;"	v
context	client/x11/pixels_source_p.h	/^            RedGlContext context;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
context	client/x11/pixels_source_p.h	/^            RedGlContext context;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
context	server/red_worker.c	/^    DrawContext context;$/;"	m	struct:RedSurface	file:
control	server/tests/test_display_base.c	/^static int control = 3; \/\/used to know when we can take a screenshot$/;"	v	file:
convert	client/jpeg_decoder.h	/^    void convert(uint8_t* src, uint8_t* dest, int width)$/;"	f	class:RGBToBGRConverter
convert	client/jpeg_decoder.h	/^    void convert(uint8_t* src, uint8_t* dest, int width)$/;"	f	class:RGBToBGRXConverter
convert_BGR24_to_RGB24	server/jpeg_encoder.c	/^static void convert_BGR24_to_RGB24(uint8_t *line, int width, uint8_t **out_line)$/;"	f	file:
convert_BGRX32_to_RGB24	server/jpeg_encoder.c	/^static void convert_BGRX32_to_RGB24(uint8_t *line, int width, uint8_t **out_line)$/;"	f	file:
convert_RGB16_to_RGB24	server/jpeg_encoder.c	/^static void convert_RGB16_to_RGB24(uint8_t *line, int width, uint8_t **out_line)$/;"	f	file:
convert_RGB24_to_RGB24	server/jpeg_encoder.c	/^static void convert_RGB24_to_RGB24(uint8_t *line, int width, uint8_t **out_line)$/;"	f	file:
convert_line_to_RGB24	server/jpeg_encoder.c	/^        void (*convert_line_to_RGB24) (uint8_t *line, int width, uint8_t **out_line);$/;"	m	struct:JpegEncoder::__anon167	file:
convert_scanline	client/mjpeg_decoder.cpp	/^void MJpegDecoder::convert_scanline(void)$/;"	f	class:MJpegDecoder
cookie	server/red_dispatcher.c	/^    uint64_t cookie;$/;"	m	struct:AsyncCommand	file:
copy	server/red_parse_qxl.h	/^        SpiceCopy copy;$/;"	m	union:RedDrawable::__anon161
copy	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLCopy copy;$/;"	m	union:QXLCompatDrawable::__anon76
copy	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLCopy copy;$/;"	m	union:QXLDrawable::__anon77
copy_bitmap	spice-common/common/gdi_canvas.c	/^static void copy_bitmap(const uint8_t *src_image, int height, int src_stride,$/;"	f	file:
copy_bitmap_alpha	spice-common/common/gdi_canvas.c	/^static void copy_bitmap_alpha(const uint8_t *src_alpha, int height, int width, int src_stride,$/;"	f	file:
copy_bitmap_graduality	server/red_worker.c	/^    BitmapGradualType copy_bitmap_graduality;$/;"	m	struct:Drawable	file:
copy_bits	client/canvas.cpp	/^void Canvas::copy_bits(SpiceMsgDisplayCopyBits& copy, int size)$/;"	f	class:Canvas
copy_bits	server/red_parse_qxl.h	/^        } copy_bits;$/;"	m	union:RedDrawable::__anon161	typeref:struct:RedDrawable::__anon161::__anon162
copy_bits	spice-common/common/canvas_base.h	/^    void (*copy_bits)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos);$/;"	m	struct:__anon13
copy_bits	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLCopyBits copy_bits;$/;"	m	union:QXLCompatDrawable::__anon76
copy_bits	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLCopyBits copy_bits;$/;"	m	union:QXLDrawable::__anon77
copy_bits_down	spice-common/common/pixman_utils.c	/^static void copy_bits_down(uint8_t *data, const int stride, int bpp,$/;"	f	file:
copy_bits_same_line	spice-common/common/pixman_utils.c	/^static void copy_bits_same_line(uint8_t *data, const int stride, int bpp,$/;"	f	file:
copy_bits_up	spice-common/common/pixman_utils.c	/^static void copy_bits_up(uint8_t *data, const int stride, int bpp,$/;"	f	file:
copy_opposite_image	spice-common/common/gl_canvas.c	/^static inline uint8_t *copy_opposite_image(GLCanvas *canvas, void *data, int stride, int height)$/;"	f	file:
copy_paste_enabled	server/agent-msg-filter.h	/^    int copy_paste_enabled;$/;"	m	struct:AgentMsgFilter
copy_pixels	client/application.cpp	/^void InfoLayer::copy_pixels(const QRegion& dest_region, RedDrawable& dest_dc)$/;"	f	class:InfoLayer
copy_pixels	client/cursor_channel.cpp	/^void CursorChannel::copy_pixels(const QRegion& dest_region, RedDrawable& dest_dc)$/;"	f	class:CursorChannel
copy_pixels	client/display_channel.cpp	/^void DisplayChannel::copy_pixels(const QRegion& dest_region,$/;"	f	class:DisplayChannel
copy_pixels	client/gui/gui.cpp	/^void GUI::copy_pixels(const QRegion& dest_region, RedDrawable& dest)$/;"	f	class:GUI
copy_pixels	client/red_gdi_canvas.cpp	/^void GDICanvas::copy_pixels(const QRegion& region, RedDrawable& dest_dc)$/;"	f	class:GDICanvas
copy_pixels	client/red_gdi_canvas.cpp	/^void GDICanvas::copy_pixels(const QRegion& region, RedDrawable* dest_dc, const PixmapHeader* pixmap)$/;"	f	class:GDICanvas
copy_pixels	client/red_gl_canvas.cpp	/^void GCanvas::copy_pixels(const QRegion& region, RedDrawable& dest_dc)$/;"	f	class:GCanvas
copy_pixels	client/red_gl_canvas.cpp	/^void GCanvas::copy_pixels(const QRegion& region, RedDrawable* dest_dc, const PixmapHeader* pixmap)$/;"	f	class:GCanvas
copy_pixels	client/red_sw_canvas.cpp	/^void SCanvas::copy_pixels(const QRegion& region, RedDrawable& dest_dc)$/;"	f	class:SCanvas
copy_pixels	client/red_sw_canvas.cpp	/^void SCanvas::copy_pixels(const QRegion& region, RedDrawable* dest_dc, const PixmapHeader* pixmap)$/;"	f	class:SCanvas
copy_pixels	client/screen_layer.h	/^    virtual void copy_pixels(const QRegion& dest_region, RedDrawable& dest_dc) {}$/;"	f	class:ScreenLayer
copy_pixels	client/windows/red_drawable.cpp	/^void RedDrawable::copy_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& dest)$/;"	f	class:RedDrawable
copy_pixels	client/x11/red_drawable.cpp	/^void RedDrawable::copy_pixels(const PixelsSource& src, int src_x, int src_y, const SpiceRect& area)$/;"	f	class:RedDrawable
copy_region	spice-common/common/canvas_base.h	/^    void (*copy_region)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
copy_region	spice-common/common/sw_canvas.c	/^static void copy_region(SpiceCanvas *spice_canvas,$/;"	f	file:
copy_rop_16_func_t	spice-common/common/pixman_utils.c	/^typedef void (*copy_rop_16_func_t)(uint16_t *ptr, uint16_t *src, int len);$/;"	t	file:
copy_rop_32_func_t	spice-common/common/pixman_utils.c	/^typedef void (*copy_rop_32_func_t)(uint32_t *ptr, uint32_t *src, int len);$/;"	t	file:
copy_rop_8_func_t	spice-common/common/pixman_utils.c	/^typedef void (*copy_rop_8_func_t)(uint8_t *ptr, uint8_t *src, int len);$/;"	t	file:
copy_to_drawable_from_drawable	client/x11/red_drawable.cpp	/^static inline void copy_to_drawable_from_drawable(const RedDrawable_p* dest,$/;"	f	file:
copy_to_drawable_from_pixmap	client/x11/red_drawable.cpp	/^static inline void copy_to_drawable_from_pixmap(const RedDrawable_p* dest,$/;"	f	file:
copy_to_gl_drawable	client/x11/red_drawable.cpp	/^static inline void copy_to_gl_drawable(const RedDrawable_p* dest,$/;"	f	file:
copy_to_gldrawable_from_gltexture	client/x11/red_drawable.cpp	/^static inline void copy_to_gldrawable_from_gltexture(const RedDrawable_p* dest,$/;"	f	file:
copy_to_gldrawable_from_pixmap	client/x11/red_drawable.cpp	/^static inline void copy_to_gldrawable_from_pixmap(const RedDrawable_p* dest,$/;"	f	file:
copy_to_pixmap	client/x11/red_drawable.cpp	/^static inline void copy_to_pixmap(const RedDrawable_p* dest,$/;"	f	file:
copy_to_pixmap_from_drawable	client/x11/red_drawable.cpp	/^static inline void copy_to_pixmap_from_drawable(const RedDrawable_p* dest,$/;"	f	file:
copy_to_pixmap_from_gltexture	client/x11/red_drawable.cpp	/^static inline void copy_to_pixmap_from_gltexture(const RedDrawable_p* dest,$/;"	f	file:
copy_to_pixmap_from_pixmap	client/x11/red_drawable.cpp	/^static inline void copy_to_pixmap_from_pixmap(const RedDrawable_p* dest,$/;"	f	file:
copy_to_x_drawable	client/x11/red_drawable.cpp	/^static inline void copy_to_x_drawable(const RedDrawable_p* dest,$/;"	f	file:
core	server/main_dispatcher.c	/^    SpiceCoreInterface *core;$/;"	m	struct:__anon142	file:
core	server/red_channel.h	/^    SpiceCoreInterface *core;$/;"	m	struct:RedChannel
core	server/reds.c	/^SpiceCoreInterface *core = NULL;$/;"	v
core	server/tests/basic_event_loop.c	/^static SpiceCoreInterface core;$/;"	v	file:
core	server/tests/test_display_base.h	/^    SpiceCoreInterface *core;$/;"	m	struct:Test
core	server/tests/test_display_no_ssl.c	/^SpiceCoreInterface *core;$/;"	v
core	server/tests/test_playback.c	/^SpiceCoreInterface *core;$/;"	v
core	server/tests/test_two_servers.c	/^SpiceCoreInterface *core;$/;"	v
core	server/tests/test_vdagent.c	/^SpiceCoreInterface *core;$/;"	v
corelate	spice-common/common/quic_tmpl.c	/^static inline void FNAME(corelate)(const PIXEL *prev, PIXEL *curr, const BYTE corelate,$/;"	f	file:
corelate_0	spice-common/common/quic_tmpl.c	/^static inline void FNAME(corelate_0)(PIXEL *curr, const BYTE corelate,$/;"	f	file:
corelate_init	spice-common/common/quic.c	/^static void corelate_init(QuicFamily *family, int bpc)$/;"	f	file:
correlate_row	spice-common/common/quic.c	/^    BYTE *correlate_row;$/;"	m	struct:Channel	file:
correlate_row_width	spice-common/common/quic.c	/^    int correlate_row_width;$/;"	m	struct:Channel	file:
count	server/red_dispatcher.h	/^    uint32_t count;$/;"	m	struct:RedWorkerMessageLoadvmCommands
count	server/red_worker.c	/^    int count;$/;"	m	struct:MonitorsConfig	file:
count	server/red_worker.c	/^    uint32_t count;$/;"	m	struct:stat_info_s	file:
count	server/reds-private.h	/^    uint32_t count;$/;"	m	struct:RedsStatValue
count	spice-common/common/draw.h	/^    uint32_t count;$/;"	m	struct:SpicePathSeg
count	spice-common/common/glc.c	/^    int count;$/;"	m	struct:PathSegment	file:
count	spice-common/common/lines.c	/^    int count;                  \/* Number of *Spans actually in group   *\/$/;"	m	struct:__anon28	file:
count	spice-common/common/lines.c	/^    int count;                  \/* number of spans                  *\/$/;"	m	struct:__anon27	file:
count	spice-common/common/messages.h	/^    uint16_t count;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig
count	spice-common/common/messages.h	/^    uint16_t count;$/;"	m	struct:SpiceResourceList
count	spice-common/spice-protocol/spice/qxl_dev.h	/^        uint16_t count;$/;"	m	struct:QXLRom::__anon69
count	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t count;$/;"	m	struct:QXLMonitorsConfig
count	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t count;$/;"	m	struct:QXLPathSeg
counters	spice-common/common/quic.c	/^    COUNTER *counters;$/;"	m	struct:FamilyStat	file:
create	client/controller.cpp	/^NamedPipe::ConnectionInterface& Controller::create()$/;"	f	class:Controller
create	client/foreign_menu.cpp	/^NamedPipe::ConnectionInterface& ForeignMenu::create()$/;"	f	class:ForeignMenu
create	client/windows/platform.cpp	/^NamedPipe::ListenerRef NamedPipe::create(const char *name, ListenerInterface& listener_interface)$/;"	f	class:NamedPipe
create	client/windows/red_window.cpp	/^void RedWindow_p::create(RedWindow& red_window, PixelsSource_p& pixels_source)$/;"	f	class:RedWindow_p
create	client/x11/platform.cpp	/^NamedPipe::ListenerRef NamedPipe::create(const char *name, ListenerInterface& listener_interface)$/;"	f	class:NamedPipe
create	client/x11/red_window.cpp	/^void RedWindow_p::create(RedWindow& red_window, PixelsSource_p& pix_source,$/;"	f	class:RedWindow_p
create	server/red_worker.c	/^    QXLReleaseInfoExt create, destroy;$/;"	m	struct:RedSurface	file:
createTexture	client/gui/softrenderer.cpp	/^Texture* SoftRenderer::createTexture()$/;"	f	class:CEGUI::SoftRenderer
createTexture	client/gui/softrenderer.cpp	/^Texture* SoftRenderer::createTexture(const String& filename,$/;"	f	class:CEGUI::SoftRenderer
createTexture	client/gui/softrenderer.cpp	/^Texture* SoftRenderer::createTexture(float size)$/;"	f	class:CEGUI::SoftRenderer
create_bitmap	client/display_channel.cpp	/^static int create_bitmap(HDC *dc, HBITMAP *prev_bitmap,$/;"	f	file:
create_bitmap	spice-common/common/gdi_canvas.c	/^static uint8_t *create_bitmap(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc,$/;"	f	file:
create_bitmap_from_pixman	spice-common/common/gdi_canvas.c	/^static uint8_t *create_bitmap_from_pixman(HBITMAP *bitmap, HBITMAP *prev_bitmap, HDC *dc,$/;"	f	file:
create_canvas	client/display_channel.cpp	/^void DisplayChannel::create_canvas(int surface_id, const std::vector<int>& canvas_types, int width,$/;"	f	class:DisplayChannel
create_canvas_for_surface	server/red_worker.c	/^static inline void *create_canvas_for_surface(RedWorker *worker, RedSurface *surface,$/;"	f	file:
create_channel	client/red_client.cpp	/^void RedClient::create_channel(uint32_t type, uint32_t id)$/;"	f	class:RedClient
create_clipped_frame	server/tests/test_display_streaming.c	/^static void create_clipped_frame(Test *test, Command *command, int clipping_factor)$/;"	f	file:
create_compatible_dc	client/windows/platform_utils.cpp	/^HDC create_compatible_dc()$/;"	f
create_compatible_dc	spice-common/common/canvas_base.c	/^static HDC create_compatible_dc()$/;"	f	file:
create_composit_area	client/screen.cpp	/^void RedScreen::create_composit_area()$/;"	f	class:RedScreen
create_console	client/windows/platform.cpp	/^static void create_console()$/;"	f	file:
create_context_gl	client/x11/red_window.cpp	/^RedGlContext RedWindow::create_context_gl()$/;"	f	class:RedWindow
create_default_cursor	client/windows/platform.cpp	/^LocalCursor* Platform::create_default_cursor()$/;"	f	class:Platform
create_default_cursor	client/x11/platform.cpp	/^LocalCursor* Platform::create_default_cursor()$/;"	f	class:Platform
create_dialog	client/gui/gui.cpp	/^void GUI::create_dialog()$/;"	f	class:GUI
create_frame1	server/tests/test_display_streaming.c	/^static void create_frame1(Test *test, Command *command)$/;"	f	file:
create_frame2	server/tests/test_display_streaming.c	/^void create_frame2(Test *test, Command *command)$/;"	f
create_frame_cb	server/tests/test_display_streaming.c	/^typedef void (*create_frame_cb)(Test *test, Command *command);$/;"	t	file:
create_gdi_canvas	client/display_channel.cpp	/^bool DisplayChannel::create_gdi_canvas(int surface_id, int width, int height, uint32_t format)$/;"	f	class:DisplayChannel
create_gui_barrier	client/application.cpp	/^void Application::create_gui_barrier(RedScreen& screen, int id)$/;"	f	class:Application
create_inactive_cursor	client/windows/platform.cpp	/^LocalCursor* Platform::create_inactive_cursor()$/;"	f	class:Platform
create_inactive_cursor	client/x11/platform.cpp	/^LocalCursor* Platform::create_inactive_cursor()$/;"	f	class:Platform
create_invisible_cursor	client/x11/red_window.cpp	/^Cursor RedWindow_p::create_invisible_cursor(Window window)$/;"	f	class:RedWindow_p
create_item	server/red_worker.c	/^    PipeItem create_item;$/;"	m	struct:StreamAgent	file:
create_local_cursor	client/windows/platform.cpp	/^LocalCursor* Platform::create_local_cursor(CursorData* cursor_data)$/;"	f	class:Platform
create_local_cursor	client/x11/platform.cpp	/^LocalCursor* Platform::create_local_cursor(CursorData* cursor_data)$/;"	f	class:Platform
create_menu	client/controller.cpp	/^bool ControllerConnection::create_menu(char* resource)$/;"	f	class:ControllerConnection
create_message_wind	client/windows/platform.cpp	/^static void create_message_wind()$/;"	f	file:
create_native_cursor	client/cursor_channel.cpp	/^void CursorChannel::create_native_cursor(CursorData* cursor)$/;"	f	class:CursorChannel
create_ogl_canvas	client/display_channel.cpp	/^bool DisplayChannel::create_ogl_canvas(int surface_id, int width, int height, uint32_t format,$/;"	f	class:DisplayChannel
create_ogl_context_common	server/red_worker.c	/^static SpiceCanvas *create_ogl_context_common(RedWorker *worker, OGLCtx *ctx, uint32_t width,$/;"	f	file:
create_ogl_pbuf_context	server/red_worker.c	/^static SpiceCanvas *create_ogl_pbuf_context(RedWorker *worker, uint32_t width, uint32_t height,$/;"	f	file:
create_ogl_pixmap_context	server/red_worker.c	/^static SpiceCanvas *create_ogl_pixmap_context(RedWorker *worker, uint32_t width, uint32_t height,$/;"	f	file:
create_overlay	server/tests/test_display_streaming.c	/^static void create_overlay(Command *command , int width, int height)$/;"	f	file:
create_pbuff	client/x11/red_window.cpp	/^RedPbuffer RedWindow::create_pbuff(int width, int height)$/;"	f	class:RedWindow
create_pipe	client/windows/named_pipe.cpp	/^void WinListener::create_pipe()$/;"	f	class:WinListener
create_pixmap	client/x11/pixels_source.cpp	/^static void create_pixmap(const PixmapHeader* pixmap, PixelsSource_p& pixels_source,$/;"	f	file:
create_player	client/windows/platform.cpp	/^WavePlaybackAbstract* Platform::create_player(uint32_t samples_per_sec,$/;"	f	class:Platform
create_player	client/x11/platform.cpp	/^WavePlaybackAbstract* Platform::create_player(uint32_t samples_per_sec,$/;"	f	class:Platform
create_primary	server/tests/test_display_base.h	/^        CommandCreatePrimary create_primary;$/;"	m	union:Command::__anon131
create_primary_surface	client/display_channel.cpp	/^void DisplayChannel::create_primary_surface(int width, int height, uint32_t format)$/;"	f	class:DisplayChannel
create_primary_surface	server/tests/test_display_base.c	/^static void create_primary_surface(Test *test, uint32_t width,$/;"	f	file:
create_recorder	client/windows/platform.cpp	/^WaveRecordAbstract* Platform::create_recorder(RecordClient& client,$/;"	f	class:Platform
create_recorder	client/x11/platform.cpp	/^WaveRecordAbstract* Platform::create_recorder(RecordClient& client,$/;"	f	class:Platform
create_socket	client/x11/named_pipe.cpp	/^int LinuxListener::create_socket(const char *socket_name)$/;"	f	class:LinuxListener
create_surface	client/display_channel.cpp	/^void DisplayChannel::create_surface(int surface_id, int width, int height, uint32_t format)$/;"	f	class:DisplayChannel
create_surface	server/tests/test_display_base.c	/^static SimpleSurfaceCmd *create_surface(int surface_id, int format, int width, int height, uint8_t *data)$/;"	f	file:
create_surface	server/tests/test_display_base.h	/^        CommandCreateSurface create_surface;$/;"	m	union:Command::__anon131
create_surface	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLSurfaceCreate create_surface;$/;"	m	struct:QXLRam
create_sw_canvas	client/display_channel.cpp	/^bool DisplayChannel::create_sw_canvas(int surface_id, int width, int height, uint32_t format)$/;"	f	class:DisplayChannel
create_tab	client/gui/gui.cpp	/^    GUI::Tab* create_tab(bool connected, int width, int height)$/;"	f	class:SampleTabFactory
create_temp_image	client/x11/red_drawable.cpp	/^static XImage *create_temp_image(int screen, int width, int height,$/;"	f	file:
create_x_image	client/x11/platform.cpp	/^XImage *XPlatform::create_x_image(RedDrawable::Format format,$/;"	f	class:XPlatform
create_x_shm_image	client/x11/platform.cpp	/^XImage *XPlatform::create_x_shm_image(RedDrawable::Format format,$/;"	f	class:XPlatform
creation_time	server/red_worker.c	/^    red_time_t creation_time;$/;"	m	struct:Drawable	file:
credentials	spice-common/spice-protocol/spice/controller_prot.h	/^    uint64_t credentials;$/;"	m	struct:ControllerInit
credentials	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint64_t credentials;$/;"	m	struct:FrgMenuInit
crtc_overlap_test	client/x11/platform.cpp	/^XMonitor* MultyMonScreen::crtc_overlap_test(int x, int y, int width, int height)$/;"	f	class:MultyMonScreen
ctx	server/reds-private.h	/^    SSL_CTX *ctx;$/;"	m	struct:RedsState
cur_bit_rate	server/mjpeg_encoder.h	/^    uint64_t cur_bit_rate;$/;"	m	struct:MJpegEncoderStats
cur_dash	spice-common/common/glc.c	/^    int cur_dash;$/;"	m	struct:LineDash	file:
cur_image	server/glz_encoder.c	/^    } cur_image;$/;"	m	struct:Encoder	typeref:struct:Encoder::__anon202	file:
cur_image	server/jpeg_encoder.c	/^    } cur_image;$/;"	m	struct:JpegEncoder	typeref:struct:JpegEncoder::__anon167	file:
cur_usr	server/glz_encoder_dictionary_protected.h	/^    GlzEncoderUsrContext       *cur_usr; \/\/ each encoder has other context.$/;"	m	struct:SharedDictionary
cur_write_buf	server/char_device.c	/^    SpiceCharDeviceWriteBuffer *cur_write_buf;$/;"	m	struct:SpiceCharDeviceState	file:
cur_write_buf_pos	server/char_device.c	/^    uint8_t *cur_write_buf_pos;$/;"	m	struct:SpiceCharDeviceState	file:
current	server/red_worker.c	/^    Drawable *current;$/;"	m	struct:Stream	file:
current	server/red_worker.c	/^    Ring current;$/;"	m	struct:RedSurface	file:
current_buffer	spice-common/common/marshaller.c	/^    MarshallerBuffer *current_buffer;$/;"	m	struct:SpiceMarshallerData	file:
current_buffer_item	spice-common/common/marshaller.c	/^    MarshallerItem *current_buffer_item;$/;"	m	struct:SpiceMarshallerData	file:
current_buffer_position	spice-common/common/marshaller.c	/^    size_t current_buffer_position;$/;"	m	struct:SpiceMarshallerData	file:
current_chunk	spice-common/common/canvas_base.c	/^    uint32_t current_chunk;$/;"	m	struct:QuicData	file:
current_gn	server/red_worker.c	/^    int current_gn;$/;"	m	struct:RedSurface	file:
current_list	server/red_worker.c	/^    Ring current_list;$/;"	m	struct:RedSurface	file:
current_list	server/red_worker.c	/^    Ring current_list;$/;"	m	struct:RedWorker	file:
current_mode	server/main_channel.c	/^    int current_mode;$/;"	m	struct:MainMouseModeItemInfo	file:
current_mode	server/main_channel.c	/^    int current_mode;$/;"	m	struct:MouseModePipeItem	file:
current_mode	spice-common/common/messages.h	/^    uint32_t current_mode;$/;"	m	struct:SpiceMsgMainMouseMode
current_mouse_mode	server/main_channel.c	/^    int current_mouse_mode;$/;"	m	struct:InitPipeItem	file:
current_mouse_mode	spice-common/common/messages.h	/^    uint32_t current_mouse_mode;$/;"	m	struct:SpiceMsgMainInit
current_path	spice-common/common/glc.c	/^    Path *current_path;$/;"	m	struct:InternalPath	file:
current_read_buf	server/reds-private.h	/^    VDIReadBuf *current_read_buf;$/;"	m	struct:VDIPortState
current_remove	server/red_worker.c	/^static inline void current_remove(RedWorker *worker, TreeItem *item)$/;"	f	file:
current_remove_container	server/red_worker.c	/^static inline void current_remove_container(RedWorker *worker, Container *container)$/;"	f	file:
current_remove_drawable	server/red_worker.c	/^static inline void current_remove_drawable(RedWorker *worker, Drawable *item)$/;"	f	file:
current_segment	spice-common/common/glc.c	/^    PathSegment *current_segment;$/;"	m	struct:InternalPath	file:
current_size	server/red_worker.c	/^    uint32_t current_size;$/;"	m	struct:RedWorker	file:
current_tree_for_each	server/red_worker.c	/^static void current_tree_for_each(Ring *ring, void (*f)(TreeItem *, void *), void * data)$/;"	f	file:
cursor	server/red_worker.c	/^    CursorItem *cursor;$/;"	m	struct:RedWorker	file:
cursor	server/tests/test_display_base.c	/^    QXLCursor cursor;$/;"	m	struct:__anon129	file:
cursor	server/tests/test_display_base.c	/^} cursor;$/;"	v	typeref:struct:__anon129	file:
cursor	spice-common/common/messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorInit
cursor	spice-common/common/messages.h	/^    SpiceCursor cursor;$/;"	m	struct:SpiceMsgCursorSet
cursor_cache	server/red_worker.c	/^    CacheItem *cursor_cache[CURSOR_CACHE_HASH_SIZE];$/;"	m	struct:CursorChannelClient	file:
cursor_cache_available	server/red_worker.c	/^    long cursor_cache_available;$/;"	m	struct:CursorChannelClient	file:
cursor_cache_items	server/red_worker.c	/^    uint32_t cursor_cache_items;$/;"	m	struct:CursorChannelClient	file:
cursor_cache_lru	server/red_worker.c	/^    Ring cursor_cache_lru;$/;"	m	struct:CursorChannelClient	file:
cursor_channel	server/red_worker.c	/^    CursorChannel *cursor_channel;$/;"	m	struct:RedWorker	file:
cursor_channel_client_on_disconnect	server/red_worker.c	/^static void cursor_channel_client_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
cursor_channel_client_release_item_after_push	server/red_worker.c	/^static void cursor_channel_client_release_item_after_push(CursorChannelClient *ccc,$/;"	f	file:
cursor_channel_client_release_item_before_push	server/red_worker.c	/^static void cursor_channel_client_release_item_before_push(CursorChannelClient *ccc,$/;"	f	file:
cursor_channel_create	server/red_worker.c	/^static void cursor_channel_create(RedWorker *worker, int migrate)$/;"	f	file:
cursor_channel_create_rcc	server/red_worker.c	/^CursorChannelClient *cursor_channel_create_rcc(CommonChannel *common,$/;"	f
cursor_channel_hold_pipe_item	server/red_worker.c	/^static void cursor_channel_hold_pipe_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
cursor_channel_release_item	server/red_worker.c	/^static void cursor_channel_release_item(RedChannelClient *rcc, PipeItem *item, int item_pushed)$/;"	f	file:
cursor_channel_send_item	server/red_worker.c	/^static void cursor_channel_send_item(RedChannelClient *rcc, PipeItem *pipe_item)$/;"	f	file:
cursor_init	server/tests/test_display_base.c	/^static void cursor_init()$/;"	f	file:
cursor_is_connected	server/red_worker.c	/^static int cursor_is_connected(RedWorker *worker)$/;"	f	file:
cursor_item	server/red_worker.c	/^        CursorItem cursor_item;$/;"	m	union:_CursorItem::__anon190	file:
cursor_item	server/red_worker.c	/^    CursorItem *cursor_item;$/;"	m	struct:CursorPipeItem	file:
cursor_items	server/red_worker.c	/^    _CursorItem cursor_items[NUM_CURSORS];$/;"	m	struct:RedWorker	file:
cursor_items_init	server/red_worker.c	/^static void cursor_items_init(RedWorker *worker)$/;"	f	file:
cursor_notify	server/tests/test_display_base.h	/^    int cursor_notify;$/;"	m	struct:Test
cursor_position	server/red_worker.c	/^    SpicePoint16 cursor_position;$/;"	m	struct:RedWorker	file:
cursor_ring	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLCursorRing cursor_ring;$/;"	m	struct:QXLRam
cursor_trail_frequency	server/red_worker.c	/^    uint16_t cursor_trail_frequency;$/;"	m	struct:RedWorker	file:
cursor_trail_length	server/red_worker.c	/^    uint16_t cursor_trail_length;$/;"	m	struct:RedWorker	file:
cursor_visible	server/red_worker.c	/^    int cursor_visible;$/;"	m	struct:RedWorker	file:
cvtInt	spice-common/python_modules/spice_parser.py	/^cvtInt = lambda toks: int(toks[0])$/;"	v
cximage_format	client/windows/platform.cpp	/^    DWORD cximage_format;$/;"	m	struct:ImageType	file:
d	spice-common/common/quic.c	/^    BYTE d;$/;"	m	struct:four_bytes_pixel_t	file:
dash	spice-common/common/lines.h	/^    unsigned char *dash;$/;"	m	struct:lineGC
dashOffset	spice-common/common/lines.h	/^    unsigned short dashOffset;$/;"	m	struct:lineGC
dash_pos	spice-common/common/glc.c	/^    double dash_pos;$/;"	m	struct:LineDash	file:
dashes	spice-common/common/glc.c	/^    double *dashes;$/;"	m	struct:LineDash	file:
data	client/cache.hpp	/^        T* data;$/;"	m	class:Cache::Item
data	client/cursor.h	/^    const uint8_t* data() const { return _data;}$/;"	f	class:CursorData
data	client/glz_decoder.h	/^        uint8_t *data;$/;"	m	struct:GlzDecoder::__anon112
data	client/red_peer.h	/^    uint8_t* data() { return _data;}$/;"	f	class:RedPeer::InMessage
data	client/red_types.h	/^    uint8_t* data;$/;"	m	struct:PixmapHeader
data	client/shared_cache.hpp	/^        T* data;$/;"	m	class:SharedCache::Item
data	server/main_channel.c	/^    uint8_t* data;$/;"	m	struct:AgentDataPipeItem	file:
data	server/red_channel.h	/^    uint8_t *data;$/;"	m	struct:BufDescriptor
data	server/red_channel.h	/^    uint8_t *data;$/;"	m	struct:SpiceDataHeaderOpaque
data	server/red_channel.h	/^    void *data;$/;"	m	struct:RedChannel
data	server/red_parse_qxl.h	/^    uint8_t *data;$/;"	m	struct:RedDataChunk
data	server/red_parse_qxl.h	/^    uint8_t *data;$/;"	m	struct:RedMessage
data	server/red_parse_qxl.h	/^    uint8_t *data;$/;"	m	struct:RedSurfaceCreate
data	server/red_worker.c	/^    EncoderData data;$/;"	m	struct:__anon181	file:
data	server/red_worker.c	/^    EncoderData data;$/;"	m	struct:__anon182	file:
data	server/red_worker.c	/^    EncoderData data;$/;"	m	struct:__anon183	file:
data	server/red_worker.c	/^    EncoderData data;$/;"	m	struct:__anon184	file:
data	server/red_worker.c	/^    EncoderData data;$/;"	m	struct:__anon185	file:
data	server/red_worker.c	/^    uint8_t data[0];$/;"	m	struct:ImageItem	file:
data	server/red_worker.c	/^    void *data;$/;"	m	struct:__anon192	file:
data	server/reds-private.h	/^    uint8_t data[SPICE_AGENT_MAX_DATA_SIZE];$/;"	m	struct:VDIReadBuf
data	server/reds_stream.c	/^    char *data;$/;"	m	struct:RedsSASL	file:
data	server/tests/test_display_base.c	/^    uint8_t data[CURSOR_WIDTH * CURSOR_HEIGHT * 4]; \/\/ 32bit per pixel$/;"	m	struct:__anon129	file:
data	server/tests/test_display_base.h	/^    uint8_t *data;$/;"	m	struct:CommandCreateSurface
data	spice-common/common/canvas_utils.h	/^    uint8_t *data;$/;"	m	struct:PixmanData
data	spice-common/common/draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceBitmap
data	spice-common/common/draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceJPEGAlphaData
data	spice-common/common/draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceLZPLTData
data	spice-common/common/draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceQUICData
data	spice-common/common/draw.h	/^    SpiceChunks *data;$/;"	m	struct:SpiceZlibGlzRGBData
data	spice-common/common/draw.h	/^    uint8_t data[0];$/;"	m	struct:SpiceRasterGlyph
data	spice-common/common/marshaller.c	/^    SpiceMarshallerData *data;$/;"	m	struct:SpiceMarshaller	file:
data	spice-common/common/marshaller.c	/^    uint8_t *data;$/;"	m	struct:__anon18	file:
data	spice-common/common/marshaller.c	/^    uint8_t data[MARSHALLER_BUFFER_SIZE];$/;"	m	struct:MarshallerBuffer	file:
data	spice-common/common/mem.h	/^    uint8_t *data;$/;"	m	struct:SpiceChunk
data	spice-common/common/messages.h	/^    SpiceAlphaBlend data;$/;"	m	struct:SpiceMsgDisplayDrawAlphaBlend
data	spice-common/common/messages.h	/^    SpiceBlackness data;$/;"	m	struct:SpiceMsgDisplayDrawBlackness
data	spice-common/common/messages.h	/^    SpiceComposite data;$/;"	m	struct:SpiceMsgDisplayDrawComposite
data	spice-common/common/messages.h	/^    SpiceCopy data;$/;"	m	struct:SpiceMsgDisplayDrawCopy
data	spice-common/common/messages.h	/^    SpiceFill data;$/;"	m	struct:SpiceMsgDisplayDrawFill
data	spice-common/common/messages.h	/^    SpiceInvers data;$/;"	m	struct:SpiceMsgDisplayDrawInvers
data	spice-common/common/messages.h	/^    SpiceOpaque data;$/;"	m	struct:SpiceMsgDisplayDrawOpaque
data	spice-common/common/messages.h	/^    SpiceRop3 data;$/;"	m	struct:SpiceMsgDisplayDrawRop3
data	spice-common/common/messages.h	/^    SpiceStroke data;$/;"	m	struct:SpiceMsgDisplayDrawStroke
data	spice-common/common/messages.h	/^    SpiceText data;$/;"	m	struct:SpiceMsgDisplayDrawText
data	spice-common/common/messages.h	/^    SpiceTransparent data;$/;"	m	struct:SpiceMsgDisplayDrawTransparent
data	spice-common/common/messages.h	/^    SpiceWhiteness data;$/;"	m	struct:SpiceMsgDisplayDrawWhiteness
data	spice-common/common/messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceCursor
data	spice-common/common/messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackMode
data	spice-common/common/messages.h	/^    uint8_t *data;$/;"	m	struct:SpiceMsgPlaybackPacket
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgData
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamData
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgDisplayStreamDataSized
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgSmartcard
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelIpInfo
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgTunnelSocketData
data	spice-common/common/messages.h	/^    uint8_t data[0];$/;"	m	struct:SpiceMsgcTunnelSocketData
data	spice-common/common/messages.h	/^    void *data;$/;"	m	struct:SpiceMsgPing
data	spice-common/spice-protocol/spice/controller_prot.h	/^    uint8_t data[0];$/;"	m	struct:ControllerData
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL data; \/\/data[0] ?$/;"	m	struct:QXLBitmap
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL data;$/;"	m	struct:QXLClip
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL data;$/;"	m	struct:QXLCommand
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL data;$/;"	m	struct:QXLSurface
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t data[0];$/;"	m	struct:QXLDataChunk
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t data[0];$/;"	m	struct:QXLMessage
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t data[0];$/;"	m	struct:QXLQUICData
data	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t data[0];$/;"	m	struct:QXLRasterGlyph
data	spice-common/spice-protocol/spice/vd_agent.h	/^    uint8_t data[0];$/;"	m	struct:VDAgentClipboard
data	spice-common/spice-protocol/spice/vd_agent.h	/^    uint8_t data[0];$/;"	m	struct:VDAgentMessage
data	spice-common/spice-protocol/spice/vd_agent.h	/^   uint8_t data[0];$/;"	m	struct:VDAgentFileXferDataMessage
data	spice-common/spice-protocol/spice/vd_agent.h	/^   uint8_t data[0];$/;"	m	struct:VDAgentFileXferStartMessage
data	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint8_t data[512 - 2 * sizeof(uint32_t)];$/;"	m	struct:VDIPortPacket
data_len	spice-common/common/messages.h	/^    uint32_t data_len;$/;"	m	struct:SpiceMsgPing
data_size	server/red_parse_qxl.h	/^    uint32_t data_size;$/;"	m	struct:RedDataChunk
data_size	server/red_worker.c	/^    uint32_t data_size;$/;"	m	struct:CursorData	file:
data_size	server/red_worker.c	/^    uint32_t data_size;$/;"	m	struct:LocalCursor	file:
data_size	spice-common/common/draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceJPEGAlphaData
data_size	spice-common/common/draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceLZPLTData
data_size	spice-common/common/draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceQUICData
data_size	spice-common/common/draw.h	/^    uint32_t data_size;$/;"	m	struct:SpiceZlibGlzRGBData
data_size	spice-common/common/mem.h	/^    uint32_t     data_size;$/;"	m	struct:SpiceChunks
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceCursor
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgData
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamData
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgDisplayStreamDataSized
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackMode
data_size	spice-common/common/messages.h	/^    uint32_t data_size;$/;"	m	struct:SpiceMsgPlaybackPacket
data_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t data_size;$/;"	m	struct:QXLCursor
data_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t data_size;$/;"	m	struct:QXLDataChunk
data_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t data_size;$/;"	m	struct:QXLPath
data_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t data_size;$/;"	m	struct:QXLQUICData
data_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t data_size;$/;"	m	struct:QXLString
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	client/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	docs/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	docs/manual/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	server/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	server/tests/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	spice-common/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	spice-common/common/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	spice-common/python_modules/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	spice-common/spice-protocol/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	spice-common/spice-protocol/spice/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	client/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	docs/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	docs/manual/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	server/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	server/tests/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	spice-common/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	spice-common/common/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	spice-common/python_modules/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	spice-common/spice-protocol/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	spice-common/spice-protocol/spice/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dbname	client/smartcard_channel.h	/^    std::string dbname;$/;"	m	struct:SmartcardOptions
dc	client/windows/pixels_source_p.h	/^    HDC dc;$/;"	m	struct:PixelsSource_p
dc	spice-common/common/canvas_base.c	/^    HDC dc;$/;"	m	struct:CanvasBase	file:
dc	spice-common/common/canvas_utils.h	/^    HDC dc;$/;"	m	struct:LzDecodeUsrData
dc	spice-common/common/gdi_canvas.c	/^    HDC dc;$/;"	m	struct:BitmapData	file:
dc	spice-common/common/gdi_canvas.c	/^    HDC dc;$/;"	m	struct:GdiCanvas	file:
dcc	server/red_worker.c	/^    DisplayChannelClient *dcc;$/;"	m	struct:DrawablePipeItem	file:
dcc	server/red_worker.c	/^    DisplayChannelClient *dcc;$/;"	m	struct:RedGlzDrawable	file:
dcc	server/red_worker.c	/^    DisplayChannelClient *dcc;$/;"	m	struct:StreamAgent	file:
dcc	server/red_worker.c	/^    DisplayChannelClient *dcc;$/;"	m	struct:__anon177	file:
deactivate_interval_timer	client/process_loop.cpp	/^void ProcessLoop::deactivate_interval_timer(Timer* timer)$/;"	f	class:ProcessLoop
deactivate_interval_timer	client/process_loop.cpp	/^void TimersQueue::deactivate_interval_timer(Timer* timer)$/;"	f	class:TimersQueue
deactivate_interval_timer	client/red_client.cpp	/^void RedClient::deactivate_interval_timer(Timer* timer)$/;"	f	class:RedClient
debug	server/tests/basic_event_loop.c	/^int debug = 0;$/;"	v
debug_level	spice-common/common/log.c	/^static int debug_level = -1;$/;"	v	file:
dec_change_ref	client/x11/platform.cpp	/^    static void dec_change_ref() { Monitor::self_monitors_change--;}$/;"	f	class:XMonitor
declare	spice-common/python_modules/demarshal.py	/^    def declare(self, writer):$/;"	m	class:DemarshallingDestination
declare	spice-common/python_modules/demarshal.py	/^    def declare(self, writer):$/;"	m	class:RootDemarshallingDestination
declare	spice-common/python_modules/marshal.py	/^    def declare(self, writer):$/;"	m	class:MarshallingSource
declare	spice-common/python_modules/marshal.py	/^    def declare(self, writer):$/;"	m	class:RootMarshallingSource
decode	client/glz_decode_tmpl.c	/^static size_t FNAME(decode)(GlzDecoderWindow &window, uint8_t* in_buf,$/;"	f	file:
decode	client/glz_decoder.cpp	/^void GlzDecoder::decode(uint8_t *data, SpicePalette *palette, void *opaque_usr_info)$/;"	f	class:GlzDecoder
decode	client/jpeg_decoder.cpp	/^void JpegDecoder::decode(uint8_t *dest, int stride, int format)$/;"	f	class:JpegDecoder
decode	client/zlib_decoder.cpp	/^void ZlibDecoder::decode(uint8_t *data, int data_size, uint8_t *dest, int dest_size)$/;"	f	class:ZlibDecoder
decode	spice-common/common/canvas_base.h	/^    void (*decode)(SpiceGlzDecoder *decoder,$/;"	m	struct:__anon11
decode	spice-common/common/canvas_base.h	/^    void (*decode)(SpiceJpegDecoder *decoder,$/;"	m	struct:SpiceJpegDecoderOps
decode	spice-common/common/canvas_base.h	/^    void (*decode)(SpiceZlibDecoder *decoder,$/;"	m	struct:__anon12
decode	spice-common/common/lz.c	/^static inline uint8_t decode(Encoder *encoder)$/;"	f	file:
decode_32	client/glz_decoder.cpp	/^inline uint32_t GlzDecoder::decode_32()$/;"	f	class:GlzDecoder
decode_32	spice-common/common/lz.c	/^static inline uint32_t decode_32(Encoder *encoder)$/;"	f	file:
decode_64	client/glz_decoder.cpp	/^inline uint64_t GlzDecoder::decode_64()$/;"	f	class:GlzDecoder
decode_buf	server/snd_worker.c	/^    uint8_t  decode_buf[SND_CODEC_MAX_FRAME_BYTES];$/;"	m	struct:RecordChannel	file:
decode_channel_run	spice-common/common/quic.c	/^static int decode_channel_run(Encoder *encoder, Channel *channel)$/;"	f	file:
decode_data	client/mjpeg_decoder.cpp	/^bool MJpegDecoder::decode_data(uint8_t *data, size_t length)$/;"	f	class:MJpegDecoder
decode_data	spice-common/common/canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:GlzData	file:
decode_data	spice-common/common/canvas_base.c	/^    LzDecodeUsrData decode_data;$/;"	m	struct:LzData	file:
decode_eat32bits	spice-common/common/quic.c	/^static inline void decode_eat32bits(Encoder *encoder)$/;"	f	file:
decode_eatbits	spice-common/common/quic.c	/^static inline void decode_eatbits(Encoder *encoder, int len)$/;"	f	file:
decode_function	client/glz_decoder.cpp	/^typedef size_t (*decode_function)(GlzDecoderWindow &window, uint8_t* in_buf,$/;"	t	file:
decode_header	client/glz_decoder.cpp	/^void GlzDecoder::decode_header()$/;"	f	class:GlzDecoder
decode_run	spice-common/common/quic.c	/^static inline unsigned int decode_run(Encoder *encoder)$/;"	f	file:
decode_run	spice-common/common/quic.c	/^static int decode_run(Encoder *encoder)$/;"	f	file:
decoder	spice-common/common/canvas_base.c	/^    SpiceGlzDecoder *decoder;$/;"	m	struct:GlzData	file:
decompress	spice-common/common/lz_decompress_tmpl.c	/^static size_t FNAME(decompress)(Encoder *encoder, OUT_PIXEL *out_buf, int size)$/;"	f	file:
decorelate	spice-common/common/quic_tmpl.c	/^static inline BYTE FNAME(decorelate)(const PIXEL *const prev, const PIXEL * const curr,$/;"	f	file:
decorelate_0	spice-common/common/quic_tmpl.c	/^static inline BYTE FNAME(decorelate_0)(const PIXEL * const curr, const unsigned int bpc_mask)$/;"	f	file:
decorelate_init	spice-common/common/quic.c	/^static void decorelate_init(QuicFamily *family, int bpc)$/;"	f	file:
default_agent_caps	client/red_client.cpp	/^uint32_t default_agent_caps[] = {$/;"	v
default_channel_security	server/reds.c	/^static int default_channel_security =$/;"	v	file:
default_clipboard_listener	client/windows/platform.cpp	/^static DefaultClipboardListener default_clipboard_listener;$/;"	v	file:
default_clipboard_listener	client/x11/platform.cpp	/^static DefaultClipboardListener default_clipboard_listener;$/;"	v	file:
default_display_mode_listener	client/x11/platform.cpp	/^static DefaultDisplayModeListener default_display_mode_listener;$/;"	v	file:
default_event_listener	client/windows/platform.cpp	/^static DefaultEventListener default_event_listener;$/;"	v	file:
default_event_listener	client/x11/platform.cpp	/^static DefaultEventListener default_event_listener;$/;"	v	file:
default_key_handler	client/application.cpp	/^static KeyHandler default_key_handler;$/;"	v	file:
default_mouse_handler	client/application.cpp	/^static MouseHandler default_mouse_handler;$/;"	v	file:
default_pointer_size	spice-common/python_modules/ptypes.py	/^default_pointer_size = 4$/;"	v
default_renderer	server/reds.c	/^static const char *default_renderer = "sw";$/;"	v	file:
default_rop3_test_handler	spice-common/common/rop3.c	/^static void default_rop3_test_handler(void)$/;"	f	file:
default_rop3_with_pattern_handler	spice-common/common/rop3.c	/^static void default_rop3_with_pattern_handler(pixman_image_t *d, pixman_image_t *s,$/;"	f	file:
default_rop3_withe_color_handler	spice-common/common/rop3.c	/^static void default_rop3_withe_color_handler(pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	f	file:
dejavu_sans_10_font	client/gui/dejavu_sans-10.font.c	/^const unsigned char dejavu_sans_10_font[] = {$/;"	v
dejavu_sans_ttf	client/gui/dejavu_sans.ttf.c	/^const unsigned char dejavu_sans_ttf[] = {$/;"	v
delete_channels	client/red_client.cpp	/^void Migrate::delete_channels()$/;"	f	class:Migrate
delete_channels	client/red_client.cpp	/^void RedClient::delete_channels()$/;"	f	class:RedClient
delete_menu	client/application.cpp	/^void Application::delete_menu()$/;"	f	class:Application
delimitedList	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
demarshal	spice-common/spice_codegen.py	/^from python_modules import demarshal$/;"	i
depcomp	client/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	server/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	server/tests/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	spice-common/common/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depend_items	server/red_worker.c	/^    DependItem depend_items[3];$/;"	m	struct:Drawable	file:
depend_on_me	server/red_worker.c	/^    Ring depend_on_me;$/;"	m	struct:RedSurface	file:
depth	client/application.h	/^    int depth;$/;"	m	struct:MonitorInfo
depth	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t depth;$/;"	m	struct:VDAgentDisplayConfig
depth	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t depth;$/;"	m	struct:VDAgentMonConfig
description	server/spice.h	/^    const char *description;$/;"	m	struct:SpiceBaseInterface
description	spice-common/common/messages.h	/^    uint64_t description;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
descriptor	spice-common/common/draw.h	/^    SpiceImageDescriptor descriptor;$/;"	m	struct:SpiceImage
descriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLImageDescriptor descriptor;$/;"	m	struct:QXLImage
dest	client/gui/softrenderer.h	/^            RectI dest;$/;"	m	struct:CEGUI::SoftRenderer::QuadInfo
dest	spice-common/common/generated_client_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:
dest	spice-common/common/generated_client_demarshallers1.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:
dest	spice-common/common/generated_server_demarshallers.c	/^    void * *dest;$/;"	m	struct:PointerInfo	file:
dest	spice-common/common/messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamCreate
dest	spice-common/common/messages.h	/^    SpiceRect dest;$/;"	m	struct:SpiceMsgDisplayStreamDataSized
dest	spice-common/common/rop3.c	/^ROP3_HANDLERS(DPSDPaoxx, ((*pat & *dest) | *src) ^ *pat ^ *dest, 0xb6);$/;"	v
dest	spice-common/common/rop3.c	/^ROP3_HANDLERS(DPSDPoaxx, ((*pat | *dest) & *src) ^ *pat ^ *dest, 0x92);$/;"	v
dest	spice-common/common/rop3.c	/^ROP3_HANDLERS(DSPDSaoxx, ((*src & *dest) | *pat) ^ *src ^ *dest, 0x9e);$/;"	v
dest	spice-common/common/rop3.c	/^ROP3_HANDLERS(DSPDSoaxx, ((*src | *dest) & *pat) ^ *src ^ *dest, 0x86);$/;"	v
dest_area	server/red_worker.c	/^    SpiceRect dest_area;$/;"	m	struct:ItemTrace	file:
dest_area	server/red_worker.c	/^    SpiceRect dest_area;$/;"	m	struct:Stream	file:
dest_file	spice-common/spice_codegen.py	/^dest_file = args[1]$/;"	v
dest_mgr	server/jpeg_encoder.c	/^    struct jpeg_destination_mgr dest_mgr;$/;"	m	struct:JpegEncoder	typeref:struct:JpegEncoder::jpeg_destination_mgr	file:
dest_mgr_empty_output_buffer	server/jpeg_encoder.c	/^static boolean dest_mgr_empty_output_buffer(j_compress_ptr cinfo)$/;"	f	file:
dest_mgr_init_destination	server/jpeg_encoder.c	/^static void dest_mgr_init_destination(j_compress_ptr cinfo)$/;"	f	file:
dest_mgr_term_destination	server/jpeg_encoder.c	/^static void dest_mgr_term_destination(j_compress_ptr cinfo)$/;"	f	file:
dest_region	spice-common/common/canvas_base.c	/^    pixman_region32_t dest_region;$/;"	m	struct:__anon15	file:
destroy	client/windows/platform.cpp	/^void NamedPipe::destroy(ListenerRef listener_ref)$/;"	f	class:NamedPipe
destroy	client/windows/red_window.cpp	/^void RedWindow_p::destroy(PixelsSource_p& pixels_source)$/;"	f	class:RedWindow_p
destroy	client/x11/platform.cpp	/^void NamedPipe::destroy(ListenerRef listener_ref)$/;"	f	class:NamedPipe
destroy	client/x11/red_window.cpp	/^void RedWindow_p::destroy(RedWindow& red_window, PixelsSource_p& pix_source)$/;"	f	class:RedWindow_p
destroy	server/red_client_shared_cache.h	/^static void FUNC_NAME(destroy)(CACHE *cache)$/;"	f
destroy	server/red_worker.c	/^    QXLReleaseInfoExt create, destroy;$/;"	m	struct:RedSurface	file:
destroy	spice-common/common/canvas_base.h	/^    void (*destroy)(SpiceCanvas *canvas);$/;"	m	struct:__anon13
destroyAllTextures	client/gui/softrenderer.cpp	/^void SoftRenderer::destroyAllTextures()$/;"	f	class:CEGUI::SoftRenderer
destroyTexture	client/gui/softrenderer.cpp	/^void SoftRenderer::destroyTexture(Texture* texture)$/;"	f	class:CEGUI::SoftRenderer
destroy_all_surfaces	client/display_channel.cpp	/^void DisplayChannel::destroy_all_surfaces()$/;"	f	class:DisplayChannel
destroy_canvas	client/display_channel.cpp	/^void DisplayChannel::destroy_canvas(int surface_id)$/;"	f	class:DisplayChannel
destroy_channel	spice-common/common/quic.c	/^static void destroy_channel(Channel *channel)$/;"	f	file:
destroy_composit_area	client/screen.cpp	/^void RedScreen::destroy_composit_area()$/;"	f	class:RedScreen
destroy_connection	client/windows/platform.cpp	/^void NamedPipe::destroy_connection(ConnectionRef conn_ref)$/;"	f	class:NamedPipe
destroy_connection	client/x11/platform.cpp	/^void NamedPipe::destroy_connection(ConnectionRef conn_ref)$/;"	f	class:NamedPipe
destroy_item	server/red_worker.c	/^    PipeItem destroy_item;$/;"	m	struct:StreamAgent	file:
destroy_monitors	client/application.cpp	/^void Application::destroy_monitors()$/;"	f	class:Application
destroy_monitors	client/windows/platform.cpp	/^void Platform::destroy_monitors()$/;"	f	class:Platform
destroy_monitors	client/x11/platform.cpp	/^void Platform::destroy_monitors()$/;"	f	class:Platform
destroy_off_screen_surfaces	client/display_channel.cpp	/^void DisplayChannel::destroy_off_screen_surfaces()$/;"	f	class:DisplayChannel
destroy_primary_surface	client/display_channel.cpp	/^void DisplayChannel::destroy_primary_surface()$/;"	f	class:DisplayChannel
destroy_streams	client/display_channel.cpp	/^void DisplayChannel::destroy_streams()$/;"	f	class:DisplayChannel
destroy_surface	client/display_channel.cpp	/^void DisplayChannel::destroy_surface(int surface_id)$/;"	f	class:DisplayChannel
destroy_surface	server/tests/test_display_base.c	/^static SimpleSurfaceCmd *destroy_surface(int surface_id)$/;"	f	file:
destroy_surface_wait	server/red_worker.c	/^static inline void destroy_surface_wait(RedWorker *worker, int surface_id)$/;"	f	file:
destroyed_gui_barrier	client/application.cpp	/^void Application::destroyed_gui_barrier(int id)$/;"	f	class:Application
destroyed_gui_barriers	client/application.cpp	/^void Application::destroyed_gui_barriers()$/;"	f	class:Application
destroying	server/red_channel.h	/^    int destroying;$/;"	m	struct:RedChannelClient
detach	client/application.cpp	/^    void detach()$/;"	f	class:GUIBarrier
detach	client/gui/gui.cpp	/^void GUI::detach()$/;"	f	class:GUI
detach_display	client/cursor_channel.cpp	/^void CursorChannel::detach_display()$/;"	f	class:CursorChannel
detach_from_screen	client/screen_layer.cpp	/^void ScreenLayer::detach_from_screen(Application& application)$/;"	f	class:ScreenLayer
detach_gui_barriers	client/application.cpp	/^void Application::detach_gui_barriers()$/;"	f	class:Application
detach_inputs	client/display_channel.cpp	/^void DisplayChannel::detach_inputs()$/;"	f	class:DisplayChannel
detach_layer	client/screen.cpp	/^void RedScreen::detach_layer(ScreenLayer& layer)$/;"	f	class:RedScreen
dettach	client/gui/gui.cpp	/^    void dettach() { _gui.dettach_dialog(this);}$/;"	f	class:GUI::Dialog
dettach_dialog	client/gui/gui.cpp	/^void GUI::dettach_dialog(Dialog* dialog)$/;"	f	class:GUI
dev	server/char_device.c	/^    SpiceCharDeviceState *dev;$/;"	m	struct:SpiceCharDeviceClientState	file:
dev_add_memslot	server/red_worker.c	/^static void dev_add_memslot(RedWorker *worker, QXLDevMemSlot mem_slot)$/;"	f	file:
dev_create_primary_surface	server/red_worker.c	/^static void dev_create_primary_surface(RedWorker *worker, uint32_t surface_id,$/;"	f	file:
dev_destroy_primary_surface	server/red_worker.c	/^static void dev_destroy_primary_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
dev_destroy_surface_wait	server/red_worker.c	/^static void dev_destroy_surface_wait(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
dev_destroy_surfaces	server/red_worker.c	/^static inline void dev_destroy_surfaces(RedWorker *worker)$/;"	f	file:
dev_flush_surfaces	server/red_worker.c	/^static void dev_flush_surfaces(RedWorker *worker)$/;"	f	file:
device_client_wait_for_tokens_timeout	server/char_device.c	/^static void device_client_wait_for_tokens_timeout(void *opaque)$/;"	f	file:
device_data	server/red_parse_qxl.h	/^    uint8_t *device_data;$/;"	m	struct:RedCursorCmd
device_data	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t device_data[QXL_CURSUR_DEVICE_DATA_SIZE]; \/\/todo: dynamic size from rom$/;"	m	struct:QXLCursorCmd
dh_key_file	server/reds.c	/^    char dh_key_file[256];$/;"	m	struct:RedSSLParameters	file:
dict	server/glz_encoder.c	/^    SharedDictionary     *dict;$/;"	m	struct:Encoder	file:
dict	server/red_worker.c	/^    GlzEncDictContext *dict;$/;"	m	struct:GlzSharedDictionary	file:
dim	client/gui/gui.cpp	/^void GUI::Dialog::dim()$/;"	f	class:GUI::Dialog
direct_area	client/screen_layer.h	/^    QRegion& direct_area() { return _direct_area;}$/;"	f	class:ScreenLayer
disable	client/playback_channel.cpp	/^void PlaybackChannel::disable()$/;"	f	class:PlaybackChannel
disable	client/x11/platform.cpp	/^void MultyMonScreen::disable()$/;"	f	class:MultyMonScreen
disable	client/x11/platform.cpp	/^void XMonitor::disable()$/;"	f	class:XMonitor
disarm	client/process_loop.cpp	/^void Timer::disarm()$/;"	f	class:Timer
discard_all	server/agent-msg-filter.h	/^    int discard_all;$/;"	m	struct:AgentMsgFilter
disconnect	client/application.cpp	/^void Application::disconnect()$/;"	f	class:Application
disconnect	client/red_channel.cpp	/^void RedChannel::disconnect()$/;"	f	class:RedChannel
disconnect	client/red_client.cpp	/^void RedClient::disconnect()$/;"	f	class:RedClient
disconnect	client/red_peer.cpp	/^void RedPeer::disconnect()$/;"	f	class:RedPeer
disconnect	server/red_channel.h	/^    channel_client_disconnect_proc disconnect;$/;"	m	struct:__anon146
disconnect_channels	client/red_client.cpp	/^void Migrate::disconnect_channels()$/;"	f	class:Migrate
disconnect_channels	client/red_client.cpp	/^void RedClient::disconnect_channels()$/;"	f	class:RedClient
disconnect_migration_src	client/red_channel.cpp	/^void RedChannel::disconnect_migration_src()$/;"	f	class:RedChannel
disconnecting	server/red_channel.h	/^    int disconnecting;$/;"	m	struct:RedClient
dispatch_agent_message	client/red_client.cpp	/^void RedClient::dispatch_agent_message(VDAgentMessage* msg, void* data)$/;"	f	class:RedClient
dispatcher	server/red_dispatcher.c	/^    Dispatcher dispatcher;$/;"	m	struct:RedDispatcher	file:
dispatcher	server/reds.h	/^    struct RedDispatcher  *dispatcher;$/;"	m	struct:QXLState	typeref:struct:QXLState::RedDispatcher
dispatcher_allows_client_mouse	server/reds-private.h	/^    int dispatcher_allows_client_mouse;$/;"	m	struct:RedsState
dispatcher_get_recv_fd	server/dispatcher.c	/^int dispatcher_get_recv_fd(Dispatcher *dispatcher)$/;"	f
dispatcher_handle_async_done	server/dispatcher.h	/^typedef void (*dispatcher_handle_async_done)(void *opaque,$/;"	t
dispatcher_handle_message	server/dispatcher.h	/^typedef void (*dispatcher_handle_message)(void *opaque,$/;"	t
dispatcher_handle_read	server/main_dispatcher.c	/^static void dispatcher_handle_read(int fd, int event, void *opaque)$/;"	f	file:
dispatcher_handle_recv_read	server/dispatcher.c	/^void dispatcher_handle_recv_read(Dispatcher *dispatcher)$/;"	f
dispatcher_handle_single_read	server/dispatcher.c	/^static int dispatcher_handle_single_read(Dispatcher *dispatcher)$/;"	f	file:
dispatcher_init	server/dispatcher.c	/^void dispatcher_init(Dispatcher *dispatcher, size_t max_message_type,$/;"	f
dispatcher_register_async_done_callback	server/dispatcher.c	/^void dispatcher_register_async_done_callback($/;"	f
dispatcher_register_handler	server/dispatcher.c	/^void dispatcher_register_handler(Dispatcher *dispatcher, uint32_t message_type,$/;"	f
dispatcher_send_message	server/dispatcher.c	/^void dispatcher_send_message(Dispatcher *dispatcher, uint32_t message_type,$/;"	f
dispatcher_set_opaque	server/dispatcher.c	/^void dispatcher_set_opaque(Dispatcher *dispatcher, void *opaque)$/;"	f
dispatchers	server/red_dispatcher.c	/^static RedDispatcher *dispatchers = NULL;$/;"	v	file:
display_begin_send_message	server/red_worker.c	/^static inline void display_begin_send_message(RedChannelClient *rcc)$/;"	f	file:
display_channel	server/red_worker.c	/^    DisplayChannel *display_channel;$/;"	m	struct:RedWorker	file:
display_channel_client_create	server/red_worker.c	/^DisplayChannelClient *display_channel_client_create(CommonChannel *common,$/;"	f
display_channel_client_on_disconnect	server/red_worker.c	/^static void display_channel_client_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
display_channel_client_release_item_after_push	server/red_worker.c	/^static void display_channel_client_release_item_after_push(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_client_release_item_before_push	server/red_worker.c	/^static void display_channel_client_release_item_before_push(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_client_restore_surface	server/red_worker.c	/^static int display_channel_client_restore_surface(DisplayChannelClient *dcc, uint32_t surface_id)$/;"	f	file:
display_channel_client_restore_surfaces_lossless	server/red_worker.c	/^static int display_channel_client_restore_surfaces_lossless(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_client_restore_surfaces_lossy	server/red_worker.c	/^static int display_channel_client_restore_surfaces_lossy(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_client_wait_for_init	server/red_worker.c	/^static int display_channel_client_wait_for_init(DisplayChannelClient *dcc)$/;"	f	file:
display_channel_create	server/red_worker.c	/^static void display_channel_create(RedWorker *worker, int migrate)$/;"	f	file:
display_channel_handle_message	server/red_worker.c	/^static int display_channel_handle_message(RedChannelClient *rcc, uint32_t size, uint16_t type,$/;"	f	file:
display_channel_handle_migrate_data	server/red_worker.c	/^static int display_channel_handle_migrate_data(RedChannelClient *rcc, uint32_t size,$/;"	f	file:
display_channel_handle_migrate_data_get_serial	server/red_worker.c	/^static uint64_t display_channel_handle_migrate_data_get_serial($/;"	f	file:
display_channel_handle_migrate_glz_dictionary	server/red_worker.c	/^static int display_channel_handle_migrate_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_handle_migrate_mark	server/red_worker.c	/^static int display_channel_handle_migrate_mark(RedChannelClient *rcc)$/;"	f	file:
display_channel_handle_stream_report	server/red_worker.c	/^static int display_channel_handle_stream_report(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_hold_pipe_item	server/red_worker.c	/^static void display_channel_hold_pipe_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
display_channel_init	server/red_worker.c	/^static int display_channel_init(DisplayChannelClient *dcc, SpiceMsgcDisplayInit *init_info)$/;"	f	file:
display_channel_init_cache	server/red_worker.c	/^static int display_channel_init_cache(DisplayChannelClient *dcc, SpiceMsgcDisplayInit *init_info)$/;"	f	file:
display_channel_init_glz_dictionary	server/red_worker.c	/^static int display_channel_init_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_marshall_migrate_data	server/red_worker.c	/^static void display_channel_marshall_migrate_data(RedChannelClient *rcc,$/;"	f	file:
display_channel_marshall_migrate_data_surfaces	server/red_worker.c	/^static void display_channel_marshall_migrate_data_surfaces(DisplayChannelClient *dcc,$/;"	f	file:
display_channel_marshall_pixmap_sync	server/red_worker.c	/^static void display_channel_marshall_pixmap_sync(RedChannelClient *rcc,$/;"	f	file:
display_channel_marshall_reset_cache	server/red_worker.c	/^static void display_channel_marshall_reset_cache(RedChannelClient *rcc,$/;"	f	file:
display_channel_push_release	server/red_worker.c	/^static void display_channel_push_release(DisplayChannelClient *dcc, uint8_t type, uint64_t id,$/;"	f	file:
display_channel_release_item	server/red_worker.c	/^static void display_channel_release_item(RedChannelClient *rcc, PipeItem *item, int item_pushed)$/;"	f	file:
display_channel_send_free_list	server/red_worker.c	/^static inline void display_channel_send_free_list(RedChannelClient *rcc)$/;"	f	file:
display_channel_send_free_list_legacy	server/red_worker.c	/^static inline void display_channel_send_free_list_legacy(RedChannelClient *rcc)$/;"	f	file:
display_channel_send_item	server/red_worker.c	/^static void display_channel_send_item(RedChannelClient *rcc, PipeItem *pipe_item)$/;"	f	file:
display_channel_wait_for_migrate_data	server/red_worker.c	/^static int display_channel_wait_for_migrate_data(DisplayChannel *display)$/;"	f	file:
display_channels_hint	server/main_channel.c	/^    int display_channels_hint;$/;"	m	struct:InitPipeItem	file:
display_channels_hint	spice-common/common/messages.h	/^    uint32_t display_channels_hint;$/;"	m	struct:SpiceMsgMainInit
display_id	spice-common/common/messages.h	/^    uint8_t display_id;$/;"	m	struct:SpiceMsgcMousePosition
display_id	spice-common/spice-protocol/spice/vd_agent.h	/^    uint8_t display_id;$/;"	m	struct:VDAgentMouseState
display_is_connected	server/red_worker.c	/^static int display_is_connected(RedWorker *worker)$/;"	f	file:
display_marshal_sub_msg_inval_list	server/red_worker.c	/^static inline void display_marshal_sub_msg_inval_list(SpiceMarshaller *m,$/;"	f	file:
display_marshal_sub_msg_inval_list_wait	server/red_worker.c	/^static inline void display_marshal_sub_msg_inval_list_wait(SpiceMarshaller *m,$/;"	f	file:
display_mode_listener	client/x11/platform.cpp	/^static Platform::DisplayModeListener* display_mode_listener = &default_display_mode_listener;$/;"	v	file:
display_sif	server/tests/test_display_base.c	/^QXLInterface display_sif = {$/;"	v
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	spice-common/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	spice-common/spice-protocol/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	spice-common/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	spice-common/spice-protocol/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	spice-common/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	spice-common/spice-protocol/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
doRender	client/gui/softrenderer.cpp	/^void SoftRenderer::doRender()$/;"	f	class:CEGUI::SoftRenderer
do_command	client/application.cpp	/^void Application::do_command(int command)$/;"	f	class:Application
do_connect	client/application.cpp	/^bool Application::do_connect()$/;"	f	class:Application
do_destroy_all_surfaces	client/display_channel.cpp	/^void DisplayChannel::do_destroy_all_surfaces()$/;"	f	class:DisplayChannel
do_destroy_off_screen_surfaces	client/display_channel.cpp	/^void DisplayChannel::do_destroy_off_screen_surfaces()$/;"	f	class:DisplayChannel
do_disconnect	client/application.cpp	/^bool Application::do_disconnect()$/;"	f	class:Application
do_flow_control	server/char_device.c	/^    int do_flow_control;$/;"	m	struct:SpiceCharDeviceClientState	file:
do_jpeg_encode	server/jpeg_encoder.c	/^static void do_jpeg_encode(JpegEncoder *jpeg, uint8_t *lines, unsigned int num_lines)$/;"	f	file:
do_match	server/glz_encode_tmpl.c	/^static INLINE size_t FNAME(do_match)(SharedDictionary *dict,$/;"	f	file:
do_migration_connect_target	client/red_channel.cpp	/^void RedChannel::do_migration_connect_target()$/;"	f	class:RedChannel
do_migration_disconnect_src	client/red_channel.cpp	/^void RedChannel::do_migration_disconnect_src()$/;"	f	class:RedChannel
do_nothing_handle_message	server/red_channel.c	/^static int do_nothing_handle_message(RedChannelClient *rcc,$/;"	f	file:
do_on_key_up	client/application.cpp	/^void Application::do_on_key_up(RedKey key)$/;"	f	class:Application
do_ping_client	server/main_channel.c	/^static void do_ping_client(MainChannelClient *mcc,$/;"	f	file:
do_quit	client/process_loop.cpp	/^void ProcessLoop::do_quit(int error_code)$/;"	f	class:ProcessLoop
do_response	client/application.cpp	/^void MonitorsQuery::do_response(AbstractProcessLoop& events_loop)$/;"	f	class:MonitorsQuery
do_response	client/display_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:CreatePrimarySurfaceEvent
do_response	client/display_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:CreateSurfaceEvent
do_response	client/display_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:DestroyAllSurfacesEvent
do_response	client/display_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:DestroyPrimarySurfaceEvent
do_response	client/display_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:DestroySurfaceEvent
do_response	client/inputs_channel.cpp	/^    virtual void do_response(AbstractProcessLoop& events_loop)$/;"	f	class:RemoveInputsHandlerEvent
do_response	client/process_loop.h	/^    virtual void do_response(AbstractProcessLoop& events_loop) {}$/;"	f	class:SyncEvent
do_response	client/screen_layer.cpp	/^void AttachLayerEvent::do_response(AbstractProcessLoop& events_loop)$/;"	f	class:AttachLayerEvent
do_response	client/screen_layer.cpp	/^void DetachLayerEvent::do_response(AbstractProcessLoop& events_loop)$/;"	f	class:DetachLayerEvent
do_restore	client/windows/platform.cpp	/^void WinMonitor::do_restore()$/;"	f	class:WinMonitor
do_restore	client/x11/platform.cpp	/^    virtual void do_restore() {}$/;"	f	class:StaticScreen
do_restore	client/x11/platform.cpp	/^    virtual void do_restore() {}$/;"	f	class:XineramaMonitor
do_restore	client/x11/platform.cpp	/^void DynamicScreen::do_restore()$/;"	f	class:DynamicScreen
do_restore	client/x11/platform.cpp	/^void XMonitor::do_restore()$/;"	f	class:XMonitor
do_rop3_with_color	spice-common/common/rop3.c	/^void do_rop3_with_color(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	f
do_rop3_with_pattern	spice-common/common/rop3.c	/^void do_rop3_with_pattern(uint8_t rop3, pixman_image_t *d, pixman_image_t *s, SpicePoint *src_pos,$/;"	f
do_send	client/red_peer.cpp	/^uint32_t RedPeer::do_send(RedPeer::OutMessage& message, uint32_t skip_bytes)$/;"	f	class:RedPeer
do_send_agent_clipboard	client/red_client.cpp	/^void RedClient::do_send_agent_clipboard()$/;"	f	class:RedClient
do_set_mode	client/windows/platform.cpp	/^void WinMonitor::do_set_mode(int width, int height)$/;"	f	class:WinMonitor
do_set_mode	client/x11/platform.cpp	/^    virtual void do_set_mode(int width, int height)$/;"	f	class:StaticScreen
do_set_mode	client/x11/platform.cpp	/^void DynamicScreen::do_set_mode(int width, int height)$/;"	f	class:DynamicScreen
do_set_mode	client/x11/platform.cpp	/^void XMonitor::do_set_mode(int width, int height)$/;"	f	class:XMonitor
do_set_mode	client/x11/platform.cpp	/^void XineramaMonitor::do_set_mode(int width, int height)$/;"	f	class:XineramaMonitor
do_spice_init	server/reds.c	/^static int do_spice_init(SpiceCoreInterface *core_interface)$/;"	f	file:
do_start_key_interception	client/windows/red_window.cpp	/^void RedWindow::do_start_key_interception()$/;"	f	class:RedWindow
do_start_key_interception	client/x11/red_window.cpp	/^void RedWindow::do_start_key_interception()$/;"	f	class:RedWindow
do_stop_key_interception	client/windows/red_window.cpp	/^void RedWindow::do_stop_key_interception()$/;"	f	class:RedWindow
do_stop_key_interception	client/x11/red_window.cpp	/^void RedWindow::do_stop_key_interception()$/;"	f	class:RedWindow
do_wakeup	server/tests/test_display_base.c	/^static void do_wakeup(void *opaque)$/;"	f	file:
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	client/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	docs/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	docs/manual/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	server/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	server/tests/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	spice-common/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	spice-common/common/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	spice-common/python_modules/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	spice-common/spice-protocol/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	spice-common/spice-protocol/spice/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docfiles	docs/manual/Makefile	/^docfiles = $(am__append_1) $(am__append_2)$/;"	m
done	server/reds_stream.c	/^    AsyncReadDone done;$/;"	m	struct:AsyncRead	file:
dot	spice-common/common/canvas_base.c	/^static inline int64_t dot(SPICE_FIXED28_4 x1,$/;"	f	file:
dot2	spice-common/common/canvas_base.c	/^static inline int64_t dot2(SPICE_FIXED28_4 x,$/;"	f	file:
dpi_pipe_item	server/red_worker.c	/^    PipeItem dpi_pipe_item; \/* link for the client's pipe itself *\/$/;"	m	struct:DrawablePipeItem	file:
drain	client/windows/playback.cpp	/^void WavePlayer::drain()$/;"	f	class:WavePlayer
draw	client/cursor_channel.cpp	/^void AlphaCursor::draw(RedDrawable& dest, int x, int y, const SpiceRect& area)$/;"	f	class:AlphaCursor
draw	client/cursor_channel.cpp	/^void ColorCursor::draw(RedDrawable& dest, int x, int y, const SpiceRect& area)$/;"	f	class:ColorCursor
draw	client/cursor_channel.cpp	/^void MonoCursor::draw(RedDrawable& dest, int x, int y, const SpiceRect& area)$/;"	f	class:MonoCursor
draw	client/cursor_channel.cpp	/^void UnsupportedCursor::draw(RedDrawable& dest, int x, int y, const SpiceRect& area)$/;"	f	class:UnsupportedCursor
draw_alpha_blend	client/canvas.cpp	/^void Canvas::draw_alpha_blend(SpiceMsgDisplayDrawAlphaBlend& alpha_blend, int size)$/;"	f	class:Canvas
draw_alpha_blend	spice-common/common/canvas_base.h	/^    void (*draw_alpha_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend);$/;"	m	struct:__anon13
draw_area	server/spice.h	/^    QXLDrawArea draw_area;$/;"	m	struct:QXLDevInfo
draw_area_offset	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t draw_area_offset;        \/* qxl-1 *\/$/;"	m	struct:QXLRom
draw_blackness	client/canvas.cpp	/^void Canvas::draw_blackness(SpiceMsgDisplayDrawBlackness& blackness, int size)$/;"	f	class:Canvas
draw_blackness	spice-common/common/canvas_base.h	/^    void (*draw_blackness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness);$/;"	m	struct:__anon13
draw_blend	client/canvas.cpp	/^void Canvas::draw_blend(SpiceMsgDisplayDrawBlend& blend, int size)$/;"	f	class:Canvas
draw_blend	spice-common/common/canvas_base.h	/^    void (*draw_blend)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend);$/;"	m	struct:__anon13
draw_brush	spice-common/common/canvas_base.c	/^static void draw_brush(SpiceCanvas *canvas,$/;"	f	file:
draw_composite	client/canvas.cpp	/^void Canvas::draw_composite(SpiceMsgDisplayDrawComposite& composite, int size)$/;"	f	class:Canvas
draw_composite	spice-common/common/canvas_base.h	/^    void (*draw_composite)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceComposite *composite);$/;"	m	struct:__anon13
draw_copy	client/canvas.cpp	/^void Canvas::draw_copy(SpiceMsgDisplayDrawCopy& copy, int size)$/;"	f	class:Canvas
draw_copy	spice-common/common/canvas_base.h	/^    void (*draw_copy)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy);$/;"	m	struct:__anon13
draw_direct	client/screen.cpp	/^inline void RedScreen::draw_direct(RedDrawable& win_dc, QRegion& direct_rgn, QRegion& composit_rgn,$/;"	f	class:RedScreen
draw_dirty_region	server/red_worker.c	/^    QRegion draw_dirty_region;$/;"	m	struct:RedSurface	file:
draw_fill	client/canvas.cpp	/^void Canvas::draw_fill(SpiceMsgDisplayDrawFill& fill, int size)$/;"	f	class:Canvas
draw_fill	spice-common/common/canvas_base.h	/^    void (*draw_fill)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill);$/;"	m	struct:__anon13
draw_info	client/application.cpp	/^void InfoLayer::draw_info(const QRegion& dest_region, RedDrawable& dest)$/;"	f	class:InfoLayer
draw_invers	client/canvas.cpp	/^void Canvas::draw_invers(SpiceMsgDisplayDrawInvers& invers, int size)$/;"	f	class:Canvas
draw_invers	spice-common/common/canvas_base.h	/^    void (*draw_invers)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers);$/;"	m	struct:__anon13
draw_mode	spice-common/common/glc.c	/^    int draw_mode;$/;"	m	struct:InternaCtx	file:
draw_opaque	client/canvas.cpp	/^void Canvas::draw_opaque(SpiceMsgDisplayDrawOpaque& opaque, int size)$/;"	f	class:Canvas
draw_opaque	spice-common/common/canvas_base.h	/^    void (*draw_opaque)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque);$/;"	m	struct:__anon13
draw_pos	server/tests/test_display_base.c	/^static void draw_pos(Test *test, int t, int *x, int *y)$/;"	f	file:
draw_rop3	client/canvas.cpp	/^void Canvas::draw_rop3(SpiceMsgDisplayDrawRop3& rop3, int size)$/;"	f	class:Canvas
draw_rop3	spice-common/common/canvas_base.h	/^    void (*draw_rop3)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3);$/;"	m	struct:__anon13
draw_str_mask_bitmap	spice-common/common/gdi_canvas.c	/^static void draw_str_mask_bitmap(struct GdiCanvas *canvas,$/;"	f	file:
draw_stroke	client/canvas.cpp	/^void Canvas::draw_stroke(SpiceMsgDisplayDrawStroke& stroke, int size)$/;"	f	class:Canvas
draw_stroke	spice-common/common/canvas_base.h	/^    void (*draw_stroke)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke);$/;"	m	struct:__anon13
draw_text	client/canvas.cpp	/^void Canvas::draw_text(SpiceMsgDisplayDrawText& text, int size)$/;"	f	class:Canvas
draw_text	spice-common/common/canvas_base.h	/^    void (*draw_text)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text);$/;"	m	struct:__anon13
draw_transparent	client/canvas.cpp	/^void Canvas::draw_transparent(SpiceMsgDisplayDrawTransparent& transparent, int size)$/;"	f	class:Canvas
draw_transparent	spice-common/common/canvas_base.h	/^    void (*draw_transparent)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent* transparent);$/;"	m	struct:__anon13
draw_type_to_str	server/red_worker.c	/^static const char *draw_type_to_str(uint8_t type)$/;"	f	file:
draw_whiteness	client/canvas.cpp	/^void Canvas::draw_whiteness(SpiceMsgDisplayDrawWhiteness& whiteness, int size)$/;"	f	class:Canvas
draw_whiteness	spice-common/common/canvas_base.h	/^    void (*draw_whiteness)(SpiceCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness);$/;"	m	struct:__anon13
drawable	client/x11/pixels_source_p.h	/^            Drawable drawable;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
drawable	server/red_worker.c	/^        Drawable drawable;$/;"	m	union:_Drawable::__anon189	file:
drawable	server/red_worker.c	/^    Drawable    *drawable;$/;"	m	struct:RedGlzDrawable	file:
drawable	server/red_worker.c	/^    Drawable *drawable;$/;"	m	struct:DependItem	file:
drawable	server/red_worker.c	/^    Drawable *drawable;$/;"	m	struct:DrawablePipeItem	file:
drawable	server/red_worker.c	/^    Drawable *drawable;$/;"	m	struct:UpgradeItem	file:
drawable	server/tests/test_display_base.c	/^    QXLDrawable drawable;$/;"	m	struct:SimpleSpiceUpdate	file:
drawable	spice-common/common/ogl_ctx.c	/^    GLXDrawable drawable;$/;"	m	struct:OGLCtx	file:
drawable_count	server/red_worker.c	/^    uint32_t drawable_count;$/;"	m	struct:RedWorker	file:
drawable_depends_on_areas	server/red_worker.c	/^static inline int drawable_depends_on_areas(Drawable *drawable,$/;"	f	file:
drawable_intersects_with_areas	server/red_worker.c	/^static inline int drawable_intersects_with_areas(Drawable *drawable, int surface_ids[],$/;"	f	file:
drawable_link	server/red_worker.c	/^    RingItem drawable_link;$/;"	m	struct:RedGlzDrawable	file:
drawables	server/red_worker.c	/^    _Drawable drawables[NUM_DRAWABLES];$/;"	m	struct:RedWorker	file:
drawables_init	server/red_worker.c	/^static void drawables_init(RedWorker *worker)$/;"	f	file:
driver_cap_monitors_config	server/red_worker.c	/^    int driver_cap_monitors_config;$/;"	m	struct:RedWorker	file:
drop_one_frame	client/display_channel.cpp	/^void VideoStream::drop_one_frame()$/;"	f	class:VideoStream
drops	server/red_worker.c	/^    int drops;$/;"	m	struct:StreamAgent	file:
dst_do_seamless_migrate	server/reds-private.h	/^    int dst_do_seamless_migrate; \/* per migration. Updated after the migration handshake$/;"	m	struct:RedsState
dst_info	spice-common/common/messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless
dst_info	spice-common/common/messages.h	/^    SpiceMigrationDstInfo dst_info;$/;"	m	struct:SpiceMsgMainMigrationBegin
dummy	server/inputs_channel.c	/^    int dummy;$/;"	m	struct:SpiceMouseState	file:
dummy	server/inputs_channel.c	/^    int dummy;$/;"	m	struct:SpiceTabletState	file:
dummy	server/red_channel.h	/^    int dummy;$/;"	m	struct:RedChannelClient
dummy	server/reds.h	/^    int dummy;$/;"	m	struct:SpiceMigrateState
dummy_connected	server/red_channel.h	/^    int dummy_connected;$/;"	m	struct:RedChannelClient
dummy_core	server/red_channel.c	/^SpiceCoreInterface dummy_core = {$/;"	v
dummy_handler	server/dispatcher.c	/^static void dummy_handler(int bla)$/;"	f	file:
dummy_watch_add	server/red_channel.c	/^static SpiceWatch *dummy_watch_add(int fd, int event_mask, SpiceWatchFunc func, void *opaque)$/;"	f	file:
dummy_watch_remove	server/red_channel.c	/^static void dummy_watch_remove(SpiceWatch *watch)$/;"	f	file:
dummy_watch_update_mask	server/red_channel.c	/^static void dummy_watch_update_mask(SpiceWatch *watch, int event_mask)$/;"	f	file:
dump_bitmap	server/spice_bitmap_utils.c	/^void dump_bitmap(SpiceBitmap *bitmap)$/;"	f
dump_bitmap	spice-common/common/canvas_base.c	/^static void dump_bitmap(SpiceBitmap *bitmap, SpicePalette *palette)$/;"	f	file:
dump_jpeg	spice-common/common/canvas_base.c	/^static void dump_jpeg(uint8_t* data, int data_size)$/;"	f	file:
dump_line	server/spice_bitmap_utils.c	/^static void dump_line(FILE *f, uint8_t* line, uint16_t n_pixel_bits, int width, int row_size)$/;"	f	file:
dump_palette	server/spice_bitmap_utils.c	/^static void dump_palette(FILE *f, SpicePalette* plt)$/;"	f	file:
dump_surface	spice-common/common/canvas_base.c	/^static void dump_surface(pixman_image_t *surface, int cache)$/;"	f	file:
during_quality_eval	server/mjpeg_encoder.c	/^    int during_quality_eval;$/;"	m	struct:MJpegEncoderRateControl	file:
during_read_from_device	server/char_device.c	/^    int during_read_from_device;$/;"	m	struct:SpiceCharDeviceState	file:
during_send	client/client_net_socket.cpp	/^inline bool ClientNetSocket::during_send()$/;"	f	class:ClientNetSocket
during_send	server/red_channel.h	/^    int during_send;$/;"	m	struct:RedChannelClient
during_target_migrate	server/red_channel.h	/^    int during_target_migrate; \/* if seamless=TRUE, migration_target is turned off when all$/;"	m	struct:RedClient
during_target_migrate	server/red_worker.c	/^    int during_target_migrate; \/* TRUE when the client that is associated with the channel$/;"	m	struct:CommonChannel	file:
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	client/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	docs/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	docs/manual/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	server/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	server/tests/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	spice-common/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	spice-common/common/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	spice-common/python_modules/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	spice-common/spice-protocol/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	spice-common/spice-protocol/spice/Makefile	/^dvidir = ${docdir}$/;"	m
dx	spice-common/common/lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:
dx	spice-common/common/lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:
dx	spice-common/common/lines.c	/^    int dx;$/;"	m	struct:_PolyEdge	file:
dx	spice-common/common/messages.h	/^    int32_t dx;$/;"	m	struct:SpiceMsgcMouseMotion
dy	spice-common/common/lines.c	/^    int dx, dy;$/;"	m	struct:_LineFace	file:
dy	spice-common/common/lines.c	/^    int dx, dy;$/;"	m	struct:_PolySlope	file:
dy	spice-common/common/lines.c	/^    int dy;$/;"	m	struct:_PolyEdge	file:
dy	spice-common/common/messages.h	/^    int32_t dy;$/;"	m	struct:SpiceMsgcMouseMotion
e	spice-common/common/lines.c	/^    int e;                      \/* initial error term *\/$/;"	m	struct:_PolyEdge	file:
effect	server/red_parse_qxl.h	/^    uint8_t effect;$/;"	m	struct:RedDrawable
effect	server/red_worker.c	/^    uint8_t effect;$/;"	m	struct:DrawItem	file:
effect	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t effect;$/;"	m	struct:QXLCompatDrawable
effect	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t effect;$/;"	m	struct:QXLDrawable
empty_mem_output_buffer	server/mjpeg_encoder.c	/^static boolean empty_mem_output_buffer(j_compress_ptr cinfo)$/;"	f	file:
enable	client/red_peer.h	/^    void enable() { _shut = false;}$/;"	f	class:RedPeer
enable	client/smartcard_channel.h	/^    bool enable;$/;"	m	struct:SmartcardOptions
enable	client/x11/platform.cpp	/^void MultyMonScreen::enable()$/;"	f	class:MultyMonScreen
enable	client/x11/platform.cpp	/^void XMonitor::enable()$/;"	f	class:XMonitor
enable_jpeg	server/red_worker.c	/^    int enable_jpeg;$/;"	m	struct:DisplayChannel	file:
enable_smartcard	client/application.cpp	/^void Application::enable_smartcard(bool enable)$/;"	f	class:Application
enable_zlib_glz_wrap	server/red_worker.c	/^    int enable_zlib_glz_wrap;$/;"	m	struct:DisplayChannel	file:
encode	server/glz_encoder.c	/^static INLINE void encode(Encoder *encoder, uint8_t byte)$/;"	f	file:
encode	spice-common/common/lz.c	/^static inline void encode(Encoder *encoder, uint8_t byte)$/;"	f	file:
encode	spice-common/common/quic.c	/^static inline void encode(Encoder *encoder, unsigned int word, unsigned int len)$/;"	f	file:
encode_32	server/glz_encoder.c	/^static INLINE void encode_32(Encoder *encoder, unsigned int word)$/;"	f	file:
encode_32	spice-common/common/lz.c	/^static inline void encode_32(Encoder *encoder, unsigned int word)$/;"	f	file:
encode_32	spice-common/common/quic.c	/^static inline void encode_32(Encoder *encoder, unsigned int word)$/;"	f	file:
encode_64	server/glz_encoder.c	/^static INLINE void encode_64(Encoder *encoder, uint64_t word)$/;"	f	file:
encode_buf	server/snd_worker.c	/^    uint8_t  encode_buf[SND_CODEC_MAX_COMPRESSED_BYTES];$/;"	m	struct:PlaybackChannel	file:
encode_channel_run	spice-common/common/quic.c	/^static void encode_channel_run(Encoder *encoder, Channel *channel, unsigned int runlen)$/;"	f	file:
encode_copy_count	server/glz_encoder.c	/^static INLINE void encode_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:
encode_copy_count	spice-common/common/lz.c	/^static inline void encode_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:
encode_frame	server/red_worker.c	/^static int encode_frame(DisplayChannelClient *dcc, const SpiceRect *src,$/;"	f	file:
encode_level	spice-common/common/lz.c	/^static inline void encode_level(Encoder *encoder, uint8_t level_code)$/;"	f	file:
encode_lock	server/red_worker.c	/^    pthread_rwlock_t encode_lock;$/;"	m	struct:GlzSharedDictionary	file:
encode_match	server/glz_encode_match_tmpl.c	/^static INLINE void encode_match(Encoder *encoder, uint32_t image_distance,$/;"	f	file:
encode_ones	spice-common/common/quic.c	/^static inline void encode_ones(Encoder *encoder, unsigned int n)$/;"	f	file:
encode_run	spice-common/common/quic.c	/^static inline void encode_run(Encoder *encoder, unsigned int len)$/;"	f	file:
encode_run	spice-common/common/quic.c	/^static void encode_run(Encoder *encoder, unsigned int runlen) \/\/todo: try use end of line$/;"	f	file:
encoded	server/reds_stream.c	/^    const uint8_t *encoded;$/;"	m	struct:RedsSASL	file:
encodedLength	server/reds_stream.c	/^    unsigned int encodedLength;$/;"	m	struct:RedsSASL	file:
encodedOffset	server/reds_stream.c	/^    unsigned int encodedOffset;$/;"	m	struct:RedsSASL	file:
encoded_size_by_quality	server/mjpeg_encoder.c	/^    uint64_t encoded_size_by_quality[MJPEG_QUALITY_SAMPLE_NUM];$/;"	m	struct:MJpegEncoderQualityEval	file:
encoder	spice-common/common/quic.c	/^    Encoder *encoder;$/;"	m	struct:Channel	file:
encoder	spice-common/common/quic.c	/^    Encoder *encoder;$/;"	m	struct:CommonState	file:
encoder_init_rle	spice-common/common/quic.c	/^static void encoder_init_rle(CommonState *state)$/;"	f	file:
encoder_reset	server/glz_encoder.c	/^static int encoder_reset(Encoder *encoder, uint8_t *io_ptr, uint8_t *io_ptr_end)$/;"	f	file:
encoder_reset	spice-common/common/lz.c	/^static int encoder_reset(Encoder *encoder, uint8_t *io_ptr, uint8_t *io_ptr_end)$/;"	f	file:
encoder_reste	spice-common/common/quic.c	/^static int encoder_reste(Encoder *encoder, uint32_t *io_ptr, uint32_t *io_ptr_end)$/;"	f	file:
encoder_reste_channels	spice-common/common/quic.c	/^static int encoder_reste_channels(Encoder *encoder, int channels, int width, int bpc)$/;"	f	file:
encoder_usr_more_lines	server/red_worker.c	/^static inline int encoder_usr_more_lines(EncoderData *enc_data, uint8_t **lines)$/;"	f	file:
encoder_usr_more_space	server/red_worker.c	/^static inline int encoder_usr_more_space(EncoderData *enc_data, uint32_t **io_ptr)$/;"	f	file:
encoders_heads	server/glz_encoder_dictionary_protected.h	/^        uint32_t            *encoders_heads; \/\/ Holds for each encoder (by id), the window head when$/;"	m	struct:SharedDictionary::__anon170
encrypted_data	spice-common/spice-protocol/spice/protocol.h	/^    uint8_t encrypted_data[SPICE_TICKET_KEY_PAIR_LENGTH \/ 8];$/;"	m	struct:SpiceLinkEncryptedTicket
encrypted_ticket	server/reds-private.h	/^    SpiceLinkEncryptedTicket encrypted_ticket;$/;"	m	struct:TicketInfo
end	server/glz_encoder.c	/^        uint8_t            *end;$/;"	m	struct:Encoder::__anon203	file:
end	server/red_worker.c	/^   uint64_t end;$/;"	m	struct:StreamStats	file:
end	server/reds_stream.c	/^    uint8_t *end;$/;"	m	struct:AsyncRead	file:
end	server/snd_worker.c	/^        uint8_t *end;$/;"	m	struct:SndChannel::__anon140	file:
end_block	spice-common/python_modules/codegen.py	/^    def end_block(self, semicolon=False, newline=True):$/;"	m	class:CodeWriter
end_frame_mm_time	spice-common/common/messages.h	/^    uint32_t end_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport
end_style	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t end_style;$/;"	m	struct:QXLLineAttr
end_wave	client/playback_channel.cpp	/^static void end_wave()$/;"	f	file:
endif	spice-common/python_modules/codegen.py	/^    def endif(self, name):$/;"	m	class:CodeWriter
ensure_clipboard_data_space	client/x11/platform.cpp	/^static void ensure_clipboard_data_space(uint32_t size)$/;"	f	file:
enter_full_screen	client/application.cpp	/^void Application::enter_full_screen()$/;"	f	class:Application
enter_modal_loop	client/screen.cpp	/^void RedScreen::enter_modal_loop()$/;"	f	class:RedScreen
enter_modal_loop	client/windows/platform.cpp	/^void WinPlatform::enter_modal_loop()$/;"	f	class:WinPlatform
ents	spice-common/common/draw.h	/^    uint32_t ents[0];$/;"	m	struct:SpicePalette
ents	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t ents[0];$/;"	m	struct:QXLPalette
equal	client/red_pixmap.h	/^    bool equal(const RedPixmap &other, const SpiceRect &rect) const {$/;"	f	class:RedPixmap
erase_background	client/screen.cpp	/^inline void RedScreen::erase_background(RedDrawable& dc, const QRegion& composit_rgn)$/;"	f	class:RedScreen
erase_rect	client/windows/red_drawable.cpp	/^void RedDrawable::erase_rect(const SpiceRect& rect, rgb32_t color)$/;"	f	class:RedDrawable
erase_rect	client/x11/red_drawable.cpp	/^void RedDrawable::erase_rect(const SpiceRect& area, rgb32_t color)$/;"	f	class:RedDrawable
error	client/canvas.h	/^    virtual SPICE_GNUC_NORETURN void error(const std::string& str)$/;"	f	class:GlzDecoderCanvasDebug
error	client/red_client.h	/^    virtual SPICE_GNUC_NORETURN void error(const std::string& str)$/;"	f	class:GlzDecoderWindowDebug
error	server/glz_encoder_config.h	/^    SPICE_GNUC_PRINTF(2, 3) void (*error)(GlzEncoderUsrContext *usr, const char *fmt, ...);$/;"	m	struct:GlzEncoderUsrContext
error	server/reds_stream.c	/^    AsyncReadError error;$/;"	m	struct:AsyncRead	file:
error	server/smartcard.c	/^    VSCMsgError  error;$/;"	m	struct:ErrorItem	file:
error	spice-common/common/lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext
error	spice-common/common/messages.h	/^        VSCMsgError error;$/;"	m	union:SpiceMsgcSmartcard::__anon24
error	spice-common/common/quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*error)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext
error	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t error;$/;"	m	struct:SpiceLinkReply
error	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t error;$/;"	m	struct:VDAgentReply
error_beep	client/windows/platform.cpp	/^void Platform::error_beep()$/;"	f	class:Platform
error_beep	client/x11/platform.cpp	/^void Platform::error_beep()$/;"	f	class:Platform
error_box	client/gui/gui.cpp	/^void GUI::Dialog::error_box(const char* message)$/;"	f	class:GUI::Dialog
error_check	spice-common/python_modules/codegen.py	/^    def error_check(self, check, label = "error"):$/;"	m	class:CodeWriter
error_code	spice-common/common/messages.h	/^    uint32_t error_code; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgMainAgentDisconnect
errors_map	client/windows/platform_utils.cpp	/^static std::map<int, const char*> errors_map;$/;"	v	file:
errors_map_mutex	client/windows/platform_utils.cpp	/^static Mutex errors_map_mutex;$/;"	v	file:
event	client/x11/platform.cpp	/^    XEvent event;$/;"	m	struct:selection_request	file:
event	server/main_dispatcher.c	/^    int event;$/;"	m	struct:MainDispatcherChannelEventMessage	file:
event	server/spice.h	/^    void (*event)(SpiceCharDeviceInstance *sin, uint8_t event);$/;"	m	struct:SpiceCharDeviceInterface
event	server/spicevmc.c	/^    uint8_t event;$/;"	m	struct:PortEventPipeItem	file:
event	spice-common/common/messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgPortEvent
event	spice-common/common/messages.h	/^    uint8_t event;$/;"	m	struct:SpiceMsgcPortEvent
event_listener	client/windows/platform.cpp	/^static Platform::EventListener* event_listener = &default_event_listener;$/;"	v	file:
event_listener	client/x11/platform.cpp	/^static Platform::EventListener* event_listener = &default_event_listener;$/;"	v	file:
event_mask	server/tests/basic_event_loop.c	/^    int event_mask;$/;"	m	struct:SpiceWatch	file:
event_timeout	server/red_worker.c	/^    unsigned int event_timeout;$/;"	m	struct:RedWorker	file:
evol	spice-common/common/quic.c	/^static int evol = DEFevol;$/;"	v	file:
exclude_region	server/red_worker.c	/^static void exclude_region(RedWorker *worker, Ring *ring, RingItem *ring_item, QRegion *rgn,$/;"	f	file:
exclude_stat	server/red_worker.c	/^    stat_info_t exclude_stat;$/;"	m	struct:RedWorker	file:
exclude_stat_name	server/red_worker.c	/^static const char *exclude_stat_name = "exclude";$/;"	v	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	client/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	docs/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	docs/manual/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	server/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	server/tests/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	spice-common/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	spice-common/common/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	spice-common/python_modules/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	spice-common/spice-protocol/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	spice-common/spice-protocol/spice/Makefile	/^exec_prefix = ${prefix}$/;"	m
exist	client/canvas.cpp	/^bool SurfacesCache::exist(uint32_t surface_id)$/;"	f	class:SurfacesCache
exit_full_screen	client/application.cpp	/^void Application::exit_full_screen()$/;"	f	class:Application
exit_full_screen	client/screen.cpp	/^void RedScreen::exit_full_screen()$/;"	f	class:RedScreen
exit_modal_loop	client/screen.cpp	/^void RedScreen::exit_modal_loop()$/;"	f	class:RedScreen
exit_modal_loop	client/windows/platform.cpp	/^void WinPlatform::exit_modal_loop()$/;"	f	class:WinPlatform
exit_on_disconnect	server/reds.c	/^static bool exit_on_disconnect = FALSE;$/;"	v	file:
expand	client/x11/platform.cpp	/^static void expand(XMonitor& monitor, const XMonitorsList& monitors, int delta)$/;"	f	file:
expect_init	server/red_worker.c	/^    int expect_init;$/;"	m	struct:DisplayChannelClient	file:
expect_migrate	server/reds-private.h	/^    int expect_migrate;$/;"	m	struct:RedsState
expected_targets_notifies	client/x11/platform.cpp	/^static int expected_targets_notifies = 0;$/;"	v	file:
expiration_time	server/reds-private.h	/^    time_t expiration_time;$/;"	m	struct:TicketAuthentication
expiry_time	server/spice_timer_queue.c	/^    uint64_t expiry_time;$/;"	m	struct:SpiceTimer	file:
ext	server/red_dispatcher.h	/^    QXLCommandExt *ext;$/;"	m	struct:RedWorkerMessageLoadvmCommands
ext	server/tests/test_display_base.c	/^    QXLCommandExt ext; \/\/ first$/;"	m	struct:SimpleSpiceUpdate	file:
ext	server/tests/test_display_base.c	/^    QXLCommandExt ext; \/\/ first$/;"	m	struct:SimpleSurfaceCmd	file:
ext_id	client/application.h	/^    uint32_t ext_id;$/;"	m	struct:AppMenuItem
external_show	client/application.cpp	/^void Application::external_show()$/;"	f	class:Application
external_show	client/screen.cpp	/^void RedScreen::external_show()$/;"	f	class:RedScreen
external_show	client/windows/red_window.cpp	/^void RedWindow::external_show()$/;"	f	class:RedWindow
external_show	client/x11/red_window.cpp	/^void RedWindow::external_show()$/;"	f	class:RedWindow
extra_size	spice-common/python_modules/demarshal.py	/^    def extra_size(self):$/;"	m	class:ItemInfo
f	spice-common/spice_codegen.py	/^        f = open(dest_file, 'rb')$/;"	v
f	spice-common/spice_codegen.py	/^f = open(dest_file, 'wb')$/;"	v
factory	client/cursor_channel.cpp	/^static CursorFactory factory;$/;"	v	file:
factory	client/display_channel.cpp	/^static DisplayFactory factory;$/;"	v	file:
factory	client/inputs_channel.cpp	/^static InputsFactory factory;$/;"	v	file:
factory	client/playback_channel.cpp	/^static PlaybackFactory factory;$/;"	v	file:
factory	client/record_channel.cpp	/^static RecordFactory factory;$/;"	v	file:
factory	client/smartcard_channel.cpp	/^static SmartCardFactory factory;$/;"	v	file:
family	spice-common/common/quic_rgb_tmpl.c	30;"	d	file:
family	spice-common/common/quic_rgb_tmpl.c	51;"	d	file:
family	spice-common/common/quic_rgb_tmpl.c	72;"	d	file:
family	spice-common/common/quic_rgb_tmpl.c	755;"	d	file:
family	spice-common/common/quic_rgb_tmpl.c	93;"	d	file:
family	spice-common/common/quic_tmpl.c	44;"	d	file:
family	spice-common/common/quic_tmpl.c	633;"	d	file:
family_5bpc	spice-common/common/quic.c	/^static QuicFamily family_5bpc;$/;"	v	file:
family_8bpc	spice-common/common/quic.c	/^static QuicFamily family_8bpc;$/;"	v	file:
family_init	spice-common/common/quic.c	/^static void family_init(QuicFamily *family, int bpc, int limit)$/;"	f	file:
family_stat_5bpc	spice-common/common/quic.c	/^    FamilyStat family_stat_5bpc;$/;"	m	struct:Channel	file:
family_stat_8bpc	spice-common/common/quic.c	/^    FamilyStat family_stat_8bpc;$/;"	m	struct:Channel	file:
fb_config	client/x11/platform.cpp	/^static GLXFBConfig **fb_config = NULL;$/;"	v	file:
fbo	client/x11/pixels_source_p.h	/^                GLuint fbo;$/;"	m	union:PixelsSource_p::__anon116::__anon118::__anon119
fbo	client/x11/pixels_source_p.h	/^                GLuint fbo;$/;"	m	union:PixelsSource_p::__anon116::__anon120::__anon121
fd	server/tests/basic_event_loop.c	/^    int fd;$/;"	m	struct:SpiceWatch	file:
fgGroup	spice-common/common/lines.c	/^    SpanGroup fgGroup, bgGroup;$/;"	m	struct:_SpanData	file:
file_xfer_enabled	server/agent-msg-filter.h	/^    int file_xfer_enabled;$/;"	m	struct:AgentMsgFilter
fill	server/red_parse_qxl.h	/^        SpiceFill fill;$/;"	m	union:RedDrawable::__anon161
fill	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLFill fill;$/;"	m	union:QXLCompatDrawable::__anon76
fill	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLFill fill;$/;"	m	union:QXLDrawable::__anon77
fill_attr	server/red_worker.c	/^static void fill_attr(SpiceMarshaller *m, SpiceLineAttr *attr, uint32_t group_id)$/;"	f	file:
fill_base	server/red_worker.c	/^static void fill_base(SpiceMarshaller *base_marshaller, Drawable *drawable)$/;"	f	file:
fill_bits	server/red_worker.c	/^static FillBitsType fill_bits(DisplayChannelClient *dcc, SpiceMarshaller *m,$/;"	f	file:
fill_common	spice-common/common/gl_canvas.c	/^static inline void fill_common(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip, SpiceQMask * mask, GLCOp op)$/;"	f	file:
fill_cursor	server/red_worker.c	/^static void fill_cursor(CursorChannelClient *ccc, SpiceCursor *red_cursor,$/;"	f	file:
fill_drawable	client/x11/red_drawable.cpp	/^static inline void fill_drawable(RedDrawable_p* dest, const SpiceRect& area, rgb32_t color,$/;"	f	file:
fill_gl_drawable	client/x11/red_drawable.cpp	/^static inline void fill_gl_drawable(RedDrawable_p* dest, const SpiceRect& area, rgb32_t color,$/;"	f	file:
fill_input_buffer	client/mjpeg_decoder.cpp	/^    static jpeg_boolean fill_input_buffer(j_decompress_ptr cinfo)$/;"	f	file:
fill_mask	server/red_worker.c	/^static void fill_mask(RedChannelClient *rcc, SpiceMarshaller *m,$/;"	f	file:
fill_mask	spice-common/common/glc.c	/^static void fill_mask(InternaCtx *ctx, int x_dest, int y_dest, int width, int height,$/;"	f	file:
fill_model_structures	spice-common/common/quic.c	/^static void fill_model_structures(Encoder *encoder, FamilyStat *family_stat,$/;"	f	file:
fill_palette	server/red_worker.c	/^static inline void fill_palette(DisplayChannelClient *dcc,$/;"	f	file:
fill_path	spice-common/common/glc.c	/^static void fill_path(InternaCtx *ctx, void *p)$/;"	f	file:
fill_pixmap	client/x11/red_drawable.cpp	/^static inline void fill_pixmap(RedDrawable_p* dest, const SpiceRect& area, rgb32_t color,$/;"	f	file:
fill_rect	client/windows/red_drawable.cpp	/^void RedDrawable::fill_rect(const SpiceRect& rect, rgb32_t color)$/;"	f	class:RedDrawable
fill_rect	client/x11/red_drawable.cpp	/^void RedDrawable::fill_rect(const SpiceRect& area, rgb32_t color)$/;"	f	class:RedDrawable
fill_rect	spice-common/common/glc.c	/^static void fill_rect(InternaCtx *ctx, void *r)$/;"	f	file:
fill_solid_rects	spice-common/common/canvas_base.h	/^    void (*fill_solid_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_solid_rects	spice-common/common/sw_canvas.c	/^static void fill_solid_rects(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_solid_rects_rop	spice-common/common/canvas_base.h	/^    void (*fill_solid_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_solid_rects_rop	spice-common/common/sw_canvas.c	/^static void fill_solid_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_solid_spans	spice-common/common/canvas_base.h	/^    void (*fill_solid_spans)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_solid_spans	spice-common/common/sw_canvas.c	/^static void fill_solid_spans(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_tiled_rects	spice-common/common/canvas_base.h	/^    void (*fill_tiled_rects)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_tiled_rects	spice-common/common/sw_canvas.c	/^static void fill_tiled_rects(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_tiled_rects_from_surface	spice-common/common/canvas_base.h	/^    void (*fill_tiled_rects_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_tiled_rects_from_surface	spice-common/common/sw_canvas.c	/^static void fill_tiled_rects_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_tiled_rects_rop	spice-common/common/canvas_base.h	/^    void (*fill_tiled_rects_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_tiled_rects_rop	spice-common/common/sw_canvas.c	/^static void fill_tiled_rects_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
fill_tiled_rects_rop_from_surface	spice-common/common/canvas_base.h	/^    void (*fill_tiled_rects_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
fill_tiled_rects_rop_from_surface	spice-common/common/sw_canvas.c	/^static void fill_tiled_rects_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
filtered_up_keys	client/windows/red_window.cpp	/^static KeysList filtered_up_keys;$/;"	v	file:
find	client/cmd_line_parser.cpp	/^CmdLineParser::Option* CmdLineParser::find(char short_name)$/;"	f	class:CmdLineParser
find	client/cmd_line_parser.cpp	/^CmdLineParser::Option* CmdLineParser::find(const std::string& name)$/;"	f	class:CmdLineParser
find	client/cmd_line_parser.cpp	/^CmdLineParser::Option* CmdLineParser::find(int id)$/;"	f	class:CmdLineParser
find	server/red_client_cache.h	/^static CacheItem *FUNC_NAME(find)(CHANNELCLIENT *channel_client, uint64_t id)$/;"	f
find_anchor_point	client/red_window.h	/^static bool find_anchor_point(const REGION& region, SpicePoint& pt)$/;"	f
find_bucket	spice-common/common/quic_family_tmpl.c	/^static s_bucket *FNAME(find_bucket)(Channel *channel, const unsigned int val)$/;"	f	file:
find_bucket	spice-common/common/quic_rgb_tmpl.c	29;"	d	file:
find_bucket	spice-common/common/quic_rgb_tmpl.c	50;"	d	file:
find_bucket	spice-common/common/quic_rgb_tmpl.c	71;"	d	file:
find_bucket	spice-common/common/quic_rgb_tmpl.c	754;"	d	file:
find_bucket	spice-common/common/quic_rgb_tmpl.c	92;"	d	file:
find_bucket	spice-common/common/quic_tmpl.c	43;"	d	file:
find_bucket	spice-common/common/quic_tmpl.c	632;"	d	file:
find_channel_security	server/reds.c	/^static ChannelSecurityOptions *find_channel_security(int id)$/;"	f	file:
find_factory	client/red_client.cpp	/^ChannelFactory* RedClient::find_factory(uint32_t type)$/;"	f	class:RedClient
find_missing_opt	client/cmd_line_parser.cpp	/^CmdLineParser::Option* CmdLineParser::find_missing_opt()$/;"	f	class:CmdLineParser
find_mod	client/x11/platform.cpp	/^static XRRModeInfo* find_mod(XRRScreenResources* res, RRMode mode)$/;"	f	file:
find_mode	client/x11/platform.cpp	/^XRRModeInfo* XMonitor::find_mode(unsigned int width, unsigned int height, XRRScreenResources* res)$/;"	f	class:XMonitor
find_mode_in_clones	client/x11/platform.cpp	/^bool XMonitor::find_mode_in_clones(RRMode mode, XRRScreenResources* res)$/;"	f	class:XMonitor
find_mode_in_outputs	client/x11/platform.cpp	/^bool XMonitor::find_mode_in_outputs(RRMode mode, int start_index, XRRScreenResources* res)$/;"	f	class:XMonitor
find_model_params	spice-common/common/quic.c	/^static void find_model_params(Encoder *encoder,$/;"	f	file:
find_monitor	client/application.cpp	/^Monitor* Application::find_monitor(int id)$/;"	f	class:Application
find_msb	spice-common/common/gl_utils.h	55;"	d
find_pointer_layer	client/screen.cpp	/^ScreenLayer* RedScreen::find_pointer_layer()$/;"	f	class:RedScreen
find_renderer	server/red_dispatcher.c	/^static RendererInfo *find_renderer(const char *name)$/;"	f	file:
find_screen	client/application.cpp	/^RedScreen* Application::find_screen(int id)$/;"	f	class:Application
find_sub	client/menu.cpp	/^Menu* Menu::find_sub(int id)$/;"	f	class:Menu
first_child_index	spice-common/spice-protocol/spice/stats.h	/^    uint32_t first_child_index;$/;"	m	struct:SpiceStatNode
first_frame	server/mjpeg_encoder.c	/^    int first_frame;$/;"	m	struct:MJpegEncoder	file:
first_seg	server/glz_encoder_dictionary_protected.h	/^    uint32_t first_seg;$/;"	m	struct:WindowImage
first_win_seg	server/glz_encoder.c	/^        uint32_t first_win_seg;$/;"	m	struct:Encoder::__anon202	file:
fix_to_double	spice-common/common/canvas_base.c	/^static inline double fix_to_double(SPICE_FIXED28_4 fixed)$/;"	f	file:
fix_to_int	spice-common/common/canvas_base.c	/^ static inline int fix_to_int(SPICE_FIXED28_4 fixed)$/;"	f	file:
flags	server/red_parse_qxl.h	/^    uint32_t flags;$/;"	m	struct:RedSurfaceCmd
flags	server/spice.h	/^    int flags;$/;"	m	struct:SpiceChannelEventInfo
flags	server/spice.h	/^    uint32_t flags;$/;"	m	struct:QXLDevSurfaceCreate
flags	spice-common/common/draw.h	/^    uint16_t flags;$/;"	m	struct:SpiceString
flags	spice-common/common/draw.h	/^    uint32_t flags;$/;"	m	struct:SpiceComposite
flags	spice-common/common/draw.h	/^    uint32_t flags;$/;"	m	struct:SpicePathSeg
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceBitmap
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceImageDescriptor
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceJPEGAlphaData
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLZPLTData
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceLineAttr
flags	spice-common/common/draw.h	/^    uint8_t flags;$/;"	m	struct:SpiceQMask
flags	spice-common/common/gdi_canvas.c	/^    uint8_t flags;$/;"	m	struct:BitmapData	file:
flags	spice-common/common/mem.h	/^    uint32_t     flags;$/;"	m	struct:SpiceChunks
flags	spice-common/common/messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceCursor
flags	spice-common/common/messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayHead
flags	spice-common/common/messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgDisplayStreamCreate
flags	spice-common/common/messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgMigrate
flags	spice-common/common/messages.h	/^    uint32_t flags;$/;"	m	struct:SpiceMsgSurfaceCreate
flags	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t flags;$/;"	m	struct:ControllerInit
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t flags;$/;"	m	struct:QXLString
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t		flags;$/;"	m	struct:QXLComposite
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t flags;$/;"	m	struct:QXLCommandExt
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t flags;$/;"	m	struct:QXLHead
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t flags;$/;"	m	struct:QXLPathSeg
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t flags;$/;"	m	struct:QXLSurfaceCmd
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t flags;$/;"	m	struct:QXLSurfaceCreate
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t flags;$/;"	m	struct:QXLRam
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t flags;$/;"	m	struct:QXLRom
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t flags;$/;"	m	struct:QXLBitmap
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t flags;$/;"	m	struct:QXLImageDescriptor
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t flags;$/;"	m	struct:QXLLineAttr
flags	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t flags;$/;"	m	struct:QXLQMask
flags	spice-common/spice-protocol/spice/stats.h	/^    uint32_t flags;$/;"	m	struct:SpiceStatNode
flags	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t flags;$/;"	m	struct:VDAgentDisplayConfig
flags	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t flags;$/;"	m	struct:VDAgentMonitorsConfig
flush	spice-common/common/quic.c	/^static inline void flush(Encoder *encoder)$/;"	f	file:
flush_all_qxl_commands	server/red_worker.c	/^static inline void flush_all_qxl_commands(RedWorker *worker)$/;"	f	file:
flush_all_surfaces	server/red_worker.c	/^static void flush_all_surfaces(RedWorker *worker)$/;"	f	file:
flush_cursor_commands	server/red_worker.c	/^static inline void flush_cursor_commands(RedWorker *worker)$/;"	f	file:
flush_display_commands	server/red_worker.c	/^static inline void flush_display_commands(RedWorker *worker)$/;"	f	file:
flush_resources	server/spice.h	/^    int (*flush_resources)(QXLInstance *qin);$/;"	m	struct:QXLInterface
flush_resources	server/tests/test_display_base.c	/^static int flush_resources(QXLInstance *qin)$/;"	f	file:
focus_count	client/x11/platform.cpp	/^static int focus_count = 0;$/;"	v	file:
focus_serial	client/x11/red_window.cpp	/^static unsigned long focus_serial = 0;$/;"	v	file:
focus_window	client/windows/red_window.cpp	/^static HWND focus_window = NULL;$/;"	v	file:
focus_window	client/x11/red_window.cpp	/^static RedWindow* focus_window;$/;"	v	file:
for_each_channel	client/red_client.cpp	/^void RedClient::for_each_channel(ForEachChannelFunc& func)$/;"	f	class:RedClient
for_loop	spice-common/python_modules/codegen.py	/^    def for_loop(self, index, limit):$/;"	m	class:CodeWriter
fore_brush	spice-common/common/draw.h	/^    SpiceBrush fore_brush;$/;"	m	struct:SpiceText
fore_brush	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLBrush fore_brush;$/;"	m	struct:QXLText
fore_mode	spice-common/common/draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceStroke
fore_mode	spice-common/common/draw.h	/^    uint16_t fore_mode;$/;"	m	struct:SpiceText
fore_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t fore_mode;$/;"	m	struct:QXLStroke
fore_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t fore_mode;$/;"	m	struct:QXLText
fore_rop	spice-common/common/canvas_base.c	/^    SpiceROP fore_rop;$/;"	m	struct:__anon15	file:
format	client/windows/platform.cpp	/^    uint32_t format;$/;"	m	struct:ClipboardFormat	file:
format	client/x11/pixels_source_p.h	/^            RedDrawable::Format format;$/;"	m	struct:PixelsSource_p::__anon116::__anon117
format	server/red_parse_qxl.h	/^    uint32_t format;$/;"	m	struct:RedSurfaceCreate
format	server/red_worker.c	/^    uint32_t format;$/;"	m	struct:DrawContext	file:
format	server/spice.h	/^    uint32_t format;$/;"	m	struct:QXLDevSurfaceCreate
format	server/tests/test_display_base.h	/^    uint32_t format;$/;"	m	struct:CommandCreateSurface
format	spice-common/common/canvas_base.c	/^    uint32_t format;$/;"	m	struct:CanvasBase	file:
format	spice-common/common/canvas_utils.h	/^    pixman_format_code_t format;$/;"	m	struct:PixmanData
format	spice-common/common/draw.h	/^    uint8_t format;$/;"	m	struct:SpiceBitmap
format	spice-common/common/glc.h	/^    GLCImageFormat format;$/;"	m	struct:GLCPImage
format	spice-common/common/messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgPlaybackStart
format	spice-common/common/messages.h	/^    uint32_t format; \/\/SPICE_AUDIO_FMT_?$/;"	m	struct:SpiceMsgRecordStart
format	spice-common/common/messages.h	/^    uint32_t format;$/;"	m	struct:SpiceMsgSurfaceCreate
format	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t format;$/;"	m	struct:QXLSurface
format	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t format;$/;"	m	struct:QXLSurfaceCreate
format	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t format;$/;"	m	struct:QXLBitmap
format_copy_compatible	client/red_drawable.h	/^    static int format_copy_compatible(Format src, Format dest) {$/;"	f	class:RedDrawable
format_from_surface	client/red_drawable.h	/^    static Format format_from_surface(uint32_t format) {$/;"	f	class:RedDrawable
format_to_bpp	client/red_drawable.h	/^    static int format_to_bpp(Format format) {$/;"	f	class:RedDrawable
format_to_bpp	server/tests/test_display_base.c	/^static int format_to_bpp(int format)$/;"	f	file:
format_to_pixman	client/red_drawable.h	/^    static pixman_format_code_t format_to_pixman(Format format) {$/;"	f	class:RedDrawable
four_bytes_pixel_t	spice-common/common/quic.c	/^typedef struct ATTR_PACKED four_bytes_pixel_t {$/;"	s	file:
four_bytes_t	spice-common/common/quic.c	/^} four_bytes_t;$/;"	t	typeref:struct:four_bytes_pixel_t	file:
fps	server/mjpeg_encoder.c	/^    uint32_t fps;$/;"	m	struct:MJpegEncoderRateControl	file:
fps	server/red_worker.c	/^    int fps;$/;"	m	struct:StreamAgent	file:
frame	server/tests/test_playback.c	/^uint32_t *frame;$/;"	v
frame_drawable	client/x11/red_drawable.cpp	/^static inline void frame_drawable(RedDrawable_p* dest, const SpiceRect& area, rgb32_t color,$/;"	f	file:
frame_pixmap	client/x11/red_drawable.cpp	/^static inline void frame_pixmap(RedDrawable_p* dest, const SpiceRect& area, rgb32_t color,$/;"	f	file:
frame_rect	client/windows/red_drawable.cpp	/^void RedDrawable::frame_rect(const SpiceRect& rect, rgb32_t color)$/;"	f	class:RedDrawable
frame_rect	client/x11/red_drawable.cpp	/^void RedDrawable::frame_rect(const SpiceRect& area, rgb32_t color)$/;"	f	class:RedDrawable
frame_slot	client/display_channel.cpp	/^    uint32_t frame_slot(uint32_t frame_index) { return frame_index % MAX_VIDEO_FRAMES;}$/;"	f	class:VideoStream	file:
frames	server/red_worker.c	/^    int frames;$/;"	m	struct:StreamAgent	file:
frames	server/snd_worker.c	/^    AudioFrame frames[3];$/;"	m	struct:PlaybackChannel	file:
frames_count	server/red_worker.c	/^    int frames_count;$/;"	m	struct:Drawable	file:
frames_count	server/red_worker.c	/^    int frames_count;$/;"	m	struct:ItemTrace	file:
free	server/glz_encoder_config.h	/^    void (*free)(GlzEncoderUsrContext *usr, void *ptr);$/;"	m	struct:GlzEncoderUsrContext
free	spice-common/common/lz.h	/^    void (*free)(LzUsrContext *usr, void *ptr);$/;"	m	struct:LzUsrContext
free	spice-common/common/quic.h	/^    void (*free)(QuicUsrContext *usr, void *ptr);$/;"	m	struct:QuicUsrContext
freeSurf	client/gui/softtexture.cpp	/^void SoftTexture::freeSurf()$/;"	f	class:CEGUI::SoftTexture
free_compress_bufs	server/red_worker.c	/^    RedCompressBuf *free_compress_bufs;$/;"	m	struct:DisplayChannel	file:
free_cursor_item	server/red_worker.c	/^static inline void free_cursor_item(RedWorker *worker, CursorItem *item)$/;"	f	file:
free_cursor_items	server/red_worker.c	/^    _CursorItem *free_cursor_items;$/;"	m	struct:RedWorker	file:
free_data	server/main_channel.c	/^    spice_marshaller_item_free_func free_data;$/;"	m	struct:AgentDataPipeItem	file:
free_data	spice-common/common/marshaller.c	/^    spice_marshaller_item_free_func free_data;$/;"	m	struct:__anon18	file:
free_drawable	server/red_worker.c	/^static inline void free_drawable(RedWorker *worker, Drawable *item)$/;"	f	file:
free_drawables	server/red_worker.c	/^    _Drawable *free_drawables;$/;"	m	struct:RedWorker	file:
free_family_stat	spice-common/common/quic.c	/^static void free_family_stat(QuicUsrContext *usr, FamilyStat *family_stat)$/;"	f	file:
free_frame	client/display_channel.cpp	/^void VideoStream::free_frame(uint32_t frame_index)$/;"	f	class:VideoStream
free_frames	server/snd_worker.c	/^    AudioFrame *free_frames;$/;"	m	struct:PlaybackChannel	file:
free_image	server/glz_encoder_config.h	/^    void (*free_image)(GlzEncoderUsrContext *usr, GlzUsrImageContext *image);$/;"	m	struct:GlzEncoderUsrContext
free_image_segs	spice-common/common/lz.c	/^    LzImageSegment *free_image_segs;$/;"	m	struct:Encoder	file:
free_images	server/glz_encoder_dictionary_protected.h	/^        WindowImage*        free_images;$/;"	m	struct:SharedDictionary::__anon170
free_item_data	spice-common/common/marshaller.c	/^static void free_item_data(SpiceMarshaller *m)$/;"	f	file:
free_items	spice-common/common/marshaller.c	/^static void free_items(SpiceMarshaller *m)$/;"	f	file:
free_link	server/red_worker.c	/^    RingItem free_link;$/;"	m	struct:GlzDrawableInstanceItem	file:
free_list	server/red_worker.c	/^        FreeList free_list;$/;"	m	struct:DisplayChannelClient::__anon186	file:
free_mask	spice-common/common/gdi_canvas.c	/^static void free_mask(struct BitmapData *bitmap)$/;"	f	file:
free_one_drawable	server/red_worker.c	/^static void free_one_drawable(RedWorker *worker, int force_glz_free)$/;"	f	file:
free_res	client/windows/platform_utils.h	/^    FreeRes free_res;$/;"	m	class:AutoRes
free_segs_head	server/glz_encoder_dictionary_protected.h	/^        uint32_t free_segs_head;$/;"	m	struct:SharedDictionary::__anon170
free_streams	server/red_worker.c	/^    Stream *free_streams;$/;"	m	struct:RedWorker	file:
free_sys_cmd_id	client/windows/red_window.cpp	/^static void free_sys_cmd_id(int id)$/;"	f	file:
free_sys_menu_id	client/windows/red_window.cpp	/^static std::list<int> free_sys_menu_id;$/;"	v	file:
free_tass_vertex_bufs	spice-common/common/glc.c	/^static void free_tass_vertex_bufs(InternaCtx *ctx)$/;"	f	file:
free_temp_image	client/x11/red_drawable.cpp	/^static void free_temp_image(XImage *image, XShmSegmentInfo *shminfo, pixman_image_t *pixman_image)$/;"	f	file:
free_tess_vertex	spice-common/common/glc.c	/^    TassVertex *free_tess_vertex;$/;"	m	struct:InternaCtx	file:
free_x_image	client/x11/platform.cpp	/^void XPlatform::free_x_image(XImage *image,$/;"	f	class:XPlatform
freeze	server/red_client_shared_cache.h	/^static int FUNC_NAME(freeze)(CACHE *cache)$/;"	f
freezed	server/red_worker.c	/^    int freezed;$/;"	m	struct:PixmapCache	file:
freezed_head	server/red_worker.c	/^    RingItem *freezed_head;$/;"	m	struct:PixmapCache	file:
freezed_tail	server/red_worker.c	/^    RingItem *freezed_tail;$/;"	m	struct:PixmapCache	file:
frequency	server/red_parse_qxl.h	/^            uint16_t frequency;$/;"	m	struct:RedCursorCmd::__anon164::__anon166
frequency	server/snd_worker.c	/^    uint32_t frequency;$/;"	m	struct:SpicePlaybackState	file:
frequency	server/snd_worker.c	/^    uint32_t frequency;$/;"	m	struct:SpiceRecordState	file:
frequency	spice-common/common/messages.h	/^    uint16_t frequency;$/;"	m	struct:SpiceMsgCursorTrail
frequency	spice-common/common/messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgPlaybackStart
frequency	spice-common/common/messages.h	/^    uint32_t frequency;$/;"	m	struct:SpiceMsgRecordStart
frequency	spice-common/common/snd_codec.c	/^    int frequency;$/;"	m	struct:__anon37	file:
frequency	spice-common/spice-protocol/spice/qxl_dev.h	/^            uint16_t frequency;$/;"	m	struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
from_surface	spice-common/common/gdi_canvas.c	/^    int from_surface;$/;"	m	struct:BitmapData	file:
full_header_get_msg_size	server/red_channel.c	/^static uint32_t full_header_get_msg_size(SpiceDataHeaderOpaque *header)$/;"	f	file:
full_header_get_msg_type	server/red_channel.c	/^static uint16_t full_header_get_msg_type(SpiceDataHeaderOpaque *header)$/;"	f	file:
full_header_set_msg_serial	server/red_channel.c	/^static void full_header_set_msg_serial(SpiceDataHeaderOpaque *header, uint64_t serial)$/;"	f	file:
full_header_set_msg_size	server/red_channel.c	/^static void full_header_set_msg_size(SpiceDataHeaderOpaque *header, uint32_t size)$/;"	f	file:
full_header_set_msg_sub_list	server/red_channel.c	/^static void full_header_set_msg_sub_list(SpiceDataHeaderOpaque *header, uint32_t sub_list)$/;"	f	file:
full_header_set_msg_type	server/red_channel.c	/^static void full_header_set_msg_type(SpiceDataHeaderOpaque *header, uint16_t type)$/;"	f	file:
full_header_wrapper	server/red_channel.c	/^static SpiceDataHeaderOpaque full_header_wrapper = {NULL, sizeof(SpiceDataHeader),$/;"	v	file:
func	server/spice_timer_queue.c	/^    SpiceTimerFunc func;$/;"	m	struct:SpiceTimer	file:
func	server/tests/basic_event_loop.c	/^    SpiceTimerFunc func;$/;"	m	struct:SpiceTimer	file:
func	server/tests/basic_event_loop.c	/^    SpiceWatchFunc func;$/;"	m	struct:SpiceWatch	file:
func_append	config.status	/^func_append ()\\$/;"	f
func_append	configure	/^func_append ()\\$/;"	f
func_append	libtool	/^func_append ()$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append	spice-common/build-aux/ltmain.sh	/^func_append ()$/;"	f
func_append	spice-common/config.status	/^func_append ()\\$/;"	f
func_append	spice-common/configure	/^func_append ()\\$/;"	f
func_append	spice-common/libtool	/^func_append ()$/;"	f
func_append_quoted	config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	libtool	/^func_append_quoted ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	spice-common/build-aux/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	spice-common/config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	spice-common/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	spice-common/libtool	/^func_append_quoted ()$/;"	f
func_arith	config.status	/^func_arith ()\\$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_arith	libtool	/^func_arith ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_arith	spice-common/build-aux/ltmain.sh	/^func_arith ()$/;"	f
func_arith	spice-common/config.status	/^func_arith ()\\$/;"	f
func_arith	spice-common/configure	/^func_arith ()\\$/;"	f
func_arith	spice-common/libtool	/^func_arith ()$/;"	f
func_at_file	ar-lib	/^func_at_file ()$/;"	f
func_at_file	spice-common/build-aux/ar-lib	/^func_at_file ()$/;"	f
func_basename	config.status	/^func_basename ()\\$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_basename	libtool	/^func_basename ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_basename	spice-common/build-aux/ltmain.sh	/^func_basename ()$/;"	f
func_basename	spice-common/config.status	/^func_basename ()\\$/;"	f
func_basename	spice-common/configure	/^func_basename ()\\$/;"	f
func_basename	spice-common/libtool	/^func_basename ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	spice-common/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	spice-common/libtool	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashL	spice-common/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_dashl	spice-common/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_cl_wrapper	spice-common/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_config	spice-common/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	spice-common/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	spice-common/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	spice-common/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	spice-common/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	spice-common/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	spice-common/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	spice-common/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	spice-common/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	spice-common/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	spice-common/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	spice-common/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	spice-common/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	spice-common/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	spice-common/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	spice-common/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	spice-common/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	spice-common/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	spice-common/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	spice-common/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	spice-common/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	spice-common/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	spice-common/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	spice-common/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	spice-common/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	spice-common/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	spice-common/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	spice-common/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	spice-common/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	spice-common/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	spice-common/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	spice-common/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	spice-common/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	spice-common/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	spice-common/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	spice-common/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	spice-common/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	spice-common/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	spice-common/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	spice-common/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	spice-common/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	spice-common/libtool	/^func_cygpath ()$/;"	f
func_dirname	config.status	/^func_dirname ()\\$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname	libtool	/^func_dirname ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	spice-common/build-aux/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	spice-common/config.status	/^func_dirname ()\\$/;"	f
func_dirname	spice-common/configure	/^func_dirname ()\\$/;"	f
func_dirname	spice-common/libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	spice-common/build-aux/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	spice-common/config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	spice-common/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	spice-common/libtool	/^func_dirname_and_basename ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo	spice-common/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	spice-common/libtool	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	spice-common/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	spice-common/configure	/^func_echo_all ()$/;"	f
func_echo_all	spice-common/libtool	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	spice-common/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	spice-common/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	spice-common/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	spice-common/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	spice-common/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	spice-common/libtool	/^func_enable_tag ()$/;"	f
func_error	ar-lib	/^func_error ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_error	spice-common/build-aux/ar-lib	/^func_error ()$/;"	f
func_error	spice-common/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	spice-common/libtool	/^func_error ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_display_no_ssl	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_display_resolution_changes	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_display_streaming	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_display_width_stride	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_empty_success	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_fail_on_null_core_interface	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_just_sockets_no_ssl	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_playback	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_two_servers	/^func_exec_program ()$/;"	f
func_exec_program	server/tests/test_vdagent	/^func_exec_program ()$/;"	f
func_exec_program	spice-common/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	spice-common/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_display_no_ssl	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_display_resolution_changes	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_display_streaming	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_display_width_stride	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_empty_success	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_fail_on_null_core_interface	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_just_sockets_no_ssl	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_playback	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_two_servers	/^func_exec_program_core ()$/;"	f
func_exec_program_core	server/tests/test_vdagent	/^func_exec_program_core ()$/;"	f
func_exec_program_core	spice-common/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	spice-common/libtool	/^func_exec_program_core ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	spice-common/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	spice-common/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	spice-common/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	spice-common/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	spice-common/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	spice-common/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_display_no_ssl	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_display_resolution_changes	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_display_streaming	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_display_width_stride	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_empty_success	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_fail_on_null_core_interface	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_just_sockets_no_ssl	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_playback	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_two_servers	/^func_fallback_echo ()$/;"	f
func_fallback_echo	server/tests/test_vdagent	/^func_fallback_echo ()$/;"	f
func_fallback_echo	spice-common/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	spice-common/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	spice-common/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	spice-common/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	spice-common/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	spice-common/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	spice-common/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	spice-common/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	spice-common/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	spice-common/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	spice-common/libtool	/^func_fatal_help ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_features	spice-common/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	spice-common/libtool	/^func_features ()$/;"	f
func_file_conv	ar-lib	/^func_file_conv ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_file_conv	spice-common/build-aux/ar-lib	/^func_file_conv ()$/;"	f
func_file_conv	spice-common/build-aux/compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	spice-common/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	spice-common/libtool	/^func_generate_dlsyms ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_grep	spice-common/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	spice-common/libtool	/^func_grep ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_help	spice-common/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	spice-common/libtool	/^func_help ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	spice-common/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	spice-common/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	spice-common/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	spice-common/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	spice-common/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	spice-common/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	spice-common/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	spice-common/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	config.status	/^func_len ()\\$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_len	libtool	/^func_len ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_len	spice-common/build-aux/ltmain.sh	/^func_len ()$/;"	f
func_len	spice-common/config.status	/^func_len ()\\$/;"	f
func_len	spice-common/configure	/^func_len ()\\$/;"	f
func_len	spice-common/libtool	/^func_len ()$/;"	f
func_lo2o	config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_lo2o	libtool	/^func_lo2o ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	spice-common/build-aux/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	spice-common/config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	spice-common/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	spice-common/libtool	/^func_lo2o ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_display_no_ssl	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_display_resolution_changes	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_display_streaming	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_display_width_stride	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_empty_success	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_fail_on_null_core_interface	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_just_sockets_no_ssl	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_playback	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_two_servers	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	server/tests/test_vdagent	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	spice-common/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	spice-common/libtool	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	spice-common/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	spice-common/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	spice-common/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	spice-common/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	spice-common/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	spice-common/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	spice-common/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	spice-common/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	spice-common/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	spice-common/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	spice-common/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	spice-common/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	spice-common/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	spice-common/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	spice-common/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	spice-common/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	spice-common/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	spice-common/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	spice-common/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	spice-common/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	spice-common/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	spice-common/libtool	/^func_mode_help ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	spice-common/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	spice-common/libtool	/^func_mode_install ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	spice-common/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	spice-common/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	spice-common/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	spice-common/libtool	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	spice-common/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	spice-common/libtool	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_display_no_ssl	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_display_resolution_changes	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_display_streaming	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_display_width_stride	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_empty_success	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_fail_on_null_core_interface	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_just_sockets_no_ssl	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_playback	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_two_servers	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	server/tests/test_vdagent	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	spice-common/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	spice-common/libtool	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	spice-common/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	spice-common/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	spice-common/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	spice-common/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	spice-common/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	spice-common/libtool	/^func_relative_path ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	spice-common/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	spice-common/libtool	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	spice-common/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	spice-common/libtool	/^func_resolve_sysroot ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	spice-common/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	spice-common/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	spice-common/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	spice-common/libtool	/^func_show_eval_locale ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_source	spice-common/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	spice-common/libtool	/^func_source ()$/;"	f
func_split_long_opt	config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	libtool	/^func_split_long_opt ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	spice-common/build-aux/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	spice-common/config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	spice-common/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	spice-common/libtool	/^func_split_long_opt ()$/;"	f
func_split_short_opt	config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	libtool	/^func_split_short_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	spice-common/build-aux/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	spice-common/config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	spice-common/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	spice-common/libtool	/^func_split_short_opt ()$/;"	f
func_stripname	config.status	/^func_stripname ()\\$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_stripname	libtool	/^func_stripname ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	spice-common/build-aux/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	spice-common/config.status	/^func_stripname ()\\$/;"	f
func_stripname	spice-common/configure	/^func_stripname ()\\$/;"	f
func_stripname	spice-common/libtool	/^func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	spice-common/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	spice-common/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	spice-common/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	spice-common/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	spice-common/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	spice-common/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	spice-common/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	spice-common/libtool	/^func_tr_sh ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_usage	spice-common/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	spice-common/libtool	/^func_usage ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	spice-common/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	spice-common/libtool	/^func_verbose ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_version	spice-common/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	spice-common/libtool	/^func_version ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_warning	spice-common/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	spice-common/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	spice-common/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	spice-common/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	spice-common/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	spice-common/libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	spice-common/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	spice-common/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	config.status	/^func_xform ()\\$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
func_xform	libtool	/^func_xform ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
func_xform	spice-common/build-aux/ltmain.sh	/^func_xform ()$/;"	f
func_xform	spice-common/config.status	/^func_xform ()\\$/;"	f
func_xform	spice-common/configure	/^func_xform ()\\$/;"	f
func_xform	spice-common/libtool	/^func_xform ()$/;"	f
function	spice-common/python_modules/codegen.py	/^    def function(self, name, return_type, args, static = False):$/;"	m	class:CodeWriter
function_helper	spice-common/python_modules/codegen.py	/^    def function_helper(self):$/;"	m	class:CodeWriter
function_to_func_name	client/application.cpp	/^static inline std::string function_to_func_name(const std::string& f_name)$/;"	f	file:
g	client/glz_decoder.cpp	/^    uint8_t g;$/;"	m	struct:rgb24_pixel_t	file:
g	client/glz_decoder.cpp	/^    uint8_t g;$/;"	m	struct:rgb32_pixel_t	file:
g	client/gui/softrenderer.h	/^            uint8_t g;$/;"	m	class:CEGUI::SoftRenderer::ColourI
g	server/glz_encoder.c	/^    BYTE g;$/;"	m	struct:rgb24_pixel_t	file:
g	server/glz_encoder.c	/^    BYTE g;$/;"	m	struct:rgb32_pixel_t	file:
g	server/red_worker.c	/^    uint8_t g;$/;"	m	struct:rgb24_pixel_t	file:
g	server/red_worker.c	/^    uint8_t g;$/;"	m	struct:rgb32_pixel_t	file:
g	spice-common/common/lz.c	/^    uint8_t g;$/;"	m	struct:rgb24_pixel_t	file:
g	spice-common/common/lz.c	/^    uint8_t g;$/;"	m	struct:rgb32_pixel_t	file:
g	spice-common/common/quic.c	/^    BYTE g;$/;"	m	struct:rgb24_pixel_t	file:
g	spice-common/common/quic.c	/^    BYTE g;$/;"	m	struct:rgb32_pixel_t	file:
g_inputs_channel	server/inputs_channel.c	/^static InputsChannel *g_inputs_channel = NULL;$/;"	v	file:
g_smartcard_channel	client/smartcard_channel.cpp	/^SmartCardChannel* g_smartcard_channel = NULL; \/\/ used for insert\/remove of virtual card. Can be$/;"	v
g_smartcard_channel	server/smartcard.c	/^SmartCardChannel *g_smartcard_channel;$/;"	v
g_smartcard_readers	server/smartcard.c	/^} g_smartcard_readers = {0, {NULL}};$/;"	v	typeref:struct:Readers	file:
g_surface_data	server/tests/test_display_width_stride.c	/^static uint8_t *g_surface_data;$/;"	v	file:
g_surface_id	server/tests/test_display_width_stride.c	/^static int g_surface_id = 1;$/;"	v	file:
g_vcard_inited	client/smartcard_channel.cpp	/^static bool g_vcard_inited = false;$/;"	v	file:
gc	client/x11/pixels_source_p.h	/^            GC gc;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
gdi_canvas_clear	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:
gdi_canvas_copy_bits	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:
gdi_canvas_create	spice-common/common/gdi_canvas.c	/^SpiceCanvas *gdi_canvas_create(int width, int height,$/;"	f
gdi_canvas_destroy	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:
gdi_canvas_draw_alpha_blend	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend* alpha_blend)$/;"	f	file:
gdi_canvas_draw_blackness	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:
gdi_canvas_draw_blend	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:
gdi_canvas_draw_copy	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:
gdi_canvas_draw_fill	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:
gdi_canvas_draw_invers	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:
gdi_canvas_draw_opaque	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:
gdi_canvas_draw_rop3	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)$/;"	f	file:
gdi_canvas_draw_stroke	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)$/;"	f	file:
gdi_canvas_draw_text	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)$/;"	f	file:
gdi_canvas_draw_transparent	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip,$/;"	f	file:
gdi_canvas_draw_whiteness	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:
gdi_canvas_init	spice-common/common/gdi_canvas.c	/^void gdi_canvas_init(void) \/\/unsafe global function$/;"	f
gdi_canvas_ops	spice-common/common/gdi_canvas.c	/^static SpiceCanvasOps gdi_canvas_ops;$/;"	v	file:
gdi_canvas_put_image	spice-common/common/gdi_canvas.c	/^static void gdi_canvas_put_image(SpiceCanvas *spice_canvas, HDC dc, const SpiceRect *dest, const uint8_t *src_data,$/;"	f	file:
gdi_draw_bitmap	spice-common/common/gdi_canvas.c	/^static void gdi_draw_bitmap(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_bitmap_alpha	spice-common/common/gdi_canvas.c	/^static void gdi_draw_bitmap_alpha(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_bitmap_redrop	spice-common/common/gdi_canvas.c	/^static void gdi_draw_bitmap_redrop(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_bitmap_transparent	spice-common/common/gdi_canvas.c	/^static void gdi_draw_bitmap_transparent(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src,$/;"	f	file:
gdi_draw_image	spice-common/common/gdi_canvas.c	/^static void gdi_draw_image(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_image_alpha	spice-common/common/gdi_canvas.c	/^static void gdi_draw_image_alpha(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_image_rop3	spice-common/common/gdi_canvas.c	/^static void gdi_draw_image_rop3(HDC dest_dc, const SpiceRect *src, const SpiceRect *dest,$/;"	f	file:
gdi_draw_image_transparent	spice-common/common/gdi_canvas.c	/^static void gdi_draw_image_transparent(GdiCanvas *canvas, HDC dest_dc, const SpiceRect *src,$/;"	f	file:
gdi_get_userstyle	spice-common/common/gdi_canvas.c	/^static uint32_t *gdi_get_userstyle(GdiCanvas *canvas, uint8_t nseg, SPICE_FIXED28_4* style, int start_is_gap)$/;"	f	file:
gdi_handlers	spice-common/common/canvas_utils.c	/^static int gdi_handlers = 0;$/;"	v	file:
gen	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t gen;$/;"	m	struct:VDIPortPacket
generateToc	docs/manual/manual.html	/^function generateToc(toclevels) {$/;"	f
generation	server/red_channel.h	/^        uint32_t generation;$/;"	m	struct:RedChannelClient::__anon147
generation	server/red_memslots.h	/^    int generation;$/;"	m	struct:MemSlot
generation	server/red_worker.c	/^    uint32_t generation;$/;"	m	struct:PixmapCache	file:
generation	server/spice.h	/^    uint32_t generation;$/;"	m	struct:QXLDevMemSlot
generation	spice-common/common/messages.h	/^    uint32_t generation;$/;"	m	struct:SpiceMsgSetAck
generation	spice-common/common/messages.h	/^  uint32_t generation;$/;"	m	struct:SpiceMsgcAckSync
generation	spice-common/spice-protocol/spice/stats.h	/^    uint32_t generation;$/;"	m	struct:SpiceStat
generation	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t generation;$/;"	m	struct:VDIPortRam
generation_bits	server/red_memslots.h	/^    uint8_t generation_bits;$/;"	m	struct:RedMemSlotInfo
generation_initiator	server/red_worker.c	/^    } generation_initiator;$/;"	m	struct:PixmapCache	typeref:struct:PixmapCache::__anon176	file:
get	client/cache.hpp	/^    T* get(uint64_t id)$/;"	f	class:Cache
get	client/canvas.h	/^    static inline CachedPalette* get(CachedPalette* palette)$/;"	f	class:PaletteCacheTreat
get	client/canvas.h	/^    static inline pixman_image_t *get(pixman_image_t *surf)$/;"	f	class:PixmapCacheTreat
get	client/cursor_channel.h	/^    static inline CursorData* get(CursorData* cursor)$/;"	f	class:CursorCacheTreat
get	client/hot_keys.h	/^    const HotKeys& get() { return _hot_keys;}$/;"	f	class:HotKeysParser
get	client/red_channel.cpp	/^    RedChannel::OutMessage* get() { return _message;}$/;"	f	class:AutoMessage
get	client/shared_cache.hpp	/^    T* get(uint64_t id)$/;"	f	class:SharedCache
get	client/threads.h	/^    pthread_mutex_t* get() {return &_mutex;}$/;"	f	class:Mutex
get	client/threads.h	/^    pthread_mutex_t* get() {return _mutex.get();}$/;"	f	class:Lock
get	client/utils.h	/^    T* get() {return _array;}$/;"	f	class:AutoArray
get	client/utils.h	/^    T* get() {return _res;}$/;"	f	class:_AutoRes
get	client/windows/platform_utils.h	/^    T get() {return res;}$/;"	f	class:AutoRes
get	spice-common/common/canvas_base.h	/^    SpicePalette *(*get)(SpicePaletteCache *cache,$/;"	m	struct:__anon10
get	spice-common/common/canvas_base.h	/^    pixman_image_t *(*get)(SpiceImageCache *cache,$/;"	m	struct:__anon8
get	spice-common/common/canvas_base.h	/^ SpiceCanvas *(*get)(SpiceImageSurfaces *surfaces,$/;"	m	struct:__anon9
getHeight	client/gui/softrenderer.cpp	/^float SoftRenderer::getHeight() const$/;"	f	class:CEGUI::SoftRenderer
getHeight	client/gui/softtexture.h	/^        virtual ushort getHeight(void) const { return _height;}$/;"	f	class:CEGUI::SoftTexture
getHorzScreenDPI	client/gui/softrenderer.cpp	/^uint SoftRenderer::getHorzScreenDPI() const$/;"	f	class:CEGUI::SoftRenderer
getImageCodec	client/gui/softrenderer.h	/^        ImageCodec* getImageCodec() { return _image_codec;}$/;"	f	class:CEGUI::SoftRenderer
getMaxTextureSize	client/gui/softrenderer.cpp	/^uint SoftRenderer::getMaxTextureSize() const$/;"	f	class:CEGUI::SoftRenderer
getRect	client/gui/softrenderer.cpp	/^Rect SoftRenderer::getRect() const$/;"	f	class:CEGUI::SoftRenderer
getSize	client/gui/softrenderer.cpp	/^Size SoftRenderer::getSize() const$/;"	f	class:CEGUI::SoftRenderer
getText	docs/manual/manual.html	/^function getText(el) {$/;"	f
getVertScreenDPI	client/gui/softrenderer.cpp	/^uint SoftRenderer::getVertScreenDPI() const$/;"	f	class:CEGUI::SoftRenderer
getWidth	client/gui/softrenderer.cpp	/^float SoftRenderer::getWidth() const$/;"	f	class:CEGUI::SoftRenderer
getWidth	client/gui/softtexture.h	/^        virtual ushort getWidth(void) const { return _width;}$/;"	f	class:CEGUI::SoftTexture
get_alpha_bitmap_res	client/windows/platform_utils.cpp	/^HBITMAP get_alpha_bitmap_res(int id)$/;"	f
get_app_data_dir	client/windows/platform.cpp	/^void Platform::get_app_data_dir(std::string& path, const std::string& app_name)$/;"	f	class:Platform
get_app_data_dir	client/x11/platform.cpp	/^void Platform::get_app_data_dir(std::string& path, const std::string& app_name)$/;"	f	class:Platform
get_app_menu	client/application.cpp	/^Menu* Application::get_app_menu()$/;"	f	class:Application
get_application	client/gui/gui.h	/^    Application& get_application() { return _app;}$/;"	f	class:GUI
get_application	client/red_client.h	/^    Application& get_application() { return _application;}$/;"	f	class:RedClient
get_area_in_front	client/x11/platform.cpp	/^    static void get_area_in_front(const SpiceRect& base, int size, SpiceRect& area)$/;"	f	class:BottomVariant
get_area_in_front	client/x11/platform.cpp	/^    static void get_area_in_front(const SpiceRect& base, int size, SpiceRect& area)$/;"	f	class:LeftVariant
get_area_in_front	client/x11/platform.cpp	/^    static void get_area_in_front(const SpiceRect& base, int size, SpiceRect& area)$/;"	f	class:RightVariant
get_area_in_front	client/x11/platform.cpp	/^    static void get_area_in_front(const SpiceRect& base, int size, SpiceRect& area)$/;"	f	class:TopVariant
get_array_size	spice-common/python_modules/marshal.py	/^def get_array_size(array, container_src):$/;"	f
get_available_clipboard_types	client/windows/platform.cpp	/^static int get_available_clipboard_types(uint32_t** types)$/;"	f	file:
get_bbox	client/windows/red_window.cpp	/^    void get_bbox(SpiceRect& bbox) const$/;"	f	class:Region_p
get_bbox	client/x11/red_window.cpp	/^    void get_bbox(SpiceRect& bbox) const$/;"	f	class:Region_p
get_bitmap_res	client/windows/platform_utils.cpp	/^HBITMAP get_bitmap_res(int id)$/;"	f
get_bitmap_size	client/windows/pixels_source.cpp	/^static SpicePoint get_bitmap_size(HDC dc)$/;"	f	file:
get_break_scan_code	client/inputs_channel.cpp	/^uint32_t InputsChannel::get_break_scan_code(RedKey key)$/;"	f	class:InputsChannel
get_brush	spice-common/common/gdi_canvas.c	/^static HBRUSH get_brush(GdiCanvas *canvas, SpiceBrush *brush, RecurciveMutex **brush_lock)$/;"	f	file:
get_buff	client/windows/playback.cpp	/^WAVEHDR* WavePlayer::get_buff()$/;"	f	class:WavePlayer
get_canvas_types	client/application.h	/^    const std::vector<int>& get_canvas_types() { return _canvas_types;}$/;"	f	class:Application
get_caps	client/red_channel.h	/^    const ChannelCaps& get_caps() {return _caps;}$/;"	f	class:RedChannelBase
get_check	spice-common/python_modules/ptypes.py	/^    def get_check(self, var_cname, var_type):$/;"	m	class:SwitchCase
get_client	client/red_channel.h	/^    RedClient& get_client() { return _client;}$/;"	f	class:RedChannel
get_client_message	spice-common/python_modules/ptypes.py	/^    def get_client_message(self, name):$/;"	m	class:ChannelType
get_clipboard_format	client/windows/platform.cpp	/^static uint32_t get_clipboard_format(uint32_t type) {$/;"	f	file:
get_clipboard_owner	client/platform.h	/^    static int  get_clipboard_owner() { return _clipboard_owner; }$/;"	f	class:Platform
get_clipboard_target	client/x11/platform.cpp	/^static Atom get_clipboard_target(uint32_t type) {$/;"	f	file:
get_clipboard_type	client/windows/platform.cpp	/^static uint32_t get_clipboard_type(uint32_t format) {$/;"	f	file:
get_clipboard_type	client/x11/platform.cpp	/^static uint32_t get_clipboard_type(Atom target) {$/;"	f	file:
get_cmd_id	client/menu.h	/^        int get_cmd_id() { return _cmd_id;}$/;"	f	class:Menu::MenuCommand
get_color_ref	spice-common/common/gdi_canvas.c	/^static inline COLORREF get_color_ref(GdiCanvas *canvas, uint32_t color)$/;"	f	file:
get_command	server/spice.h	/^    int (*get_command)(QXLInstance *qin, struct QXLCommandExt *cmd);$/;"	m	struct:QXLInterface
get_command	server/tests/test_display_base.c	/^static int get_command(QXLInstance *qin, struct QXLCommandExt *ext)$/;"	f	file:
get_commands	server/tests/test_display_streaming.c	/^static void get_commands(Command **commands, int *num_commands)$/;"	f	file:
get_common_caps	client/red_channel.h	/^    const ChannelCaps& get_common_caps() { return _common_caps;}$/;"	f	class:RedChannelBase
get_con_opt_map	client/application.h	/^    const PeerConnectionOptMap& get_con_opt_map() {return _peer_con_opt;}$/;"	f	class:Application
get_connection_ciphers	client/application.h	/^    const std::string& get_connection_ciphers() { return _con_ciphers;}$/;"	f	class:Application
get_connection_ciphers	client/red_client.h	/^    const std::string& get_connection_ciphers() { return _con_ciphers;}$/;"	f	class:RedClient
get_connection_error	client/red_channel.h	/^    int get_connection_error() { return _error;}$/;"	f	class:RedChannel
get_connection_id	client/red_client.h	/^    virtual uint32_t get_connection_id() { return _connection_id;}$/;"	f	class:RedClient
get_connection_options	client/red_client.cpp	/^RedPeer::ConnectionOptions::Type RedClient::get_connection_options(uint32_t channel_type)$/;"	f	class:RedClient
get_controller_menu_item_id	client/application.cpp	/^int Application::get_controller_menu_item_id(int32_t opaque_conn_ref, uint32_t msg_id)$/;"	f	class:Application
get_converted_color	spice-common/common/gdi_canvas.c	/^static inline uint8_t get_converted_color(uint8_t color)$/;"	f	file:
get_cursor_command	server/spice.h	/^    int (*get_cursor_command)(QXLInstance *qin, struct QXLCommandExt *cmd);$/;"	m	struct:QXLInterface
get_cursor_command	server/tests/test_display_base.c	/^static int get_cursor_command(QXLInstance *qin, struct QXLCommandExt *ext)$/;"	f	file:
get_cursor_item	server/red_worker.c	/^static CursorItem *get_cursor_item(RedWorker *worker, RedCursorCmd *cmd, uint32_t group_id)$/;"	f	file:
get_cximage_format	client/windows/platform.cpp	/^static DWORD get_cximage_format(uint32_t type)$/;"	f	file:
get_data	client/glz_decoded_image.h	/^    uint8_t *get_data() {return _data;}$/;"	f	class:GlzDecodedImage
get_data	client/red_pixmap.h	/^    uint8_t* get_data() { return _data;}$/;"	f	class:RedPixmap
get_dc	client/windows/red_pixmap_gdi.cpp	/^HDC RedPixmapGdi::get_dc()$/;"	f	class:RedPixmapGdi
get_delay_ms	client/windows/playback.cpp	/^uint32_t WavePlayer::get_delay_ms()$/;"	f	class:WavePlayer
get_delay_ms	client/x11/playback.cpp	/^uint32_t WavePlayer::get_delay_ms()$/;"	f	class:WavePlayer
get_depth	client/windows/platform.cpp	/^    virtual int get_depth() { return _depth;}$/;"	f	class:WinMonitor
get_depth	client/x11/platform.cpp	/^    virtual int get_depth() { return 32;}$/;"	f	class:XineramaMonitor
get_depth	client/x11/platform.cpp	/^    virtual int get_depth() { return XPlatform::get_vinfo()[0]->depth;}$/;"	f	class:DynamicScreen
get_depth	client/x11/platform.cpp	/^    virtual int get_depth() { return XPlatform::get_vinfo()[0]->depth;}$/;"	f	class:StaticScreen
get_depth	client/x11/platform.cpp	/^int XMonitor::get_depth()$/;"	f	class:XMonitor
get_dest	client/display_channel.cpp	/^    const SpiceRect& get_dest() {return _dest;}$/;"	f	class:VideoStream
get_display	client/x11/platform.cpp	/^    Display* get_display() {return _display;}$/;"	f	class:XScreen
get_display	client/x11/platform.cpp	/^Display* XPlatform::get_display()$/;"	f	class:XPlatform
get_distance	client/x11/platform.cpp	/^    static int get_distance(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:LeftVariant
get_distance	client/x11/platform.cpp	/^    static int get_distance(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:TopVariant
get_drawable	server/red_worker.c	/^static Drawable *get_drawable(RedWorker *worker, uint8_t effect, RedDrawable *red_drawable,$/;"	f	file:
get_drawable_pipe_item	server/red_worker.c	/^static inline DrawablePipeItem *get_drawable_pipe_item(DisplayChannelClient *dcc,$/;"	f	file:
get_error_code	client/utils.h	/^    int get_error_code() {return _erro_code;}$/;"	f	class:Exception
get_expiration	client/process_loop.h	/^    uint64_t get_expiration() const { return _expiration;}$/;"	f	class:Timer
get_factoris	client/gui/gui.cpp	/^    TabFactorys& get_factoris() { return _gui._tab_factorys;}$/;"	f	class:GUI::Dialog
get_factoris	client/gui/gui.h	/^    TabFactorys& get_factoris() { return _tab_factorys;}$/;"	f	class:GUI
get_fbconfig	client/x11/platform.cpp	/^GLXFBConfig** XPlatform::get_fbconfig()$/;"	f	class:XPlatform
get_fd	client/x11/event_sources_p.h	/^    int get_fd() { return _event_fd;}$/;"	f	class:Trigger_p
get_fd	client/x11/platform.cpp	/^    virtual int get_fd() {return _x_fd;}$/;"	f	class:XEventHandler
get_fd	client/x11/record.cpp	/^    virtual int get_fd() { return _fd;}$/;"	f	class:WaveRecorder::EventTrigger
get_fixed_nw_offset	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_offset(self, member):$/;"	m	class:ContainerType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:ArrayType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:ContainerType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:EnumBaseType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:IntegerType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:Member
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:PointerType
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:Switch
get_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def get_fixed_nw_size(self):$/;"	m	class:TypeAlias
get_foreign_menu_item_id	client/application.cpp	/^int Application::get_foreign_menu_item_id(int32_t opaque_conn_ref, uint32_t msg_id)$/;"	f	class:Application
get_format	client/red_pixmap.h	/^    virtual RedDrawable::Format get_format() { return _format; }$/;"	f	class:RedPixmap
get_format	client/windows/red_window.cpp	/^RedDrawable::Format RedWindow::get_format()$/;"	f	class:RedWindow
get_format	client/x11/red_window.cpp	/^RedDrawable::Format RedWindow::get_format()$/;"	f	class:RedWindow
get_frame	server/tests/test_playback.c	/^static void get_frame(void)$/;"	f	file:
get_generation	client/process_loop.h	/^    uint32_t get_generation() { return _generation;}$/;"	f	class:Event
get_generation	server/red_memslots.h	/^static inline int get_generation(RedMemSlotInfo *info, uint64_t addr)$/;"	f
get_glz_window	client/red_client.h	/^    GlzDecoderWindow& get_glz_window() {return _glz_window;}$/;"	f	class:RedClient
get_glz_window_size	client/red_client.h	/^    int get_glz_window_size() { return _glz_window_size;}$/;"	f	class:RedClient
get_h264_encode_frame_buffer	server/red_worker.c	/^static int get_h264_encode_frame_buffer(DisplayChannelClient *dcc, const SpiceRect *src,$/;"	f	file:
get_handle	client/windows/win_platform.h	/^    HICON get_handle() {return _icon;}$/;"	f	class:WinIcon
get_head	client/x11/platform.cpp	/^    static int get_head(const SpiceRect& area)$/;"	f	class:BottomVariant
get_head	client/x11/platform.cpp	/^    static int get_head(const SpiceRect& area)$/;"	f	class:LeftVariant
get_head	client/x11/platform.cpp	/^    static int get_head(const SpiceRect& area)$/;"	f	class:RightVariant
get_head	client/x11/platform.cpp	/^    static int get_head(const SpiceRect& area)$/;"	f	class:TopVariant
get_height	client/red_pixmap.h	/^    int get_height() { return _height;}$/;"	f	class:RedPixmap
get_height	client/x11/platform.cpp	/^    int get_height() const { return _height;}$/;"	f	class:XScreen
get_host	client/application.cpp	/^const std::string& Application::get_host()$/;"	f	class:Application
get_host	client/red_client.h	/^    const std::string& get_host() { return _host;}$/;"	f	class:RedClient
get_host_auth_opt	client/application.h	/^    const RedPeer::HostAuthOptions& get_host_auth_opt() { return _host_auth_opt;}$/;"	f	class:Application
get_host_auth_options	client/red_client.h	/^    RedPeer::HostAuthOptions& get_host_auth_options() { return _host_auth_opt;}$/;"	f	class:RedClient
get_hotkeys_command	client/application.cpp	/^int Application::get_hotkeys_command()$/;"	f	class:Application
get_id	client/application.cpp	/^    int get_id() { return _id;}$/;"	f	class:GUIBarrier
get_id	client/glz_decoded_image.h	/^    uint64_t get_id() {return _id;}$/;"	f	class:GlzDecodedImage
get_id	client/menu.h	/^    int get_id() { return _id;}$/;"	f	class:Menu
get_id	client/monitor.h	/^    int get_id() { return _id;}$/;"	f	class:Monitor
get_id	client/red_channel.h	/^    uint8_t get_id() { return _id;}$/;"	f	class:RedChannelBase
get_id	client/screen.h	/^    int get_id() { return _id;}$/;"	f	class:RedScreen
get_image	spice-common/common/canvas_base.h	/^    pixman_image_t *(*get_image)(SpiceCanvas *canvas, int force_opaque);$/;"	m	struct:__anon13
get_image	spice-common/common/sw_canvas.c	/^static pixman_image_t *get_image(SpiceCanvas *canvas, int force_opaque)$/;"	f	file:
get_init_info	server/spice.h	/^    void (*get_init_info)(QXLInstance *qin, QXLDevInitInfo *info);$/;"	m	struct:QXLInterface
get_init_info	server/tests/test_display_base.c	/^static void get_init_info(QXLInstance *qin, QXLDevInitInfo *info)$/;"	f	file:
get_input_context	client/x11/platform.cpp	/^XIC XPlatform::get_input_context()$/;"	f	class:XPlatform
get_internal_canvas	client/canvas.h	/^    virtual SpiceCanvas *get_internal_canvas() { return _canvas; }$/;"	f	class:Canvas
get_ip	server/spice-experimental.h	/^    struct in_addr (*get_ip)(SpiceNetWireInstance *sin);$/;"	m	struct:SpiceNetWireInterface	typeref:struct:SpiceNetWireInterface::get_ip
get_item_state	client/foreign_menu.cpp	/^int ForeignMenuConnection::get_item_state(int item_type)$/;"	f	class:ForeignMenuConnection
get_keyboard_lock_modifiers	client/windows/platform.cpp	/^uint32_t Platform::get_keyboard_lock_modifiers()$/;"	f	class:Platform
get_keyboard_lock_modifiers	client/x11/platform.cpp	/^uint32_t Platform::get_keyboard_lock_modifiers()$/;"	f	class:Platform
get_keyboard_modifiers	client/windows/platform.cpp	/^uint32_t Platform::get_keyboard_modifiers()$/;"	f	class:Platform
get_keyboard_modifiers	client/x11/platform.cpp	/^uint32_t Platform::get_keyboard_modifiers()$/;"	f	class:Platform
get_leds	server/spice.h	/^    uint8_t (*get_leds)(SpiceKbdInstance *sin);$/;"	m	struct:SpiceKbdInterface
get_listener	client/red_window.h	/^    Listener& get_listener() { return _listener;}$/;"	f	class:RedWindow
get_local	client/cursor.h	/^    LocalCursor* get_local() { return _local_cursor;}$/;"	f	class:CursorData
get_lossless	client/shared_cache.hpp	/^    T* get_lossless(uint64_t id)$/;"	f	class:SharedCache
get_lossless	spice-common/common/canvas_base.h	/^    pixman_image_t *(*get_lossless)(SpiceImageCache *cache,$/;"	m	struct:__anon8
get_make_scan_code	client/inputs_channel.cpp	/^uint32_t InputsChannel::get_make_scan_code(RedKey key)$/;"	f	class:InputsChannel
get_mask_bitmap	spice-common/common/gdi_canvas.c	/^static struct BitmapData get_mask_bitmap(struct GdiCanvas *canvas, struct SpiceQMask *mask)$/;"	f	file:
get_max_fps	server/mjpeg_encoder.c	/^static uint32_t get_max_fps(uint64_t frame_size, uint64_t bytes_per_sec)$/;"	f	file:
get_memptr	client/windows/red_pixmap_gdi.cpp	/^void *RedPixmapGdi::get_memptr()$/;"	f	class:RedPixmapGdi
get_memslot_id	server/red_memslots.h	/^static inline int get_memslot_id(RedMemSlotInfo *info, uint64_t addr)$/;"	f
get_menu_item_id	client/application.cpp	/^int Application::get_menu_item_id(AppMenuItemType type, int32_t conn_ref, uint32_t ext_id)$/;"	f	class:Application
get_message	client/record_channel.cpp	/^RecordSamplesMessage* RecordChannel::get_message()$/;"	f	class:RecordChannel
get_message_handler	client/red_channel.h	/^    MessageHandler* get_message_handler() { return _message_handler.get();}$/;"	f	class:RedChannel
get_min_required_playback_delay	server/mjpeg_encoder.c	/^static uint32_t get_min_required_playback_delay(uint64_t frame_enc_size,$/;"	f	file:
get_minor_attr	spice-common/python_modules/ptypes.py	/^    def get_minor_attr(self):$/;"	m	class:Containee
get_mm_time	client/record_channel.cpp	/^static uint32_t get_mm_time()$/;"	f	file:
get_mm_time	client/red_client.cpp	/^uint32_t RedClient::get_mm_time()$/;"	f	class:RedClient
get_monitor	client/application.cpp	/^Monitor* Application::get_monitor(int id)$/;"	f	class:Application
get_monitor	client/screen.h	/^    Monitor* get_monitor() { return _monitor;}$/;"	f	class:RedScreen
get_monitors	client/application.h	/^    std::vector<MonitorInfo>& get_monitors() {return _monitors;}$/;"	f	class:MonitorsQuery
get_monitors_config_item	server/red_worker.c	/^static MonitorsConfigItem *get_monitors_config_item($/;"	f	file:
get_monolithic_time	client/windows/platform.cpp	/^uint64_t Platform::get_monolithic_time()$/;"	f	class:Platform
get_monolithic_time	client/x11/platform.cpp	/^uint64_t Platform::get_monolithic_time()$/;"	f	class:Platform
get_mouse_anchor_point	client/windows/red_window.cpp	/^bool RedWindow::get_mouse_anchor_point(SpicePoint& pt)$/;"	f	class:RedWindow
get_mouse_anchor_point	client/x11/red_window.cpp	/^bool RedWindow::get_mouse_anchor_point(SpicePoint& pt)$/;"	f	class:RedWindow
get_mouse_mode	client/application.cpp	/^uint32_t Application::get_mouse_mode()$/;"	f	class:Application
get_mouse_mode	client/red_client.h	/^    uint32_t get_mouse_mode() { return _mouse_mode;}$/;"	f	class:RedClient
get_msg_size	server/red_channel.h	/^    get_msg_size_proc get_msg_size;$/;"	m	struct:SpiceDataHeaderOpaque
get_msg_size	server/red_channel.h	/^    get_outgoing_msg_size_proc get_msg_size;$/;"	m	struct:OutgoingHandlerInterface
get_msg_size_proc	server/red_channel.h	/^typedef uint32_t (*get_msg_size_proc)(SpiceDataHeaderOpaque *header);$/;"	t
get_msg_type	server/red_channel.h	/^    get_msg_type_proc get_msg_type;$/;"	m	struct:SpiceDataHeaderOpaque
get_msg_type_proc	server/red_channel.h	/^typedef uint16_t (*get_msg_type_proc)(SpiceDataHeaderOpaque *header);$/;"	t
get_mutex	client/windows/red_pixmap_gdi.cpp	/^RecurciveMutex& RedPixmapGdi::get_mutex()$/;"	f	class:RedPixmapGdi
get_name	client/gui/gui.cpp	/^        virtual const std::string& get_name()$/;"	f	class:SampleTabFactory::SampleTab
get_name	client/menu.h	/^        const std::string& get_name() { return _name;}$/;"	f	class:Menu::MenuCommand
get_name	client/menu.h	/^    const std::string& get_name() { return _name;}$/;"	f	class:Menu
get_named_types	spice-common/python_modules/ptypes.py	/^def get_named_types():$/;"	f
get_next_timer	server/tests/basic_event_loop.c	/^SpiceTimer *get_next_timer(void)$/;"	f
get_now	client/process_loop.cpp	/^uint64_t Timer::get_now()$/;"	f	class:Timer
get_num_commands	server/tests/test_display_base.c	/^static int get_num_commands(void)$/;"	f	file:
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:ArrayType
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:ContainerType
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:Member
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:PointerType
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:Switch
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:SwitchCase
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:Type
get_num_pointers	spice-common/python_modules/ptypes.py	/^    def get_num_pointers(self):$/;"	m	class:TypeAlias
get_nw_offset	spice-common/python_modules/ptypes.py	/^    def get_nw_offset(self, member, prefix = "", postfix = ""):$/;"	m	class:ContainerType
get_opaque	client/cursor.h	/^    CursorOpaque* get_opaque() { return _opaque;}$/;"	f	class:CursorData
get_opaque	client/pixels_source.h	/^    const uint8_t* get_opaque() const { return _opaque;}$/;"	f	class:PixelsSource
get_option	client/cmd_line_parser.cpp	/^int CmdLineParser::get_option(char** val)$/;"	f	class:CmdLineParser
get_order	client/gui/gui.h	/^    int get_order() { return _order;}$/;"	f	class:GUI::TabFactory
get_origin	client/pixels_source.h	/^    const SpicePoint& get_origin() { return _origin;}$/;"	f	class:PixelsSource
get_outgoing_message	client/red_channel.cpp	/^RedChannel::OutMessage* RedChannel::get_outgoing_message()$/;"	f	class:RedChannel
get_outgoing_msg_size_proc	server/red_channel.h	/^typedef int (*get_outgoing_msg_size_proc)(void *opaque);$/;"	t
get_overlapped_bytes	client/windows/named_pipe.cpp	/^DWORD PipeBuffer::get_overlapped_bytes()$/;"	f	class:PipeBuffer
get_owner	client/process_loop.h	/^    void* get_owner() { return _owner;}$/;"	f	class:ProcessLoop
get_password	client/application.cpp	/^const std::string& Application::get_password()$/;"	f	class:Application
get_password	client/red_client.h	/^    const std::string& get_password() { return _password;}$/;"	f	class:RedClient
get_path	spice-common/common/gl_canvas.c	/^static GLCPath get_path(GLCanvas *canvas, SpicePath *s)$/;"	f	file:
get_peer_major	client/red_channel.h	/^     uint32_t get_peer_major() { return _remote_major;}$/;"	f	class:RedChannelBase
get_peer_minor	client/red_channel.h	/^     uint32_t get_peer_minor() { return _remote_minor;}$/;"	f	class:RedChannelBase
get_pix_hack	client/x11/platform.cpp	/^static inline uint32_t get_pix_hack(int pix_index, int width)$/;"	f	file:
get_pix_mask	client/x11/platform.cpp	/^static inline uint8_t get_pix_mask(const uint8_t* data, int offset, int pix_index)$/;"	f	file:
get_pixel_after_image_entered	client/glz_decoder_window.h	/^inline uint8_t* GlzDecoderWindow::get_pixel_after_image_entered(int image_index,$/;"	f	class:GlzDecoderWindow
get_pixel_color	client/cursor_channel.cpp	/^    uint32_t get_pixel_color(const uint8_t *data, int row, int col)$/;"	f	class:ColorCursor16	file:
get_pixel_color	client/cursor_channel.cpp	/^    uint32_t get_pixel_color(const uint8_t *data, int row, int col)$/;"	f	class:ColorCursor32	file:
get_pixel_color	client/cursor_channel.cpp	/^    uint32_t get_pixel_color(const uint8_t *data, int row, int col)$/;"	f	class:ColorCursor4	file:
get_pixel_ref	client/glz_decoded_image.h	/^inline uint8_t* GlzDecodedImage::get_pixel_ref(int offset)$/;"	f	class:GlzDecodedImage
get_pixmap_cache	client/red_client.h	/^    PixmapCache& get_pixmap_cache() {return _pixmap_cache;}$/;"	f	class:RedClient
get_pixmap_cache_size	client/red_client.h	/^    uint64_t get_pixmap_cache_size() { return _pixmap_cache_size;}$/;"	f	class:RedClient
get_pixmap_type	client/canvas.h	/^    virtual CanvasType get_pixmap_type() { return CANVAS_TYPE_INVALID; }$/;"	f	class:Canvas
get_pixmap_type	client/red_gdi_canvas.cpp	/^CanvasType GDICanvas::get_pixmap_type()$/;"	f	class:GDICanvas
get_pixmap_type	client/red_gl_canvas.cpp	/^CanvasType GCanvas::get_pixmap_type()$/;"	f	class:GCanvas
get_pixmap_type	client/red_sw_canvas.cpp	/^CanvasType SCanvas::get_pixmap_type()$/;"	f	class:SCanvas
get_pixmaps	client/x11/x_icon.cpp	/^void XIcon::get_pixmaps(int screen, Pixmap& out_pixmap, Pixmap& out_mask)$/;"	f	class:XIcon
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:ArrayType
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:ContainerType
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:Member
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:Switch
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:SwitchCase
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:Type
get_pointer_names	spice-common/python_modules/ptypes.py	/^    def get_pointer_names(self, marshalled):$/;"	m	class:TypeAlias
get_port	client/application.cpp	/^int Application::get_port()$/;"	f	class:Application
get_port	client/red_client.h	/^    int get_port() { return _port;}$/;"	f	class:RedClient
get_position	client/windows/platform.cpp	/^SpicePoint WinMonitor::get_position()$/;"	f	class:WinMonitor
get_position	client/windows/red_window.cpp	/^SpicePoint RedWindow::get_position()$/;"	f	class:RedWindow
get_position	client/x11/platform.cpp	/^    SpicePoint get_position() const {return _position;}$/;"	f	class:XScreen
get_position	client/x11/platform.cpp	/^    virtual SpicePoint get_position() { return XScreen::get_position();}$/;"	f	class:DynamicScreen
get_position	client/x11/platform.cpp	/^    virtual SpicePoint get_position() { return XScreen::get_position();}$/;"	f	class:StaticScreen
get_position	client/x11/platform.cpp	/^    virtual SpicePoint get_position() { return _position;}$/;"	f	class:XineramaMonitor
get_position	client/x11/platform.cpp	/^SpicePoint XMonitor::get_position()$/;"	f	class:XMonitor
get_position	client/x11/red_window.cpp	/^SpicePoint RedWindow::get_position()$/;"	f	class:RedWindow
get_position	spice-common/python_modules/demarshal.py	/^    def get_position(self):$/;"	m	class:ItemInfo
get_prev_area	client/x11/platform.cpp	/^const SpiceRect& XMonitor::get_prev_area()$/;"	f	class:XMonitor
get_process_id	client/windows/platform.cpp	/^uint64_t Platform::get_process_id()$/;"	f	class:Platform
get_process_id	client/x11/platform.cpp	/^uint64_t Platform::get_process_id()$/;"	f	class:Platform
get_process_loop	client/red_channel.h	/^    ProcessLoop& get_process_loop() { return _loop;}$/;"	f	class:RedChannel
get_prop_32	client/x11/red_window.cpp	/^static bool get_prop_32(Window win, Atom prop, uint32_t &val)$/;"	f	file:
get_protocol	client/red_client.h	/^    int get_protocol() { return _protocol;}$/;"	f	class:RedClient
get_pull_distance	client/x11/platform.cpp	/^    static int get_pull_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:BottomVariant
get_pull_distance	client/x11/platform.cpp	/^    static int get_pull_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:LeftVariant
get_pull_distance	client/x11/platform.cpp	/^    static int get_pull_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:RightVariant
get_pull_distance	client/x11/platform.cpp	/^    static int get_pull_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:TopVariant
get_push_distance	client/x11/platform.cpp	/^    static int get_push_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:BottomVariant
get_push_distance	client/x11/platform.cpp	/^    static int get_push_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:LeftVariant
get_push_distance	client/x11/platform.cpp	/^    static int get_push_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:RightVariant
get_push_distance	client/x11/platform.cpp	/^    static int get_push_distance(const SpiceRect& fix_area, const SpiceRect& other)$/;"	f	class:TopVariant
get_pusher	client/x11/platform.cpp	/^    XMonitor* get_pusher() { return _pusher;}$/;"	f	class:XMonitor
get_ref	spice-common/python_modules/demarshal.py	/^    def get_ref(self, member):$/;"	m	class:RootDemarshallingDestination
get_ref	spice-common/python_modules/demarshal.py	/^    def get_ref(self, member):$/;"	m	class:SubDemarshallingDestination
get_ref	spice-common/python_modules/marshal.py	/^    def get_ref(self, member):$/;"	m	class:RootMarshallingSource
get_ref	spice-common/python_modules/marshal.py	/^    def get_ref(self, member):$/;"	m	class:SubMarshallingSource
get_ref_pixel	client/glz_decoder_window.h	/^inline uint8_t *GlzDecoderWindow::get_ref_pixel(DecodedImageWinId decoded_image_win_id,$/;"	f	class:GlzDecoderWindow
get_root_window	client/gui/gui.cpp	/^        virtual CEGUI::Window& get_root_window()$/;"	f	class:SampleTabFactory::SampleTab
get_roundtrip_ms	server/mjpeg_encoder.h	/^    uint32_t (*get_roundtrip_ms)(void *opaque);$/;"	m	struct:MJpegEncoderRateControlCbs
get_screen	client/application.cpp	/^RedScreen* Application::get_screen(int id)$/;"	f	class:Application
get_screen	client/x11/platform.cpp	/^    int get_screen() {return _screen;}$/;"	f	class:XScreen
get_screen_format	client/x11/platform.cpp	/^RedDrawable::Format XPlatform::get_screen_format(int screen)$/;"	f	class:XPlatform
get_screen_id	client/screen.cpp	/^int RedScreen::get_screen_id()$/;"	f	class:RedScreen
get_screen_id	client/windows/platform.cpp	/^    virtual int get_screen_id() { return 0;}$/;"	f	class:WinMonitor
get_screen_id	client/x11/platform.cpp	/^    virtual int get_screen_id() { return 0;}$/;"	f	class:XineramaMonitor
get_screen_id	client/x11/platform.cpp	/^    virtual int get_screen_id() { return _container.get_screen();}$/;"	f	class:XMonitor
get_screen_id	client/x11/platform.cpp	/^    virtual int get_screen_id() { return get_screen();}$/;"	f	class:DynamicScreen
get_screen_id	client/x11/platform.cpp	/^    virtual int get_screen_id() { return get_screen();}$/;"	f	class:StaticScreen
get_screen_num	client/x11/red_window.cpp	/^int RedWindow::get_screen_num()$/;"	f	class:RedWindow
get_selection	client/x11/platform.cpp	/^static int get_selection(XEvent &event, Atom type, Atom prop, int format,$/;"	f	file:
get_selection_free	client/x11/platform.cpp	/^static void get_selection_free(unsigned char *data, bool incr)$/;"	f	file:
get_self_ref	spice-common/python_modules/marshal.py	/^    def get_self_ref(self):$/;"	m	class:RootMarshallingSource
get_self_ref	spice-common/python_modules/marshal.py	/^    def get_self_ref(self):$/;"	m	class:SubMarshallingSource
get_server_message	spice-common/python_modules/ptypes.py	/^    def get_server_message(self, name):$/;"	m	class:ChannelType
get_simple_command	server/tests/test_display_base.c	/^static struct QXLCommandExt *get_simple_command(void)$/;"	f	file:
get_size	client/glz_decoded_image.h	/^    int      get_size() {return _size;}$/;"	f	class:GlzDecodedImage
get_size	client/red_pixmap.h	/^    virtual SpicePoint get_size() { SpicePoint pt = {_width, _height}; return pt;}$/;"	f	class:RedPixmap
get_size	client/screen.h	/^    SpicePoint get_size() { return _size;}$/;"	f	class:RedScreen
get_size	client/windows/pixels_source.cpp	/^SpicePoint AlphaImageFromRes::get_size()$/;"	f	class:AlphaImageFromRes
get_size	client/windows/pixels_source.cpp	/^SpicePoint ImageFromRes::get_size()$/;"	f	class:ImageFromRes
get_size	client/windows/platform.cpp	/^    virtual SpicePoint get_size() const { SpicePoint size = {_width, _height}; return size;}$/;"	f	class:WinMonitor
get_size	client/windows/red_window.cpp	/^SpicePoint RedWindow::get_size()$/;"	f	class:RedWindow
get_size	client/x11/pixels_source.cpp	/^SpicePoint AlphaImageFromRes::get_size()$/;"	f	class:AlphaImageFromRes
get_size	client/x11/pixels_source.cpp	/^SpicePoint ImageFromRes::get_size()$/;"	f	class:ImageFromRes
get_size	client/x11/platform.cpp	/^    virtual SpicePoint get_size() const { SpicePoint pt = {get_width(), get_height()}; return pt;}$/;"	f	class:DynamicScreen
get_size	client/x11/platform.cpp	/^    virtual SpicePoint get_size() const { SpicePoint pt = {get_width(), get_height()}; return pt;}$/;"	f	class:StaticScreen
get_size	client/x11/platform.cpp	/^    virtual SpicePoint get_size() const { return _size;}$/;"	f	class:XineramaMonitor
get_size	client/x11/platform.cpp	/^SpicePoint XMonitor::get_size() const$/;"	f	class:XMonitor
get_size	client/x11/red_window.cpp	/^SpicePoint RedWindow::get_size()$/;"	f	class:RedWindow
get_size_bits	client/cursor.cpp	/^int LocalCursor::get_size_bits(const SpiceCursorHeader& header, int& size)$/;"	f	class:LocalCursor
get_smartcard_options	client/application.h	/^    const SmartcardOptions* get_smartcard_options() const {$/;"	f	class:Application
get_socket	client/client_net_socket.h	/^    int get_socket() {return _peer;}$/;"	f	class:ClientNetSocket
get_socket	client/red_peer.h	/^    virtual int get_socket() { return _peer;}$/;"	f	class:RedPeer
get_socket	client/x11/named_pipe.h	/^    virtual int get_socket() {return _fd_client;}$/;"	f	class:Session
get_socket	client/x11/named_pipe.h	/^    virtual int get_socket() {return _listen_socket;}$/;"	f	class:LinuxListener
get_soonest_timeout	client/process_loop.cpp	/^unsigned ProcessLoop::get_soonest_timeout()$/;"	f	class:ProcessLoop
get_soonest_timeout	client/process_loop.cpp	/^unsigned int TimersQueue::get_soonest_timeout()$/;"	f	class:TimersQueue
get_source_fps	server/mjpeg_encoder.h	/^    uint32_t (*get_source_fps)(void *opaque);$/;"	m	struct:MJpegEncoderRateControlCbs
get_sport	client/application.cpp	/^int Application::get_sport()$/;"	f	class:Application
get_sport	client/red_client.h	/^    int get_sport() { return _sport;}$/;"	f	class:RedClient
get_state	client/menu.h	/^        int get_state() { return _state;}$/;"	f	class:Menu::MenuCommand
get_stream_commands	server/tests/test_display_streaming.c	/^static void get_stream_commands(Command *commands, int num_commands,$/;"	f	file:
get_stream_id	server/red_worker.c	/^static inline int get_stream_id(RedWorker *worker, Stream *stream)$/;"	f	file:
get_stride	client/red_pixmap.h	/^    int get_stride() { return _stride;}$/;"	f	class:RedPixmap
get_subwriter	spice-common/python_modules/codegen.py	/^    def get_subwriter(self):$/;"	m	class:CodeWriter
get_surface_create_item	server/red_worker.c	/^static SurfaceCreateItem *get_surface_create_item($/;"	f	file:
get_surface_destroy_item	server/red_worker.c	/^static SurfaceDestroyItem *get_surface_destroy_item(RedChannel *channel,$/;"	f	file:
get_sync_info	client/red_client.cpp	/^void RedClient::get_sync_info(uint8_t channel_type, uint8_t channel_id, SyncInfo& info)$/;"	f	class:RedClient
get_tail	client/x11/platform.cpp	/^    static int get_tail(const SpiceRect& area)$/;"	f	class:BottomVariant
get_tail	client/x11/platform.cpp	/^    static int get_tail(const SpiceRect& area)$/;"	f	class:LeftVariant
get_tail	client/x11/platform.cpp	/^    static int get_tail(const SpiceRect& area)$/;"	f	class:RightVariant
get_tail	client/x11/platform.cpp	/^    static int get_tail(const SpiceRect& area)$/;"	f	class:TopVariant
get_target	client/menu.h	/^    CommandTarget& get_target() { return _target;}$/;"	f	class:Menu
get_temp_dir	client/windows/platform.cpp	/^void Platform::get_temp_dir(std::string& path)$/;"	f	class:Platform
get_temp_dir	client/x11/platform.cpp	/^void Platform::get_temp_dir(std::string& path)$/;"	f	class:Platform
get_thread_id	client/windows/platform.cpp	/^uint64_t Platform::get_thread_id()$/;"	f	class:Platform
get_thread_id	client/x11/platform.cpp	/^uint64_t Platform::get_thread_id()$/;"	f	class:Platform
get_time_stamp	server/main_channel.c	/^static uint64_t get_time_stamp(void)$/;"	f	file:
get_trans_area	client/x11/platform.cpp	/^SpiceRect& XMonitor::get_trans_area()$/;"	f	class:XMonitor
get_trans_bottom_right	client/x11/platform.cpp	/^SpicePoint MultyMonScreen::get_trans_bottom_right()$/;"	f	class:MultyMonScreen
get_trans_size	client/x11/platform.cpp	/^void MultyMonScreen::get_trans_size(int& width, int& height)$/;"	f	class:MultyMonScreen
get_trans_top_left	client/x11/platform.cpp	/^SpicePoint MultyMonScreen::get_trans_top_left()$/;"	f	class:MultyMonScreen
get_transform	server/red_parse_qxl.c	/^static bool get_transform(RedMemSlotInfo *slots,$/;"	f	file:
get_type	client/red_channel.h	/^    uint8_t get_type() { return _type;}$/;"	f	class:RedChannelBase
get_type	spice-common/python_modules/ptypes.py	/^    def get_type(self, recursive=False):$/;"	m	class:Type
get_type	spice-common/python_modules/ptypes.py	/^    def get_type(self, recursive=False):$/;"	m	class:TypeAlias
get_vinfo	client/x11/platform.cpp	/^XVisualInfo** XPlatform::get_vinfo()$/;"	f	class:XPlatform
get_virt	server/red_memslots.c	/^unsigned long get_virt(RedMemSlotInfo *info, QXLPHYSICAL addr, uint32_t add_size,$/;"	f
get_visibale_region	client/x11/red_window.cpp	/^static QRegion *get_visibale_region(Window window)$/;"	f	file:
get_width	client/red_pixmap.h	/^    int get_width() { return _width;}$/;"	f	class:RedPixmap
get_width	client/x11/platform.cpp	/^    int get_width() const {return _width;}$/;"	f	class:XScreen
get_window	client/screen.h	/^    RedWindow* get_window() { return &_window;}$/;"	f	class:RedScreen
get_window	client/x11/red_window_p.h	/^    Window get_window() {return _win;}$/;"	f	class:RedWindow_p
get_window_for_reposition	client/x11/red_window.cpp	/^static Window get_window_for_reposition(Window window)$/;"	f	file:
get_window_head_id	client/glz_decoded_image.h	/^    uint64_t get_window_head_id() {return _win_head_id;}$/;"	f	class:GlzDecodedImage
get_worker_priority	client/red_channel.h	/^    Platform::ThreadPriority get_worker_priority() { return _worker_priority;}$/;"	f	class:RedChannel
get_x_vis_info	client/x11/platform.cpp	/^static XVisualInfo* get_x_vis_info(int screen)$/;"	f	file:
getvalue	spice-common/python_modules/codegen.py	/^    def getvalue(self):$/;"	m	class:CodeWriter
give_advice	missing	/^give_advice ()$/;"	f
give_advice	spice-common/build-aux/missing	/^give_advice ()$/;"	f
give_advice	spice-common/spice-protocol/missing	/^give_advice ()$/;"	f
gl	client/x11/pixels_source_p.h	/^        } gl;$/;"	m	union:PixelsSource_p::__anon116	typeref:struct:PixelsSource_p::__anon116::__anon120
glBlendEquation	spice-common/common/glc.c	/^    PFNGLBLENDEQUATIONPROC glBlendEquation;$/;"	m	struct:InternaCtx	file:
gl_canvas_clear	spice-common/common/gl_canvas.c	/^static void gl_canvas_clear(SpiceCanvas *spice_canvas)$/;"	f	file:
gl_canvas_copy_bits	spice-common/common/gl_canvas.c	/^static void gl_canvas_copy_bits(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpicePoint *src_pos)$/;"	f	file:
gl_canvas_create	spice-common/common/gl_canvas.c	/^SpiceCanvas *gl_canvas_create(int width, int height, uint32_t format$/;"	f
gl_canvas_destroy	spice-common/common/gl_canvas.c	/^static void gl_canvas_destroy(SpiceCanvas *spice_canvas)$/;"	f	file:
gl_canvas_draw_alpha_blend	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_alpha_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceAlphaBlend *alpha_blend)$/;"	f	file:
gl_canvas_draw_blackness	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_blackness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlackness *blackness)$/;"	f	file:
gl_canvas_draw_blend	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_blend(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceBlend *blend)$/;"	f	file:
gl_canvas_draw_copy	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_copy(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceCopy *copy)$/;"	f	file:
gl_canvas_draw_fill	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_fill(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceFill *fill)$/;"	f	file:
gl_canvas_draw_invers	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_invers(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceInvers *invers)$/;"	f	file:
gl_canvas_draw_opaque	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_opaque(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceOpaque *opaque)$/;"	f	file:
gl_canvas_draw_rop3	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_rop3(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceRop3 *rop3)$/;"	f	file:
gl_canvas_draw_stroke	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_stroke(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceStroke *stroke)$/;"	f	file:
gl_canvas_draw_text	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_text(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceText *text)$/;"	f	file:
gl_canvas_draw_transparent	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_transparent(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceTransparent *transparent)$/;"	f	file:
gl_canvas_draw_whiteness	spice-common/common/gl_canvas.c	/^static void gl_canvas_draw_whiteness(SpiceCanvas *spice_canvas, SpiceRect *bbox, SpiceClip *clip, SpiceWhiteness *whiteness)$/;"	f	file:
gl_canvas_group_end	spice-common/common/gl_canvas.c	/^static void gl_canvas_group_end(SpiceCanvas *spice_canvas)$/;"	f	file:
gl_canvas_group_start	spice-common/common/gl_canvas.c	/^static void gl_canvas_group_start(SpiceCanvas *spice_canvas, QRegion *region)$/;"	f	file:
gl_canvas_init	spice-common/common/gl_canvas.c	/^void gl_canvas_init(void) \/\/unsafe global function$/;"	f
gl_canvas_ops	spice-common/common/gl_canvas.c	/^static SpiceCanvasOps gl_canvas_ops;$/;"	v	file:
gl_canvas_put_image	spice-common/common/gl_canvas.c	/^static void gl_canvas_put_image(SpiceCanvas *spice_canvas, const SpiceRect *dest, const uint8_t *src_data,$/;"	f	file:
gl_canvas_read_bits	spice-common/common/gl_canvas.c	/^static void gl_canvas_read_bits(SpiceCanvas *spice_canvas, uint8_t *dest, int dest_stride, const SpiceRect *area)$/;"	f	file:
gl_canvas_set_textures_lost	spice-common/common/gl_canvas.c	/^void gl_canvas_set_textures_lost(SpiceCanvas *spice_canvas,$/;"	f
gl_get_to_power_two	spice-common/common/gl_utils.h	56;"	d
glc	spice-common/common/gl_canvas.c	/^    GLCCtx glc;$/;"	m	struct:GLCanvas	file:
glc_begin_path	spice-common/common/glc.c	/^static void glc_begin_path(InternaCtx *ctx)$/;"	f	file:
glc_clear	spice-common/common/glc.c	/^void glc_clear(GLCCtx glc)$/;"	f
glc_clear_mask	spice-common/common/glc.c	/^void glc_clear_mask(GLCCtx glc, GLCMaskID id)$/;"	f
glc_clip_mask	spice-common/common/glc.c	/^void glc_clip_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height,$/;"	f
glc_clip_path	spice-common/common/glc.c	/^void glc_clip_path(GLCCtx glc, GLCPath path, GLCClipOp op)$/;"	f
glc_clip_rect	spice-common/common/glc.c	/^void glc_clip_rect(GLCCtx glc, const GLCRect *rect, GLCClipOp op)$/;"	f
glc_clip_reset	spice-common/common/glc.c	/^void glc_clip_reset(GLCCtx glc)$/;"	f
glc_copy_pixels	spice-common/common/glc.c	/^void glc_copy_pixels(GLCCtx glc, int x_dest, int y_dest, int x_src, int y_src, int width,$/;"	f
glc_create	spice-common/common/glc.c	/^GLCCtx glc_create(int width, int height)$/;"	f
glc_destroy	spice-common/common/glc.c	/^void glc_destroy(GLCCtx glc, int textures_lost)$/;"	f
glc_draw_image	spice-common/common/glc.c	/^void glc_draw_image(GLCCtx glc, const GLCRecti *dest, const GLCRecti *src, const GLCImage *image,$/;"	f
glc_end_path	spice-common/common/glc.c	/^static void glc_end_path(InternaCtx *ctx)$/;"	f	file:
glc_fill_alpha	spice-common/common/glc.c	/^void glc_fill_alpha(GLCCtx glc, int x_dest, int y_dest, int width, int height, int stride,$/;"	f
glc_fill_path	spice-common/common/glc.c	/^void glc_fill_path(GLCCtx glc, GLCPath path_ref)$/;"	f
glc_fill_rect	spice-common/common/glc.c	/^void glc_fill_rect(GLCCtx glc, const GLCRect *rect)$/;"	f
glc_flush	spice-common/common/glc.c	/^void glc_flush(GLCCtx glc)$/;"	f
glc_mask_rects	spice-common/common/glc.c	/^void glc_mask_rects(GLCCtx glc, int num_rect, GLCRect *rects, GLCMaskID id)$/;"	f
glc_path_cleare	spice-common/common/glc.c	/^void glc_path_cleare(GLCPath path)$/;"	f
glc_path_close	spice-common/common/glc.c	/^void glc_path_close(GLCPath path)$/;"	f
glc_path_create	spice-common/common/glc.c	/^GLCPath glc_path_create(GLCCtx glc)$/;"	f
glc_path_curve_to	spice-common/common/glc.c	/^void glc_path_curve_to(GLCPath path, double p1_x, double p1_y, double p2_x, double p2_y,$/;"	f
glc_path_destroy	spice-common/common/glc.c	/^void glc_path_destroy(GLCPath path)$/;"	f
glc_path_line_to	spice-common/common/glc.c	/^void glc_path_line_to(GLCPath path, double x, double y)$/;"	f
glc_path_move_to	spice-common/common/glc.c	/^void glc_path_move_to(GLCPath path, double x, double y)$/;"	f
glc_pattern_create	spice-common/common/glc.c	/^GLCPattern glc_pattern_create(GLCCtx glc, int x_orign, int y_orign, const GLCImage *image)$/;"	f
glc_pattern_destroy	spice-common/common/glc.c	/^void glc_pattern_destroy(GLCPattern pat)$/;"	f
glc_pattern_set	spice-common/common/glc.c	/^void glc_pattern_set(GLCPattern pattern, int x_orign, int y_orign, const GLCImage *image)$/;"	f
glc_read_pixels	spice-common/common/glc.c	/^void glc_read_pixels(GLCCtx glc, int x, int y, GLCImage *image)$/;"	f
glc_set_fill_mode	spice-common/common/glc.c	/^void glc_set_fill_mode(GLCCtx glc, GLCFillMode fill_mode)$/;"	f
glc_set_line_dash	spice-common/common/glc.c	/^void glc_set_line_dash(GLCCtx glc, const double *dashes, int num_dashes, double offset)$/;"	f
glc_set_line_width	spice-common/common/glc.c	/^void glc_set_line_width(GLCCtx glc, double width)$/;"	f
glc_set_mask	spice-common/common/glc.c	/^void glc_set_mask(GLCCtx glc, int x_dest, int y_dest, int width, int height,$/;"	f
glc_set_op	spice-common/common/glc.c	/^void glc_set_op(GLCCtx glc, GLCOp op)$/;"	f
glc_set_pattern	spice-common/common/glc.c	/^void glc_set_pattern(GLCCtx glc, GLCPattern pattern)$/;"	f
glc_set_rgb	spice-common/common/glc.c	/^void glc_set_rgb(GLCCtx glc, double red, double green, double blue)$/;"	f
glc_stroke_line	spice-common/common/glc.c	/^static void glc_stroke_line(double x1, double y1, double x2, double y2, double width)$/;"	f	file:
glc_stroke_line_dash	spice-common/common/glc.c	/^static double glc_stroke_line_dash(double x1, double y1, double x2, double y2,$/;"	f	file:
glc_stroke_path	spice-common/common/glc.c	/^void glc_stroke_path(GLCCtx glc, GLCPath path_ref)$/;"	f
glc_stroke_rect	spice-common/common/glc.c	/^void glc_stroke_rect(GLCCtx glc, const GLCRect *rect)$/;"	f
glc_vertex2d	spice-common/common/glc.c	/^static void glc_vertex2d(InternaCtx *ctx, double x, double y)$/;"	f	file:
glx_context	spice-common/common/ogl_ctx.c	/^    GLXContext glx_context;$/;"	m	struct:OGLCtx	file:
glyph_origin	spice-common/common/draw.h	/^    SpicePoint glyph_origin;$/;"	m	struct:SpiceRasterGlyph
glyph_origin	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint glyph_origin;$/;"	m	struct:QXLRasterGlyph
glyphs	spice-common/common/draw.h	/^    SpiceRasterGlyph *glyphs[0];$/;"	m	struct:SpiceString
glz	server/red_worker.c	/^    GlzEncoderContext   *glz;$/;"	m	struct:DisplayChannelClient	file:
glz_data	server/red_worker.c	/^    GlzData glz_data;$/;"	m	struct:DisplayChannelClient	file:
glz_data	spice-common/common/canvas_base.c	/^    GlzData glz_data;$/;"	m	struct:CanvasBase	file:
glz_data_size	spice-common/common/draw.h	/^    uint32_t glz_data_size;$/;"	m	struct:SpiceZlibGlzRGBData
glz_decoder	client/canvas.h	/^    GlzDecoder& glz_decoder() {return _glz_decoder;}$/;"	f	class:Canvas
glz_dict	server/red_worker.c	/^    GlzSharedDictionary *glz_dict;$/;"	m	struct:DisplayChannelClient	file:
glz_dict_data	server/migration_protocol.h	/^    GlzEncDictRestoreData glz_dict_data;$/;"	m	struct:SpiceMigrateDataDisplay
glz_dict_id	server/migration_protocol.h	/^    uint8_t glz_dict_id;$/;"	m	struct:SpiceMigrateDataDisplay
glz_dictionary_id	spice-common/common/messages.h	/^    uint8_t glz_dictionary_id;$/;"	m	struct:SpiceMsgcDisplayInit
glz_dictionary_is_in_use	server/glz_encoder_dictionary.c	/^static INLINE int glz_dictionary_is_in_use(SharedDictionary *dict)$/;"	f	file:
glz_dictionary_list	server/red_worker.c	/^Ring glz_dictionary_list = {&glz_dictionary_list, &glz_dictionary_list};$/;"	v
glz_dictionary_list_lock	server/red_worker.c	/^pthread_mutex_t glz_dictionary_list_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
glz_dictionary_post_encode	server/glz_encoder_dictionary.c	/^void glz_dictionary_post_encode(uint32_t encoder_id, GlzEncoderUsrContext *usr,$/;"	f
glz_dictionary_pre_encode	server/glz_encoder_dictionary.c	/^WindowImage *glz_dictionary_pre_encode(uint32_t encoder_id, GlzEncoderUsrContext *usr,$/;"	f
glz_dictionary_reset_hash	server/glz_encoder_dictionary.c	/^static INLINE void glz_dictionary_reset_hash(SharedDictionary *dict)$/;"	f	file:
glz_dictionary_window_add_image	server/glz_encoder_dictionary.c	/^static WindowImage *glz_dictionary_window_add_image(SharedDictionary *dict, LzImageType image_type,$/;"	f	file:
glz_dictionary_window_alloc_image_seg	server/glz_encoder_dictionary.c	/^static uint32_t glz_dictionary_window_alloc_image_seg(SharedDictionary *dict, WindowImage* image,$/;"	f	file:
glz_dictionary_window_create	server/glz_encoder_dictionary.c	/^static int glz_dictionary_window_create(SharedDictionary *dict, uint32_t size)$/;"	f	file:
glz_dictionary_window_destroy	server/glz_encoder_dictionary.c	/^static INLINE void glz_dictionary_window_destroy(SharedDictionary *dict)$/;"	f	file:
glz_dictionary_window_get_new_head	server/glz_encoder_dictionary.c	/^static WindowImage *glz_dictionary_window_get_new_head(SharedDictionary *dict, int new_image_size)$/;"	f	file:
glz_dictionary_window_kill_image	server/glz_encoder_dictionary.c	/^static INLINE void glz_dictionary_window_kill_image(SharedDictionary *dict, WindowImage *image)$/;"	f	file:
glz_dictionary_window_remove_head	server/glz_encoder_dictionary.c	/^static void glz_dictionary_window_remove_head(SharedDictionary *dict, uint32_t encoder_id,$/;"	f	file:
glz_dictionary_window_reset	server/glz_encoder_dictionary.c	/^static void glz_dictionary_window_reset(SharedDictionary *dict)$/;"	f	file:
glz_dictionary_window_size	spice-common/common/messages.h	/^    int32_t glz_dictionary_window_size;       \/\/ in pixels$/;"	m	struct:SpiceMsgcDisplayInit
glz_drawable_count	server/red_worker.c	/^    uint32_t glz_drawable_count;$/;"	m	struct:RedWorker	file:
glz_drawables	server/red_worker.c	/^    Ring glz_drawables;               \/\/ all the living lz drawable, ordered by encoding time$/;"	m	struct:DisplayChannelClient	file:
glz_drawables_inst_to_free	server/red_worker.c	/^    Ring glz_drawables_inst_to_free;               \/\/ list of instances to be freed$/;"	m	struct:DisplayChannelClient	file:
glz_drawables_inst_to_free_lock	server/red_worker.c	/^    pthread_mutex_t glz_drawables_inst_to_free_lock;$/;"	m	struct:DisplayChannelClient	file:
glz_enc_dictionary_create	server/glz_encoder_dictionary.c	/^GlzEncDictContext *glz_enc_dictionary_create(uint32_t size, uint32_t max_encoders,$/;"	f
glz_enc_dictionary_destroy	server/glz_encoder_dictionary.c	/^void glz_enc_dictionary_destroy(GlzEncDictContext *opaque_dict, GlzEncoderUsrContext *usr)$/;"	f
glz_enc_dictionary_get_restore_data	server/glz_encoder_dictionary.c	/^void glz_enc_dictionary_get_restore_data(GlzEncDictContext *opaque_dict,$/;"	f
glz_enc_dictionary_get_size	server/glz_encoder_dictionary.c	/^uint32_t glz_enc_dictionary_get_size(GlzEncDictContext *opaque_dict)$/;"	f
glz_enc_dictionary_remove_image	server/glz_encoder_dictionary.c	/^void glz_enc_dictionary_remove_image(GlzEncDictContext *opaque_dict,$/;"	f
glz_enc_dictionary_reset	server/glz_encoder_dictionary.c	/^void glz_enc_dictionary_reset(GlzEncDictContext *opaque_dict, GlzEncoderUsrContext *usr)$/;"	f
glz_enc_dictionary_restore	server/glz_encoder_dictionary.c	/^GlzEncDictContext *glz_enc_dictionary_restore(GlzEncDictRestoreData *restore_data,$/;"	f
glz_encode	server/glz_encoder.c	/^int glz_encode(GlzEncoderContext *opaque_encoder,$/;"	f
glz_encoder_create	server/glz_encoder.c	/^GlzEncoderContext *glz_encoder_create(uint8_t id, GlzEncDictContext *dictionary,$/;"	f
glz_encoder_destroy	server/glz_encoder.c	/^void glz_encoder_destroy(GlzEncoderContext *opaque_encoder)$/;"	f
glz_instance	server/red_worker.c	/^    GlzEncDictImageContext *glz_instance;$/;"	m	struct:GlzDrawableInstanceItem	file:
glz_link	server/red_worker.c	/^    RingItem glz_link;$/;"	m	struct:GlzDrawableInstanceItem	file:
glz_ring	server/red_worker.c	/^    Ring glz_ring;$/;"	m	struct:Drawable	file:
glz_stat	server/red_worker.c	/^    stat_info_t glz_stat;$/;"	m	struct:DisplayChannel	file:
glz_stat_name	server/red_worker.c	/^static const char *glz_stat_name = "glz";$/;"	v	file:
glz_usr_error	server/red_worker.c	/^static SPICE_GNUC_PRINTF(2, 3) void glz_usr_error(GlzEncoderUsrContext *usr, const char *fmt, ...)$/;"	f
glz_usr_free	server/red_worker.c	/^static void glz_usr_free(GlzEncoderUsrContext *usr, void *ptr)$/;"	f	file:
glz_usr_free_image	server/red_worker.c	/^static void glz_usr_free_image(GlzEncoderUsrContext *usr, GlzUsrImageContext *image)$/;"	f	file:
glz_usr_malloc	server/red_worker.c	/^static void *glz_usr_malloc(GlzEncoderUsrContext *usr, int size)$/;"	f	file:
glz_usr_more_lines	server/red_worker.c	/^static int glz_usr_more_lines(GlzEncoderUsrContext *usr, uint8_t **lines)$/;"	f	file:
glz_usr_more_space	server/red_worker.c	/^static int glz_usr_more_space(GlzEncoderUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:
glz_usr_warn	server/red_worker.c	/^static SPICE_GNUC_PRINTF(2, 3) void glz_usr_warn(GlzEncoderUsrContext *usr, const char *fmt, ...)$/;"	f
golomb_code	spice-common/common/quic.c	/^    unsigned int golomb_code[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:
golomb_code	spice-common/common/quic_family_tmpl.c	/^static inline unsigned int FNAME(golomb_code)(const BYTE n, const unsigned int l)$/;"	f	file:
golomb_code_len	spice-common/common/quic.c	/^    unsigned int golomb_code_len[256][MAXNUMCODES];$/;"	m	struct:QuicFamily	file:
golomb_code_len	spice-common/common/quic_family_tmpl.c	/^static inline unsigned int FNAME(golomb_code_len)(const BYTE n, const unsigned int l)$/;"	f	file:
golomb_coding	spice-common/common/quic_family_tmpl.c	/^static void FNAME(golomb_coding)(const BYTE n, const unsigned int l, unsigned int * const codeword,$/;"	f	file:
golomb_coding	spice-common/common/quic_rgb_tmpl.c	26;"	d	file:
golomb_coding	spice-common/common/quic_rgb_tmpl.c	47;"	d	file:
golomb_coding	spice-common/common/quic_rgb_tmpl.c	68;"	d	file:
golomb_coding	spice-common/common/quic_rgb_tmpl.c	751;"	d	file:
golomb_coding	spice-common/common/quic_rgb_tmpl.c	89;"	d	file:
golomb_coding	spice-common/common/quic_tmpl.c	40;"	d	file:
golomb_coding	spice-common/common/quic_tmpl.c	629;"	d	file:
golomb_coding_slow	spice-common/common/quic.c	/^static void golomb_coding_slow(QuicFamily *family, const BYTE n, const unsigned int l,$/;"	f	file:
golomb_decoding	spice-common/common/quic_family_tmpl.c	/^static unsigned int FNAME(golomb_decoding)(const unsigned int l, const unsigned int bits,$/;"	f	file:
golomb_decoding	spice-common/common/quic_rgb_tmpl.c	27;"	d	file:
golomb_decoding	spice-common/common/quic_rgb_tmpl.c	48;"	d	file:
golomb_decoding	spice-common/common/quic_rgb_tmpl.c	69;"	d	file:
golomb_decoding	spice-common/common/quic_rgb_tmpl.c	752;"	d	file:
golomb_decoding	spice-common/common/quic_rgb_tmpl.c	90;"	d	file:
golomb_decoding	spice-common/common/quic_tmpl.c	41;"	d	file:
golomb_deoding	spice-common/common/quic_tmpl.c	630;"	d	file:
gop_size	server/h264_type.h	/^    int gop_size;$/;"	m	struct:_H264StreamInfo
grab_types	client/windows/platform.cpp	/^static std::set<uint32_t> grab_types;$/;"	v	file:
gradual_frames_count	server/red_worker.c	/^    int gradual_frames_count;$/;"	m	struct:Drawable	file:
gradual_frames_count	server/red_worker.c	/^    int gradual_frames_count;$/;"	m	struct:ItemTrace	file:
gross_pixels	client/glz_decoder.h	/^        int gross_pixels;$/;"	m	struct:GlzDecoder::__anon112
group	spice-common/common/lines.c	/^    Spans *group;               \/* List of Spans                        *\/$/;"	m	struct:__anon28	file:
group	spice-common/common/messages.h	/^    uint32_t group;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
group	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t group;$/;"	m	struct:QXLImageID
group_end	spice-common/common/canvas_base.h	/^    void (*group_end)(SpiceCanvas *canvas);$/;"	m	struct:__anon13
group_id	server/red_dispatcher.h	/^    int group_id;$/;"	m	struct:RedWorkerMessageMonitorsConfigAsync
group_id	server/red_worker.c	/^    uint32_t     group_id;$/;"	m	struct:RedGlzDrawable	file:
group_id	server/red_worker.c	/^    uint32_t group_id;$/;"	m	struct:CursorItem	file:
group_id	server/red_worker.c	/^    uint32_t group_id;$/;"	m	struct:Drawable	file:
group_id	server/spice.h	/^    uint32_t group_id;$/;"	m	struct:QXLDevSurfaceCreate
group_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t group_id;$/;"	m	struct:QXLCommandExt
group_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t group_id;$/;"	m	struct:QXLReleaseInfoExt
group_start	spice-common/common/canvas_base.h	/^    void (*group_start)(SpiceCanvas *canvas, QRegion *region);$/;"	m	struct:__anon13
guest_set_client_capabilities	server/red_worker.c	/^static void guest_set_client_capabilities(RedWorker *worker)$/;"	f	file:
gui_system	client/gui/gui.cpp	/^    CEGUI::System& gui_system() { return _gui.gui_system();}$/;"	f	class:GUI::Dialog
gui_system	client/gui/gui.h	/^    CEGUI::System& gui_system() { return *_gui_system;}$/;"	f	class:GUI
h264_encode	server/h264_encoder.c	/^int h264_encode(H264Encoder * encoder,char * rgb,int rgb_len,char *slice,int *slice_len)$/;"	f
h264_encoder	server/red_worker.c	/^    H264Encoder *h264_encoder;$/;"	m	struct:StreamAgent	file:
h264_encoder_env_init	server/h264_encoder.c	/^void  h264_encoder_env_init()$/;"	f
h264_encoder_get_bits_per_pixel	server/h264_encoder.c	/^int h264_encoder_get_bits_per_pixel(H264Encoder * encoder)$/;"	f
h264_encoder_get_bytes_per_pixel	server/h264_encoder.c	/^int h264_encoder_get_bytes_per_pixel(H264Encoder * encoder)$/;"	f
h264_encoder_get_stream_info	server/h264_encoder.c	/^void h264_encoder_get_stream_info(H264Encoder * encoder,H264StreamInfo * info)$/;"	f
h264_encoder_h	server/h264_encoder.h	2;"	d
h264_encoder_init	server/h264_encoder.c	/^int h264_encoder_init(H264Encoder * encoder,H264StreamInfo * info)$/;"	f
h264_encoder_new	server/h264_encoder.c	/^H264Encoder * h264_encoder_new()$/;"	f
h264_encoder_reinit	server/h264_encoder.c	/^int h264_encoder_reinit(H264Encoder * encoder,H264StreamInfo * info)$/;"	f
h264_encoder_uninit	server/h264_encoder.c	/^void h264_encoder_uninit(H264Encoder * encoder)$/;"	f
h264_type_h	server/h264_type.h	2;"	d
handle_acks	server/red_channel.h	/^    int handle_acks;$/;"	m	struct:RedChannel
handle_agent_connected	client/red_client.cpp	/^void RedClient::handle_agent_connected(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_agent_data	client/red_client.cpp	/^void RedClient::handle_agent_data(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_agent_disconnected	client/red_client.cpp	/^void RedClient::handle_agent_disconnected(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_agent_tokens	client/red_client.cpp	/^void RedClient::handle_agent_tokens(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_async_done	server/dispatcher.h	/^    dispatcher_handle_async_done handle_async_done;$/;"	m	struct:Dispatcher
handle_back	client/gui/gui.cpp	/^bool PreLoginDialog::handle_back(const CEGUI::EventArgs& e)$/;"	f	class:PreLoginDialog
handle_cancel	client/gui/gui.cpp	/^bool ConnectingDialog::handle_cancel(const CEGUI::EventArgs& e)$/;"	f	class:ConnectingDialog
handle_channels	client/red_client.cpp	/^void RedClient::handle_channels(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_client_fin	client/client_net_socket.cpp	/^void ClientNetSocket::handle_client_fin()$/;"	f	class:ClientNetSocket
handle_close	client/gui/gui.cpp	/^bool SettingsDialog::handle_close(const CEGUI::EventArgs& e)$/;"	f	class:SettingsDialog
handle_compressed_data	client/playback_channel.cpp	/^void PlaybackChannel::handle_compressed_data(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
handle_connect	client/gui/gui.cpp	/^bool LoginDialog::handle_connect(const CEGUI::EventArgs& e)$/;"	f	class:LoginDialog
handle_copy_bits	client/display_channel.cpp	/^void DisplayChannel::handle_copy_bits(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_cursor_hide	client/cursor_channel.cpp	/^void CursorChannel::handle_cursor_hide(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_cursor_move	client/cursor_channel.cpp	/^void CursorChannel::handle_cursor_move(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_cursor_set	client/cursor_channel.cpp	/^void CursorChannel::handle_cursor_set(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_cursor_trail	client/cursor_channel.cpp	/^void CursorChannel::handle_cursor_trail(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_dev_add_memslot	server/red_worker.c	/^void handle_dev_add_memslot(void *opaque, void *payload)$/;"	f
handle_dev_add_memslot_async	server/red_worker.c	/^void handle_dev_add_memslot_async(void *opaque, void *payload)$/;"	f
handle_dev_create_primary_surface	server/red_worker.c	/^void handle_dev_create_primary_surface(void *opaque, void *payload)$/;"	f
handle_dev_create_primary_surface_async	server/red_worker.c	/^void handle_dev_create_primary_surface_async(void *opaque, void *payload)$/;"	f
handle_dev_cursor_channel_create	server/red_worker.c	/^void handle_dev_cursor_channel_create(void *opaque, void *payload)$/;"	f
handle_dev_cursor_connect	server/red_worker.c	/^void handle_dev_cursor_connect(void *opaque, void *payload)$/;"	f
handle_dev_cursor_disconnect	server/red_worker.c	/^void handle_dev_cursor_disconnect(void *opaque, void *payload)$/;"	f
handle_dev_cursor_migrate	server/red_worker.c	/^void handle_dev_cursor_migrate(void *opaque, void *payload)$/;"	f
handle_dev_del_memslot	server/red_worker.c	/^void handle_dev_del_memslot(void *opaque, void *payload)$/;"	f
handle_dev_destroy_primary_surface	server/red_worker.c	/^void handle_dev_destroy_primary_surface(void *opaque, void *payload)$/;"	f
handle_dev_destroy_primary_surface_async	server/red_worker.c	/^void handle_dev_destroy_primary_surface_async(void *opaque, void *payload)$/;"	f
handle_dev_destroy_surface_wait	server/red_worker.c	/^void handle_dev_destroy_surface_wait(void *opaque, void *payload)$/;"	f
handle_dev_destroy_surface_wait_async	server/red_worker.c	/^void handle_dev_destroy_surface_wait_async(void *opaque, void *payload)$/;"	f
handle_dev_destroy_surfaces	server/red_worker.c	/^void handle_dev_destroy_surfaces(void *opaque, void *payload)$/;"	f
handle_dev_destroy_surfaces_async	server/red_worker.c	/^void handle_dev_destroy_surfaces_async(void *opaque, void *payload)$/;"	f
handle_dev_display_channel_create	server/red_worker.c	/^void handle_dev_display_channel_create(void *opaque, void *payload)$/;"	f
handle_dev_display_connect	server/red_worker.c	/^void handle_dev_display_connect(void *opaque, void *payload)$/;"	f
handle_dev_display_disconnect	server/red_worker.c	/^void handle_dev_display_disconnect(void *opaque, void *payload)$/;"	f
handle_dev_display_migrate	server/red_worker.c	/^void handle_dev_display_migrate(void *opaque, void *payload)$/;"	f
handle_dev_driver_unload	server/red_worker.c	/^void handle_dev_driver_unload(void *opaque, void *payload)$/;"	f
handle_dev_flush_surfaces	server/red_worker.c	/^void handle_dev_flush_surfaces(void *opaque, void *payload)$/;"	f
handle_dev_flush_surfaces_async	server/red_worker.c	/^void handle_dev_flush_surfaces_async(void *opaque, void *payload)$/;"	f
handle_dev_input	server/red_worker.c	/^static void handle_dev_input(int fd, int event, void *opaque)$/;"	f	file:
handle_dev_loadvm_commands	server/red_worker.c	/^void handle_dev_loadvm_commands(void *opaque, void *payload)$/;"	f
handle_dev_monitors_config_async	server/red_worker.c	/^static void handle_dev_monitors_config_async(void *opaque, void *payload)$/;"	f	file:
handle_dev_oom	server/red_worker.c	/^void handle_dev_oom(void *opaque, void *payload)$/;"	f
handle_dev_reset_cursor	server/red_worker.c	/^void handle_dev_reset_cursor(void *opaque, void *payload)$/;"	f
handle_dev_reset_image_cache	server/red_worker.c	/^void handle_dev_reset_image_cache(void *opaque, void *payload)$/;"	f
handle_dev_reset_memslots	server/red_worker.c	/^void handle_dev_reset_memslots(void *opaque, void *payload)$/;"	f
handle_dev_set_compression	server/red_worker.c	/^void handle_dev_set_compression(void *opaque, void *payload)$/;"	f
handle_dev_set_mouse_mode	server/red_worker.c	/^void handle_dev_set_mouse_mode(void *opaque, void *payload)$/;"	f
handle_dev_set_streaming_video	server/red_worker.c	/^void handle_dev_set_streaming_video(void *opaque, void *payload)$/;"	f
handle_dev_set_streaming_video_compression	server/red_worker.c	/^void handle_dev_set_streaming_video_compression(void *opaque, void *payload)$/;"	f
handle_dev_start	server/red_worker.c	/^void handle_dev_start(void *opaque, void *payload)$/;"	f
handle_dev_stop	server/red_worker.c	/^void handle_dev_stop(void *opaque, void *payload)$/;"	f
handle_dev_update	server/red_worker.c	/^void handle_dev_update(void *opaque, void *payload)$/;"	f
handle_dev_update_async	server/red_worker.c	/^void handle_dev_update_async(void *opaque, void *payload)$/;"	f
handle_dev_wakeup	server/red_worker.c	/^void handle_dev_wakeup(void *opaque, void *payload)$/;"	f
handle_disconnect	client/gui/gui.cpp	/^bool SettingsDialog::handle_disconnect(const CEGUI::EventArgs& e)$/;"	f	class:SettingsDialog
handle_disconnect	client/red_channel.cpp	/^void RedChannel::handle_disconnect(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_draw_alpha_blend	client/display_channel.cpp	/^void DisplayChannel::handle_draw_alpha_blend(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_blackness	client/display_channel.cpp	/^void DisplayChannel::handle_draw_blackness(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_blend	client/display_channel.cpp	/^void DisplayChannel::handle_draw_blend(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_composite	client/display_channel.cpp	/^void DisplayChannel::handle_draw_composite(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_copy	client/display_channel.cpp	/^void DisplayChannel::handle_draw_copy(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_fill	client/display_channel.cpp	/^void DisplayChannel::handle_draw_fill(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_invers	client/display_channel.cpp	/^void DisplayChannel::handle_draw_invers(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_opaque	client/display_channel.cpp	/^void DisplayChannel::handle_draw_opaque(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_rop3	client/display_channel.cpp	/^void DisplayChannel::handle_draw_rop3(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_stroke	client/display_channel.cpp	/^void DisplayChannel::handle_draw_stroke(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_text	client/display_channel.cpp	/^void DisplayChannel::handle_draw_text(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_transparent	client/display_channel.cpp	/^void DisplayChannel::handle_draw_transparent(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_draw_whiteness	client/display_channel.cpp	/^void DisplayChannel::handle_draw_whiteness(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_error_message	client/smartcard_channel.cpp	/^void SmartCardChannel::handle_error_message(VSCMsgHeader *vheader,$/;"	f	class:SmartCardChannel
handle_init	client/controller.cpp	/^bool ControllerConnection::handle_init(ControllerInit *init)$/;"	f	class:ControllerConnection
handle_init	client/cursor_channel.cpp	/^void CursorChannel::handle_init(RedPeer::InMessage *message)$/;"	f	class:CursorChannel
handle_init	client/foreign_menu.cpp	/^bool ForeignMenuConnection::handle_init(FrgMenuInit *init)$/;"	f	class:ForeignMenuConnection
handle_init	client/inputs_channel.cpp	/^void InputsChannel::handle_init(RedPeer::InMessage* message)$/;"	f	class:InputsChannel
handle_init	client/red_client.cpp	/^void RedClient::handle_init(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_inval_all	client/cursor_channel.cpp	/^void CursorChannel::handle_inval_all(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_inval_all_palettes	client/display_channel.cpp	/^void DisplayChannel::handle_inval_all_palettes(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_inval_all_pixmaps	client/display_channel.cpp	/^void DisplayChannel::handle_inval_all_pixmaps(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_inval_list	client/display_channel.cpp	/^void DisplayChannel::handle_inval_list(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_inval_one	client/cursor_channel.cpp	/^void CursorChannel::handle_inval_one(RedPeer::InMessage* message)$/;"	f	class:CursorChannel
handle_inval_palette	client/display_channel.cpp	/^void DisplayChannel::handle_inval_palette(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_key_press_event	client/x11/red_window.cpp	/^void RedWindow_p::handle_key_press_event(RedWindow& window, XKeyEvent* event)$/;"	f	class:RedWindow_p
handle_list_selection	client/gui/gui.cpp	/^        bool handle_list_selection(const CEGUI::EventArgs& e)$/;"	f	class:SampleTabFactory::SampleTab
handle_mark	client/display_channel.cpp	/^void DisplayChannel::handle_mark(RedPeer::InMessage *message)$/;"	f	class:DisplayChannel
handle_message	client/controller.cpp	/^bool ControllerConnection::handle_message(ControllerMsg *hdr)$/;"	f	class:ControllerConnection
handle_message	client/foreign_menu.cpp	/^bool ForeignMenuConnection::handle_message(FrgMenuMsg *hdr)$/;"	f	class:ForeignMenuConnection
handle_message	client/red_channel.h	/^void MessageHandlerImp<HandlerClass, channel_id>::handle_message(RedPeer::CompoundInMessage&$/;"	f	class:MessageHandlerImp
handle_message	server/red_channel.h	/^    handle_message_proc handle_message;$/;"	m	struct:IncomingHandlerInterface
handle_message	server/snd_worker.c	/^    snd_channel_handle_message_proc handle_message;$/;"	m	struct:SndChannel	file:
handle_message_click	client/gui/gui.cpp	/^void GUI::Dialog::handle_message_click(int id)$/;"	f	class:GUI::Dialog
handle_message_proc	server/red_channel.h	/^typedef int (*handle_message_proc)(void *opaque,$/;"	t
handle_migrate	client/red_channel.cpp	/^void RedChannel::handle_migrate(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_migrate_begin	client/red_client.cpp	/^void RedClient::handle_migrate_begin(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_migrate_cancel	client/red_client.cpp	/^void RedClient::handle_migrate_cancel(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_migrate_data	server/red_channel.h	/^    channel_handle_migrate_data_proc handle_migrate_data;$/;"	m	struct:__anon145
handle_migrate_data_get_serial	server/red_channel.h	/^    channel_handle_migrate_data_get_serial_proc handle_migrate_data_get_serial;$/;"	m	struct:__anon145
handle_migrate_end	client/red_client.cpp	/^void RedClient::handle_migrate_end(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_migrate_flush_mark	server/red_channel.h	/^    channel_handle_migrate_flush_mark_proc handle_migrate_flush_mark;$/;"	m	struct:__anon145
handle_migrate_switch_host	client/red_client.cpp	/^void RedClient::handle_migrate_switch_host(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_mm_time	client/red_client.cpp	/^void RedClient::handle_mm_time(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_mode	client/display_channel.cpp	/^void DisplayChannel::handle_mode(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_mode	client/playback_channel.cpp	/^void PlaybackChannel::handle_mode(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
handle_modifiers	client/inputs_channel.cpp	/^void InputsChannel::handle_modifiers(RedPeer::InMessage* message)$/;"	f	class:InputsChannel
handle_motion_ack	client/inputs_channel.cpp	/^void InputsChannel::handle_motion_ack(RedPeer::InMessage* message)$/;"	f	class:InputsChannel
handle_mouse_mode	client/red_client.cpp	/^void RedClient::handle_mouse_mode(RedPeer::InMessage* message)$/;"	f	class:RedClient
handle_new_display_channel	server/red_worker.c	/^static void handle_new_display_channel(RedWorker *worker, RedClient *client, RedsStream *stream,$/;"	f	file:
handle_notify	client/red_channel.cpp	/^void RedChannel::handle_notify(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_options	client/gui/gui.cpp	/^bool LoginDialog::handle_options(const CEGUI::EventArgs& e)$/;"	f	class:LoginDialog
handle_parsed	server/red_channel.h	/^    handle_parsed_proc handle_parsed;$/;"	m	struct:IncomingHandlerInterface
handle_parsed_proc	server/red_channel.h	/^typedef int (*handle_parsed_proc)(void *opaque, uint32_t size, uint16_t type, void *message);$/;"	t
handle_ping	client/red_channel.cpp	/^void RedChannel::handle_ping(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_quit	client/gui/gui.cpp	/^bool ConnectingDialog::handle_quit(const CEGUI::EventArgs& e)$/;"	f	class:ConnectingDialog
handle_quit	client/gui/gui.cpp	/^bool LoginDialog::handle_quit(const CEGUI::EventArgs& e)$/;"	f	class:LoginDialog
handle_quit	client/gui/gui.cpp	/^bool PreLoginDialog::handle_quit(const CEGUI::EventArgs& e)$/;"	f	class:PreLoginDialog
handle_quit	client/gui/gui.cpp	/^bool SettingsDialog::handle_quit(const CEGUI::EventArgs& e)$/;"	f	class:SettingsDialog
handle_raw_data	client/playback_channel.cpp	/^void PlaybackChannel::handle_raw_data(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
handle_reader_add_response	client/smartcard_channel.cpp	/^void SmartCardChannel::handle_reader_add_response(VSCMsgHeader *vheader,$/;"	f	class:SmartCardChannel
handle_reset	client/cursor_channel.cpp	/^void CursorChannel::handle_reset(RedPeer::InMessage *message)$/;"	f	class:CursorChannel
handle_reset	client/display_channel.cpp	/^void DisplayChannel::handle_reset(RedPeer::InMessage *message)$/;"	f	class:DisplayChannel
handle_selection_notify	client/x11/platform.cpp	/^static void handle_selection_notify(XEvent& event, bool incr)$/;"	f	file:
handle_selection_request	client/x11/platform.cpp	/^static void handle_selection_request()$/;"	f	file:
handle_set_ack	client/red_channel.cpp	/^void RedChannel::handle_set_ack(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_smartcard_data	client/smartcard_channel.cpp	/^void SmartCardChannel::handle_smartcard_data(RedPeer::InMessage* message)$/;"	f	class:SmartCardChannel
handle_start	client/playback_channel.cpp	/^void PlaybackChannel::handle_start(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
handle_start	client/record_channel.cpp	/^void RecordChannel::handle_start(RedPeer::InMessage* message)$/;"	f	class:RecordChannel
handle_stop	client/playback_channel.cpp	/^void PlaybackChannel::handle_stop(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
handle_stop	client/record_channel.cpp	/^void RecordChannel::handle_stop(RedPeer::InMessage* message)$/;"	f	class:RecordChannel
handle_stream_clip	client/display_channel.cpp	/^void DisplayChannel::handle_stream_clip(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_stream_create	client/display_channel.cpp	/^void DisplayChannel::handle_stream_create(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_stream_data	client/display_channel.cpp	/^void DisplayChannel::handle_stream_data(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_stream_destroy	client/display_channel.cpp	/^void DisplayChannel::handle_stream_destroy(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_stream_destroy_all	client/display_channel.cpp	/^void DisplayChannel::handle_stream_destroy_all(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_surface_create	client/display_channel.cpp	/^void DisplayChannel::handle_surface_create(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_surface_destroy	client/display_channel.cpp	/^void DisplayChannel::handle_surface_destroy(RedPeer::InMessage* message)$/;"	f	class:DisplayChannel
handle_targets_notify	client/x11/platform.cpp	/^static void handle_targets_notify(XEvent& event, bool incr)$/;"	f	file:
handle_timer_update	client/display_channel.cpp	/^uint32_t VideoStream::handle_timer_update(uint32_t now)$/;"	f	class:VideoStream
handle_update_mark	client/display_channel.cpp	/^void VideoStream::handle_update_mark(uint64_t update_mark)$/;"	f	class:VideoStream
handle_wait_for_channels	client/red_channel.cpp	/^void RedChannel::handle_wait_for_channels(RedPeer::InMessage* message)$/;"	f	class:RedChannel
handle_x_error	client/x11/platform.cpp	/^static Bool handle_x_error = false;$/;"	v	file:
handle_x_errors_start	client/x11/platform.cpp	/^static void handle_x_errors_start(void)$/;"	f	file:
handle_x_errors_stop	client/x11/platform.cpp	/^static int handle_x_errors_stop(void)$/;"	f	file:
handler	server/dispatcher.h	/^    dispatcher_handle_message handler;$/;"	m	struct:DispatcherMessage
has_attr	spice-common/python_modules/ptypes.py	/^    def has_attr(self, name):$/;"	m	class:Containee
has_attr	spice-common/python_modules/ptypes.py	/^    def has_attr(self, name):$/;"	m	class:Type
has_automated_tests	server/tests/test_display_base.c	/^static int has_automated_tests = 0; \/\/automated test flag$/;"	v	file:
has_console	client/windows/platform.cpp	/^static bool has_console = false;$/;"	v	file:
has_end_attr	spice-common/python_modules/ptypes.py	/^    def has_end_attr(self):$/;"	m	class:Containee
has_minor_attr	spice-common/python_modules/ptypes.py	/^    def has_minor_attr(self):$/;"	m	class:Containee
has_monitor	client/screen.h	/^    bool has_monitor() { return _monitor != 0;}$/;"	f	class:RedScreen
has_name	spice-common/python_modules/ptypes.py	/^    def has_name(self):$/;"	m	class:Type
has_option	spice-common/python_modules/codegen.py	/^    def has_option(self, opt):$/;"	m	class:CodeWriter
has_secondary	server/tests/test_display_base.h	/^    int has_secondary;$/;"	m	struct:Test
has_shadow	server/red_worker.c	/^static inline int has_shadow(RedDrawable *drawable)$/;"	f	file:
has_switch_member	spice-common/python_modules/ptypes.py	/^    def has_switch_member(self, member):$/;"	m	class:Switch
hash_table	server/red_worker.c	/^    NewCacheItem *hash_table[BITS_CACHE_HASH_SIZE];$/;"	m	struct:PixmapCache	file:
hash_table	server/spice_image_cache.h	/^    ImageCacheItem *hash_table[IMAGE_CACHE_HASH_SIZE];$/;"	m	struct:ImageCache
hbitmap	spice-common/common/gdi_canvas.c	/^    HBITMAP hbitmap;$/;"	m	struct:BitmapData	file:
head_image_segs	spice-common/common/lz.c	/^    LzImageSegment *head_image_segs;$/;"	m	struct:Encoder	file:
header	client/cursor.h	/^    const SpiceCursorHeader& header() const { return _header;}$/;"	f	class:CursorData
header	client/red_peer.h	/^    SpiceDataHeader& header() { return *(SpiceDataHeader *)base();}$/;"	f	class:RedPeer::OutMessage
header	server/red_channel.h	/^        SpiceDataHeaderOpaque header;$/;"	m	struct:RedChannelClient::__anon148
header	server/red_channel.h	/^    SpiceDataHeaderOpaque header;$/;"	m	struct:IncomingHandler
header	server/red_worker.c	/^    SpiceMsgWaitForChannels header;$/;"	m	struct:WaitForChannels	file:
header	server/reds-private.h	/^    VDAgentMessage header;$/;"	m	struct:VDInternalBuf
header	spice-common/common/messages.h	/^    SpiceCursorHeader header;$/;"	m	struct:SpiceCursor
header	spice-common/common/messages.h	/^    VSCMsgHeader header;$/;"	m	struct:SpiceMsgcSmartcard
header	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLCursorHeader header;$/;"	m	struct:QXLCursor
header_buf	server/red_channel.h	/^    uint8_t header_buf[MAX_HEADER_SIZE];$/;"	m	struct:IncomingHandler
header_data	server/red_channel.h	/^            uint8_t *header_data;$/;"	m	struct:RedChannelClient::__anon148::__anon149
header_pos	server/red_channel.h	/^    uint32_t header_pos;$/;"	m	struct:IncomingHandler
header_size	server/red_channel.h	/^    uint16_t header_size;$/;"	m	struct:SpiceDataHeaderOpaque
heads	server/red_worker.c	/^    QXLHead heads[0];$/;"	m	struct:MonitorsConfig	file:
heads	spice-common/common/messages.h	/^    SpiceHead heads[0];$/;"	m	struct:SpiceMsgDisplayMonitorsConfig
heads	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLURect heads[64];$/;"	m	struct:QXLRom::__anon69
heads	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLHead heads[0];$/;"	m	struct:QXLMonitorsConfig
height	client/glz_decoder.h	/^        int height;$/;"	m	struct:GlzDecoder::__anon112
height	client/red_types.h	/^    int height;$/;"	m	struct:IconHeader
height	client/red_types.h	/^    int height;$/;"	m	struct:PixmapHeader
height	client/x11/images/alt_image.c	/^        int height;$/;"	m	struct:__anon122	file:
height	client/x11/images/red_icon.c	/^    int height;$/;"	m	struct:__anon123	file:
height	client/x11/pixels_source_p.h	/^            int width, height;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
height	client/x11/pixels_source_p.h	/^            int width, height;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
height	server/h264_type.h	/^    int height;$/;"	m	struct:_H264StreamInfo
height	server/jpeg_encoder.c	/^        int height;$/;"	m	struct:JpegEncoder::__anon167	file:
height	server/red_parse_qxl.h	/^    uint32_t height;$/;"	m	struct:RedSurfaceCreate
height	server/red_worker.c	/^    int height;$/;"	m	struct:ImageItem	file:
height	server/red_worker.c	/^    int height;$/;"	m	struct:ItemTrace	file:
height	server/red_worker.c	/^    int height;$/;"	m	struct:Stream	file:
height	server/red_worker.c	/^    uint32_t height;$/;"	m	struct:DrawContext	file:
height	server/spice.h	/^    uint32_t height;$/;"	m	struct:QXLDevSurfaceCreate
height	server/tests/test_display_base.h	/^    int height;$/;"	m	struct:Test
height	server/tests/test_display_base.h	/^    uint32_t height;$/;"	m	struct:CommandCreatePrimary
height	server/tests/test_display_base.h	/^    uint32_t height;$/;"	m	struct:CommandCreateSurface
height	spice-common/common/canvas_base.c	/^    int height;$/;"	m	struct:CanvasBase	file:
height	spice-common/common/draw.h	/^    uint16_t height;$/;"	m	struct:SpiceCursorHeader
height	spice-common/common/draw.h	/^    uint16_t height;$/;"	m	struct:SpiceRasterGlyph
height	spice-common/common/draw.h	/^    uint32_t height;$/;"	m	struct:SpiceImageDescriptor
height	spice-common/common/glc.c	/^    int height;$/;"	m	struct:FillMaskInfo	file:
height	spice-common/common/glc.c	/^    int height;$/;"	m	struct:InternaCtx	file:
height	spice-common/common/glc.c	/^    int height;$/;"	m	struct:InternalPat	file:
height	spice-common/common/glc.h	/^    double height;$/;"	m	struct:GLCRect
height	spice-common/common/glc.h	/^    int height;$/;"	m	struct:GLCPImage
height	spice-common/common/glc.h	/^    int height;$/;"	m	struct:GLCRecti
height	spice-common/common/lines.c	/^    int height;                 \/* number of scanlines to process *\/$/;"	m	struct:_PolyEdge	file:
height	spice-common/common/lines.h	/^    int height;$/;"	m	struct:lineGC
height	spice-common/common/lz.c	/^    int height;$/;"	m	struct:Encoder	file:
height	spice-common/common/messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayHead
height	spice-common/common/messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgDisplayStreamDataSized
height	spice-common/common/messages.h	/^    uint32_t height;$/;"	m	struct:SpiceMsgSurfaceCreate
height	spice-common/common/quic.c	/^    unsigned int height;$/;"	m	struct:Encoder	file:
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t height;$/;"	m	struct:QXLCursorHeader
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t height;$/;"	m	struct:QXLRasterGlyph
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t height;$/;"	m	struct:QXLHead
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t height;$/;"	m	struct:QXLImageDescriptor
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t height;$/;"	m	struct:QXLSurface
height	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t height;$/;"	m	struct:QXLSurfaceCreate
height	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t height;$/;"	m	struct:VDAgentMonConfig
height_powed	client/x11/pixels_source_p.h	/^            int width_powed, height_powed;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
heigth	server/spice.h	/^    uint32_t heigth;$/;"	m	struct:QXLDrawArea
help	client/cmd_line_parser.h	/^        std::string help;$/;"	m	class:CmdLineParser::Option
help	spice-common/spice_codegen.py	/^                  help="Assert on error")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate Wireshark dissector definitions")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate demarshallers")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate header")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate message marshallers")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate private message marshallers")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Generate struct marshallers")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Include FILE in generated code")$/;"	v
help	spice-common/spice_codegen.py	/^                  help="Print errors")$/;"	v
hide	client/application.cpp	/^void Application::hide()$/;"	f	class:Application
hide	client/screen.cpp	/^void RedScreen::hide()$/;"	f	class:RedScreen
hide	client/windows/red_window.cpp	/^void RedWindow::hide()$/;"	f	class:RedWindow
hide	client/x11/red_window.cpp	/^void RedWindow::hide()$/;"	f	class:RedWindow
hide_cursor	client/display_channel.cpp	/^void DisplayChannel::hide_cursor()$/;"	f	class:DisplayChannel
hide_cursor	client/screen.cpp	/^void RedScreen::hide_cursor()$/;"	f	class:RedScreen
hide_cursor	client/windows/red_window.cpp	/^void RedWindow::hide_cursor()$/;"	f	class:RedWindow
hide_cursor	client/x11/red_window.cpp	/^void RedWindow::hide_cursor()$/;"	f	class:RedWindow
hide_gui	client/application.cpp	/^void Application::hide_gui()$/;"	f	class:Application
hide_info_layer	client/application.cpp	/^void Application::hide_info_layer()$/;"	f	class:Application
hide_me	client/application.cpp	/^void Application::hide_me()$/;"	f	class:Application
hit	server/red_client_shared_cache.h	/^static int FUNC_NAME(hit)(CACHE *cache, uint64_t id, int *lossy, DisplayChannelClient *dcc)$/;"	f
hold_item	server/red_channel.h	/^    channel_hold_pipe_item_proc hold_item;$/;"	m	struct:__anon145
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	client/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	client/red_client.cpp	/^    char host[0];$/;"	m	struct:OldRedMigrationBegin	file:
host	docs/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	docs/manual/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	server/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	server/reds.h	/^    char *host;$/;"	m	struct:RedsMigSpice
host	server/tests/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	spice-common/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	spice-common/common/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	spice-common/python_modules/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	client/Makefile	/^host_alias = $/;"	m
host_alias	docs/Makefile	/^host_alias = $/;"	m
host_alias	docs/manual/Makefile	/^host_alias = $/;"	m
host_alias	server/Makefile	/^host_alias = $/;"	m
host_alias	server/tests/Makefile	/^host_alias = $/;"	m
host_alias	spice-common/Makefile	/^host_alias = $/;"	m
host_alias	spice-common/common/Makefile	/^host_alias = $/;"	m
host_alias	spice-common/python_modules/Makefile	/^host_alias = $/;"	m
host_alias	spice-common/spice-protocol/Makefile	/^host_alias = $/;"	m
host_alias	spice-common/spice-protocol/spice/Makefile	/^host_alias = $/;"	m
host_auth	client/red_peer.h	/^        HostAuthOptions host_auth; \/\/ for secure connection$/;"	m	class:RedPeer::ConnectionOptions
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	client/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	docs/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	docs/manual/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	server/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	server/tests/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	spice-common/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	spice-common/common/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	spice-common/python_modules/Makefile	/^host_cpu = x86_64$/;"	m
host_data	spice-common/common/messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMigrationDstInfo
host_data	spice-common/common/messages.h	/^    uint8_t *host_data;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	client/Makefile	/^host_os = linux-gnu$/;"	m
host_os	docs/Makefile	/^host_os = linux-gnu$/;"	m
host_os	docs/manual/Makefile	/^host_os = linux-gnu$/;"	m
host_os	server/Makefile	/^host_os = linux-gnu$/;"	m
host_os	server/tests/Makefile	/^host_os = linux-gnu$/;"	m
host_os	spice-common/Makefile	/^host_os = linux-gnu$/;"	m
host_os	spice-common/common/Makefile	/^host_os = linux-gnu$/;"	m
host_os	spice-common/python_modules/Makefile	/^host_os = linux-gnu$/;"	m
host_pubkey	client/red_peer.h	/^        PublicKey host_pubkey;$/;"	m	class:RedPeer::HostAuthOptions
host_size	spice-common/common/messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMigrationDstInfo
host_size	spice-common/common/messages.h	/^    uint32_t host_size;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
host_subject	client/red_peer.h	/^        std::string host_subject;$/;"	m	class:RedPeer::HostAuthOptions
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	client/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	docs/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	docs/manual/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	server/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	server/tests/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	spice-common/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	spice-common/common/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	spice-common/python_modules/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vendor	client/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	docs/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	docs/manual/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	server/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	server/tests/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	spice-common/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	spice-common/common/Makefile	/^host_vendor = unknown$/;"	m
host_vendor	spice-common/python_modules/Makefile	/^host_vendor = unknown$/;"	m
hostname	spice-common/common/ssl_verify.h	/^    char                *hostname;$/;"	m	struct:__anon4
hot_spot_x	spice-common/common/draw.h	/^    uint16_t hot_spot_x;$/;"	m	struct:SpiceCursorHeader
hot_spot_x	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t hot_spot_x;$/;"	m	struct:QXLCursorHeader
hot_spot_y	spice-common/common/draw.h	/^    uint16_t hot_spot_y;$/;"	m	struct:SpiceCursorHeader
hot_spot_y	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t hot_spot_y;$/;"	m	struct:QXLCursorHeader
htab	server/glz_encoder_dictionary_protected.h	/^    HashEntry htab[HASH_SIZE];$/;"	m	struct:SharedDictionary
htab	server/glz_encoder_dictionary_protected.h	/^    HashEntry htab[HASH_SIZE][HASH_CHAIN_SIZE];$/;"	m	struct:SharedDictionary
htab	spice-common/common/lz.c	/^    HashEntry htab[HASH_SIZE];$/;"	m	struct:Encoder	file:
htab_counter	server/glz_encoder_dictionary_protected.h	/^    uint8_t htab_counter[HASH_SIZE];  \/\/cyclic counter for the next entry in a chain to be assigned$/;"	m	struct:SharedDictionary
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	client/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	docs/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	docs/manual/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	server/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	server/tests/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	spice-common/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	spice-common/common/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	spice-common/python_modules/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	spice-common/spice-protocol/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	spice-common/spice-protocol/spice/Makefile	/^htmldir = ${docdir}$/;"	m
icon	client/x11/res.cpp	/^    const IconHeader* icon;$/;"	m	struct:ResIcon	file:
id	client/cache.hpp	/^        uint64_t id;$/;"	m	class:Cache::Item
id	client/client_net_socket.h	/^    inline uint16_t id() {return _id;}$/;"	f	class:ClientNetSocket
id	client/cmd_line_parser.h	/^        int id;$/;"	m	class:CmdLineParser::Option
id	client/glz_decoder.h	/^        uint64_t id;$/;"	m	struct:GlzDecoder::__anon112
id	client/gui/gui.h	/^        int id;$/;"	m	struct:GUI::ButtonInfo
id	client/gui/resource_provider.cpp	/^    int id;$/;"	m	struct:ResString	file:
id	client/playback_channel.cpp	/^    uint32_t id;$/;"	m	struct:ChunkHeader	file:
id	client/shared_cache.hpp	/^        uint64_t id;$/;"	m	class:SharedCache::Item
id	client/x11/res.cpp	/^    int id;$/;"	m	struct:ResIcon	file:
id	client/x11/res.cpp	/^    int id;$/;"	m	struct:ResImage	file:
id	server/glz_encoder.c	/^        uint32_t id;$/;"	m	struct:Encoder::__anon202	file:
id	server/glz_encoder.c	/^    uint8_t id;$/;"	m	struct:Encoder	file:
id	server/glz_encoder_dictionary_protected.h	/^    uint64_t id;$/;"	m	struct:WindowImage
id	server/migration_protocol.h	/^    uint32_t id;$/;"	m	struct:MigrateDisplaySurfaceLossless
id	server/migration_protocol.h	/^    uint32_t id;$/;"	m	struct:MigrateDisplaySurfaceLossy
id	server/red_channel.h	/^    int id; \/\/ debugging purposes$/;"	m	struct:RedChannelClient
id	server/red_channel.h	/^    uint32_t id;$/;"	m	struct:RedChannel
id	server/red_channel.h	/^    uint32_t id;$/;"	m	struct:RedChannelClientLatencyMonitor
id	server/red_dispatcher.c	/^    int id;$/;"	m	struct:RendererInfo	file:
id	server/red_worker.c	/^    int id;$/;"	m	struct:RedWorker	file:
id	server/red_worker.c	/^    uint32_t id;$/;"	m	struct:CommonChannelClient	file:
id	server/red_worker.c	/^    uint32_t id;$/;"	m	struct:TreeItem	file:
id	server/red_worker.c	/^    uint64_t id; \/\/ surface id or cache item id$/;"	m	struct:BitmapData	file:
id	server/red_worker.c	/^    uint64_t id;$/;"	m	struct:CacheItem	file:
id	server/red_worker.c	/^    uint64_t id;$/;"	m	struct:NewCacheItem	file:
id	server/red_worker.c	/^    uint8_t id;$/;"	m	struct:GlzSharedDictionary	file:
id	server/red_worker.c	/^    uint8_t id;$/;"	m	struct:PixmapCache	file:
id	server/red_worker.h	/^    int id;$/;"	m	struct:WorkerInitData
id	server/spice.h	/^    int                id;$/;"	m	struct:QXLInstance
id	server/spice.h	/^    int id;$/;"	m	struct:SpiceChannelEventInfo
id	server/spice_image_cache.h	/^    uint64_t id;$/;"	m	struct:ImageCacheItem
id	spice-common/common/draw.h	/^    uint64_t id;$/;"	m	struct:SpiceImageDescriptor
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayHead
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamClip
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamCreate
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgDisplayStreamDestroy
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgPing
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceMsgcTunnelRemoveService
id	spice-common/common/messages.h	/^    uint32_t id;$/;"	m	struct:SpiceStreamDataHeader
id	spice-common/common/messages.h	/^    uint64_t id;$/;"	m	struct:SpiceMsgDisplayInvalOne
id	spice-common/common/messages.h	/^    uint64_t id;$/;"	m	struct:SpiceResourceID
id	spice-common/common/messages.h	/^    uint8_t id;$/;"	m	struct:SpiceChannelId
id	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t id;$/;"	m	struct:ControllerMsg
id	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t id;$/;"	m	struct:FrgMenuAddItem
id	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t id;$/;"	m	struct:FrgMenuEvent
id	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t id;$/;"	m	struct:FrgMenuMsg
id	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t id;$/;"	m	struct:FrgMenuRmItem
id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t id;$/;"	m	struct:QXLHead
id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t id;$/;"	m	struct:QXLMode
id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t id;$/;"	m	struct:QXLRom
id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t id;      \/\/ in$/;"	m	union:QXLReleaseInfo
id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t id;$/;"	m	struct:QXLImageDescriptor
id	spice-common/spice-protocol/spice/qxl_dev.h	/^  QXLImageID id;$/;"	m	union:__anon81
id	spice-common/spice-protocol/spice/vd_agent.h	/^   uint32_t id;$/;"	m	struct:VDAgentFileXferDataMessage
id	spice-common/spice-protocol/spice/vd_agent.h	/^   uint32_t id;$/;"	m	struct:VDAgentFileXferStartMessage
id	spice-common/spice-protocol/spice/vd_agent.h	/^   uint32_t id;$/;"	m	struct:VDAgentFileXferStatusMessage
id_alloc	server/red_worker.c	/^    uint32_t id_alloc; \/\/ bitfield. TODO - use this instead of shift scheme.$/;"	m	struct:CommonChannel	file:
idle	client/gui/gui.cpp	/^void GUI::idle()$/;"	f	class:GUI
if_block	spice-common/python_modules/codegen.py	/^    def if_block(self, check, elseif=False, newline=True):$/;"	m	class:CodeWriter
ifdef	spice-common/python_modules/codegen.py	/^    def ifdef(self, name):$/;"	m	class:CodeWriter
ifdef_else	spice-common/python_modules/codegen.py	/^    def ifdef_else(self, name):$/;"	m	class:CodeWriter
ignore_sigpipe	server/tests/basic_event_loop.c	/^static void ignore_sigpipe(void)$/;"	f	file:
image	client/x11/res.cpp	/^    const PixmapHeader* image;$/;"	m	struct:ResImage	file:
image	server/glz_encoder_dictionary_protected.h	/^    WindowImage     *image;$/;"	m	struct:WindowImageSegment
image	server/spice_image_cache.h	/^    pixman_image_t *image;$/;"	m	struct:ImageCacheItem
image	server/tests/test_display_base.c	/^    QXLImage image;$/;"	m	struct:SimpleSpiceUpdate	file:
image	spice-common/common/sw_canvas.c	/^    pixman_image_t *image;$/;"	m	struct:SwCanvas	file:
image_cache	server/red_worker.c	/^    ImageCache image_cache;$/;"	m	struct:RedWorker	file:
image_cache_aging	server/spice_image_cache.c	/^void image_cache_aging(ImageCache *cache)$/;"	f
image_cache_find	server/spice_image_cache.c	/^static ImageCacheItem *image_cache_find(ImageCache *cache, uint64_t id)$/;"	f	file:
image_cache_get	server/spice_image_cache.c	/^static pixman_image_t *image_cache_get(SpiceImageCache *spice_cache, uint64_t id)$/;"	f	file:
image_cache_hit	server/spice_image_cache.c	/^int image_cache_hit(ImageCache *cache, uint64_t id)$/;"	f
image_cache_init	server/spice_image_cache.c	/^void image_cache_init(ImageCache *cache)$/;"	f
image_cache_put	server/spice_image_cache.c	/^static void image_cache_put(SpiceImageCache *spice_cache, uint64_t id, pixman_image_t *image)$/;"	f	file:
image_cache_remove	server/spice_image_cache.c	/^static void image_cache_remove(ImageCache *cache, ImageCacheItem *item)$/;"	f	file:
image_cache_reset	server/spice_image_cache.c	/^void image_cache_reset(ImageCache *cache)$/;"	f
image_compression	server/red_dispatcher.h	/^    spice_image_compression_t image_compression;$/;"	m	struct:RedWorkerMessageSetCompression
image_compression	server/red_worker.c	/^    spice_image_compression_t image_compression;$/;"	m	struct:RedWorker	file:
image_compression	server/red_worker.h	/^    spice_image_compression_t image_compression;$/;"	m	struct:WorkerInitData
image_compression	server/reds.c	/^spice_image_compression_t image_compression = SPICE_IMAGE_COMPRESS_AUTO_GLZ;$/;"	v
image_flags	server/red_worker.c	/^    uint32_t image_flags;$/;"	m	struct:ImageItem	file:
image_format	server/red_worker.c	/^    int image_format;$/;"	m	struct:ImageItem	file:
image_has_palette_to_cache	spice-common/common/canvas_base.c	/^static int image_has_palette_to_cache(SpiceImage *image)$/;"	f	file:
image_seg	spice-common/common/lz.c	/^    LzImageSegment    *image_seg;$/;"	m	struct:HashEntry	file:
image_seg_idx	server/glz_encoder_dictionary_protected.h	/^    uint32_t image_seg_idx;$/;"	m	struct:HashEntry
image_surface_init	server/red_worker.c	/^static void image_surface_init(RedWorker *worker)$/;"	f	file:
image_surfaces	server/red_worker.c	/^    SpiceImageSurfaces image_surfaces;$/;"	m	struct:RedWorker	file:
image_surfaces_get	server/red_worker.c	/^static SpiceCanvas *image_surfaces_get(SpiceImageSurfaces *surfaces,$/;"	f	file:
image_types	client/windows/platform.cpp	/^static ImageType image_types[] = {$/;"	v	file:
in_bytes	server/red_channel.h	/^    uint32_t in_bytes;$/;"	m	struct:RedChannelClientConnectivityMonitor
in_proc	client/windows/record.cpp	/^static void CALLBACK in_proc(HWAVEIN handle, UINT msg, DWORD user_data, DWORD param1,$/;"	f	file:
in_progress	server/snd_worker.c	/^    AudioFrame *in_progress;$/;"	m	struct:PlaybackChannel	file:
inbuffer	server/reds_stream.c	/^    SpiceBuffer inbuffer;$/;"	m	struct:RedsSASL	file:
inc_change_ref	client/x11/platform.cpp	/^    static void inc_change_ref() { Monitor::self_monitors_change++;}$/;"	f	class:XMonitor
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	client/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	docs/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	docs/manual/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	server/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	server/tests/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	spice-common/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	spice-common/common/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	spice-common/python_modules/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	spice-common/spice-protocol/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	spice-common/spice-protocol/spice/Makefile	/^includedir = ${prefix}\/include$/;"	m
incoming	server/red_channel.h	/^    IncomingHandler incoming;$/;"	m	struct:RedChannelClient
incoming_cb	server/red_channel.h	/^    IncomingHandlerInterface incoming_cb;$/;"	m	struct:RedChannel
incr_atom	client/x11/platform.cpp	/^static Atom incr_atom;$/;"	v	file:
increment	spice-common/python_modules/codegen.py	/^    def increment(self, var, val):$/;"	m	class:CodeWriter
increment_identifier	spice-common/python_modules/codegen.py	/^def increment_identifier(idf):$/;"	f
indent	spice-common/python_modules/codegen.py	/^    def indent(self):$/;"	m	class:CodeWriter
index	client/x11/platform.cpp	/^    int index;$/;"	m	class:ModeInfo	file:
index	client/x11/platform.cpp	/^    int index;$/;"	m	class:SizeInfo	file:
index	spice-common/python_modules/codegen.py	/^    def index(self, no_block = False):$/;"	m	class:CodeWriter
inet_aton	client/windows/platform_utils.cpp	/^int inet_aton(const char* ip, struct in_addr* in_addr)$/;"	f
inet_aton	spice-common/common/ssl_verify.c	/^static int inet_aton(const char* ip, struct in_addr* in_addr)$/;"	f	file:
info	client/canvas.h	/^    virtual void info(const std::string& str)$/;"	f	class:GlzDecoderCanvasDebug
info	client/red_client.h	/^    virtual void info(const std::string& str)$/;"	f	class:GlzDecoderWindowDebug
info	client/x11/platform.cpp	/^    XRRModeInfo* info;$/;"	m	class:ModeInfo	file:
info	server/glz_encoder_config.h	/^    SPICE_GNUC_PRINTF(2, 3) void (*info)(GlzEncoderUsrContext *usr, const char *fmt, ...);$/;"	m	struct:GlzEncoderUsrContext
info	server/main_dispatcher.c	/^    SpiceChannelEventInfo *info;$/;"	m	struct:MainDispatcherChannelEventMessage	file:
info	server/reds_stream.c	/^    SpiceChannelEventInfo* info;$/;"	m	struct:RedsStreamPrivate	file:
info	spice-common/common/lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext
info	spice-common/common/quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*info)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext
info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo *info;$/;"	m	struct:QXLReleaseInfoExt
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	client/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	docs/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	docs/manual/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	server/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	server/tests/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	spice-common/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	spice-common/common/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	spice-common/python_modules/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	spice-common/spice-protocol/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	spice-common/spice-protocol/spice/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::init()$/;"	f	class:GlzDecoderWindow
init	client/windows/platform.cpp	/^void Platform::init()$/;"	f	class:Platform
init	client/windows/red_window.cpp	/^void RedWindow::init()$/;"	f	class:RedWindow
init	client/x11/platform.cpp	/^void Platform::init()$/;"	f	class:Platform
init	client/x11/playback.cpp	/^bool WavePlayer::init(uint32_t samples_per_sec,$/;"	f	class:WavePlayer
init	client/x11/record.cpp	/^bool WaveRecorder::init(uint32_t samples_per_sec,$/;"	f	class:WaveRecorder
init	client/x11/red_window.cpp	/^void RedWindow::init()$/;"	f	class:RedWindow
init	spice-common/common/glc.c	/^static int init(InternaCtx *ctx, int width, int height)$/;"	f	file:
init_XIM	client/x11/platform.cpp	/^static void init_XIM()$/;"	f	file:
init_automated	server/tests/test_display_base.c	/^void init_automated()$/;"	f
init_cegui	client/gui/gui.cpp	/^void GUI::init_cegui()$/;"	f	class:GUI
init_channel	spice-common/common/quic.c	/^static int init_channel(Encoder *encoder, Channel *channel)$/;"	f	file:
init_decode_io	spice-common/common/quic.c	/^static inline void init_decode_io(Encoder *encoder)$/;"	f	file:
init_encoder	spice-common/common/lz.c	/^static int init_encoder(Encoder *encoder, LzUsrContext *usr)$/;"	f	file:
init_encoder	spice-common/common/quic.c	/^static int init_encoder(Encoder *encoder, QuicUsrContext *usr)$/;"	f	file:
init_escape_scan_code	client/inputs_channel.cpp	/^void InputsChannel::init_escape_scan_code(int index)$/;"	f	class:InputsChannel
init_evdev_map	client/x11/red_window.cpp	/^static void init_evdev_map()$/;"	f	file:
init_globals	client/application.cpp	/^void Application::init_globals()$/;"	f	class:Application
init_globals	client/inputs_channel.cpp	/^static InitGlobals init_globals;$/;"	v	file:
init_guest_display	client/red_client.cpp	/^bool RedClient::init_guest_display()$/;"	f	class:RedClient
init_kbd	client/x11/platform.cpp	/^static void init_kbd()$/;"	f	file:
init_kbd_map	client/x11/red_window.cpp	/^static void init_kbd_map()$/;"	f	file:
init_key_map	client/x11/red_window.cpp	/^static void init_key_map()$/;"	f	file:
init_key_table_0x00	client/x11/red_window.cpp	/^static void init_key_table_0x00()$/;"	f	file:
init_key_table_0xfe	client/x11/red_window.cpp	/^static void init_key_table_0xfe()$/;"	f	file:
init_key_table_0xff	client/x11/red_window.cpp	/^static void init_key_table_0xff()$/;"	f	file:
init_korean_scan_code	client/inputs_channel.cpp	/^void InputsChannel::init_korean_scan_code(int index)$/;"	f	class:InputsChannel
init_logger	client/application.cpp	/^void Application::init_logger()$/;"	f	class:Application
init_mem_destination	server/mjpeg_encoder.c	/^static void init_mem_destination(j_compress_ptr cinfo)$/;"	f	file:
init_menu	client/application.cpp	/^void Application::init_menu()$/;"	f	class:Application
init_model_structures	spice-common/common/quic.c	/^static int init_model_structures(Encoder *encoder, FamilyStat *family_stat,$/;"	f	file:
init_monitors	client/application.cpp	/^void Application::init_monitors()$/;"	f	class:Application
init_monitors	client/windows/platform.cpp	/^const MonitorsList& Platform::init_monitors()$/;"	f	class:Platform
init_monitors	client/x11/platform.cpp	/^const MonitorsList& Platform::init_monitors()$/;"	f	class:Platform
init_pattern	spice-common/common/glc.c	/^static inline void init_pattern(InternalPat *pat, int x_orign, int y_orign, const GLCImage *image)$/;"	f	file:
init_pause_scan_code	client/inputs_channel.cpp	/^void InputsChannel::init_pause_scan_code()$/;"	f	class:InputsChannel
init_pixels	client/cursor_channel.cpp	/^void ColorCursor::init_pixels(const SpiceCursorHeader& header, const uint8_t* pixels,$/;"	f	class:ColorCursor
init_platform_globals	client/application.cpp	/^void Application::init_platform_globals()$/;"	f	class:Application
init_remainder	client/application.cpp	/^void Application::init_remainder()$/;"	f	class:Application
init_ring	client/windows/playback.cpp	/^void WavePlayer::init_ring(uint32_t sample_bytes)$/;"	f	class:WavePlayer
init_ring	client/windows/record.cpp	/^void WaveRecorder::init_ring(uint32_t samples_per_sec, uint32_t frame_bytes, uint32_t frame_align)$/;"	f	class:WaveRecorder
init_scan_code	client/inputs_channel.cpp	/^void InputsChannel::init_scan_code(int index)$/;"	f	class:InputsChannel
init_scan_table	client/inputs_channel.cpp	/^void InputsChannel::init_scan_table()$/;"	f	class:InputsChannel
init_sent	server/main_channel.c	/^    int init_sent;$/;"	m	struct:MainChannelClient	file:
init_source	client/mjpeg_decoder.cpp	/^    static void init_source(j_decompress_ptr cinfo)$/;"	f	file:
init_vcard_local_certs	client/smartcard_channel.cpp	/^static VCardEmulError init_vcard_local_certs(const char* dbname, const char* cert1,$/;"	f	file:
init_vd_agent_resources	server/reds.c	/^static void init_vd_agent_resources(void)$/;"	f	file:
init_version_string	client/windows/main.cpp	/^static void init_version_string()$/;"	f	file:
init_wave	client/playback_channel.cpp	/^static void init_wave()$/;"	f	file:
init_winsock	client/windows/main.cpp	/^static void init_winsock()$/;"	f	file:
init_xfixes	client/x11/platform.cpp	/^static void init_xfixes()$/;"	f	file:
init_xinerama	client/x11/platform.cpp	/^static void init_xinerama()$/;"	f	file:
init_xinerama_screens	client/x11/platform.cpp	/^static XineramaScreenInfo* init_xinerama_screens(int* num_xin_screens)$/;"	f	file:
init_xrandr	client/x11/platform.cpp	/^static void init_xrandr()$/;"	f	file:
init_xrender	client/x11/platform.cpp	/^static void init_xrender()$/;"	f	file:
init_zeroLUT	spice-common/common/quic.c	/^static void init_zeroLUT(void)$/;"	f	file:
input	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDIPortRing input;$/;"	m	struct:VDIPortRam
input_fps	server/red_worker.c	/^    uint32_t input_fps;$/;"	m	struct:Stream	file:
input_fps_timer	server/red_worker.c	/^    SpiceTimer *input_fps_timer;$/;"	m	struct:Stream	file:
input_fps_timer_start	server/red_worker.c	/^    uint64_t input_fps_timer_start;$/;"	m	struct:Stream	file:
inputs_channel_alloc_msg_rcv_buf	server/inputs_channel.c	/^static uint8_t *inputs_channel_alloc_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
inputs_channel_config_socket	server/inputs_channel.c	/^static int inputs_channel_config_socket(RedChannelClient *rcc)$/;"	f	file:
inputs_channel_handle_migrate_data	server/inputs_channel.c	/^static int inputs_channel_handle_migrate_data(RedChannelClient *rcc,$/;"	f	file:
inputs_channel_handle_migrate_flush_mark	server/inputs_channel.c	/^static int inputs_channel_handle_migrate_flush_mark(RedChannelClient *rcc)$/;"	f	file:
inputs_channel_handle_parsed	server/inputs_channel.c	/^static int inputs_channel_handle_parsed(RedChannelClient *rcc, uint32_t size, uint16_t type,$/;"	f	file:
inputs_channel_hold_pipe_item	server/inputs_channel.c	/^static void inputs_channel_hold_pipe_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
inputs_channel_on_disconnect	server/inputs_channel.c	/^static void inputs_channel_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
inputs_channel_release_msg_rcv_buf	server/inputs_channel.c	/^static void inputs_channel_release_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
inputs_channel_release_pipe_item	server/inputs_channel.c	/^static void inputs_channel_release_pipe_item(RedChannelClient *rcc,$/;"	f	file:
inputs_channel_send_item	server/inputs_channel.c	/^static void inputs_channel_send_item(RedChannelClient *rcc, PipeItem *base)$/;"	f	file:
inputs_channel_send_migrate_data	server/inputs_channel.c	/^static void inputs_channel_send_migrate_data(RedChannelClient *rcc,$/;"	f	file:
inputs_connect	server/inputs_channel.c	/^static void inputs_connect(RedChannel *channel, RedClient *client,$/;"	f	file:
inputs_detach_tablet	server/inputs_channel.c	/^void inputs_detach_tablet(SpiceTabletInstance *_tablet)$/;"	f
inputs_get_mouse_state	server/inputs_channel.c	/^const VDAgentMouseState *inputs_get_mouse_state(void)$/;"	f
inputs_has_tablet	server/inputs_channel.c	/^int inputs_has_tablet(void)$/;"	f
inputs_init	server/inputs_channel.c	/^void inputs_init(void)$/;"	f
inputs_inited	server/inputs_channel.c	/^int inputs_inited(void)$/;"	f
inputs_key_modifiers_item_new	server/inputs_channel.c	/^static PipeItem *inputs_key_modifiers_item_new($/;"	f	file:
inputs_migrate	server/inputs_channel.c	/^static void inputs_migrate(RedChannelClient *rcc)$/;"	f	file:
inputs_on_keyboard_leds_change	server/inputs_channel.c	/^void inputs_on_keyboard_leds_change(void *opaque, uint8_t leds)$/;"	f
inputs_pipe_add_init	server/inputs_channel.c	/^static void inputs_pipe_add_init(RedChannelClient *rcc)$/;"	f	file:
inputs_push_keyboard_modifiers	server/inputs_channel.c	/^static void inputs_push_keyboard_modifiers(uint8_t modifiers)$/;"	f	file:
inputs_release_keys	server/inputs_channel.c	/^static void inputs_release_keys(void)$/;"	f	file:
inputs_set_keyboard	server/inputs_channel.c	/^int inputs_set_keyboard(SpiceKbdInstance *_keyboard)$/;"	f
inputs_set_mouse	server/inputs_channel.c	/^int inputs_set_mouse(SpiceMouseInstance *_mouse)$/;"	f
inputs_set_tablet	server/inputs_channel.c	/^int inputs_set_tablet(SpiceTabletInstance *_tablet)$/;"	f
inputs_set_tablet_logical_size	server/inputs_channel.c	/^void inputs_set_tablet_logical_size(int x_res, int y_res)$/;"	f
insert_command	client/windows/red_window.cpp	/^static void insert_command(HMENU menu, const std::string& name, int id, int state)$/;"	f	file:
insert_menu	client/windows/red_window.cpp	/^static void insert_menu(Menu* menu, HMENU native, CommandMap& _commands_map)$/;"	f	file:
insert_separator	client/windows/red_window.cpp	/^static void insert_separator(HMENU menu)$/;"	f	file:
insert_stat_node	server/reds.c	/^static void insert_stat_node(StatNodeRef parent, StatNodeRef ref)$/;"	f	file:
insert_sub_menu	client/windows/red_window.cpp	/^static HMENU insert_sub_menu(HMENU menu, const std::string& name)$/;"	f	file:
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	client/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	docs/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	docs/manual/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	server/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	server/tests/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/install-sh$/;"	m
install_sh	spice-common/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/install-sh$/;"	m
install_sh	spice-common/common/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/install-sh$/;"	m
install_sh	spice-common/python_modules/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/build-aux\/install-sh$/;"	m
install_sh	spice-common/spice-protocol/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/install-sh$/;"	m
install_sh	spice-common/spice-protocol/spice/Makefile	/^install_sh = ${SHELL} \/home\/lichenxiang\/spice-0.12.5\/spice-common\/spice-protocol\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	client/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	docs/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	docs/manual/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	server/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	server/tests/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	spice-common/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	spice-common/common/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	spice-common/python_modules/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	spice-common/spice-protocol/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	spice-common/spice-protocol/spice/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	client/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	docs/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	docs/manual/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	server/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	server/tests/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	spice-common/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	spice-common/common/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	spice-common/python_modules/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	spice-common/spice-protocol/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	spice-common/spice-protocol/spice/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	client/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	docs/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	docs/manual/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	server/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	server/tests/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	spice-common/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	spice-common/common/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	spice-common/python_modules/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	spice-common/spice-protocol/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	spice-common/spice-protocol/spice/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance	client/windows/main.cpp	/^HINSTANCE instance = NULL;$/;"	v
instances	server/red_worker.c	/^    Ring instances;$/;"	m	struct:RedGlzDrawable	file:
instances_count	server/red_worker.c	/^    uint8_t instances_count;$/;"	m	struct:RedGlzDrawable	file:
instances_pool	server/red_worker.c	/^    GlzDrawableInstanceItem instances_pool[MAX_GLZ_DRAWABLE_INSTANCES];$/;"	m	struct:RedGlzDrawable	file:
int16	spice-common/python_modules/ptypes.py	/^int16 = IntegerType(16, True)$/;"	v
int16_t	client/windows/stdint.h	/^typedef short  int16_t;$/;"	t
int32	spice-common/python_modules/ptypes.py	/^int32 = IntegerType(32, True)$/;"	v
int32_t	client/windows/stdint.h	/^typedef int  int32_t;$/;"	t
int64	spice-common/python_modules/ptypes.py	/^int64 = IntegerType(64, True)$/;"	v
int64_t	client/windows/stdint.h	/^typedef _int64 int64_t;$/;"	t
int64_t	client/windows/stdint.h	/^typedef long long  int64_t;$/;"	t
int8	spice-common/python_modules/ptypes.py	/^int8 = IntegerType(8, True)$/;"	v
int8_t	client/windows/stdint.h	/^typedef signed char int8_t;$/;"	t
int_fast16_t	client/windows/stdint.h	/^typedef short  int_fast16_t;$/;"	t
int_fast32_t	client/windows/stdint.h	/^typedef int  int_fast32_t;$/;"	t
int_fast64_t	client/windows/stdint.h	/^typedef long long  int_fast64_t;$/;"	t
int_fast8_t	client/windows/stdint.h	/^typedef char int_fast8_t;$/;"	t
int_least16_t	client/windows/stdint.h	/^typedef short  int_least16_t;$/;"	t
int_least32_t	client/windows/stdint.h	/^typedef int  int_least32_t;$/;"	t
int_least64_t	client/windows/stdint.h	/^typedef long long  int_least64_t;$/;"	t
int_least8_t	client/windows/stdint.h	/^typedef signed char int_least8_t;$/;"	t
int_mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t int_mask;$/;"	m	struct:QXLRam
int_mask	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t int_mask;$/;"	m	struct:VDIPortRam
int_pending	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t int_pending;$/;"	m	struct:QXLRam
int_pending	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t int_pending;$/;"	m	struct:VDIPortRam
int_to_fix	spice-common/common/canvas_base.c	/^ static inline SPICE_FIXED28_4  int_to_fix(int v)$/;"	f	file:
intercepts_sys_key	client/screen.h	/^    bool intercepts_sys_key() { return _key_interception;}$/;"	f	class:RedScreen
intern_clipboard_atoms	client/x11/platform.cpp	/^static void intern_clipboard_atoms()$/;"	f	file:
internal_groupslot_id	server/red_memslots.h	/^    uint8_t internal_groupslot_id;$/;"	m	struct:RedMemSlotInfo
internal_groupslot_id	server/red_worker.h	/^    uint8_t internal_groupslot_id;$/;"	m	struct:WorkerInitData
internal_groupslot_id	server/spice.h	/^    uint8_t internal_groupslot_id;$/;"	m	struct:QXLDevInitInfo
interrupt_update	client/screen.cpp	/^void RedScreen::interrupt_update()$/;"	f	class:RedScreen
intmax_t	client/windows/stdint.h	/^typedef long long  intmax_t;$/;"	t
intptr_t	client/windows/stdint.h	/^typedef int intptr_t;$/;"	t
inval_type	server/red_worker.c	/^    uint32_t inval_type;$/;"	m	struct:CacheItem	file:
invalidate	client/screen.cpp	/^uint64_t RedScreen::invalidate(const SpiceRect& rect, bool urgent)$/;"	f	class:RedScreen
invalidate	client/screen.cpp	/^void RedScreen::invalidate(const QRegion &region)$/;"	f	class:RedScreen
invalidate	client/screen_layer.cpp	/^uint64_t ScreenLayer::invalidate(const SpiceRect& r, bool urgent)$/;"	f	class:ScreenLayer
invalidate	client/screen_layer.cpp	/^void ScreenLayer::invalidate()$/;"	f	class:ScreenLayer
invalidate	client/screen_layer.cpp	/^void ScreenLayer::invalidate(const QRegion& region)$/;"	f	class:ScreenLayer
invalidate_rect	client/screen_layer.cpp	/^uint64_t ScreenLayer::invalidate_rect(const SpiceRect& r, bool urgent)$/;"	f	class:ScreenLayer
invers	server/red_parse_qxl.h	/^        SpiceInvers invers;$/;"	m	union:RedDrawable::__anon161
invers	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLInvers invers;$/;"	m	union:QXLCompatDrawable::__anon76
invers	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLInvers invers;$/;"	m	union:QXLDrawable::__anon77
io	server/glz_encoder.c	/^    } io;$/;"	m	struct:Encoder	typeref:struct:Encoder::__anon203	file:
io_available_bits	spice-common/common/quic.c	/^    unsigned int io_available_bits;$/;"	m	struct:Encoder	file:
io_base	server/red_dispatcher.c	/^    uint8_t *io_base;$/;"	m	struct:RedWorkeState	file:
io_bytes_count	spice-common/common/lz.c	/^    size_t io_bytes_count;$/;"	m	struct:Encoder	file:
io_end	spice-common/common/lz.c	/^    uint8_t            *io_end;$/;"	m	struct:Encoder	file:
io_end	spice-common/common/quic.c	/^    uint32_t *io_end;$/;"	m	struct:Encoder	file:
io_last_copy	spice-common/common/lz.c	/^    uint8_t            *io_last_copy;  \/\/ pointer to the last byte in which copy count was written$/;"	m	struct:Encoder	file:
io_next_word	spice-common/common/quic.c	/^    uint32_t io_next_word;$/;"	m	struct:Encoder	file:
io_now	spice-common/common/lz.c	/^    uint8_t            *io_now;$/;"	m	struct:Encoder	file:
io_now	spice-common/common/quic.c	/^    uint32_t *io_now;$/;"	m	struct:Encoder	file:
io_start	spice-common/common/lz.c	/^    uint8_t            *io_start;$/;"	m	struct:Encoder	file:
io_word	spice-common/common/quic.c	/^    uint32_t io_word;$/;"	m	struct:Encoder	file:
io_words_count	spice-common/common/quic.c	/^    uint32_t io_words_count;$/;"	m	struct:Encoder	file:
ip	spice-common/common/messages.h	/^        SpiceMsgTunnelIpInfo ip;$/;"	m	union:SpiceMsgcTunnelAddGenericService::__anon23
ipv4	spice-common/common/messages.h	/^      SpiceTunnelIPv4 ipv4;$/;"	m	union:SpiceMsgTunnelIpInfo::__anon22
isQueueingEnabled	client/gui/softrenderer.cpp	/^bool SoftRenderer::isQueueingEnabled() const$/;"	f	class:CEGUI::SoftRenderer
isSameColour	client/gui/softrenderer.h	/^            bool isSameColour(const ColourI& other) const$/;"	f	class:CEGUI::SoftRenderer::ColourI
is_64bit	spice-common/common/marshaller.c	/^    int is_64bit;$/;"	m	struct:__anon19	file:
is_active	server/spice_timer_queue.c	/^    int is_active;$/;"	m	struct:SpiceTimer	file:
is_alive	server/glz_encoder_dictionary_protected.h	/^    uint8_t is_alive;$/;"	m	struct:WindowImage
is_armed	client/process_loop.h	/^    bool is_armed() {return _is_armed;}$/;"	f	class:Timer
is_array	spice-common/python_modules/ptypes.py	/^    def is_array(self):$/;"	m	class:Containee
is_array	spice-common/python_modules/ptypes.py	/^    def is_array(self):$/;"	m	class:Type
is_auto_display_res	client/red_client.h	/^    bool is_auto_display_res() { return _auto_display_res;}$/;"	f	class:RedClient
is_big_endian_bits	client/windows/red_pixmap.cpp	/^bool RedPixmap::is_big_endian_bits()$/;"	f	class:RedPixmap
is_big_endian_bits	client/x11/red_pixmap.cpp	/^bool RedPixmap::is_big_endian_bits()$/;"	f	class:RedPixmap
is_bitmap_lossy	server/red_worker.c	/^static int is_bitmap_lossy(RedChannelClient *rcc, SpiceImage *image, SpiceRect *area,$/;"	f	file:
is_broken	client/x11/platform.cpp	/^    bool is_broken() const {return _broken;}$/;"	f	class:XScreen
is_brush_lossy	server/red_worker.c	/^static int is_brush_lossy(RedChannelClient *rcc, SpiceBrush *brush,$/;"	f	file:
is_bytes_length	spice-common/python_modules/ptypes.py	/^    def is_bytes_length(self):$/;"	m	class:ArrayType
is_client_mouse_allowed	server/main_channel.c	/^    int is_client_mouse_allowed;$/;"	m	struct:InitPipeItem	file:
is_client_mouse_allowed	server/main_channel.c	/^    int is_client_mouse_allowed;$/;"	m	struct:MainMouseModeItemInfo	file:
is_client_mouse_allowed	server/main_channel.c	/^    int is_client_mouse_allowed;$/;"	m	struct:MouseModePipeItem	file:
is_client_mouse_allowed	server/reds-private.h	/^    int is_client_mouse_allowed;$/;"	m	struct:RedsState
is_connected	client/client_net_socket.h	/^    bool is_connected() {return _status != SOCKET_STATUS_CLOSED;}$/;"	f	class:ClientNetSocket
is_constant_length	spice-common/python_modules/ptypes.py	/^    def is_constant_length(self):$/;"	m	class:ArrayType
is_cstring_length	spice-common/python_modules/ptypes.py	/^    def is_cstring_length(self):$/;"	m	class:ArrayType
is_dirty	client/screen.h	/^    bool is_dirty() {return !region_is_empty(&_dirty_region);}$/;"	f	class:RedScreen
is_disconnect_allowed	client/application.cpp	/^bool Application::is_disconnect_allowed()$/;"	f	class:Application
is_disconnect_allowed	client/gui/gui.h	/^    bool is_disconnect_allowed() { return _app.is_disconnect_allowed();}$/;"	f	class:GUI
is_drawable_independent_from_surfaces	server/red_worker.c	/^static inline int is_drawable_independent_from_surfaces(Drawable *drawable)$/;"	f	file:
is_empty	client/glz_decoder_window.cpp	/^inline bool GlzDecoderWindow::is_empty()$/;"	f	class:GlzDecoderWindow
is_empty	client/process_loop.cpp	/^bool EventsQueue::is_empty()$/;"	f	class:EventsQueue
is_empty	client/red_client.h	/^    bool is_empty() {return !(_disable_wallpaper || _disable_font_smooth ||$/;"	f	class:DisplaySetting
is_enum	spice-common/python_modules/ptypes.py	/^    def is_enum(self):$/;"	m	class:EnumBaseType
is_equal_brush	server/red_worker.c	/^static int is_equal_brush(SpiceBrush *b1, SpiceBrush *b2)$/;"	f	file:
is_equal_line_attr	server/red_worker.c	/^static int is_equal_line_attr(SpiceLineAttr *a1, SpiceLineAttr *a2)$/;"	f	file:
is_equal_path	server/red_worker.c	/^static int is_equal_path(RedWorker *worker, SpicePath *path1, SpicePath *path2)$/;"	f	file:
is_extra_size	spice-common/python_modules/ptypes.py	/^    def is_extra_size(self):$/;"	m	class:ArrayType
is_extra_size	spice-common/python_modules/ptypes.py	/^    def is_extra_size(self):$/;"	m	class:Member
is_extra_size	spice-common/python_modules/ptypes.py	/^    def is_extra_size(self):$/;"	m	class:Switch
is_extra_size	spice-common/python_modules/ptypes.py	/^    def is_extra_size(self):$/;"	m	class:Type
is_fake_ctrl	client/windows/red_window.cpp	/^static bool is_fake_ctrl(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	file:
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:ArrayType
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:ChannelType
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:ContainerType
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:Member
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:PointerType
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:ProtocolType
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:Switch
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:Type
is_fixed_nw_size	spice-common/python_modules/ptypes.py	/^    def is_fixed_nw_size(self):$/;"	m	class:TypeAlias
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:ArrayType
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:ContainerType
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:Member
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:Switch
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:Type
is_fixed_sizeof	spice-common/python_modules/ptypes.py	/^    def is_fixed_sizeof(self):$/;"	m	class:TypeAlias
is_free	client/monitor.h	/^    bool is_free() { return _free;}$/;"	f	class:Monitor
is_generated	spice-common/python_modules/codegen.py	/^    def is_generated(self, kind, name):$/;"	m	class:CodeWriter
is_high_surrogate	client/windows/red_window.cpp	/^static inline bool is_high_surrogate(uint32_t val)$/;"	f	file:
is_identifier_length	spice-common/python_modules/ptypes.py	/^    def is_identifier_length(self):$/;"	m	class:ArrayType
is_image_size_length	spice-common/python_modules/ptypes.py	/^    def is_image_size_length(self):$/;"	m	class:ArrayType
is_io_to_decode_end	spice-common/common/lz.c	/^static inline int is_io_to_decode_end(Encoder *encoder)$/;"	f	file:
is_key_set_pressed	client/application.cpp	/^bool Application::is_key_set_pressed(const HotkeySet& key_set)$/;"	f	class:Application
is_locked	client/threads.h	/^    bool is_locked() { return _locked;}$/;"	f	class:Lock
is_lossy	server/red_worker.c	/^    int is_lossy;$/;"	m	struct:compress_send_data_t	file:
is_low_bandwidth	server/red_worker.c	/^    int is_low_bandwidth;$/;"	m	struct:CommonChannelClient	file:
is_low_surrogate	client/windows/red_window.cpp	/^static inline bool is_low_surrogate(uint32_t val)$/;"	f	file:
is_mini_header	server/red_channel.h	/^    int is_mini_header;$/;"	m	struct:RedChannelClient
is_monitors_pos_valid	client/windows/platform.cpp	/^bool Platform::is_monitors_pos_valid()$/;"	f	class:Platform
is_monitors_pos_valid	client/x11/platform.cpp	/^bool Platform::is_monitors_pos_valid()$/;"	f	class:Platform
is_mouse_captured	client/screen.h	/^    bool is_mouse_captured() { return _mouse_captured;}$/;"	f	class:RedScreen
is_on_perpendiculars	client/x11/platform.cpp	/^    static bool is_on_perpendiculars(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:BottomVariant
is_on_perpendiculars	client/x11/platform.cpp	/^    static bool is_on_perpendiculars(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:LeftVariant
is_on_perpendiculars	client/x11/platform.cpp	/^    static bool is_on_perpendiculars(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:RightVariant
is_on_perpendiculars	client/x11/platform.cpp	/^    static bool is_on_perpendiculars(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:TopVariant
is_on_tail	client/x11/platform.cpp	/^    static bool is_on_tail(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:BottomVariant
is_on_tail	client/x11/platform.cpp	/^    static bool is_on_tail(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:LeftVariant
is_on_tail	client/x11/platform.cpp	/^    static bool is_on_tail(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:RightVariant
is_on_tail	client/x11/platform.cpp	/^    static bool is_on_tail(const SpiceRect& area, const SpiceRect& other_area)$/;"	f	class:TopVariant
is_opaque_item	server/red_worker.c	/^static inline int is_opaque_item(TreeItem *item)$/;"	f	file:
is_out_of_sync	client/screen.h	/^    bool is_out_of_sync() { return _out_of_sync;}$/;"	f	class:RedScreen
is_out_of_sync	client/windows/platform.cpp	/^    virtual bool is_out_of_sync() { return _out_of_sync;}$/;"	f	class:WinMonitor
is_out_of_sync	client/x11/platform.cpp	/^    virtual bool is_out_of_sync() { return _out_of_sync;}$/;"	f	class:DynamicScreen
is_out_of_sync	client/x11/platform.cpp	/^    virtual bool is_out_of_sync() { return _out_of_sync;}$/;"	f	class:StaticScreen
is_out_of_sync	client/x11/platform.cpp	/^    virtual bool is_out_of_sync() { return _out_of_sync;}$/;"	f	class:XineramaMonitor
is_out_of_sync	client/x11/platform.cpp	/^bool XMonitor::is_out_of_sync()$/;"	f	class:XMonitor
is_pinned	client/x11/platform.cpp	/^    bool is_pinned() {return !!_pin_count;}$/;"	f	class:XMonitor
is_pointer	spice-common/python_modules/ptypes.py	/^    def is_pointer(self):$/;"	m	class:Containee
is_pointer	spice-common/python_modules/ptypes.py	/^    def is_pointer(self):$/;"	m	class:Type
is_primary_surface	server/red_worker.c	/^static inline int is_primary_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:Containee
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:EnumBaseType
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:IntegerType
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:Member
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:PointerType
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:Type
is_primitive	spice-common/python_modules/ptypes.py	/^    def is_primitive(self):$/;"	m	class:TypeAlias
is_remaining_length	spice-common/python_modules/ptypes.py	/^    def is_remaining_length(self):$/;"	m	class:ArrayType
is_same_drawable	server/red_worker.c	/^static int is_same_drawable(RedWorker *worker, Drawable *d1, Drawable *d2)$/;"	f	file:
is_same_geometry	server/red_worker.c	/^static int is_same_geometry(RedWorker *worker, Drawable *d1, Drawable *d2)$/;"	f	file:
is_same_thread	client/process_loop.h	/^    bool is_same_thread(pthread_t thread) { return _started && pthread_equal(_thread, thread);}$/;"	f	class:ProcessLoop
is_self_change	client/monitor.cpp	/^bool Monitor::is_self_change()$/;"	f	class:Monitor
is_set	client/cmd_line_parser.cpp	/^bool CmdLineParser::is_set(int id)$/;"	f	class:CmdLineParser
is_set	client/cmd_line_parser.h	/^        bool is_set;$/;"	m	class:CmdLineParser::Option
is_size_locked	client/screen.h	/^    bool is_size_locked() { return _size_locked;}$/;"	f	class:RedScreen
is_sticky_trace_key	client/application.cpp	/^inline bool Application::is_sticky_trace_key(RedKey key)$/;"	f	class:Application
is_struct	spice-common/python_modules/ptypes.py	/^    def is_struct(self):$/;"	m	class:Containee
is_struct	spice-common/python_modules/ptypes.py	/^    def is_struct(self):$/;"	m	class:Type
is_surface_area_lossy	server/red_worker.c	/^static int is_surface_area_lossy(DisplayChannelClient *dcc, uint32_t surface_id,$/;"	f	file:
is_switch	spice-common/python_modules/ptypes.py	/^    def is_switch(self):$/;"	m	class:Containee
is_switch	spice-common/python_modules/ptypes.py	/^    def is_switch(self):$/;"	m	class:Switch
is_time_to_display	client/display_channel.cpp	/^bool VideoStream::is_time_to_display(uint32_t now, uint32_t frame_time)$/;"	f	class:VideoStream
is_toplevel	spice-common/python_modules/demarshal.py	/^    def is_toplevel(self):$/;"	m	class:DemarshallingDestination
is_toplevel	spice-common/python_modules/marshal.py	/^    def is_toplevel(self):$/;"	m	class:MarshallingSource
is_valid	client/red_client.h	/^    bool is_valid() { return _valid;}$/;"	f	class:MigChannel
is_visible	client/gui/gui.h	/^    bool is_visible() { return !!_dialog;}$/;"	f	class:GUI
is_x_shm_avail	client/x11/platform.cpp	/^bool XPlatform::is_x_shm_avail()$/;"	f	class:XPlatform
item	server/red_channel.h	/^            PipeItem *item;$/;"	m	struct:RedChannelClient::__anon148::__anon149
item	server/red_channel.h	/^        PipeItem *item;$/;"	m	struct:RedChannelClient::__anon148
item_nr	spice-common/common/marshaller.c	/^    int item_nr;$/;"	m	struct:__anon19	file:
item_type_at	client/menu.cpp	/^Menu::ItemType Menu::item_type_at(int pos)$/;"	f	class:Menu
items	server/red_worker.c	/^    Ring items;$/;"	m	struct:Container	file:
items	server/red_worker.c	/^    int32_t items;$/;"	m	struct:PixmapCache	file:
items	spice-common/common/marshaller.c	/^    MarshallerItem *items;$/;"	m	struct:SpiceMarshaller	file:
items_size	spice-common/common/marshaller.c	/^    int items_size; \/* number of items availible in items *\/$/;"	m	struct:SpiceMarshaller	file:
items_trace	server/red_worker.c	/^    ItemTrace items_trace[NUM_TRACE_ITEMS];$/;"	m	struct:RedWorker	file:
jerr	server/jpeg_encoder.c	/^    struct jpeg_error_mgr jerr;$/;"	m	struct:JpegEncoder	typeref:struct:JpegEncoder::jpeg_error_mgr	file:
jerr	server/mjpeg_encoder.c	/^    struct jpeg_error_mgr jerr;$/;"	m	struct:MJpegEncoder	typeref:struct:MJpegEncoder::jpeg_error_mgr	file:
jmp_env	server/red_worker.c	/^    jmp_buf jmp_env;$/;"	m	struct:__anon177	file:
jmp_env	spice-common/common/canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:LzData	file:
jmp_env	spice-common/common/canvas_base.c	/^    jmp_buf jmp_env;$/;"	m	struct:QuicData	file:
join	client/threads.cpp	/^void Thread::join()$/;"	f	class:Thread
joinStyle	spice-common/common/lines.h	/^    unsigned int joinStyle:2;$/;"	m	struct:lineGC
join_style	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t join_style;$/;"	m	struct:QXLLineAttr
jpeg	server/red_worker.c	/^    JpegEncoderContext *jpeg;$/;"	m	struct:RedWorker	file:
jpeg	spice-common/common/canvas_base.c	/^    SpiceJpegDecoder* jpeg;$/;"	m	struct:CanvasBase	file:
jpeg	spice-common/common/draw.h	/^        SpiceJPEGData       jpeg;$/;"	m	union:SpiceImage::__anon35
jpeg_alpha	spice-common/common/draw.h	/^        SpiceJPEGAlphaData  jpeg_alpha;$/;"	m	union:SpiceImage::__anon35
jpeg_alpha_stat	server/red_worker.c	/^    stat_info_t jpeg_alpha_stat;$/;"	m	struct:DisplayChannel	file:
jpeg_alpha_stat_name	server/red_worker.c	/^static const char *jpeg_alpha_stat_name = "jpeg_alpha";$/;"	v	file:
jpeg_boolean	client/jpeg_decoder.cpp	27;"	d	file:
jpeg_boolean	client/mjpeg_decoder.cpp	28;"	d	file:
jpeg_data	server/red_worker.c	/^    JpegData jpeg_data;$/;"	m	struct:RedWorker	file:
jpeg_decoder	client/canvas.h	/^    JpegDecoder& jpeg_decoder() { return _jpeg_decoder;}$/;"	f	class:Canvas
jpeg_decoder_fill_input_buffer	client/jpeg_decoder.cpp	/^    static SPICE_GNUC_NORETURN jpeg_boolean jpeg_decoder_fill_input_buffer(j_decompress_ptr cinfo)$/;"	f	file:
jpeg_decoder_init_source	client/jpeg_decoder.cpp	/^    static void jpeg_decoder_init_source(j_decompress_ptr cinfo)$/;"	f	file:
jpeg_decoder_skip_input_data	client/jpeg_decoder.cpp	/^    static void jpeg_decoder_skip_input_data(j_decompress_ptr cinfo, long num_bytes)$/;"	f	file:
jpeg_decoder_term_source	client/jpeg_decoder.cpp	/^    static void jpeg_decoder_term_source (j_decompress_ptr cinfo)$/;"	f	file:
jpeg_encode	server/jpeg_encoder.c	/^int jpeg_encode(JpegEncoderContext *jpeg, int quality, JpegEncoderImageType type,$/;"	f
jpeg_encoder_create	server/jpeg_encoder.c	/^JpegEncoderContext* jpeg_encoder_create(JpegEncoderUsrContext *usr)$/;"	f
jpeg_encoder_destroy	server/jpeg_encoder.c	/^void jpeg_encoder_destroy(JpegEncoderContext* encoder)$/;"	f
jpeg_id	spice-common/common/canvas_base.c	/^static int jpeg_id = 0;$/;"	v	file:
jpeg_quality	server/red_worker.c	/^    int jpeg_quality;$/;"	m	struct:DisplayChannel	file:
jpeg_size	spice-common/common/draw.h	/^    uint32_t jpeg_size;$/;"	m	struct:SpiceJPEGAlphaData
jpeg_stat	server/red_worker.c	/^    stat_info_t jpeg_stat;$/;"	m	struct:DisplayChannel	file:
jpeg_stat_name	server/red_worker.c	/^static const char *jpeg_stat_name = "jpeg";$/;"	v	file:
jpeg_state	server/red_worker.c	/^    spice_wan_compression_t jpeg_state;$/;"	m	struct:RedWorker	file:
jpeg_state	server/red_worker.h	/^    spice_wan_compression_t jpeg_state;$/;"	m	struct:WorkerInitData
jpeg_state	server/reds.c	/^spice_wan_compression_t jpeg_state = SPICE_WAN_COMPRESSION_AUTO;$/;"	v
jpeg_usr_more_lines	server/red_worker.c	/^static int jpeg_usr_more_lines(JpegEncoderUsrContext *usr, uint8_t **lines)$/;"	f	file:
jpeg_usr_more_space	server/red_worker.c	/^static int jpeg_usr_more_space(JpegEncoderUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:
k	spice-common/common/lines.c	/^    double k;                   \/* x0 * dy - y0 * dx *\/$/;"	m	struct:_PolySlope	file:
k	spice-common/common/lines.c	/^    double k;$/;"	m	struct:_LineFace	file:
kbd_get_leds	server/inputs_channel.c	/^static uint8_t kbd_get_leds(SpiceKbdInstance *sin)$/;"	f	file:
kbd_push_scan	server/inputs_channel.c	/^static void kbd_push_scan(SpiceKbdInstance *sin, uint8_t scan)$/;"	f	file:
key	client/application.cpp	/^    RedKey key;$/;"	m	struct:ModifierKey	file:
key	client/application.h	/^    RedKey key;          \/\/ the key that is currently being traced, or,$/;"	m	struct:StickyInfo
key	client/cache.hpp	/^    inline uint32_t key(uint64_t id) {return uint32_t(id) % HASH_SIZE;}$/;"	f	class:Cache
key	client/shared_cache.hpp	/^    inline uint32_t key(uint64_t id) {return uint32_t(id) % HASH_SIZE;}$/;"	f	class:SharedCache
key	server/inputs_channel.c	/^    bool key[0x7f];$/;"	m	struct:SpiceKbdState	file:
key_bit	client/x11/platform.cpp	/^static uint32_t key_bit(char* keymap, int key, uint32_t bit)$/;"	f	file:
key_down	client/application.h	/^    bool key_down;       \/\/ The physical state of the sticky key. Valid only till$/;"	m	struct:StickyInfo
key_ext	server/inputs_channel.c	/^    bool key_ext[0x7f];$/;"	m	struct:SpiceKbdState	file:
key_first_down	client/application.h	/^    bool key_first_down; \/\/ True when (1) a potential sticky key is pressed,$/;"	m	struct:StickyInfo
key_modifiers_sender	server/inputs_channel.c	/^static void key_modifiers_sender(void *opaque)$/;"	f	file:
key_modifiers_timer	server/inputs_channel.c	/^static SpiceTimer *key_modifiers_timer;$/;"	v	file:
key_table_0x00	client/x11/red_window.cpp	/^static RedKey key_table_0x00[256]; \/\/Latin 1$/;"	v	file:
key_table_0xfe	client/x11/red_window.cpp	/^static RedKey key_table_0xfe[256]; \/\/Keyboard (XKB) Extension$/;"	v	file:
key_table_0xff	client/x11/red_window.cpp	/^static RedKey key_table_0xff[256]; \/\/miscellany$/;"	v	file:
keyboard	server/inputs_channel.c	/^static SpiceKbdInstance *keyboard = NULL;$/;"	v	file:
keyboard_modifiers	spice-common/common/messages.h	/^    uint32_t keyboard_modifiers;$/;"	m	struct:SpiceMsgInputsInit
keycode_map	client/x11/red_window.cpp	/^static RedKey keycode_map[256];$/;"	v	file:
keyfile_password	server/reds.c	/^    char keyfile_password[256];$/;"	m	struct:RedSSLParameters	file:
label	spice-common/python_modules/codegen.py	/^    def label(self, s):$/;"	m	class:CodeWriter
laddr_ext	server/spice.h	/^    struct sockaddr_storage laddr_ext;$/;"	m	struct:SpiceChannelEventInfo	typeref:struct:SpiceChannelEventInfo::sockaddr_storage
last_copy	server/glz_encoder.c	/^        uint8_t            *last_copy;  \/\/ pointer to the last byte in which copy count was written$/;"	m	struct:Encoder::__anon203	file:
last_enc_size	server/mjpeg_encoder.c	/^    uint64_t last_enc_size;$/;"	m	struct:MJpegEncoderRateControl	file:
last_frame_delay	spice-common/common/messages.h	/^    int32_t last_frame_delay;$/;"	m	struct:SpiceMsgcDisplayStreamReport
last_frame_time	server/mjpeg_encoder.c	/^    uint64_t last_frame_time;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
last_gradual_frame	server/red_worker.c	/^    int last_gradual_frame;$/;"	m	struct:Drawable	file:
last_gradual_frame	server/red_worker.c	/^    int last_gradual_frame;$/;"	m	struct:ItemTrace	file:
last_id	client/windows/red_window.cpp	/^static const int last_id = 0x0f00;$/;"	v	file:
last_id	server/red_worker.c	/^    uint32_t last_id;$/;"	m	struct:RedWorker	file:
last_image_id	server/glz_encoder_dictionary.h	/^    uint64_t last_image_id;$/;"	m	struct:GlzEncDictRestoreData
last_image_id	server/glz_encoder_dictionary_protected.h	/^    uint64_t last_image_id;$/;"	m	struct:SharedDictionary
last_level	server/zlib_encoder.c	/^    int last_level;$/;"	m	struct:ZlibEncoder	file:
last_marshaller	spice-common/common/marshaller.c	/^    SpiceMarshaller *last_marshaller;$/;"	m	struct:SpiceMarshallerData	file:
last_pong_time	server/red_channel.h	/^    uint64_t last_pong_time;$/;"	m	struct:RedChannelClientLatencyMonitor
last_send_time	server/red_worker.c	/^    uint64_t last_send_time;$/;"	m	struct:StreamAgent	file:
last_sent_serial	server/red_channel.h	/^        uint64_t last_sent_serial;$/;"	m	struct:RedChannelClient::__anon148
last_time	server/red_worker.c	/^    red_time_t last_time;$/;"	m	struct:Stream	file:
latency	server/main_channel.c	/^    uint64_t latency;$/;"	m	struct:MainChannelClient	file:
latency	server/main_dispatcher.c	/^    uint32_t latency;$/;"	m	struct:MainDispatcherMmTimeLatencyMessage	file:
latency	server/snd_worker.c	/^    uint32_t latency;$/;"	m	struct:PlaybackChannel	file:
latency_monitor	server/red_channel.h	/^    RedChannelClientLatencyMonitor latency_monitor;$/;"	m	struct:RedChannelClient
latency_ms	spice-common/common/messages.h	/^    uint32_t latency_ms;$/;"	m	struct:SpiceMsgPlaybackLatency
left	client/gui/softrenderer.h	/^            int left;$/;"	m	struct:CEGUI::SoftRenderer::RectI
left	server/migration_protocol.h	/^    int32_t left;$/;"	m	struct:SpiceMigrateDataRect
left	spice-common/common/draw.h	/^    int32_t left;$/;"	m	struct:SpiceRect
left	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t left;$/;"	m	struct:QXLRect
left	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t left;$/;"	m	struct:QXLURect
len	server/main_channel.c	/^    size_t len;$/;"	m	struct:AgentDataPipeItem	file:
len	server/reds-private.h	/^    int len;$/;"	m	struct:VDIReadBuf
len	server/reds.c	/^    uint32_t len;$/;"	m	struct:RedsMigCertPubKeyInfo	file:
len	server/reds_stream.c	/^    unsigned int len;$/;"	m	struct:RedsSASL	file:
len	spice-common/common/marshaller.c	/^    size_t len;$/;"	m	struct:__anon18	file:
len	spice-common/common/mem.h	/^    uint32_t len;$/;"	m	struct:SpiceChunk
length	server/red_parse_qxl.h	/^            uint16_t length;$/;"	m	struct:RedCursorCmd::__anon164::__anon166
length	spice-common/common/draw.h	/^    uint16_t length;$/;"	m	struct:SpiceString
length	spice-common/common/messages.h	/^    uint16_t length;$/;"	m	struct:SpiceMsgCursorTrail
length	spice-common/common/messages.h	/^    uint32_t length;$/;"	m	struct:SpiceMsgSmartcard
length	spice-common/spice-protocol/spice/qxl_dev.h	/^            uint16_t length;$/;"	m	struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
length	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t length;$/;"	m	struct:QXLString
level	server/red_worker.c	/^    int level;$/;"	m	struct:ShowTreeData	file:
lib_LTLIBRARIES	server/Makefile	/^lib_LTLIBRARIES = libspice-server.la$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	client/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	docs/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	docs/manual/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	server/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	server/tests/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	spice-common/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	spice-common/common/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	spice-common/python_modules/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	spice-common/spice-protocol/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	spice-common/spice-protocol/spice/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	client/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	docs/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	docs/manual/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	server/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	server/tests/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	spice-common/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	spice-common/common/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	spice-common/python_modules/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	spice-common/spice-protocol/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	spice-common/spice-protocol/spice/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libspice_common_client_la_LIBADD	spice-common/common/Makefile	/^libspice_common_client_la_LIBADD =$/;"	m
libspice_common_client_la_OBJECTS	spice-common/common/Makefile	/^libspice_common_client_la_OBJECTS =  \\$/;"	m
libspice_common_client_la_SOURCES	spice-common/common/Makefile	/^libspice_common_client_la_SOURCES = \\$/;"	m
libspice_common_la_DEPENDENCIES	spice-common/common/Makefile	/^libspice_common_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libspice_common_la_LIBADD	spice-common/common/Makefile	/^libspice_common_la_LIBADD = \\$/;"	m
libspice_common_la_OBJECTS	spice-common/common/Makefile	/^libspice_common_la_OBJECTS = $(am_libspice_common_la_OBJECTS)$/;"	m
libspice_common_la_SOURCES	spice-common/common/Makefile	/^libspice_common_la_SOURCES = backtrace.c backtrace.h bitops.h \\$/;"	m
libspice_common_server_la_CFLAGS	spice-common/common/Makefile	/^libspice_common_server_la_CFLAGS = -DFIXME_SERVER_SMARTCARD$/;"	m
libspice_common_server_la_LIBADD	spice-common/common/Makefile	/^libspice_common_server_la_LIBADD =$/;"	m
libspice_common_server_la_LINK	spice-common/common/Makefile	/^libspice_common_server_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
libspice_common_server_la_OBJECTS	spice-common/common/Makefile	/^libspice_common_server_la_OBJECTS =  \\$/;"	m
libspice_common_server_la_SOURCES	spice-common/common/Makefile	/^libspice_common_server_la_SOURCES = \\$/;"	m
libspice_server_la_DEPENDENCIES	server/Makefile	/^libspice_server_la_DEPENDENCIES =  \\$/;"	m
libspice_server_la_LDFLAGS	server/Makefile	/^libspice_server_la_LDFLAGS = -version-info $(SPICE_LT_VERSION) \\$/;"	m
libspice_server_la_LIBADD	server/Makefile	/^libspice_server_la_LIBADD = \\$/;"	m
libspice_server_la_LINK	server/Makefile	/^libspice_server_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
libspice_server_la_OBJECTS	server/Makefile	/^libspice_server_la_OBJECTS = $(am_libspice_server_la_OBJECTS)$/;"	m
libspice_server_la_SOURCES	server/Makefile	/^libspice_server_la_SOURCES = agent-msg-filter.c agent-msg-filter.h \\$/;"	m
libspice_serverinclude_HEADERS	server/Makefile	/^libspice_serverinclude_HEADERS = \\$/;"	m
libspice_serverincludedir	server/Makefile	/^libspice_serverincludedir = $(includedir)\/spice-server$/;"	m
lineGC	spice-common/common/lines.h	/^struct lineGC {$/;"	s
lineGC	spice-common/common/lines.h	/^typedef struct lineGC lineGC;$/;"	t	typeref:struct:lineGC
lineGCOps	spice-common/common/lines.h	/^} lineGCOps;$/;"	t	typeref:struct:__anon20
lineStyle	spice-common/common/lines.h	/^    unsigned int lineStyle:2;$/;"	m	struct:lineGC
lineWidth	spice-common/common/lines.h	/^    unsigned short lineWidth;$/;"	m	struct:lineGC
line_0	server/red_worker.c	/^    void *line_0;$/;"	m	struct:DrawContext	file:
line_0	server/spice.h	/^    uint8_t *line_0;$/;"	m	struct:QXLDrawArea
line_dash	spice-common/common/glc.c	/^    LineDash line_dash;$/;"	m	struct:InternaCtx	file:
line_width	spice-common/common/glc.c	/^    GLfloat line_width;$/;"	m	struct:InternaCtx	file:
lines	server/glz_encoder_dictionary_protected.h	/^    uint8_t         *lines;$/;"	m	struct:WindowImageSegment
lines	spice-common/common/lz.c	/^    uint8_t            *lines;$/;"	m	struct:LzImageSegment	file:
lines_data	server/red_worker.c	/^        } lines_data;$/;"	m	union:__anon177::__anon178	typeref:struct:__anon177::__anon178::__anon179	file:
lines_end	server/glz_encoder_dictionary_protected.h	/^    uint8_t         *lines_end;$/;"	m	struct:WindowImageSegment
lines_end	spice-common/common/lz.c	/^    uint8_t            *lines_end;$/;"	m	struct:LzImageSegment	file:
link	client/red_channel.cpp	/^void RedChannelBase::link(uint32_t connection_id, const std::string& password,$/;"	f	class:RedChannelBase
link	server/char_device.c	/^    RingItem link;$/;"	m	struct:SpiceCharDeviceClientState	file:
link	server/char_device.c	/^    RingItem link;$/;"	m	struct:SpiceCharDeviceMsgToClientItem	file:
link	server/char_device.h	/^    RingItem link;$/;"	m	struct:SpiceCharDeviceWriteBuffer
link	server/red_channel.h	/^    RingItem link; \/\/ channels link for reds$/;"	m	struct:RedChannel
link	server/red_channel.h	/^    RingItem link;$/;"	m	struct:PipeItem
link	server/red_channel.h	/^    RingItem link;$/;"	m	struct:RedClient
link	server/red_dispatcher.c	/^    RingItem link;$/;"	m	struct:AsyncCommand	file:
link	server/red_worker.c	/^    PipeItem link;$/;"	m	struct:ImageItem	file:
link	server/red_worker.c	/^    RingItem link;    \/\/ ordered by the time it was encoded$/;"	m	struct:RedGlzDrawable	file:
link	server/red_worker.c	/^    RingItem link;$/;"	m	struct:Stream	file:
link	server/reds-private.h	/^    RingItem link;$/;"	m	struct:RedsMigTargetClient
link	server/reds-private.h	/^    RingItem link;$/;"	m	struct:RedsMigWaitDisconnectClient
link	server/reds-private.h	/^    RingItem link;$/;"	m	struct:SpiceCharDeviceStateItem
link	server/reds-private.h	/^    RingItem link;$/;"	m	struct:VDIReadBuf
link	server/spice_timer_queue.c	/^    RingItem link;$/;"	m	struct:SpiceTimer	file:
link	server/spice_timer_queue.c	/^    RingItem link;$/;"	m	struct:SpiceTimerQueue	file:
link	server/tests/basic_event_loop.c	/^    RingItem link;$/;"	m	struct:SpiceTimer	file:
link	server/tests/basic_event_loop.c	/^    RingItem link;$/;"	m	struct:SpiceWatch	file:
link_header	server/reds.c	/^    SpiceLinkHeader link_header;$/;"	m	struct:RedLinkInfo	file:
link_mess	server/reds.c	/^    SpiceLinkMess *link_mess;$/;"	m	struct:RedLinkInfo	file:
link_msg	server/reds-private.h	/^    SpiceLinkMess *link_msg;$/;"	m	struct:RedsMigPendingLink
list_link	server/red_worker.c	/^    RingItem list_link;$/;"	m	struct:Drawable	file:
list_link	spice-common/common/glc.c	/^    TassVertex *list_link;$/;"	m	struct:TassVertex	file:
listen_socket	server/reds-private.h	/^    int listen_socket;$/;"	m	struct:RedsState
listen_watch	server/reds-private.h	/^    SpiceWatch *listen_watch;$/;"	m	struct:RedsState
llen_ext	server/spice.h	/^    socklen_t llen_ext, plen_ext;$/;"	m	struct:SpiceChannelEventInfo
loadFromFile	client/gui/softtexture.cpp	/^void SoftTexture::loadFromFile(const String& filename, const String& resourceGroup)$/;"	f	class:CEGUI::SoftTexture
loadFromMemory	client/gui/softtexture.cpp	/^void SoftTexture::loadFromMemory(const void* buffPtr, uint buffWidth,$/;"	f	class:CEGUI::SoftTexture
loadRawDataContainer	client/gui/resource_provider.cpp	/^void CEGUIResourceProvider::loadRawDataContainer(const CEGUI::String &filename,$/;"	f	class:CEGUIResourceProvider
load_dh_params	server/reds.c	/^static int load_dh_params(SSL_CTX *ctx, char *file)$/;"	f	file:
load_icon	client/windows/platform.cpp	/^Icon* Platform::load_icon(int id)$/;"	f	class:Platform
load_icon	client/x11/x_icon.cpp	/^Icon* Platform::load_icon(int id)$/;"	f	class:Platform
loadvm_command	server/red_worker.c	/^static int loadvm_command(RedWorker *worker, QXLCommandExt *ext)$/;"	f	file:
local_addr	client/client_net_socket.h	/^    inline const struct in_addr& local_addr() {return _local_addr;}$/;"	f	class:ClientNetSocket
local_caps	server/red_channel.h	/^    RedChannelCapabilities local_caps;$/;"	m	struct:RedChannel
local_port	client/client_net_socket.h	/^    inline uint16_t local_port() {return _local_port;}$/;"	f	class:ClientNetSocket
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	client/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	docs/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	docs/manual/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	server/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	server/tests/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	spice-common/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	spice-common/common/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	spice-common/python_modules/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	spice-common/spice-protocol/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	spice-common/spice-protocol/spice/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localize_bitmap	server/red_worker.c	/^static void localize_bitmap(RedWorker *worker, SpiceImage **image_ptr, SpiceImage *image_store,$/;"	f	file:
localize_brush	server/red_worker.c	/^static void localize_brush(RedWorker *worker, SpiceBrush *brush, SpiceImage *image_store)$/;"	f	file:
localize_mask	server/red_worker.c	/^static void localize_mask(RedWorker *worker, SpiceQMask *mask, SpiceImage *image_store)$/;"	f	file:
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	client/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	docs/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	docs/manual/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	server/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	server/tests/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	spice-common/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	spice-common/common/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	spice-common/python_modules/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	spice-common/spice-protocol/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	spice-common/spice-protocol/spice/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	client/red_channel.h	/^    Mutex* lock;$/;"	m	struct:SyncInfo
lock	server/dispatcher.h	/^    pthread_mutex_t lock;$/;"	m	struct:Dispatcher
lock	server/glz_encoder_dictionary_protected.h	/^    pthread_mutex_t lock;$/;"	m	struct:SharedDictionary
lock	server/red_channel.h	/^    pthread_mutex_t lock; \/\/ different channels can be in different threads$/;"	m	struct:RedClient
lock	server/red_worker.c	/^    pthread_mutex_t lock;$/;"	m	struct:PixmapCache	file:
lock	spice-common/common/gdi_canvas.c	/^    RecurciveMutex* lock;$/;"	m	struct:GdiCanvas	file:
lock_count	server/reds.c	/^static long *lock_count;$/;"	v	file:
lock_cs	server/reds.c	/^static pthread_mutex_t *lock_cs;$/;"	v	file:
lock_size	client/screen.cpp	/^void RedScreen::lock_size()$/;"	f	class:RedScreen
lock_timout	client/windows/red_drawable.cpp	/^static const uint64_t lock_timout = 1000 * 1000 * 10; \/*10ms*\/$/;"	v	file:
log_buf	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t log_buf[QXL_LOG_BUF_SIZE];$/;"	m	struct:QXLRam
log_file	client/application.cpp	/^static FILE *log_file = NULL;$/;"	v	file:
log_level	client/application.cpp	/^static unsigned int log_level = LOG_DEBUG;$/;"	v	file:
log_level	client/application.cpp	/^static unsigned int log_level = LOG_INFO;$/;"	v	file:
log_level	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t log_level;$/;"	m	struct:QXLRom
lookup_case_member	spice-common/python_modules/ptypes.py	/^    def lookup_case_member(self, name):$/;"	m	class:Switch
lookup_member	spice-common/python_modules/ptypes.py	/^    def lookup_member(self, name):$/;"	m	class:ContainerType
lookup_ref	spice-common/common/marshaller.c	/^static uint8_t *lookup_ref(MarshallerRef *ref)$/;"	f	file:
lookup_type	spice-common/python_modules/ptypes.py	/^def lookup_type(name):$/;"	f
lossy	client/shared_cache.hpp	/^        bool lossy;$/;"	m	class:SharedCache::Item
lossy	server/red_worker.c	/^    int lossy;$/;"	m	struct:NewCacheItem	file:
lossy_rect	server/migration_protocol.h	/^    SpiceMigrateDataRect lossy_rect;$/;"	m	struct:MigrateDisplaySurfaceLossy
lossy_rect	server/red_worker.c	/^    SpiceRect lossy_rect;$/;"	m	struct:BitmapData	file:
low_bandwidth_setting	server/migration_protocol.h	/^    uint8_t low_bandwidth_setting;$/;"	m	struct:SpiceMigrateDataDisplay
low_keyboard_hook	client/windows/red_window.cpp	/^static HHOOK low_keyboard_hook = NULL;$/;"	v	file:
low_keyboard_hook_on	client/windows/red_window.cpp	/^static bool low_keyboard_hook_on = false;$/;"	v	file:
lru	server/red_worker.c	/^    Ring lru;$/;"	m	struct:PixmapCache	file:
lru	server/spice_image_cache.h	/^    Ring lru;$/;"	m	struct:ImageCache
lru_link	server/red_worker.c	/^            RingItem lru_link;$/;"	m	struct:CacheItem::__anon173::__anon174	file:
lru_link	server/red_worker.c	/^    RingItem lru_link;$/;"	m	struct:NewCacheItem	file:
lru_link	server/spice_image_cache.h	/^    RingItem lru_link;$/;"	m	struct:ImageCacheItem
lz	server/red_worker.c	/^    LzContext  *lz;$/;"	m	struct:RedWorker	file:
lz	spice-common/common/canvas_base.c	/^    LzContext *lz;$/;"	m	struct:LzData	file:
lz_alloc_image_seg	spice-common/common/lz.c	/^static inline LzImageSegment *lz_alloc_image_seg(Encoder *encoder)$/;"	f	file:
lz_create	spice-common/common/lz.c	/^LzContext *lz_create(LzUsrContext *usr)$/;"	f
lz_data	server/red_worker.c	/^    LzData lz_data;$/;"	m	struct:RedWorker	file:
lz_data	spice-common/common/canvas_base.c	/^    LzData lz_data;$/;"	m	struct:CanvasBase	file:
lz_dealloc_free_segments	spice-common/common/lz.c	/^static void lz_dealloc_free_segments(Encoder *encoder)$/;"	f	file:
lz_decode	spice-common/common/lz.c	/^void lz_decode(LzContext *lz, LzImageType to_type, uint8_t *buf)$/;"	f
lz_decode_begin	spice-common/common/lz.c	/^void lz_decode_begin(LzContext *lz, uint8_t *io_ptr, unsigned int num_io_bytes,$/;"	f
lz_destroy	spice-common/common/lz.c	/^void lz_destroy(LzContext *lz)$/;"	f
lz_encode	spice-common/common/lz.c	/^int lz_encode(LzContext *lz, LzImageType type, int width, int height, int top_down,$/;"	f
lz_plt	spice-common/common/draw.h	/^        SpiceLZPLTData      lz_plt;$/;"	m	union:SpiceImage::__anon35
lz_read_image_segments	spice-common/common/lz.c	/^static int lz_read_image_segments(Encoder *encoder, uint8_t *first_lines,$/;"	f	file:
lz_reset_image_seg	spice-common/common/lz.c	/^static void lz_reset_image_seg(Encoder *encoder)$/;"	f	file:
lz_rgb	spice-common/common/draw.h	/^        SpiceLZRGBData      lz_rgb;$/;"	m	union:SpiceImage::__anon35
lz_stat	server/red_worker.c	/^    stat_info_t lz_stat;$/;"	m	struct:DisplayChannel	file:
lz_stat_name	server/red_worker.c	/^static const char *lz_stat_name = "lz";$/;"	v	file:
lz_usr_error	server/red_worker.c	/^lz_usr_error(LzUsrContext *usr, const char *fmt, ...)$/;"	f
lz_usr_error	spice-common/common/canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void lz_usr_error(LzUsrContext *usr, const char *fmt, ...)$/;"	f	file:
lz_usr_free	server/red_worker.c	/^static void lz_usr_free(LzUsrContext *usr, void *ptr)$/;"	f	file:
lz_usr_free	spice-common/common/canvas_base.c	/^static void lz_usr_free(LzUsrContext *usr, void *ptr)$/;"	f	file:
lz_usr_malloc	server/red_worker.c	/^static void *lz_usr_malloc(LzUsrContext *usr, int size)$/;"	f	file:
lz_usr_malloc	spice-common/common/canvas_base.c	/^static void *lz_usr_malloc(LzUsrContext *usr, int size)$/;"	f	file:
lz_usr_more_lines	server/red_worker.c	/^static int lz_usr_more_lines(LzUsrContext *usr, uint8_t **lines)$/;"	f	file:
lz_usr_more_lines	spice-common/common/canvas_base.c	/^static int lz_usr_more_lines(LzUsrContext *usr, uint8_t **lines)$/;"	f	file:
lz_usr_more_space	server/red_worker.c	/^static int lz_usr_more_space(LzUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:
lz_usr_more_space	spice-common/common/canvas_base.c	/^static int lz_usr_more_space(LzUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:
lz_usr_warn	server/red_worker.c	/^static SPICE_GNUC_PRINTF(2, 3) void lz_usr_warn(LzUsrContext *usr, const char *fmt, ...)$/;"	f
lz_usr_warn	spice-common/common/canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void lz_usr_warn(LzUsrContext *usr, const char *fmt, ...)$/;"	f	file:
lzeroes	spice-common/common/quic.c	/^static const BYTE lzeroes[256] = {$/;"	v	file:
lzplt_palette	server/red_worker.c	/^    SpicePalette *lzplt_palette;$/;"	m	struct:compress_send_data_t	file:
macro	spice-common/python_modules/codegen.py	/^    def macro(self, name, args, define):$/;"	m	class:CodeWriter
magic	server/migration_protocol.h	/^    uint32_t magic;$/;"	m	struct:SpiceMigrateDataHeader
magic	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t magic;$/;"	m	struct:ControllerInitHeader
magic	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t magic;$/;"	m	struct:FrgMenuInitHeader
magic	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t magic;$/;"	m	struct:SpiceLinkHeader
magic	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t magic;$/;"	m	struct:QXLRam
magic	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t magic;$/;"	m	struct:QXLRom
magic	spice-common/spice-protocol/spice/stats.h	/^    uint32_t magic;$/;"	m	struct:SpiceStat
magic	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t magic;$/;"	m	struct:VDIPortRam
main	client/application.cpp	/^int Application::main(int argc, char** argv, const char* version_str)$/;"	f	class:Application
main	client/hot_keys.h	/^    RedKey main;$/;"	m	struct:HotkeyKey
main	client/x11/main.cpp	/^int main(int argc, char** argv)$/;"	f
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	server/red_channel.h	/^        } main;$/;"	m	struct:RedChannelClient::__anon148	typeref:struct:RedChannelClient::__anon148::__anon149
main	server/tests/test_display_no_ssl.c	/^int main(void)$/;"	f
main	server/tests/test_display_resolution_changes.c	/^int main(void)$/;"	f
main	server/tests/test_display_streaming.c	/^int main(int argc, char **argv)$/;"	f
main	server/tests/test_display_width_stride.c	/^int main(void)$/;"	f
main	server/tests/test_empty_success.c	/^int main(void)$/;"	f
main	server/tests/test_fail_on_null_core_interface.c	/^int main(void)$/;"	f
main	server/tests/test_just_sockets_no_ssl.c	/^int main(void)$/;"	f
main	server/tests/test_playback.c	/^int main(void)$/;"	f
main	server/tests/test_two_servers.c	/^int main(void)$/;"	f
main	server/tests/test_vdagent.c	/^int main(void)$/;"	f
main	spice-common/build-aux/config.guess	/^		main()$/;"	f
main	spice-common/build-aux/config.guess	/^	main ()$/;"	f
main	spice-common/build-aux/config.guess	/^main ()$/;"	f
main	spice-common/common/region.c	/^int main(void)$/;"	f
main_agent_data_item_new	server/main_channel.c	/^static PipeItem *main_agent_data_item_new(RedChannelClient *rcc, uint8_t* data, size_t len,$/;"	f	file:
main_agent_tokens_item_new	server/main_channel.c	/^static PipeItem *main_agent_tokens_item_new(RedChannelClient *rcc, uint32_t num_tokens)$/;"	f	file:
main_channel	server/reds-private.h	/^    MainChannel *main_channel;$/;"	m	struct:RedsState
main_channel_alloc_msg_rcv_buf	server/main_channel.c	/^static uint8_t *main_channel_alloc_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
main_channel_client_create	server/main_channel.c	/^static MainChannelClient *main_channel_client_create(MainChannel *main_chan, RedClient *client,$/;"	f	file:
main_channel_client_get_base	server/main_channel.c	/^RedChannelClient* main_channel_client_get_base(MainChannelClient* mcc)$/;"	f
main_channel_client_get_bitrate_per_sec	server/main_channel.c	/^uint64_t main_channel_client_get_bitrate_per_sec(MainChannelClient *mcc)$/;"	f
main_channel_client_get_link_id	server/main_channel.c	/^uint32_t main_channel_client_get_link_id(MainChannelClient *mcc)$/;"	f
main_channel_client_get_roundtrip_ms	server/main_channel.c	/^uint64_t main_channel_client_get_roundtrip_ms(MainChannelClient *mcc)$/;"	f
main_channel_client_handle_migrate_connected	server/main_channel.c	/^static void main_channel_client_handle_migrate_connected(MainChannelClient *mcc,$/;"	f	file:
main_channel_client_handle_migrate_dst_do_seamless	server/main_channel.c	/^void main_channel_client_handle_migrate_dst_do_seamless(MainChannelClient *mcc,$/;"	f
main_channel_client_handle_migrate_end	server/main_channel.c	/^void main_channel_client_handle_migrate_end(MainChannelClient *mcc)$/;"	f
main_channel_client_is_low_bandwidth	server/main_channel.c	/^int main_channel_client_is_low_bandwidth(MainChannelClient *mcc)$/;"	f
main_channel_client_is_network_info_initialized	server/main_channel.c	/^int main_channel_client_is_network_info_initialized(MainChannelClient *mcc)$/;"	f
main_channel_client_migrate	server/main_channel.c	/^static void main_channel_client_migrate(RedChannelClient *rcc)$/;"	f	file:
main_channel_client_on_disconnect	server/main_channel.c	/^static void main_channel_client_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
main_channel_client_push_agent_data	server/main_channel.c	/^void main_channel_client_push_agent_data(MainChannelClient *mcc, uint8_t* data, size_t len,$/;"	f
main_channel_client_push_agent_tokens	server/main_channel.c	/^void main_channel_client_push_agent_tokens(MainChannelClient *mcc, uint32_t num_tokens)$/;"	f
main_channel_client_push_notify	server/main_channel.c	/^void main_channel_client_push_notify(MainChannelClient *mcc, const char *msg)$/;"	f
main_channel_client_push_ping	server/main_channel.c	/^int main_channel_client_push_ping(MainChannelClient *mcc, int size)$/;"	f
main_channel_client_start_net_test	server/main_channel.c	/^void main_channel_client_start_net_test(MainChannelClient *mcc, int test_rate)$/;"	f
main_channel_close	server/main_channel.c	/^void main_channel_close(MainChannel *main_chan)$/;"	f
main_channel_config_socket	server/main_channel.c	/^static int main_channel_config_socket(RedChannelClient *rcc)$/;"	f	file:
main_channel_connect_seamless	server/main_channel.c	/^static int main_channel_connect_seamless(MainChannel *main_channel)$/;"	f	file:
main_channel_connect_semi_seamless	server/main_channel.c	/^static int main_channel_connect_semi_seamless(MainChannel *main_channel)$/;"	f	file:
main_channel_fill_mig_target	server/main_channel.c	/^static void main_channel_fill_mig_target(MainChannel *main_channel, RedsMigSpice *mig_target)$/;"	f	file:
main_channel_fill_migrate_dst_info	server/main_channel.c	/^static void main_channel_fill_migrate_dst_info(MainChannel *main_channel,$/;"	f	file:
main_channel_get_client_by_link_id	server/main_channel.c	/^RedClient *main_channel_get_client_by_link_id(MainChannel *main_chan, uint32_t connection_id)$/;"	f
main_channel_getpeername	server/main_channel.c	/^int main_channel_getpeername(MainChannel *main_chan, struct sockaddr *sa, socklen_t *salen)$/;"	f
main_channel_getsockname	server/main_channel.c	/^int main_channel_getsockname(MainChannel *main_chan, struct sockaddr *sa, socklen_t *salen)$/;"	f
main_channel_handle_migrate_data	server/main_channel.c	/^static int main_channel_handle_migrate_data(RedChannelClient *rcc,$/;"	f	file:
main_channel_handle_migrate_flush_mark	server/main_channel.c	/^static int main_channel_handle_migrate_flush_mark(RedChannelClient *rcc)$/;"	f	file:
main_channel_handle_parsed	server/main_channel.c	/^static int main_channel_handle_parsed(RedChannelClient *rcc, uint32_t size, uint16_t type,$/;"	f	file:
main_channel_hold_pipe_item	server/main_channel.c	/^static void main_channel_hold_pipe_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
main_channel_init	server/main_channel.c	/^MainChannel* main_channel_init(void)$/;"	f
main_channel_is_connected	server/main_channel.c	/^int main_channel_is_connected(MainChannel *main_chan)$/;"	f
main_channel_link	server/main_channel.c	/^MainChannelClient *main_channel_link(MainChannel *channel, RedClient *client,$/;"	f
main_channel_marshall_agent_connected	server/main_channel.c	/^static void main_channel_marshall_agent_connected(SpiceMarshaller *m,$/;"	f	file:
main_channel_marshall_agent_data	server/main_channel.c	/^static void main_channel_marshall_agent_data(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_agent_disconnected	server/main_channel.c	/^static void main_channel_marshall_agent_disconnected(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_channels	server/main_channel.c	/^static void main_channel_marshall_channels(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_init	server/main_channel.c	/^static void main_channel_marshall_init(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_migrate_begin	server/main_channel.c	/^static void main_channel_marshall_migrate_begin(SpiceMarshaller *m, RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_migrate_begin_seamless	server/main_channel.c	/^static void main_channel_marshall_migrate_begin_seamless(SpiceMarshaller *m,$/;"	f	file:
main_channel_marshall_migrate_data_item	server/main_channel.c	/^static void main_channel_marshall_migrate_data_item(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_migrate_switch	server/main_channel.c	/^static void main_channel_marshall_migrate_switch(SpiceMarshaller *m, RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_mouse_mode	server/main_channel.c	/^static void main_channel_marshall_mouse_mode(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_multi_media_time	server/main_channel.c	/^static void main_channel_marshall_multi_media_time(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_notify	server/main_channel.c	/^static void main_channel_marshall_notify(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_ping	server/main_channel.c	/^static void main_channel_marshall_ping(RedChannelClient *rcc,$/;"	f	file:
main_channel_marshall_tokens	server/main_channel.c	/^static void main_channel_marshall_tokens(RedChannelClient *rcc,$/;"	f	file:
main_channel_migrate_cancel_wait	server/main_channel.c	/^void main_channel_migrate_cancel_wait(MainChannel *main_chan)$/;"	f
main_channel_migrate_connect	server/main_channel.c	/^int main_channel_migrate_connect(MainChannel *main_channel, RedsMigSpice *mig_target,$/;"	f
main_channel_migrate_dst_complete	server/main_channel.c	/^void main_channel_migrate_dst_complete(MainChannelClient *mcc)$/;"	f
main_channel_migrate_src_complete	server/main_channel.c	/^int main_channel_migrate_src_complete(MainChannel *main_chan, int success)$/;"	f
main_channel_migrate_switch	server/main_channel.c	/^void main_channel_migrate_switch(MainChannel *main_chan, RedsMigSpice *mig_target)$/;"	f
main_channel_push_agent_connected	server/main_channel.c	/^void main_channel_push_agent_connected(MainChannel *main_chan)$/;"	f
main_channel_push_agent_disconnected	server/main_channel.c	/^void main_channel_push_agent_disconnected(MainChannel *main_chan)$/;"	f
main_channel_push_channels	server/main_channel.c	/^static void main_channel_push_channels(MainChannelClient *mcc)$/;"	f	file:
main_channel_push_init	server/main_channel.c	/^void main_channel_push_init(MainChannelClient *mcc,$/;"	f
main_channel_push_migrate_data_item	server/main_channel.c	/^static void main_channel_push_migrate_data_item(MainChannel *main_chan)$/;"	f	file:
main_channel_push_mouse_mode	server/main_channel.c	/^void main_channel_push_mouse_mode(MainChannel *main_chan, int current_mode,$/;"	f
main_channel_push_multi_media_time	server/main_channel.c	/^void main_channel_push_multi_media_time(MainChannel *main_chan, int time)$/;"	f
main_channel_push_name	server/main_channel.c	/^void main_channel_push_name(MainChannelClient *mcc, const char *name)$/;"	f
main_channel_push_notify	server/main_channel.c	/^void main_channel_push_notify(MainChannel *main_chan, const char *msg)$/;"	f
main_channel_push_uuid	server/main_channel.c	/^void main_channel_push_uuid(MainChannelClient *mcc, const uint8_t uuid[16])$/;"	f
main_channel_release_msg_rcv_buf	server/main_channel.c	/^static void main_channel_release_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
main_channel_release_pipe_item	server/main_channel.c	/^static void main_channel_release_pipe_item(RedChannelClient *rcc,$/;"	f	file:
main_channel_send_item	server/main_channel.c	/^static void main_channel_send_item(RedChannelClient *rcc, PipeItem *base)$/;"	f	file:
main_dispatcher	server/main_dispatcher.c	/^MainDispatcher main_dispatcher;$/;"	v
main_dispatcher_channel_event	server/main_dispatcher.c	/^void main_dispatcher_channel_event(int event, SpiceChannelEventInfo *info)$/;"	f
main_dispatcher_client_disconnect	server/main_dispatcher.c	/^void main_dispatcher_client_disconnect(RedClient *client)$/;"	f
main_dispatcher_handle_channel_event	server/main_dispatcher.c	/^static void main_dispatcher_handle_channel_event(void *opaque,$/;"	f	file:
main_dispatcher_handle_client_disconnect	server/main_dispatcher.c	/^static void main_dispatcher_handle_client_disconnect(void *opaque,$/;"	f	file:
main_dispatcher_handle_migrate_complete	server/main_dispatcher.c	/^static void main_dispatcher_handle_migrate_complete(void *opaque,$/;"	f	file:
main_dispatcher_handle_mm_time_latency	server/main_dispatcher.c	/^static void main_dispatcher_handle_mm_time_latency(void *opaque,$/;"	f	file:
main_dispatcher_init	server/main_dispatcher.c	/^void main_dispatcher_init(SpiceCoreInterface *core)$/;"	f
main_dispatcher_seamless_migrate_dst_complete	server/main_dispatcher.c	/^void main_dispatcher_seamless_migrate_dst_complete(RedClient *client)$/;"	f
main_dispatcher_self_handle_channel_event	server/main_dispatcher.c	/^static void main_dispatcher_self_handle_channel_event($/;"	f	file:
main_dispatcher_set_mm_time_latency	server/main_dispatcher.c	/^void main_dispatcher_set_mm_time_latency(RedClient *client, uint32_t latency)$/;"	f
main_init_item_new	server/main_channel.c	/^static PipeItem *main_init_item_new(MainChannelClient *mcc,$/;"	f	file:
main_loop	client/windows/platform.cpp	/^static ProcessLoop* main_loop = NULL;$/;"	v	file:
main_loop	client/x11/platform.cpp	/^static ProcessLoop* main_loop = NULL;$/;"	v	file:
main_mouse_mode_item_new	server/main_channel.c	/^static PipeItem *main_mouse_mode_item_new(RedChannelClient *rcc, void *data, int num)$/;"	f	file:
main_multi_media_time_item_new	server/main_channel.c	/^static PipeItem *main_multi_media_time_item_new($/;"	f	file:
main_name_item_new	server/main_channel.c	/^static PipeItem *main_name_item_new(MainChannelClient *mcc, const char *name)$/;"	f	file:
main_notify_item_new	server/main_channel.c	/^static PipeItem *main_notify_item_new(RedChannelClient *rcc, void *data, int num)$/;"	f	file:
main_ping_item_new	server/main_channel.c	/^static PipeItem *main_ping_item_new(MainChannelClient *mcc, int size)$/;"	f	file:
main_uuid_item_new	server/main_channel.c	/^static PipeItem *main_uuid_item_new(MainChannelClient *mcc, const uint8_t uuid[16])$/;"	f	file:
maintenance	client/display_channel.cpp	/^void VideoStream::maintenance()$/;"	f	class:VideoStream
major_version	server/spice.h	/^    uint32_t major_version;$/;"	m	struct:QXLWorker
major_version	server/spice.h	/^    uint32_t major_version;$/;"	m	struct:SpiceBaseInterface
major_version	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t major_version;$/;"	m	struct:SpiceLinkHeader
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
make_dummy_depfile	spice-common/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_scan	client/inputs_channel.h	/^        uint32_t make_scan;$/;"	m	struct:InputsChannel::KeyInfo
malloc	server/glz_encoder_config.h	/^    void    *(*malloc)(GlzEncoderUsrContext *usr, int size);$/;"	m	struct:GlzEncoderUsrContext
malloc	spice-common/common/lz.h	/^    void    *(*malloc)(LzUsrContext *usr, int size);$/;"	m	struct:LzUsrContext
malloc	spice-common/common/quic.h	/^    void *(*malloc)(QuicUsrContext *usr, int size);$/;"	m	struct:QuicUsrContext
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	client/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	docs/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	docs/manual/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	server/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	server/tests/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	spice-common/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	spice-common/common/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	spice-common/python_modules/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	spice-common/spice-protocol/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	spice-common/spice-protocol/spice/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
marshal	spice-common/spice_codegen.py	/^from python_modules import marshal$/;"	i
marshall_motion_event	client/inputs_channel.cpp	/^void InputsChannel::marshall_motion_event(SpiceMarshaller *marshaller)$/;"	f	class:InputsChannel
marshall_position_event	client/inputs_channel.cpp	/^void InputsChannel::marshall_position_event(SpiceMarshaller *marshaller)$/;"	f	class:InputsChannel
marshall_qxl_drawable	server/red_worker.c	/^static inline void marshall_qxl_drawable(RedChannelClient *rcc,$/;"	f	file:
marshaller	client/red_peer.h	/^    SpiceMarshaller *marshaller() { return _marshaller;}$/;"	f	class:RedPeer::OutMessage
marshaller	server/red_channel.h	/^            SpiceMarshaller *marshaller;$/;"	m	struct:RedChannelClient::__anon148::__anon149
marshaller	server/red_channel.h	/^            SpiceMarshaller *marshaller;$/;"	m	struct:RedChannelClient::__anon148::__anon150
marshaller	server/red_channel.h	/^        SpiceMarshaller *marshaller;$/;"	m	struct:RedChannelClient::__anon148
marshaller	server/snd_worker.c	/^        SpiceMarshaller *marshaller;$/;"	m	struct:SndChannel::__anon139	file:
marshaller	spice-common/common/marshaller.c	/^    SpiceMarshaller *marshaller;$/;"	m	struct:__anon19	file:
marshaller_add_compressed	server/red_worker.c	/^static void marshaller_add_compressed(SpiceMarshaller *m,$/;"	f	file:
marshallers	spice-common/common/marshaller.c	/^    SpiceMarshaller *marshallers;$/;"	m	struct:SpiceMarshallerData	file:
mask	client/red_types.h	/^    uint8_t* mask;$/;"	m	struct:IconHeader
mask	client/x11/images/red_icon.c	/^    uint8_t mask[128];$/;"	m	struct:__anon123	file:
mask	client/x11/x_icon.h	/^        Pixmap mask;$/;"	m	class:XIcon::ScreenIcon
mask	spice-common/common/draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceBlackness
mask	spice-common/common/draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceCopy
mask	spice-common/common/draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceFill
mask	spice-common/common/draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceOpaque
mask	spice-common/common/draw.h	/^    SpiceQMask mask;$/;"	m	struct:SpiceRop3
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL		mask;			\/* May be NULL *\/$/;"	m	struct:QXLComposite
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLQMask mask;$/;"	m	struct:QXLBlackness
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLQMask mask;$/;"	m	struct:QXLCopy
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLQMask mask;$/;"	m	struct:QXLFill
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLQMask mask;$/;"	m	struct:QXLOpaque
mask	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLQMask mask;$/;"	m	struct:QXLRop3
mask_bitmap	spice-common/common/draw.h	/^    SpiceImage *mask_bitmap;$/;"	m	struct:SpiceComposite
mask_origin	spice-common/common/draw.h	/^    SpicePoint16 mask_origin;$/;"	m	struct:SpiceComposite
mask_origin	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint16		mask_origin;$/;"	m	struct:QXLComposite
mask_transform	spice-common/common/draw.h	/^    SpiceTransform mask_transform;$/;"	m	struct:SpiceComposite
mask_transform	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL		mask_transform;		\/* May be NULL *\/$/;"	m	struct:QXLComposite
max	server/red_worker.c	/^    stat_time_t max;$/;"	m	struct:stat_info_s	file:
max	server/reds-private.h	/^    uint32_t max;$/;"	m	struct:RedsStatValue
max	spice-common/spice-protocol/spice/vd_agent.h	/^    int32_t max;$/;"	m	struct:VDAgentMaxClipboard
max_allowed	server/red_worker.c	/^    int max_allowed;$/;"	m	struct:MonitorsConfig	file:
max_allowed	spice-common/common/messages.h	/^    uint16_t max_allowed;$/;"	m	struct:SpiceMsgDisplayMonitorsConfig
max_allowed	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t max_allowed; \/* If it is 0 no fixed limit is given by the driver *\/$/;"	m	struct:QXLMonitorsConfig
max_audio_latency	server/mjpeg_encoder.c	/^    uint32_t max_audio_latency;$/;"	m	struct:MJpegEncoderClientState	file:
max_b_frames	server/h264_type.h	/^    int max_b_frames;$/;"	m	struct:_H264StreamInfo
max_encoders	server/glz_encoder_dictionary.h	/^    uint32_t max_encoders;$/;"	m	struct:GlzEncDictRestoreData
max_encoders	server/glz_encoder_dictionary_protected.h	/^    uint32_t max_encoders;$/;"	m	struct:SharedDictionary
max_message_type	server/dispatcher.h	/^    size_t max_message_type;$/;"	m	struct:Dispatcher
max_num_of_sockets	spice-common/common/messages.h	/^    uint16_t max_num_of_sockets;$/;"	m	struct:SpiceMsgTunnelInit
max_quality_fps	server/mjpeg_encoder.c	/^    int max_quality_fps; \/\/ max fps for the given quality$/;"	m	struct:MJpegEncoderQualityEval	file:
max_quality_id	server/mjpeg_encoder.c	/^    int max_quality_id;$/;"	m	struct:MJpegEncoderQualityEval	file:
max_sampled_fps	server/mjpeg_encoder.c	/^    int max_sampled_fps;$/;"	m	struct:MJpegEncoderQualityEval	file:
max_sampled_fps_quality_id	server/mjpeg_encoder.c	/^    int max_sampled_fps_quality_id;$/;"	m	struct:MJpegEncoderQualityEval	file:
max_send_queue_size	server/char_device.c	/^    uint32_t max_send_queue_size;$/;"	m	struct:SpiceCharDeviceClientState	file:
max_socket_data_size	spice-common/common/messages.h	/^    uint32_t max_socket_data_size;$/;"	m	struct:SpiceMsgTunnelInit
max_t	server/tests/test_display_base.c	/^    int max_t;$/;"	m	struct:Path	file:
max_texture_size	spice-common/common/glc.c	/^    int max_texture_size;$/;"	m	struct:InternaCtx	file:
max_video_latency	server/mjpeg_encoder.c	/^    int max_video_latency;$/;"	m	struct:MJpegEncoderClientState	file:
max_window_size	spice-common/common/messages.h	/^    uint32_t max_window_size;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport
mb	client/windows/platform_utils.h	26;"	d
mcc	server/red_channel.h	/^    MainChannelClient *mcc;$/;"	m	struct:RedClient
mcc	server/reds-private.h	/^    MainChannelClient *mcc;$/;"	m	struct:RedsClientMonitorsConfig
mechlist	server/reds_stream.c	/^    char *mechlist;$/;"	m	struct:RedsSASL	file:
mechname	server/reds_stream.c	/^    char *mechname;$/;"	m	struct:RedsSASL	file:
melclen	spice-common/common/quic.c	/^    int melclen;  \/* contents of the state array location$/;"	m	struct:CommonState	file:
melcorder	spice-common/common/quic.c	/^    unsigned long melcorder;  \/* 2^ melclen *\/$/;"	m	struct:CommonState	file:
melcstate	spice-common/common/quic.c	/^    int melcstate; \/* index to the state array *\/$/;"	m	struct:CommonState	file:
mem	server/spice.h	/^    uint64_t mem;$/;"	m	struct:QXLDevSurfaceCreate
mem	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL mem;$/;"	m	struct:QXLSurfaceCreate
mem_destination_mgr	server/mjpeg_encoder.c	/^} mem_destination_mgr;$/;"	t	typeref:struct:__anon196	file:
mem_end	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t mem_end;$/;"	m	struct:QXLMemSlot
mem_size	spice-common/python_modules/demarshal.py	/^    def mem_size(self):$/;"	m	class:ItemInfo
mem_slot	server/red_dispatcher.h	/^    QXLDevMemSlot mem_slot;$/;"	m	struct:RedWorkerMessageAddMemslot
mem_slot	server/red_dispatcher.h	/^    QXLDevMemSlot mem_slot;$/;"	m	struct:RedWorkerMessageAddMemslotAsync
mem_slot	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLMemSlot mem_slot;$/;"	m	struct:QXLRam
mem_slot_bits	server/red_memslots.h	/^    uint8_t mem_slot_bits;$/;"	m	struct:RedMemSlotInfo
mem_slots	server/red_memslots.h	/^    MemSlot **mem_slots;$/;"	m	struct:RedMemSlotInfo
mem_slots	server/red_worker.c	/^    RedMemSlotInfo mem_slots;$/;"	m	struct:RedWorker	file:
mem_start	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t mem_start;$/;"	m	struct:QXLMemSlot
memslot_clean_virt_mask	server/red_memslots.h	/^    unsigned long memslot_clean_virt_mask;$/;"	m	struct:RedMemSlotInfo
memslot_gen_bits	server/red_worker.h	/^    uint8_t memslot_gen_bits;$/;"	m	struct:WorkerInitData
memslot_gen_bits	server/spice.h	/^    uint8_t memslot_gen_bits;$/;"	m	struct:QXLDevInitInfo
memslot_gen_mask	server/red_memslots.h	/^    unsigned long memslot_gen_mask;$/;"	m	struct:RedMemSlotInfo
memslot_gen_shift	server/red_memslots.h	/^    uint8_t memslot_gen_shift;$/;"	m	struct:RedMemSlotInfo
memslot_id_bits	server/red_worker.h	/^    uint8_t memslot_id_bits;$/;"	m	struct:WorkerInitData
memslot_id_bits	server/spice.h	/^    uint8_t memslot_id_bits;$/;"	m	struct:QXLDevInitInfo
memslot_id_shift	server/red_memslots.h	/^    uint8_t memslot_id_shift;$/;"	m	struct:RedMemSlotInfo
menu	client/windows/red_window_p.h	/^    Menu* menu;$/;"	m	class:CommandInfo
mess_pos	server/reds.c	/^    int mess_pos;$/;"	m	struct:RedLinkInfo	file:
message	server/red_dispatcher.c	/^    RedWorkerMessage message;$/;"	m	struct:AsyncCommand	file:
message	server/red_worker.c	/^        uint64_t message;$/;"	m	struct:PixmapCache::__anon176	file:
message	spice-common/common/messages.h	/^    uint8_t message[0];$/;"	m	struct:SpiceMsgNotify
message_box	client/gui/gui.cpp	/^bool GUI::Dialog::message_box(MessageType type, const char *text, const ButtonsList& buttons,$/;"	f	class:GUI::Dialog
message_box	client/gui/gui.cpp	/^bool GUI::message_box(MessageType type, const char *text, const ButtonsList& buttons,$/;"	f	class:GUI
message_box_test	client/application.cpp	/^void Application::message_box_test()$/;"	f	class:Application
message_buf	server/red_worker.c	/^    char message_buf[512];$/;"	m	struct:__anon177	file:
message_buf	spice-common/common/canvas_base.c	/^    char message_buf[512];$/;"	m	struct:LzData	file:
message_buf	spice-common/common/canvas_base.c	/^    char message_buf[512];$/;"	m	struct:QuicData	file:
message_destructor_t	server/demarshallers.h	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t
message_destructor_t	spice-common/common/client_demarshallers.h	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t
message_destructor_t	spice-common/common/generated_client_demarshallers.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_destructor_t	spice-common/common/generated_client_demarshallers1.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_destructor_t	spice-common/common/generated_server_demarshallers.c	/^typedef void (*message_destructor_t)(uint8_t *message);$/;"	t	file:
message_len	spice-common/common/messages.h	/^    uint32_t message_len;$/;"	m	struct:SpiceMsgNotify
message_receive_len	server/reds-private.h	/^    uint32_t message_receive_len;$/;"	m	struct:VDIPortState
message_serial	client/red_channel.h	/^    uint64_t* message_serial;$/;"	m	struct:SyncInfo
message_serial	server/migration_protocol.h	/^    uint64_t message_serial;$/;"	m	struct:SpiceMigrateDataDisplay
message_serial	spice-common/common/messages.h	/^    uint64_t message_serial;$/;"	m	struct:SpiceWaitForChannel
message_size	client/red_peer.h	/^    uint32_t message_size() { return spice_marshaller_get_total_size(_marshaller);}$/;"	f	class:RedPeer::OutMessage
message_start	server/snd_worker.c	/^        uint8_t *message_start;$/;"	m	struct:SndChannel::__anon140	file:
messages	server/dispatcher.h	/^    DispatcherMessage *messages;$/;"	m	struct:Dispatcher
messages_window	server/red_channel.h	/^        uint32_t messages_window;$/;"	m	struct:RedChannelClient::__anon147
miAppendSpans	spice-common/common/lines.c	/^miAppendSpans (SpanGroup * spanGroup, SpanGroup * otherGroup, Spans * spans)$/;"	f	file:
miCleanupSpanData	spice-common/common/lines.c	/^miCleanupSpanData (GCPtr pGC, SpanDataPtr spanData)$/;"	f	file:
miDisposeSpanGroup	spice-common/common/lines.c	/^miDisposeSpanGroup (SpanGroup * spanGroup)$/;"	f	file:
miFillPolyHelper	spice-common/common/lines.c	/^miFillPolyHelper (GCPtr pGC, Boolean foreground,$/;"	f	file:
miFillRectPolyHelper	spice-common/common/lines.c	/^miFillRectPolyHelper (GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int x, int y, int w, int h)$/;"	f	file:
miFillUniqueSpanGroup	spice-common/common/lines.c	/^miFillUniqueSpanGroup (GCPtr pGC, SpanGroup * spanGroup, Boolean foreground)$/;"	f	file:
miFreeSpanGroup	spice-common/common/lines.c	/^miFreeSpanGroup (SpanGroup * spanGroup)$/;"	f	file:
miGetZeroLineBias	spice-common/common/lines.c	215;"	d	file:
miInitSpanGroup	spice-common/common/lines.c	/^miInitSpanGroup (SpanGroup * spanGroup)$/;"	f	file:
miLineArc	spice-common/common/lines.c	/^miLineArc (GCPtr pGC,$/;"	f	file:
miLineArcD	spice-common/common/lines.c	/^miLineArcD (GCPtr pGC,$/;"	f	file:
miLineArcI	spice-common/common/lines.c	/^miLineArcI (GCPtr pGC, int xorg, int yorg, DDXPointPtr points, int *widths)$/;"	f	file:
miLineJoin	spice-common/common/lines.c	/^miLineJoin (GCPtr pGC, Boolean foreground, SpanDataPtr spanData, LineFacePtr pLeft, LineFacePtr pRight)$/;"	f	file:
miLineOnePoint	spice-common/common/lines.c	/^miLineOnePoint (GCPtr pGC, Boolean foreground, SpanDataPtr spanData, int x, int y)$/;"	f	file:
miLineProjectingCap	spice-common/common/lines.c	/^miLineProjectingCap (GCPtr pGC, Boolean foreground,$/;"	f	file:
miPolyBuildEdge	spice-common/common/lines.c	/^miPolyBuildEdge (double x0, double y0, double k,        \/* x0 * dy - y0 * dx *\/$/;"	f	file:
miPolyBuildPoly	spice-common/common/lines.c	/^miPolyBuildPoly (PolyVertexPtr vertices,$/;"	f	file:
miRoundCapClip	spice-common/common/lines.c	/^miRoundCapClip (LineFacePtr face, Boolean isInt, PolyEdgePtr edge, Boolean * leftEdge)$/;"	f	file:
miRoundJoinClip	spice-common/common/lines.c	/^miRoundJoinClip (LineFacePtr pLeft, LineFacePtr pRight,$/;"	f	file:
miRoundJoinFace	spice-common/common/lines.c	/^miRoundJoinFace (LineFacePtr face, PolyEdgePtr edge, Boolean * leftEdge)$/;"	f	file:
miSetupSpanData	spice-common/common/lines.c	/^miSetupSpanData (GCPtr pGC, SpanDataPtr spanData, int npt)$/;"	f	file:
miSpansCarefulRop	spice-common/common/lines.c	127;"	d	file:
miSpansEasyRop	spice-common/common/lines.c	128;"	d	file:
miStepDash	spice-common/common/lines.c	/^miStepDash (int dist,           \/* distance to step *\/$/;"	f	file:
miSubtractSpans	spice-common/common/lines.c	/^miSubtractSpans (SpanGroup * spanGroup, Spans * sub)$/;"	f	file:
miWideDash	spice-common/common/lines.c	/^miWideDash (GCPtr pGC, int mode, int npt, DDXPointPtr pPts)$/;"	f
miWideDash	spice-common/common/lines.c	84;"	d	file:
miWideDashSegment	spice-common/common/lines.c	/^miWideDashSegment (GCPtr pGC,$/;"	f	file:
miWideLine	spice-common/common/lines.c	/^miWideLine (GCPtr pGC, int mode, int npt, DDXPointPtr pPts)$/;"	f
miWideLine	spice-common/common/lines.c	85;"	d	file:
miWideSegment	spice-common/common/lines.c	/^miWideSegment (GCPtr pGC,$/;"	f	file:
miZeroClipLine	spice-common/common/lines.c	/^miZeroClipLine (int xmin, int ymin, int xmax, int ymax,$/;"	f	file:
miZeroDashLine	spice-common/common/lines.c	/^miZeroDashLine (GCPtr pgc, int mode, int nptInit,       \/* number of points in polyline *\/$/;"	f
miZeroDashLine	spice-common/common/lines.c	83;"	d	file:
miZeroLine	spice-common/common/lines.c	/^miZeroLine (GCPtr pGC, int mode,        \/* Origin or Previous *\/$/;"	f
miZeroLine	spice-common/common/lines.c	82;"	d	file:
mig_connect_ok	server/main_channel.c	/^    int mig_connect_ok;$/;"	m	struct:MainChannelClient	file:
mig_data	server/reds-private.h	/^    SpiceMigrateDataMain *mig_data; \/* storing it when migration data arrives$/;"	m	struct:VDIPortState
mig_inprogress	server/reds-private.h	/^    int mig_inprogress;$/;"	m	struct:RedsState
mig_spice	server/reds-private.h	/^    RedsMigSpice *mig_spice;$/;"	m	struct:RedsState
mig_target	server/main_channel.h	/^    RedsMigSpice mig_target; \/\/ TODO: add refs and release (afrer all clients completed migration in one way or the other?)$/;"	m	struct:MainChannel
mig_target_clients	server/reds-private.h	/^    Ring mig_target_clients;$/;"	m	struct:RedsState
mig_timer	server/reds-private.h	/^    SpiceTimer *mig_timer;$/;"	m	struct:RedsState
mig_wait_connect	server/main_channel.c	/^    int mig_wait_connect;$/;"	m	struct:MainChannelClient	file:
mig_wait_connect	server/reds-private.h	/^    int mig_wait_connect; \/* src waits for clients to establish connection to dest$/;"	m	struct:RedsState
mig_wait_disconnect	server/reds-private.h	/^    int mig_wait_disconnect; \/* src waits for clients to disconnect (after migration completes) *\/$/;"	m	struct:RedsState
mig_wait_disconnect_clients	server/reds-private.h	/^    Ring mig_wait_disconnect_clients; \/* List of RedsMigWaitDisconnectClient. Holds the clients$/;"	m	struct:RedsState
mig_wait_prev_complete	server/main_channel.c	/^    int mig_wait_prev_complete;$/;"	m	struct:MainChannelClient	file:
mig_wait_prev_try_seamless	server/main_channel.c	/^    int mig_wait_prev_try_seamless;$/;"	m	struct:MainChannelClient	file:
migrate	client/x11/red_window.cpp	/^void RedWindow_p::migrate(RedWindow& red_window, PixelsSource_p& pix_source, int to_screen)$/;"	f	class:RedWindow_p
migrate	server/red_channel.h	/^    channel_client_migrate_proc migrate;$/;"	m	struct:__anon146
migrate_channel	client/red_client.cpp	/^void RedClient::migrate_channel(RedChannel& channel)$/;"	f	class:RedClient
migrate_connect_complete	server/spice.h	/^    void (*migrate_connect_complete)(SpiceMigrateInstance *sin);$/;"	m	struct:SpiceMigrateInterface
migrate_data_marshaller_write_buffer_free	server/char_device.c	/^static void migrate_data_marshaller_write_buffer_free(uint8_t *data, void *opaque)$/;"	f	file:
migrate_end_complete	server/spice.h	/^    void (*migrate_end_complete)(SpiceMigrateInstance *sin);$/;"	m	struct:SpiceMigrateInterface
migrate_freeze	server/red_worker.c	/^    int migrate_freeze;$/;"	m	struct:GlzSharedDictionary	file:
migrate_timeout	server/reds.c	/^static void migrate_timeout(void *opaque)$/;"	f	file:
migration	server/red_dispatcher.h	/^    int migration;$/;"	m	struct:RedWorkerMessageCursorConnect
migration	server/red_dispatcher.h	/^    int migration;$/;"	m	struct:RedWorkerMessageDisplayConnect
migration_flags	server/red_channel.h	/^    uint32_t migration_flags;$/;"	m	struct:RedChannel
migration_interface	server/reds.c	/^static SpiceMigrateInstance *migration_interface = NULL;$/;"	v	file:
migration_protocol_validate_header	server/migration_protocol.h	/^static inline int migration_protocol_validate_header(SpiceMigrateDataHeader *header,$/;"	f
min	server/red_worker.c	/^    stat_time_t min;$/;"	m	struct:stat_info_s	file:
min	server/reds-private.h	/^    uint32_t min;$/;"	m	struct:RedsStatValue
min_quality_fps	server/mjpeg_encoder.c	/^    int min_quality_fps; \/\/ min fps for the given quality$/;"	m	struct:MJpegEncoderQualityEval	file:
min_quality_id	server/mjpeg_encoder.c	/^    int min_quality_id;$/;"	m	struct:MJpegEncoderQualityEval	file:
min_t	server/tests/test_display_base.c	/^    int min_t;$/;"	m	struct:Path	file:
mini_header_get_msg_size	server/red_channel.c	/^static uint32_t mini_header_get_msg_size(SpiceDataHeaderOpaque *header)$/;"	f	file:
mini_header_get_msg_type	server/red_channel.c	/^static uint16_t mini_header_get_msg_type(SpiceDataHeaderOpaque *header)$/;"	f	file:
mini_header_set_msg_serial	server/red_channel.c	/^static void mini_header_set_msg_serial(SpiceDataHeaderOpaque *header, uint64_t serial)$/;"	f	file:
mini_header_set_msg_size	server/red_channel.c	/^static void mini_header_set_msg_size(SpiceDataHeaderOpaque *header, uint32_t size)$/;"	f	file:
mini_header_set_msg_sub_list	server/red_channel.c	/^static void mini_header_set_msg_sub_list(SpiceDataHeaderOpaque *header, uint32_t sub_list)$/;"	f	file:
mini_header_set_msg_type	server/red_channel.c	/^static void mini_header_set_msg_type(SpiceDataHeaderOpaque *header, uint16_t type)$/;"	f	file:
mini_header_wrapper	server/red_channel.c	/^static SpiceDataHeaderOpaque mini_header_wrapper = {NULL, sizeof(SpiceMiniDataHeader),$/;"	v	file:
minimize	client/application.cpp	/^void Application::minimize()$/;"	f	class:Application
minimize	client/screen.cpp	/^void RedScreen::minimize()$/;"	f	class:RedScreen
minimize	client/windows/red_window.cpp	/^void RedWindow::minimize()$/;"	f	class:RedWindow
minimize	client/x11/red_window.cpp	/^void RedWindow::minimize()$/;"	f	class:RedWindow
minor_version	server/spice.h	/^    uint32_t minor_version;$/;"	m	struct:QXLWorker
minor_version	server/spice.h	/^    uint32_t minor_version;$/;"	m	struct:SpiceBaseInterface
minor_version	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t minor_version;$/;"	m	struct:SpiceLinkHeader
miter_limit	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLFIXED miter_limit;$/;"	m	struct:QXLLineAttr
mjpeg_encoder	server/red_worker.c	/^    MJpegEncoder *mjpeg_encoder;$/;"	m	struct:StreamAgent	file:
mjpeg_encoder_adjust_fps	server/mjpeg_encoder.c	/^static void mjpeg_encoder_adjust_fps(MJpegEncoder *encoder, uint64_t now)$/;"	f	file:
mjpeg_encoder_adjust_params_to_bit_rate	server/mjpeg_encoder.c	/^static void mjpeg_encoder_adjust_params_to_bit_rate(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_client_stream_report	server/mjpeg_encoder.c	/^void mjpeg_encoder_client_stream_report(MJpegEncoder *encoder,$/;"	f
mjpeg_encoder_decrease_bit_rate	server/mjpeg_encoder.c	/^static void mjpeg_encoder_decrease_bit_rate(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_destroy	server/mjpeg_encoder.c	/^void mjpeg_encoder_destroy(MJpegEncoder *encoder)$/;"	f
mjpeg_encoder_encode_scanline	server/mjpeg_encoder.c	/^int mjpeg_encoder_encode_scanline(MJpegEncoder *encoder, uint8_t *src_pixels,$/;"	f
mjpeg_encoder_end_frame	server/mjpeg_encoder.c	/^size_t mjpeg_encoder_end_frame(MJpegEncoder *encoder)$/;"	f
mjpeg_encoder_eval_quality	server/mjpeg_encoder.c	/^static inline void mjpeg_encoder_eval_quality(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_get_bit_rate	server/mjpeg_encoder.c	/^uint64_t mjpeg_encoder_get_bit_rate(MJpegEncoder *encoder)$/;"	f
mjpeg_encoder_get_bytes_per_pixel	server/mjpeg_encoder.c	/^uint8_t mjpeg_encoder_get_bytes_per_pixel(MJpegEncoder *encoder)$/;"	f
mjpeg_encoder_get_latency	server/mjpeg_encoder.c	/^static inline uint32_t mjpeg_encoder_get_latency(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_get_stats	server/mjpeg_encoder.c	/^void mjpeg_encoder_get_stats(MJpegEncoder *encoder, MJpegEncoderStats *stats)$/;"	f
mjpeg_encoder_handle_negative_client_stream_report	server/mjpeg_encoder.c	/^static void mjpeg_encoder_handle_negative_client_stream_report(MJpegEncoder *encoder,$/;"	f	file:
mjpeg_encoder_handle_positive_client_stream_report	server/mjpeg_encoder.c	/^static void mjpeg_encoder_handle_positive_client_stream_report(MJpegEncoder *encoder,$/;"	f	file:
mjpeg_encoder_increase_bit_rate	server/mjpeg_encoder.c	/^static void mjpeg_encoder_increase_bit_rate(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_new	server/mjpeg_encoder.c	/^MJpegEncoder *mjpeg_encoder_new(int bit_rate_control, uint64_t starting_bit_rate,$/;"	f
mjpeg_encoder_notify_server_frame_drop	server/mjpeg_encoder.c	/^void mjpeg_encoder_notify_server_frame_drop(MJpegEncoder *encoder)$/;"	f
mjpeg_encoder_process_server_drops	server/mjpeg_encoder.c	/^static void mjpeg_encoder_process_server_drops(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_quality_eval_set_downgrade	server/mjpeg_encoder.c	/^static void mjpeg_encoder_quality_eval_set_downgrade(MJpegEncoder *encoder,$/;"	f	file:
mjpeg_encoder_quality_eval_set_upgrade	server/mjpeg_encoder.c	/^static void mjpeg_encoder_quality_eval_set_upgrade(MJpegEncoder *encoder,$/;"	f	file:
mjpeg_encoder_quality_eval_stop	server/mjpeg_encoder.c	/^static void mjpeg_encoder_quality_eval_stop(MJpegEncoder *encoder)$/;"	f	file:
mjpeg_encoder_reset_quality	server/mjpeg_encoder.c	/^static inline void mjpeg_encoder_reset_quality(MJpegEncoder *encoder,$/;"	f	file:
mjpeg_encoder_start_frame	server/mjpeg_encoder.c	/^int mjpeg_encoder_start_frame(MJpegEncoder *encoder, SpiceBitmapFmt format,$/;"	f
mjpeg_quality_samples	server/mjpeg_encoder.c	/^static const int mjpeg_quality_samples[MJPEG_QUALITY_SAMPLE_NUM] = {20, 30, 40, 50, 60, 70, 80};$/;"	v	file:
mjpeg_skip_input_data	client/mjpeg_decoder.cpp	/^    void mjpeg_skip_input_data(j_decompress_ptr cinfo, long num_bytes)$/;"	f
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	client/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	docs/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	docs/manual/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	server/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	server/tests/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	spice-common/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	spice-common/common/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	spice-common/python_modules/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	spice-common/spice-protocol/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	spice-common/spice-protocol/spice/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	client/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	docs/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	docs/manual/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	server/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	server/tests/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	spice-common/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	spice-common/common/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	spice-common/python_modules/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	spice-common/spice-protocol/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	spice-common/spice-protocol/spice/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mm_clock	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t mm_clock;$/;"	m	struct:QXLRom
mm_time	client/display_channel.cpp	/^        uint32_t mm_time;$/;"	m	struct:VideoStream::VideoFrame	file:
mm_time	server/red_parse_qxl.h	/^    uint32_t mm_time;$/;"	m	struct:RedDrawable
mm_time	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t mm_time;$/;"	m	struct:QXLCompatDrawable
mm_time	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t mm_time;$/;"	m	struct:QXLDrawable
mm_time_latency	server/reds-private.h	/^    uint32_t mm_time_latency;$/;"	m	struct:RedsState
mm_timer	server/reds-private.h	/^    SpiceTimer *mm_timer;$/;"	m	struct:RedsState
mm_timer_enabled	server/reds-private.h	/^    int mm_timer_enabled;$/;"	m	struct:RedsState
mm_timer_proc	server/reds.c	/^static void mm_timer_proc(void *opaque)$/;"	f	file:
modal_loop_active	client/windows/platform.cpp	/^static bool modal_loop_active = false;$/;"	v	file:
mode	server/red_dispatcher.h	/^    uint32_t mode;$/;"	m	struct:RedWorkerMessageSetMouseMode
mode	server/snd_worker.c	/^    uint32_t mode;$/;"	m	struct:PlaybackChannel	file:
mode	server/snd_worker.c	/^    uint32_t mode;$/;"	m	struct:RecordChannel	file:
mode	spice-common/common/messages.h	/^    uint32_t mode; \/\/SPICE_AUDIO_DATA_MODE_?$/;"	m	struct:SpiceMsgPlaybackMode
mode	spice-common/common/messages.h	/^    uint32_t mode;$/;"	m	struct:SpiceMsgcMainMouseModeRequest
mode	spice-common/common/snd_codec.c	/^    int mode;$/;"	m	struct:__anon37	file:
mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t mode;                    \/* qxl-1 *\/$/;"	m	struct:QXLRom
mode_changed	client/x11/platform.cpp	/^bool XMonitor::mode_changed()$/;"	f	class:XMonitor
mode_refresh	client/x11/platform.cpp	/^static float mode_refresh(XRRModeInfo *mode_info)$/;"	f	file:
mode_time	server/snd_worker.c	/^    uint32_t mode_time;$/;"	m	struct:RecordChannel	file:
modes	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLMode modes[0];$/;"	m	struct:QXLModes
modes_offset	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t modes_offset;$/;"	m	struct:QXLRom
modifier	client/application.cpp	/^    int modifier;$/;"	m	struct:ModifierKey	file:
modifier_keys	client/application.cpp	/^ModifierKey modifier_keys[] = {$/;"	v
modifiers	server/inputs_channel.c	/^    uint8_t modifiers;$/;"	m	struct:InputsInitPipeItem	file:
modifiers	server/inputs_channel.c	/^    uint8_t modifiers;$/;"	m	struct:KeyModifiersPipeItem	file:
modifiers	spice-common/common/messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgInputsKeyModifiers
modifiers	spice-common/common/messages.h	/^    uint32_t modifiers;$/;"	m	struct:SpiceMsgcKeyModifiers
monitor_mode	server/reds-private.h	/^    MonitorMode monitor_mode;$/;"	m	struct:RedsState
monitors	client/windows/platform.cpp	/^static MonitorsList monitors;$/;"	v	file:
monitors	client/x11/platform.cpp	/^static MonitorsList monitors;$/;"	v	file:
monitors	spice-common/spice-protocol/spice/vd_agent.h	/^    VDAgentMonConfig monitors[0];$/;"	m	struct:VDAgentMonitorsConfig
monitors_cleanup	client/x11/platform.cpp	/^void MultyMonScreen::monitors_cleanup()$/;"	f	class:MultyMonScreen
monitors_config	server/red_dispatcher.h	/^    QXLPHYSICAL monitors_config;$/;"	m	struct:RedWorkerMessageMonitorsConfigAsync
monitors_config	server/red_worker.c	/^    MonitorsConfig *monitors_config;$/;"	m	struct:MonitorsConfigItem	file:
monitors_config	server/red_worker.c	/^    MonitorsConfig *monitors_config;$/;"	m	struct:RedWorker	file:
monitors_config	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL monitors_config;$/;"	m	struct:QXLRam
monitors_config_decref	server/red_worker.c	/^static void monitors_config_decref(MonitorsConfig *monitors_config)$/;"	f	file:
monitors_config_getref	server/red_worker.c	/^static MonitorsConfig *monitors_config_getref(MonitorsConfig *monitors_config)$/;"	f	file:
more_input	server/zlib_encoder.h	/^    int (*more_input)(ZlibEncoderUsrContext *usr, uint8_t **input);$/;"	m	struct:ZlibEncoderUsrContext
more_io_bytes	server/glz_encoder.c	/^static INLINE int more_io_bytes(Encoder *encoder)$/;"	f	file:
more_io_bytes	spice-common/common/lz.c	/^static inline int more_io_bytes(Encoder *encoder)$/;"	f	file:
more_io_words	spice-common/common/quic.c	/^static void more_io_words(Encoder *encoder)$/;"	f	file:
more_lines	server/glz_encoder_config.h	/^    int (*more_lines)(GlzEncoderUsrContext *usr, uint8_t **lines);$/;"	m	struct:GlzEncoderUsrContext
more_lines	server/jpeg_encoder.h	/^    int (*more_lines)(JpegEncoderUsrContext *usr, uint8_t **lines);$/;"	m	struct:JpegEncoderUsrContext
more_lines	spice-common/common/lz.h	/^    int (*more_lines)(LzUsrContext *usr, uint8_t **lines);      \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext
more_lines	spice-common/common/quic.h	/^    int (*more_lines)(QuicUsrContext *usr, uint8_t **lines); \/\/ on return the last line of previous$/;"	m	struct:QuicUsrContext
more_paths	spice-common/common/glc.c	/^static void more_paths(InternalPath *path)$/;"	f	file:
more_points	spice-common/common/glc.c	/^static void more_points(InternalPath *path)$/;"	f	file:
more_segments	spice-common/common/glc.c	/^static void more_segments(InternalPath *path)$/;"	f	file:
more_space	server/glz_encoder_config.h	/^    int (*more_space)(GlzEncoderUsrContext *usr, uint8_t **io_ptr);$/;"	m	struct:GlzEncoderUsrContext
more_space	server/jpeg_encoder.h	/^    int (*more_space)(JpegEncoderUsrContext *usr, uint8_t **io_ptr);$/;"	m	struct:JpegEncoderUsrContext
more_space	server/zlib_encoder.h	/^    int (*more_space)(ZlibEncoderUsrContext *usr, uint8_t **io_ptr);$/;"	m	struct:ZlibEncoderUsrContext
more_space	spice-common/common/lz.h	/^    int (*more_space)(LzUsrContext *usr, uint8_t **io_ptr);     \/\/ get the next chunk of the$/;"	m	struct:LzUsrContext
more_space	spice-common/common/quic.h	/^    int (*more_space)(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed);$/;"	m	struct:QuicUsrContext
more_video_compress	server/red_worker.c	/^    int more_video_compress;$/;"	m	struct:RedWorker	file:
motion	server/spice.h	/^    void (*motion)(SpiceMouseInstance *sin, int dx, int dy, int dz,$/;"	m	struct:SpiceMouseInterface
motion_count	server/inputs_channel.c	/^    uint16_t motion_count;$/;"	m	struct:InputsChannelClient	file:
motion_count	server/migration_protocol.h	/^    uint16_t motion_count;$/;"	m	struct:SpiceMigrateDataInputs
mouse	server/inputs_channel.c	/^static SpiceMouseInstance *mouse = NULL;$/;"	v	file:
mouse_mode	server/red_worker.c	/^    uint32_t mouse_mode;$/;"	m	struct:RedWorker	file:
mouse_mode	server/reds-private.h	/^    int mouse_mode;$/;"	m	struct:RedsState
mouse_mode	server/spice.h	/^    uint32_t mouse_mode;$/;"	m	struct:QXLDevSurfaceCreate
mouse_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t mouse_mode;$/;"	m	struct:QXLSurfaceCreate
mouse_state	server/inputs_channel.c	/^    VDAgentMouseState mouse_state;$/;"	m	struct:InputsChannel	file:
mouse_state	server/reds-private.h	/^        VDAgentMouseState mouse_state;$/;"	m	union:VDInternalBuf::__anon152
move	client/windows/red_window.cpp	/^void RedWindow::move(int x, int y)$/;"	f	class:RedWindow
move	client/x11/red_window.cpp	/^void RedWindow::move(int x, int y)$/;"	f	class:RedWindow
move_and_resize	client/windows/red_window.cpp	/^void RedWindow::move_and_resize(int x, int y, int width, int height)$/;"	f	class:RedWindow
move_and_resize	client/x11/red_window.cpp	/^void RedWindow::move_and_resize(int x, int y, int width, int height)$/;"	f	class:RedWindow
move_head	client/windows/playback.cpp	/^inline void WavePlayer::move_head()$/;"	f	class:WavePlayer
move_head	client/windows/record.cpp	/^inline void WaveRecorder::move_head()$/;"	f	class:WaveRecorder
move_head	client/x11/platform.cpp	/^    static void move_head(SpiceRect& area, int delta)$/;"	f	class:BottomVariant
move_head	client/x11/platform.cpp	/^    static void move_head(SpiceRect& area, int delta)$/;"	f	class:LeftVariant
move_head	client/x11/platform.cpp	/^    static void move_head(SpiceRect& area, int delta)$/;"	f	class:RightVariant
move_head	client/x11/platform.cpp	/^    static void move_head(SpiceRect& area, int delta)$/;"	f	class:TopVariant
move_to_current_desktop	client/x11/red_window.cpp	/^void RedWindow_p::move_to_current_desktop()$/;"	f	class:RedWindow_p
ms	server/spice_timer_queue.c	/^    uint32_t ms;$/;"	m	struct:SpiceTimer	file:
ms	server/tests/basic_event_loop.c	/^    int ms;$/;"	m	struct:SpiceTimer	file:
msg	server/char_device.c	/^    SpiceCharDeviceMsgToClient *msg;$/;"	m	struct:SpiceCharDeviceMsgToClientItem	file:
msg	server/main_channel.c	/^    SpiceMsgMainName msg;$/;"	m	struct:NamePipeItem	file:
msg	server/main_channel.c	/^    SpiceMsgMainUuid msg;$/;"	m	struct:UuidPipeItem	file:
msg	server/main_channel.c	/^    char *msg;$/;"	m	struct:NotifyPipeItem	file:
msg	server/red_channel.c	/^    int msg;$/;"	m	struct:EmptyMsgPipeItem	file:
msg	server/red_channel.h	/^    uint8_t *msg; \/\/ data of the msg following the header. allocated by alloc_msg_buf.$/;"	m	struct:IncomingHandler
msg_SpiceMsgAudioMute	spice-common/common/client_marshallers.h	/^    void (*msg_SpiceMsgAudioMute)(SpiceMarshaller *m, SpiceMsgAudioMute *msg);$/;"	m	struct:__anon29
msg_SpiceMsgAudioVolume	spice-common/common/client_marshallers.h	/^    void (*msg_SpiceMsgAudioVolume)(SpiceMarshaller *m, SpiceMsgAudioVolume *msg);$/;"	m	struct:__anon29
msg_SpiceMsgData	spice-common/common/client_marshallers.h	/^    void (*msg_SpiceMsgData)(SpiceMarshaller *m, SpiceMsgData *msg);$/;"	m	struct:__anon29
msg_SpiceMsgEmpty	spice-common/common/client_marshallers.h	/^    void (*msg_SpiceMsgEmpty)(SpiceMarshaller *m, SpiceMsgEmpty *msg);$/;"	m	struct:__anon29
msg_data_to_read	server/agent-msg-filter.h	/^    int msg_data_to_read;$/;"	m	struct:AgentMsgFilter
msg_filter_hook	client/windows/red_window.cpp	/^static HHOOK msg_filter_hook = NULL;$/;"	v	file:
msg_filter_result	server/migration_protocol.h	/^        uint8_t msg_filter_result;$/;"	m	struct:SpiceMigrateDataMain::__anon137
msg_filter_result	server/migration_protocol.h	/^        uint8_t msg_filter_result;$/;"	m	struct:SpiceMigrateDataMain::__anon138
msg_header_done	server/migration_protocol.h	/^        uint8_t msg_header_done;$/;"	m	struct:SpiceMigrateDataMain::__anon137
msg_header_partial_len	server/migration_protocol.h	/^        uint32_t msg_header_partial_len;$/;"	m	struct:SpiceMigrateDataMain::__anon137
msg_header_ptr	server/migration_protocol.h	/^        uint32_t msg_header_ptr;$/;"	m	struct:SpiceMigrateDataMain::__anon137
msg_in_write_buf	server/smartcard.c	/^    int msg_in_write_buf; \/* was the client msg received into a SpiceCharDeviceWriteBuffer$/;"	m	struct:SmartCardChannelClient	file:
msg_pos	server/red_channel.h	/^    uint32_t msg_pos;$/;"	m	struct:IncomingHandler
msg_remaining	server/migration_protocol.h	/^        uint32_t msg_remaining;$/;"	m	struct:SpiceMigrateDataMain::__anon137
msg_remaining	server/migration_protocol.h	/^        uint32_t msg_remaining;$/;"	m	struct:SpiceMigrateDataMain::__anon138
msgc_ack_sync	spice-common/common/client_marshallers.h	/^    void (*msgc_ack_sync)(SpiceMarshaller *m, SpiceMsgcAckSync *msg);$/;"	m	struct:__anon29
msgc_disconnecting	spice-common/common/client_marshallers.h	/^    void (*msgc_disconnecting)(SpiceMarshaller *m, SpiceMsgDisconnect *msg);$/;"	m	struct:__anon29
msgc_display_init	spice-common/common/client_marshallers.h	/^    void (*msgc_display_init)(SpiceMarshaller *m, SpiceMsgcDisplayInit *msg);$/;"	m	struct:__anon29
msgc_display_stream_report	spice-common/common/client_marshallers.h	/^    void (*msgc_display_stream_report)(SpiceMarshaller *m, SpiceMsgcDisplayStreamReport *msg);$/;"	m	struct:__anon29
msgc_inputs_key_down	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_key_down)(SpiceMarshaller *m, SpiceMsgcKeyDown *msg);$/;"	m	struct:__anon29
msgc_inputs_key_modifiers	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_key_modifiers)(SpiceMarshaller *m, SpiceMsgcKeyModifiers *msg);$/;"	m	struct:__anon29
msgc_inputs_key_up	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_key_up)(SpiceMarshaller *m, SpiceMsgcKeyUp *msg);$/;"	m	struct:__anon29
msgc_inputs_mouse_motion	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_mouse_motion)(SpiceMarshaller *m, SpiceMsgcMouseMotion *msg);$/;"	m	struct:__anon29
msgc_inputs_mouse_position	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_mouse_position)(SpiceMarshaller *m, SpiceMsgcMousePosition *msg);$/;"	m	struct:__anon29
msgc_inputs_mouse_press	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_mouse_press)(SpiceMarshaller *m, SpiceMsgcMousePress *msg);$/;"	m	struct:__anon29
msgc_inputs_mouse_release	spice-common/common/client_marshallers.h	/^    void (*msgc_inputs_mouse_release)(SpiceMarshaller *m, SpiceMsgcMouseRelease *msg);$/;"	m	struct:__anon29
msgc_main_agent_start	spice-common/common/client_marshallers.h	/^    void (*msgc_main_agent_start)(SpiceMarshaller *m, SpiceMsgcMainAgentStart *msg);$/;"	m	struct:__anon29
msgc_main_agent_token	spice-common/common/client_marshallers.h	/^    void (*msgc_main_agent_token)(SpiceMarshaller *m, SpiceMsgcMainAgentTokens *msg);$/;"	m	struct:__anon29
msgc_main_client_info	spice-common/common/client_marshallers.h	/^    void (*msgc_main_client_info)(SpiceMarshaller *m, SpiceMsgcClientInfo *msg);$/;"	m	struct:__anon29
msgc_main_migrate_dst_do_seamless	spice-common/common/client_marshallers.h	/^    void (*msgc_main_migrate_dst_do_seamless)(SpiceMarshaller *m, SpiceMsgcMainMigrateDstDoSeamless *msg);$/;"	m	struct:__anon29
msgc_main_mouse_mode_request	spice-common/common/client_marshallers.h	/^    void (*msgc_main_mouse_mode_request)(SpiceMarshaller *m, SpiceMsgcMainMouseModeRequest *msg);$/;"	m	struct:__anon29
msgc_pong	spice-common/common/client_marshallers.h	/^    void (*msgc_pong)(SpiceMarshaller *m, SpiceMsgPing *msg);$/;"	m	struct:__anon29
msgc_port_event	spice-common/common/client_marshallers.h	/^    void (*msgc_port_event)(SpiceMarshaller *m, SpiceMsgcPortEvent *msg);$/;"	m	struct:__anon29
msgc_record_data	spice-common/common/client_marshallers.h	/^    void (*msgc_record_data)(SpiceMarshaller *m, SpiceMsgcRecordPacket *msg);$/;"	m	struct:__anon29
msgc_record_mode	spice-common/common/client_marshallers.h	/^    void (*msgc_record_mode)(SpiceMarshaller *m, SpiceMsgcRecordMode *msg);$/;"	m	struct:__anon29
msgc_record_start_mark	spice-common/common/client_marshallers.h	/^    void (*msgc_record_start_mark)(SpiceMarshaller *m, SpiceMsgcRecordStartMark *msg);$/;"	m	struct:__anon29
msgc_smartcard_atr	spice-common/common/client_marshallers.h	/^    void (*msgc_smartcard_atr)(SpiceMarshaller *m, VSCMsgATR *msg);$/;"	m	struct:__anon29
msgc_smartcard_data	spice-common/common/client_marshallers.h	/^    void (*msgc_smartcard_data)(SpiceMarshaller *m, SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out);$/;"	m	struct:__anon29
msgc_smartcard_error	spice-common/common/client_marshallers.h	/^    void (*msgc_smartcard_error)(SpiceMarshaller *m, VSCMsgError *msg);$/;"	m	struct:__anon29
msgc_smartcard_header	spice-common/common/client_marshallers.h	/^    void (*msgc_smartcard_header)(SpiceMarshaller *m, VSCMsgHeader *msg);$/;"	m	struct:__anon29
msgc_smartcard_reader_add	spice-common/common/client_marshallers.h	/^    void (*msgc_smartcard_reader_add)(SpiceMarshaller *m, VSCMsgReaderAdd *msg);$/;"	m	struct:__anon29
msgc_tunnel_service_add	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_service_add)(SpiceMarshaller *m, SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out);$/;"	m	struct:__anon29
msgc_tunnel_service_remove	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_service_remove)(SpiceMarshaller *m, SpiceMsgcTunnelRemoveService *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_closed	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_closed)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosed *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_closed_ack	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_closed_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosedAck *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_data	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_data)(SpiceMarshaller *m, SpiceMsgcTunnelSocketData *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_fin	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_fin)(SpiceMarshaller *m, SpiceMsgcTunnelSocketFin *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_open_ack	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_open_ack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenAck *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_open_nack	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_open_nack)(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenNack *msg);$/;"	m	struct:__anon29
msgc_tunnel_socket_token	spice-common/common/client_marshallers.h	/^    void (*msgc_tunnel_socket_token)(SpiceMarshaller *m, SpiceMsgcTunnelSocketTokens *msg);$/;"	m	struct:__anon29
msleep	client/windows/platform.cpp	/^void Platform::msleep(unsigned int msec)$/;"	f	class:Platform
msleep	client/x11/platform.cpp	/^void Platform::msleep(unsigned int millisec)$/;"	f	class:Platform
multi_media_time	server/main_channel.c	/^    int multi_media_time;$/;"	m	struct:InitPipeItem	file:
multi_media_time	spice-common/common/messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceMsgMainInit
multi_media_time	spice-common/common/messages.h	/^    uint32_t multi_media_time;$/;"	m	struct:SpiceStreamDataHeader
multiple_atom	client/x11/platform.cpp	/^static Atom multiple_atom;$/;"	v	file:
mute	server/snd_worker.c	/^    int mute;$/;"	m	struct:SpiceVolumeState	file:
mute	spice-common/common/messages.h	/^    uint8_t mute;$/;"	m	struct:SpiceMsgAudioMute
mutex	spice-common/common/canvas_utils.h	/^    HANDLE mutex;$/;"	m	struct:PixmanData
mutex_t	spice-common/common/mutex.h	/^typedef CRITICAL_SECTION mutex_t;$/;"	t
my_getopt	client/windows/my_getopt.cpp	/^int my_getopt(int argc, char * argv[], const char *opts)$/;"	f
my_getopt_long	client/windows/my_getopt.cpp	/^int my_getopt_long(int argc, char * argv[], const char *shortopts,$/;"	f
my_getopt_long_only	client/windows/my_getopt.cpp	/^int my_getopt_long_only(int argc, char * argv[], const char *shortopts,$/;"	f
my_getopt_reset	client/windows/my_getopt.cpp	/^int my_getopt_reset(void)$/;"	f
my_optarg	client/windows/my_getopt.cpp	/^char *my_optarg=0;$/;"	v
my_opterr	client/windows/my_getopt.cpp	/^int my_optind=1, my_opterr=1, my_optopt=0;$/;"	v
my_optind	client/windows/my_getopt.cpp	/^int my_optind=1, my_opterr=1, my_optopt=0;$/;"	v
my_optopt	client/windows/my_getopt.cpp	/^int my_optind=1, my_opterr=1, my_optopt=0;$/;"	v
nGRcodewords	spice-common/common/quic.c	/^    unsigned int nGRcodewords[MAXNUMCODES];      \/* indexed by code number, contains number of$/;"	m	struct:QuicFamily	file:
n_buckets_5bpc	spice-common/common/quic.c	/^    unsigned int n_buckets_5bpc;$/;"	m	struct:Encoder	file:
n_buckets_8bpc	spice-common/common/quic.c	/^    unsigned int n_buckets_8bpc;$/;"	m	struct:Encoder	file:
n_items	spice-common/common/marshaller.c	/^    int n_items;$/;"	m	struct:SpiceMarshaller	file:
n_modes	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t n_modes;$/;"	m	struct:QXLModes
n_surfaces	server/red_worker.c	/^    uint32_t n_surfaces;$/;"	m	struct:RedWorker	file:
n_surfaces	server/red_worker.h	/^    uint32_t n_surfaces;$/;"	m	struct:WorkerInitData
n_surfaces	server/spice.h	/^    uint32_t n_surfaces;$/;"	m	struct:QXLDevInitInfo
n_surfaces	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t n_surfaces;$/;"	m	struct:QXLRom
name	client/canvas.h	/^    static const char* name() { return "palette";}$/;"	f	class:PaletteCacheTreat
name	client/canvas.h	/^    static const char* name() { return "pixmap";}$/;"	f	class:PixmapCacheTreat
name	client/cmd_line_parser.h	/^        std::string name;$/;"	m	class:CmdLineParser::Option
name	client/cursor_channel.h	/^    static const char* name() { return "cursor";}$/;"	f	class:CursorCacheTreat
name	client/smartcard_channel.h	/^    char* name;$/;"	m	struct:ReaderData
name	server/red_dispatcher.c	/^    const char *name;$/;"	m	struct:RendererInfo	file:
name	server/red_worker.c	/^    const char *name;$/;"	m	struct:stat_info_s	file:
name	server/spicevmc.c	/^    char* name;$/;"	m	struct:PortInitPipeItem	file:
name	spice-common/common/messages.h	/^    uint64_t name;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
name	spice-common/common/messages.h	/^    uint8_t *name;$/;"	m	struct:SpiceMsgPortInit
name	spice-common/common/messages.h	/^    uint8_t name[0];$/;"	m	struct:SpiceMsgMainName
name	spice-common/spice-protocol/spice/stats.h	/^    char name[SPICE_STAT_NODE_NAME_MAX];$/;"	m	struct:SpiceStatNode
name_len	spice-common/common/messages.h	/^    uint32_t name_len;$/;"	m	struct:SpiceMsgMainName
name_size	spice-common/common/messages.h	/^    uint32_t name_size;$/;"	m	struct:SpiceMsgPortInit
narrow_window	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::narrow_window(GlzDecodedImage *last_added)$/;"	f	class:GlzDecoderWindow
nchannels	spice-common/common/messages.h	/^    uint8_t nchannels;$/;"	m	struct:SpiceMsgAudioVolume
need_init	spice-common/common/gdi_canvas.c	/^static int need_init = 1;$/;"	v	file:
need_init	spice-common/common/gl_canvas.c	/^static int need_init = 1;$/;"	v	file:
need_init	spice-common/common/quic.c	/^static int need_init = TRUE;$/;"	v	file:
need_init	spice-common/common/sw_canvas.c	/^static int need_init = 1;$/;"	v	file:
need_recreate_context_gl	client/screen.cpp	/^bool RedScreen::need_recreate_context_gl()$/;"	f	class:RedScreen
nelements	spice-common/common/generated_client_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:
nelements	spice-common/common/generated_client_demarshallers1.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:
nelements	spice-common/common/generated_server_demarshallers.c	/^    uint32_t nelements;$/;"	m	struct:PointerInfo	file:
net_test_id	server/main_channel.c	/^    uint32_t net_test_id;$/;"	m	struct:MainChannelClient	file:
net_test_stage	server/main_channel.c	/^    int net_test_stage;$/;"	m	struct:MainChannelClient	file:
new_cursor_pipe_item	server/red_worker.c	/^static PipeItem *new_cursor_pipe_item(RedChannelClient *rcc, void *data, int num)$/;"	f	file:
new_pipe_item_t	server/red_channel.h	/^typedef PipeItem *(*new_pipe_item_t)(RedChannelClient *rcc, void *data, int num);$/;"	t
newline	spice-common/python_modules/codegen.py	/^    def newline(self):$/;"	m	class:CodeWriter
next	client/cache.hpp	/^        Item* next;$/;"	m	class:Cache::Item
next	client/display_channel.cpp	/^    VideoStream* next;$/;"	m	class:VideoStream	file:
next	client/shared_cache.hpp	/^        Item* next;$/;"	m	class:SharedCache::Item
next	client/x11/platform.cpp	/^    selection_request *next;$/;"	m	struct:selection_request	file:
next	server/glz_encoder_dictionary_protected.h	/^    WindowImage*       next;$/;"	m	struct:WindowImage
next	server/glz_encoder_dictionary_protected.h	/^    uint32_t next;$/;"	m	struct:WindowImageSegment
next	server/red_dispatcher.c	/^    RedDispatcher *next;$/;"	m	struct:RedDispatcher	file:
next	server/red_worker.c	/^            CacheItem *next;$/;"	m	struct:CacheItem::__anon173::__anon174	file:
next	server/red_worker.c	/^            RedCompressBuf* next;$/;"	m	struct:__anon177::__anon178::__anon180	file:
next	server/red_worker.c	/^            int next;$/;"	m	struct:__anon177::__anon178::__anon179	file:
next	server/red_worker.c	/^        _CursorItem *next;$/;"	m	union:_CursorItem::__anon190	file:
next	server/red_worker.c	/^        _Drawable *next;$/;"	m	union:_Drawable::__anon189	file:
next	server/red_worker.c	/^    NewCacheItem *next;$/;"	m	struct:NewCacheItem	file:
next	server/red_worker.c	/^    RedCompressBuf *next;$/;"	m	struct:RedCompressBuf	file:
next	server/red_worker.c	/^    Stream *next;$/;"	m	struct:Stream	file:
next	server/reds.c	/^    ChannelSecurityOptions *next;$/;"	m	struct:ChannelSecurityOptions	file:
next	server/snd_worker.c	/^    AudioFrame *next;$/;"	m	struct:AudioFrame	file:
next	server/snd_worker.c	/^    SndWorker *next;$/;"	m	struct:SndWorker	file:
next	server/spice_image_cache.h	/^    struct ImageCacheItem *next;$/;"	m	struct:ImageCacheItem	typeref:struct:ImageCacheItem::ImageCacheItem
next	spice-common/common/glc.c	/^    TassVertex *next;$/;"	m	struct:TassVertex	file:
next	spice-common/common/glc.c	/^    TassVertexBuf *next;$/;"	m	struct:TassVertexBuf	file:
next	spice-common/common/lz.c	/^    LzImageSegment    *next;$/;"	m	struct:LzImageSegment	file:
next	spice-common/common/marshaller.c	/^    MarshallerBuffer *next;$/;"	m	struct:MarshallerBuffer	file:
next	spice-common/common/marshaller.c	/^    SpiceMarshaller *next;$/;"	m	struct:SpiceMarshaller	file:
next	spice-common/common/ring.h	/^    RingItem *next;$/;"	m	struct:Ring
next	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t next;    \/\/ out$/;"	m	union:QXLReleaseInfo
next_argument	client/cmd_line_parser.cpp	/^char* CmdLineParser::next_argument()$/;"	f	class:CmdLineParser
next_chunk	server/red_parse_qxl.h	/^    RedDataChunk *next_chunk;$/;"	m	struct:RedDataChunk
next_chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL next_chunk;$/;"	m	struct:QXLDataChunk
next_clipboard_viewer_win	client/windows/platform.cpp	/^static HWND next_clipboard_viewer_win = NULL;$/;"	v	file:
next_free_id	client/windows/red_window.cpp	/^static int next_free_id = 1;$/;"	v	file:
next_item_trace	server/red_worker.c	/^    uint32_t next_item_trace;$/;"	m	struct:RedWorker	file:
next_multi	client/cmd_line_parser.cpp	/^char* CmdLineParser::next_multi()$/;"	f	class:CmdLineParser
next_selection_request	client/x11/platform.cpp	/^static selection_request *next_selection_request = NULL;$/;"	v	file:
next_sibling_index	spice-common/spice-protocol/spice/stats.h	/^    uint32_t next_sibling_index;$/;"	m	struct:SpiceStatNode
next_tok	client/controller.cpp	349;"	d	file:
next_tok	client/controller.cpp	351;"	d	file:
no_block	spice-common/python_modules/codegen.py	/^    def no_block(self, scope):$/;"	m	class:CodeWriter
nodes	spice-common/spice-protocol/spice/stats.h	/^    SpiceStatNode nodes[];$/;"	m	struct:SpiceStat
nofree	spice-common/common/generated_client_demarshallers.c	/^static void nofree(uint8_t *data)$/;"	f	file:
nofree	spice-common/common/generated_client_demarshallers1.c	/^static void nofree(uint8_t *data)$/;"	f	file:
nofree	spice-common/common/generated_server_demarshallers.c	/^static void nofree(uint8_t *data)$/;"	f	file:
noinst_LTLIBRARIES	spice-common/common/Makefile	/^noinst_LTLIBRARIES = libspice-common.la libspice-common-server.la libspice-common-client.la$/;"	m
noinst_PROGRAMS	server/tests/Makefile	/^noinst_PROGRAMS = test_display_no_ssl$(EXEEXT) \\$/;"	m
non_cache_counter	server/red_worker.c	/^    uint64_t *non_cache_counter;$/;"	m	struct:DisplayChannel	file:
notGRcwlen	spice-common/common/quic.c	/^    unsigned int notGRcwlen[MAXNUMCODES];        \/* indexed by code number, contains codeword$/;"	m	struct:QuicFamily	file:
notGRprefixmask	spice-common/common/quic.c	/^    unsigned int notGRprefixmask[MAXNUMCODES];   \/* indexed by code number, contains mask to$/;"	m	struct:QuicFamily	file:
notGRsuffixlen	spice-common/common/quic.c	/^    unsigned int notGRsuffixlen[MAXNUMCODES];    \/* indexed by code number, contains suffix$/;"	m	struct:QuicFamily	file:
notify_all	client/threads.h	/^    void notify_all()$/;"	f	class:Condition
notify_changed	client/screen_layer.cpp	/^void ScreenLayer::notify_changed()$/;"	f	class:ScreenLayer
notify_new_size	client/screen.cpp	/^void RedScreen::notify_new_size()$/;"	f	class:RedScreen
notify_one	client/threads.h	/^    void notify_one()$/;"	f	class:Condition
notify_update	server/spice.h	/^    void (*notify_update)(QXLInstance *qin, uint32_t update_id);$/;"	m	struct:QXLInterface
notify_update	server/tests/test_display_base.c	/^static void notify_update(QXLInstance *qin, uint32_t update_id)$/;"	f	file:
now	server/glz_encoder.c	/^        uint8_t            *now;$/;"	m	struct:Encoder::__anon203	file:
now	server/reds_stream.c	/^    uint8_t *now;$/;"	m	struct:AsyncRead	file:
now	server/snd_worker.c	/^        uint8_t *now;$/;"	m	struct:SndChannel::__anon140	file:
now	server/tests/basic_event_loop.c	/^struct timeval now;$/;"	v	typeref:struct:timeval
null_handler	client/playback_channel.cpp	/^void PlaybackChannel::null_handler(RedPeer::InMessage* message)$/;"	f	class:PlaybackChannel
num	server/smartcard.c	/^    uint32_t num;$/;"	m	struct:Readers	file:
numInDashList	spice-common/common/lines.h	/^    unsigned short numInDashList;$/;"	m	struct:lineGC
num_active_workers	server/red_dispatcher.c	/^static int num_active_workers = 0;$/;"	v	file:
num_caps	server/red_channel.h	/^    int num_caps;$/;"	m	struct:RedChannelCapabilities
num_caps	server/red_dispatcher.h	/^    int num_caps;$/;"	m	struct:RedWorkerMessageCursorConnect
num_caps	server/red_dispatcher.h	/^    int num_caps;$/;"	m	struct:RedWorkerMessageDisplayConnect
num_channel_caps	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t num_channel_caps;$/;"	m	struct:SpiceLinkMess
num_channel_caps	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t num_channel_caps;$/;"	m	struct:SpiceLinkReply
num_channels	client/playback_channel.cpp	/^    uint16_t num_channels;$/;"	m	struct:FormatInfo	file:
num_channels	spice-common/common/quic.c	/^    unsigned int num_channels;$/;"	m	struct:Encoder	file:
num_chunks	spice-common/common/mem.h	/^    uint32_t     num_chunks;$/;"	m	struct:SpiceChunks
num_client_tokens	server/char_device.c	/^    uint64_t num_client_tokens;$/;"	m	struct:SpiceCharDeviceClientState	file:
num_client_tokens	server/migration_protocol.h	/^    uint32_t num_client_tokens;$/;"	m	struct:SpiceMigrateDataCharDevice
num_client_tokens_free	server/char_device.c	/^    uint64_t num_client_tokens_free; \/* client messages that were consumed by the device *\/$/;"	m	struct:SpiceCharDeviceClientState	file:
num_clients	server/char_device.c	/^    uint32_t num_clients;$/;"	m	struct:SpiceCharDeviceState	file:
num_clients	server/reds-private.h	/^    int num_clients;$/;"	m	struct:RedsState
num_clients_mig_wait	server/main_channel.h	/^    int num_clients_mig_wait;$/;"	m	struct:MainChannel
num_clip_rects	server/tests/test_display_base.h	/^    uint32_t num_clip_rects;$/;"	m	struct:CommandDrawBitmap
num_commands	server/tests/test_display_base.h	/^    int num_commands;$/;"	m	struct:Test
num_common_caps	server/red_channel.h	/^    int num_common_caps;$/;"	m	struct:RedChannelCapabilities
num_common_caps	server/red_dispatcher.h	/^    int num_common_caps;$/;"	m	struct:RedWorkerMessageCursorConnect
num_common_caps	server/red_dispatcher.h	/^    int num_common_caps;$/;"	m	struct:RedWorkerMessageDisplayConnect
num_common_caps	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t num_common_caps;$/;"	m	struct:SpiceLinkMess
num_common_caps	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t num_common_caps;$/;"	m	struct:SpiceLinkReply
num_dashes	spice-common/common/glc.c	/^    int num_dashes;$/;"	m	struct:LineDash	file:
num_dirty_rects	server/red_dispatcher.h	/^    uint32_t num_dirty_rects;$/;"	m	struct:RedWorkerMessageUpdate
num_drops	spice-common/common/messages.h	/^    uint32_t num_drops;$/;"	m	struct:SpiceMsgcDisplayStreamReport
num_drops_fps	server/red_worker.c	/^   uint64_t num_drops_fps;$/;"	m	struct:StreamStats	file:
num_drops_pipe	server/red_worker.c	/^   uint64_t num_drops_pipe;$/;"	m	struct:StreamStats	file:
num_enc_frames	server/mjpeg_encoder.c	/^    uint32_t num_enc_frames;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
num_ents	spice-common/common/draw.h	/^    uint16_t num_ents;$/;"	m	struct:SpicePalette
num_ents	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t num_ents;$/;"	m	struct:QXLPalette
num_frames	server/mjpeg_encoder.c	/^    uint32_t num_frames;$/;"	m	struct:MJpegEncoder	file:
num_frames	spice-common/common/messages.h	/^    uint32_t num_frames;$/;"	m	struct:SpiceMsgcDisplayStreamReport
num_frames_dropped	server/mjpeg_encoder.c	/^    uint32_t num_frames_dropped;$/;"	m	struct:MJpegEncoderServerState	file:
num_frames_encoded	server/mjpeg_encoder.c	/^    uint32_t num_frames_encoded;$/;"	m	struct:MJpegEncoderServerState	file:
num_frames_sent	server/red_worker.c	/^   uint64_t num_frames_sent;$/;"	m	struct:StreamStats	file:
num_input_frames	server/red_worker.c	/^    uint32_t num_input_frames;$/;"	m	struct:Stream	file:
num_input_frames	server/red_worker.c	/^   uint64_t num_input_frames;$/;"	m	struct:StreamStats	file:
num_items	server/spice_image_cache.h	/^    uint32_t num_items;$/;"	m	struct:ImageCache
num_lock_mask	client/x11/platform.cpp	/^static unsigned int num_lock_mask = 0;$/;"	v	file:
num_memslots	server/red_memslots.h	/^    uint32_t num_memslots;$/;"	m	struct:RedMemSlotInfo
num_memslots	server/red_worker.h	/^    uint32_t num_memslots;$/;"	m	struct:WorkerInitData
num_memslots	server/spice.h	/^    uint32_t num_memslots;$/;"	m	struct:QXLDevInitInfo
num_memslots_groups	server/red_memslots.h	/^    uint32_t num_memslots_groups;$/;"	m	struct:RedMemSlotInfo
num_memslots_groups	server/red_worker.h	/^    uint32_t num_memslots_groups;$/;"	m	struct:WorkerInitData
num_memslots_groups	server/spice.h	/^    uint32_t num_memslots_groups;$/;"	m	struct:QXLDevInitInfo
num_mig_target_clients	server/reds-private.h	/^    int num_mig_target_clients;$/;"	m	struct:RedsState
num_migrated_channels	server/red_channel.h	/^    int num_migrated_channels; \/* for seamless - number of channels that wait for migrate data*\/$/;"	m	struct:RedClient
num_of_channels	server/reds-private.h	/^    int num_of_channels;$/;"	m	struct:RedsState
num_of_channels	spice-common/common/messages.h	/^    uint32_t num_of_channels;$/;"	m	struct:SpiceMsgChannels
num_of_monitors	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t num_of_monitors;$/;"	m	struct:VDAgentMonitorsConfig
num_of_nodes	spice-common/spice-protocol/spice/stats.h	/^    uint32_t num_of_nodes;$/;"	m	struct:SpiceStat
num_pages	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t num_pages;$/;"	m	struct:QXLRom
num_pixmap_cache_items	server/red_worker.c	/^        int num_pixmap_cache_items;$/;"	m	struct:DisplayChannelClient::__anon186	file:
num_points	spice-common/common/canvas_base.c	/^    int num_points;$/;"	m	struct:__anon17	file:
num_recent_enc_frames	server/mjpeg_encoder.c	/^    uint32_t num_recent_enc_frames;$/;"	m	struct:MJpegEncoderRateControl	file:
num_rects	spice-common/common/draw.h	/^  uint32_t num_rects;$/;"	m	struct:SpiceClipRects
num_rects	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t num_rects;$/;"	m	struct:QXLClipRects
num_renderers	server/red_dispatcher.c	/^static uint32_t num_renderers = 0;$/;"	v	file:
num_renderers	server/red_worker.c	/^    uint32_t num_renderers;$/;"	m	struct:RedWorker	file:
num_renderers	server/red_worker.h	/^    uint32_t num_renderers;$/;"	m	struct:WorkerInitData
num_samples	server/tests/test_playback.c	/^uint32_t num_samples;$/;"	v
num_segments	spice-common/common/draw.h	/^  uint32_t num_segments;$/;"	m	struct:SpicePath
num_segments	spice-common/common/glc.c	/^    int num_segments;$/;"	m	struct:Pathpath	file:
num_self_tokens	server/char_device.c	/^    uint64_t num_self_tokens;$/;"	m	struct:SpiceCharDeviceState	file:
num_send_tokens	server/char_device.c	/^    uint64_t num_send_tokens; \/* send to client *\/$/;"	m	struct:SpiceCharDeviceClientState	file:
num_send_tokens	server/migration_protocol.h	/^    uint32_t num_send_tokens;$/;"	m	struct:SpiceMigrateDataCharDevice
num_surfaces	server/migration_protocol.h	/^    uint32_t num_surfaces;$/;"	m	struct:MigrateDisplaySurfacesAtClientLossless
num_surfaces	server/migration_protocol.h	/^    uint32_t num_surfaces;$/;"	m	struct:MigrateDisplaySurfacesAtClientLossy
num_tokens	spice-common/common/messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgMainAgentTokens
num_tokens	spice-common/common/messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgTunnelSocketTokens
num_tokens	spice-common/common/messages.h	/^    uint32_t num_tokens;$/;"	m	struct:SpiceMsgcTunnelSocketTokens
nums	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
nw_size	spice-common/python_modules/demarshal.py	/^    def nw_size(self):$/;"	m	class:ItemInfo
obj	client/menu.h	/^        void *obj;$/;"	m	struct:Menu::MenuItem
offset	client/x11/platform.cpp	/^    static void offset(SpiceRect& area, int delta)$/;"	f	class:BottomVariant
offset	client/x11/platform.cpp	/^    static void offset(SpiceRect& area, int delta)$/;"	f	class:LeftVariant
offset	client/x11/platform.cpp	/^    static void offset(SpiceRect& area, int delta)$/;"	f	class:RightVariant
offset	client/x11/platform.cpp	/^    static void offset(SpiceRect& area, int delta)$/;"	f	class:TopVariant
offset	spice-common/common/generated_client_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:
offset	spice-common/common/generated_client_demarshallers1.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:
offset	spice-common/common/generated_server_demarshallers.c	/^    uint64_t offset;$/;"	m	struct:PointerInfo	file:
offset	spice-common/common/glc.c	/^    double offset;$/;"	m	struct:LineDash	file:
offset	spice-common/common/marshaller.c	/^    size_t offset;$/;"	m	struct:__anon19	file:
offset	spice-common/common/mem.h	/^    size_t offset;$/;"	m	struct:SpiceBuffer
offset_area	client/screen_layer.cpp	/^void ScreenLayer::offset_area(int dx, int dy)$/;"	f	class:ScreenLayer
oglctx_destroy	spice-common/common/ogl_ctx.c	/^void oglctx_destroy(OGLCtx *ctx)$/;"	f
oglctx_make_current	spice-common/common/ogl_ctx.c	/^void oglctx_make_current(OGLCtx *ctx)$/;"	f
oglctx_type_str	spice-common/common/ogl_ctx.c	/^const char *oglctx_type_str(OGLCtx *ctx)$/;"	f
old_content	spice-common/spice_codegen.py	/^        old_content = f.read()$/;"	v
old_error_handler	client/x11/red_window.cpp	/^static XErrorHandler old_error_handler = NULL;$/;"	v	file:
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	client/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	docs/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	docs/manual/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	server/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	server/tests/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	spice-common/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	spice-common/common/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	spice-common/python_modules/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	spice-common/spice-protocol/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	spice-common/spice-protocol/spice/Makefile	/^oldincludedir = \/usr\/include$/;"	m
on_activate	client/foreign_menu.cpp	/^void ForeignMenu::on_activate()$/;"	f	class:ForeignMenu
on_activate	client/screen.cpp	/^void RedScreen::on_activate()$/;"	f	class:RedScreen
on_activate_screen	client/application.cpp	/^void Application::on_activate_screen(RedScreen* screen)$/;"	f	class:Application
on_activating_ticketing	server/reds.c	/^static inline void on_activating_ticketing(void)$/;"	f	file:
on_agent_announce_capabilities	client/red_client.cpp	/^void RedClient::on_agent_announce_capabilities($/;"	f	class:RedClient
on_agent_reply	client/red_client.cpp	/^void RedClient::on_agent_reply(VDAgentReply* reply)$/;"	f	class:RedClient
on_app_activated	client/application.cpp	/^void Application::on_app_activated()$/;"	f	class:Application
on_app_activated	client/windows/platform.cpp	/^    virtual void on_app_activated() {}$/;"	f	class:DefaultEventListener
on_app_activated	client/x11/platform.cpp	/^    virtual void on_app_activated() {}$/;"	f	class:DefaultEventListener
on_app_deactivated	client/application.cpp	/^void Application::on_app_deactivated()$/;"	f	class:Application
on_app_deactivated	client/windows/platform.cpp	/^    virtual void on_app_deactivated() {}$/;"	f	class:DefaultEventListener
on_app_deactivated	client/x11/platform.cpp	/^    virtual void on_app_deactivated() {}$/;"	f	class:DefaultEventListener
on_block	server/red_channel.h	/^    on_outgoing_block_proc on_block;$/;"	m	struct:OutgoingHandlerInterface
on_channel_disconnect_mig_src_completed	client/red_client.cpp	/^void RedClient::on_channel_disconnect_mig_src_completed(RedChannel& channel)$/;"	f	class:RedClient
on_channel_disconnected	client/red_client.cpp	/^void RedClient::on_channel_disconnected(RedChannel& channel)$/;"	f	class:RedClient
on_char	client/application.cpp	/^void Application::on_char(uint32_t ch)$/;"	f	class:Application
on_char	client/gui/gui.cpp	/^void GUI::on_char(uint32_t ch)$/;"	f	class:GUI
on_char	client/inputs_handler.h	/^    virtual void on_char(uint32_t ch) {}$/;"	f	class:KeyHandler
on_char	client/screen.cpp	/^void RedScreen::on_char(uint32_t ch)$/;"	f	class:RedScreen
on_client_connected	server/tests/test_display_base.h	/^    void (*on_client_connected)(Test *test);$/;"	m	struct:Test
on_client_connected	server/tests/test_display_width_stride.c	/^void on_client_connected(Test *test)$/;"	f
on_client_disconnected	server/tests/test_display_base.h	/^    void (*on_client_disconnected)(Test *test);$/;"	m	struct:Test
on_clipboard_grab	client/red_client.cpp	/^void RedClient::on_clipboard_grab(uint32_t *types, uint32_t type_count)$/;"	f	class:RedClient
on_clipboard_grab	client/windows/platform.cpp	/^    virtual void on_clipboard_grab(uint32_t *types, uint32_t type_count) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_grab	client/windows/platform.cpp	/^bool Platform::on_clipboard_grab(uint32_t *types, uint32_t type_count)$/;"	f	class:Platform
on_clipboard_grab	client/x11/platform.cpp	/^    void on_clipboard_grab(uint32_t *types, uint32_t type_count) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_grab	client/x11/platform.cpp	/^bool Platform::on_clipboard_grab(uint32_t *types, uint32_t type_count)$/;"	f	class:Platform
on_clipboard_notify	client/red_client.cpp	/^void RedClient::on_clipboard_notify(uint32_t type, uint8_t* data, int32_t size)$/;"	f	class:RedClient
on_clipboard_notify	client/windows/platform.cpp	/^    virtual void on_clipboard_notify(uint32_t type, uint8_t* data, int32_t size) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_notify	client/windows/platform.cpp	/^bool Platform::on_clipboard_notify(uint32_t type, const uint8_t* data, int32_t size)$/;"	f	class:Platform
on_clipboard_notify	client/x11/platform.cpp	/^    void on_clipboard_notify(uint32_t type, uint8_t* data, int32_t size) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_notify	client/x11/platform.cpp	/^bool Platform::on_clipboard_notify(uint32_t type, const uint8_t* data, int32_t size)$/;"	f	class:Platform
on_clipboard_release	client/red_client.cpp	/^void RedClient::on_clipboard_release()$/;"	f	class:RedClient
on_clipboard_release	client/windows/platform.cpp	/^    virtual void on_clipboard_release() {}$/;"	f	class:DefaultClipboardListener
on_clipboard_release	client/windows/platform.cpp	/^void Platform::on_clipboard_release()$/;"	f	class:Platform
on_clipboard_release	client/x11/platform.cpp	/^    void on_clipboard_release() {}$/;"	f	class:DefaultClipboardListener
on_clipboard_release	client/x11/platform.cpp	/^void Platform::on_clipboard_release()$/;"	f	class:Platform
on_clipboard_request	client/red_client.cpp	/^void RedClient::on_clipboard_request(uint32_t type)$/;"	f	class:RedClient
on_clipboard_request	client/windows/platform.cpp	/^    virtual void on_clipboard_request(uint32_t type) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_request	client/windows/platform.cpp	/^bool Platform::on_clipboard_request(uint32_t type)$/;"	f	class:Platform
on_clipboard_request	client/x11/platform.cpp	/^    void on_clipboard_request(uint32_t type) {}$/;"	f	class:DefaultClipboardListener
on_clipboard_request	client/x11/platform.cpp	/^bool Platform::on_clipboard_request(uint32_t type)$/;"	f	class:Platform
on_cmd_line_invalid_arg	client/application.cpp	/^void Application::on_cmd_line_invalid_arg(const char* arg0, const char* what, const char* val)$/;"	f	class:Application
on_command	client/controller.cpp	/^void Controller::on_command(NamedPipe::ConnectionRef conn_ref, int32_t id)$/;"	f	class:Controller
on_command	client/foreign_menu.cpp	/^void ForeignMenu::on_command(NamedPipe::ConnectionRef conn_ref, int32_t id)$/;"	f	class:ForeignMenu
on_connect	client/cursor_channel.cpp	/^void CursorChannel::on_connect()$/;"	f	class:CursorChannel
on_connect	client/display_channel.cpp	/^void DisplayChannel::on_connect()$/;"	f	class:DisplayChannel
on_connect	client/inputs_channel.cpp	/^void InputsChannel::on_connect()$/;"	f	class:InputsChannel
on_connect	client/red_channel.h	/^    virtual void on_connect() {}$/;"	f	class:RedChannel
on_connect	client/red_client.cpp	/^void RedClient::on_connect()$/;"	f	class:RedClient
on_connect	client/smartcard_channel.cpp	/^void SmartCardChannel::on_connect()$/;"	f	class:SmartCardChannel
on_connect_mig_target	client/red_channel.h	/^    virtual void on_connect_mig_target() { on_connect();}$/;"	f	class:RedChannel
on_connect_mig_target	client/red_client.h	/^    virtual void on_connect_mig_target() {}$/;"	f	class:RedClient
on_connected	client/application.cpp	/^void Application::on_connected()$/;"	f	class:Application
on_connecting	client/red_channel.h	/^    virtual void on_connecting() {}$/;"	f	class:RedChannel
on_connecting	client/red_client.cpp	/^void RedClient::on_connecting()$/;"	f	class:RedClient
on_data	client/controller.cpp	/^void ControllerConnection::on_data()$/;"	f	class:ControllerConnection
on_data	client/foreign_menu.cpp	/^void ForeignMenuConnection::on_data()$/;"	f	class:ForeignMenuConnection
on_deactivate	client/foreign_menu.cpp	/^void ForeignMenu::on_deactivate()$/;"	f	class:ForeignMenu
on_deactivate	client/screen.cpp	/^void RedScreen::on_deactivate()$/;"	f	class:RedScreen
on_deactivate_screen	client/application.cpp	/^void Application::on_deactivate_screen(RedScreen* screen)$/;"	f	class:Application
on_disconnect	client/cursor_channel.cpp	/^void CursorChannel::on_disconnect()$/;"	f	class:CursorChannel
on_disconnect	client/display_channel.cpp	/^void DisplayChannel::on_disconnect()$/;"	f	class:DisplayChannel
on_disconnect	client/inputs_channel.cpp	/^void InputsChannel::on_disconnect()$/;"	f	class:InputsChannel
on_disconnect	client/playback_channel.cpp	/^void PlaybackChannel::on_disconnect()$/;"	f	class:PlaybackChannel
on_disconnect	client/record_channel.cpp	/^void RecordChannel::on_disconnect()$/;"	f	class:RecordChannel
on_disconnect	client/red_channel.h	/^    virtual void on_disconnect() {}$/;"	f	class:RedChannel
on_disconnect	client/red_client.cpp	/^void RedClient::on_disconnect()$/;"	f	class:RedClient
on_disconnect	client/smartcard_channel.cpp	/^void SmartCardChannel::on_disconnect()$/;"	f	class:SmartCardChannel
on_disconnect	server/red_channel.h	/^    channel_disconnect_proc on_disconnect;$/;"	m	struct:__anon145
on_disconnect_mig_src	client/display_channel.cpp	/^void DisplayChannel::on_disconnect_mig_src()$/;"	f	class:DisplayChannel
on_disconnect_mig_src	client/red_channel.h	/^    virtual void on_disconnect_mig_src() { on_disconnect();}$/;"	f	class:RedChannel
on_disconnect_mig_src	client/red_client.cpp	/^void RedClient::on_disconnect_mig_src()$/;"	f	class:RedClient
on_disconnected	client/application.cpp	/^void Application::on_disconnected(int error_code)$/;"	f	class:Application
on_disconnecting	client/application.cpp	/^void Application::on_disconnecting()$/;"	f	class:Application
on_display_mode_change	client/application.cpp	/^void Application::on_display_mode_change()$/;"	f	class:Application
on_display_mode_change	client/red_client.cpp	/^void RedClient::on_display_mode_change()$/;"	f	class:RedClient
on_display_mode_change	client/x11/platform.cpp	/^    void on_display_mode_change() {}$/;"	f	class:DefaultDisplayModeListener
on_error	server/red_channel.h	/^    on_incoming_error_proc on_error; \/\/ recv error or handle_message error$/;"	m	struct:IncomingHandlerInterface
on_error	server/red_channel.h	/^    on_outgoing_error_proc on_error;$/;"	m	struct:OutgoingHandlerInterface
on_event	client/client_net_socket.cpp	/^void ClientNetSocket::on_event()$/;"	f	class:ClientNetSocket
on_event	client/display_channel.cpp	/^void GLInterruptRecreate::on_event()$/;"	f	class:GLInterruptRecreate
on_event	client/display_channel.cpp	/^void InterruptUpdate::on_event()$/;"	f	class:InterruptUpdate
on_event	client/display_channel.cpp	/^void StreamsTrigger::on_event()$/;"	f	class:StreamsTrigger
on_event	client/process_loop.h	/^        virtual void on_event() {}$/;"	f	class:ProcessLoop::WakeupTrigger
on_event	client/red_channel.cpp	/^SPICE_GNUC_NORETURN void AbortTrigger::on_event()$/;"	f	class:AbortTrigger
on_event	client/red_channel.cpp	/^void RedChannel::on_event()$/;"	f	class:RedChannel
on_event	client/red_channel.cpp	/^void SendTrigger::on_event()$/;"	f	class:SendTrigger
on_event	client/red_peer.h	/^    virtual void on_event() {}$/;"	f	class:RedPeer
on_event	client/windows/named_pipe.cpp	/^void PipeReader::on_event()$/;"	f	class:PipeReader
on_event	client/windows/named_pipe.cpp	/^void PipeWriter::on_event()$/;"	f	class:PipeWriter
on_event	client/windows/named_pipe.cpp	/^void WinListener::on_event()$/;"	f	class:WinListener
on_event	client/windows/record.cpp	/^void WaveRecorder::on_event()$/;"	f	class:WaveRecorder
on_event	client/x11/named_pipe.cpp	/^void LinuxListener::on_event()$/;"	f	class:LinuxListener
on_event	client/x11/named_pipe.cpp	/^void Session::on_event()$/;"	f	class:Session
on_event	client/x11/platform.cpp	/^void XEventHandler::on_event()$/;"	f	class:XEventHandler
on_event	client/x11/record.cpp	/^void WaveRecorder::EventTrigger::on_event()$/;"	f	class:WaveRecorder::EventTrigger
on_event	client/x11/record.cpp	/^void WaveRecorder::on_event()$/;"	f	class:WaveRecorder
on_exposed_rect	client/screen.cpp	/^void RedScreen::on_exposed_rect(const SpiceRect& area)$/;"	f	class:RedScreen
on_focus_in	client/inputs_channel.cpp	/^void InputsChannel::on_focus_in()$/;"	f	class:InputsChannel
on_focus_in	client/inputs_handler.h	/^    virtual void on_focus_in() {}$/;"	f	class:KeyHandler
on_focus_in	client/windows/red_window.cpp	/^void RedWindow::on_focus_in()$/;"	f	class:RedWindow
on_focus_in	client/x11/platform.cpp	/^void XPlatform::on_focus_in()$/;"	f	class:XPlatform
on_focus_in	client/x11/red_window.cpp	/^void RedWindow::on_focus_in()$/;"	f	class:RedWindow
on_focus_out	client/inputs_channel.cpp	/^void InputsChannel::on_focus_out()$/;"	f	class:InputsChannel
on_focus_out	client/inputs_handler.h	/^    virtual void on_focus_out() {}$/;"	f	class:KeyHandler
on_focus_out	client/windows/red_window.cpp	/^void RedWindow::on_focus_out()$/;"	f	class:RedWindow
on_focus_out	client/x11/platform.cpp	/^void XPlatform::on_focus_out()$/;"	f	class:XPlatform
on_focus_out	client/x11/red_window.cpp	/^void RedWindow::on_focus_out()$/;"	f	class:RedWindow
on_free_self_token	server/char_device.h	/^    void (*on_free_self_token)(void *opaque);$/;"	m	struct:SpiceCharDeviceCallbacks
on_hold	server/red_worker.c	/^    QRegion on_hold;$/;"	m	struct:Shadow	file:
on_incoming_error_proc	server/red_channel.h	/^typedef void (*on_incoming_error_proc)(void *opaque);$/;"	t
on_input	server/red_channel.h	/^    on_input_proc on_input;$/;"	m	struct:IncomingHandlerInterface
on_input_proc	server/red_channel.h	/^typedef void (*on_input_proc)(void *opaque, int n);$/;"	t
on_key_down	client/application.cpp	/^void Application::on_key_down(RedKey key)$/;"	f	class:Application
on_key_down	client/gui/gui.cpp	/^void GUI::on_key_down(RedKey key)$/;"	f	class:GUI
on_key_down	client/inputs_channel.cpp	/^void InputsChannel::on_key_down(RedKey key)$/;"	f	class:InputsChannel
on_key_down	client/inputs_handler.h	/^    virtual void on_key_down(RedKey key) {}$/;"	f	class:KeyHandler
on_key_press	client/screen.cpp	/^void RedScreen::on_key_press(RedKey key)$/;"	f	class:RedScreen
on_key_release	client/screen.cpp	/^void RedScreen::on_key_release(RedKey key)$/;"	f	class:RedScreen
on_key_up	client/application.cpp	/^void Application::on_key_up(RedKey key)$/;"	f	class:Application
on_key_up	client/gui/gui.cpp	/^void GUI::on_key_up(RedKey key)$/;"	f	class:GUI
on_key_up	client/inputs_channel.cpp	/^void InputsChannel::on_key_up(RedKey key)$/;"	f	class:InputsChannel
on_key_up	client/inputs_handler.h	/^    virtual void on_key_up(RedKey key) {}$/;"	f	class:KeyHandler
on_layer_changed	client/screen.cpp	/^void RedScreen::on_layer_changed(ScreenLayer& layer)$/;"	f	class:RedScreen
on_message_complition	client/red_channel.cpp	/^void RedChannel::on_message_complition(uint64_t serial)$/;"	f	class:RedChannel
on_message_done	server/snd_worker.c	/^    snd_channel_on_message_done_proc on_message_done;$/;"	m	struct:SndChannel	file:
on_message_received	client/red_channel.cpp	/^void RedChannel::on_message_received()$/;"	f	class:RedChannel
on_migrate	client/inputs_channel.cpp	/^void InputsChannel::on_migrate()$/;"	f	class:InputsChannel
on_migrate	client/red_channel.h	/^    virtual void on_migrate() {}$/;"	f	class:RedChannel
on_minimized	client/windows/red_window.cpp	/^void RedWindow_p::on_minimized()$/;"	f	class:RedWindow_p
on_monitors_change	client/application.cpp	/^void Application::on_monitors_change()$/;"	f	class:Application
on_monitors_change	client/windows/platform.cpp	/^    virtual void on_monitors_change() {}$/;"	f	class:DefaultEventListener
on_monitors_change	client/x11/platform.cpp	/^    virtual void on_monitors_change() {}$/;"	f	class:DefaultEventListener
on_mouse_button_press	client/display_channel.cpp	/^void DisplayChannel::on_mouse_button_press(int button, int buttons_state)$/;"	f	class:DisplayChannel
on_mouse_button_press	client/gui/gui.cpp	/^void GUI::on_mouse_button_press(int button, int buttons_state)$/;"	f	class:GUI
on_mouse_button_press	client/screen.cpp	/^void RedScreen::on_mouse_button_press(SpiceMouseButton button, unsigned int buttons_state)$/;"	f	class:RedScreen
on_mouse_button_press	client/screen_layer.h	/^    virtual void on_mouse_button_press(int button, int buttons_state) {}$/;"	f	class:ScreenLayer
on_mouse_button_release	client/display_channel.cpp	/^void DisplayChannel::on_mouse_button_release(int button, int buttons_state)$/;"	f	class:DisplayChannel
on_mouse_button_release	client/gui/gui.cpp	/^void GUI::on_mouse_button_release(int button, int buttons_state)$/;"	f	class:GUI
on_mouse_button_release	client/screen.cpp	/^void RedScreen::on_mouse_button_release(SpiceMouseButton button, unsigned int buttons_state)$/;"	f	class:RedScreen
on_mouse_button_release	client/screen_layer.h	/^    virtual void on_mouse_button_release(int button, int buttons_state) {}$/;"	f	class:ScreenLayer
on_mouse_capture_trigger	client/red_client.cpp	/^void RedClient::on_mouse_capture_trigger(RedScreen& screen)$/;"	f	class:RedClient
on_mouse_down	client/application.cpp	/^void Application::on_mouse_down(int button, int buttons_state)$/;"	f	class:Application
on_mouse_down	client/inputs_channel.cpp	/^void InputsChannel::on_mouse_down(int button, int buttons_state)$/;"	f	class:InputsChannel
on_mouse_down	client/inputs_handler.h	/^    virtual void on_mouse_down(int button, int buttons_state) {}$/;"	f	class:MouseHandler
on_mouse_mode_change	client/cursor_channel.cpp	/^void CursorChannel::on_mouse_mode_change()$/;"	f	class:CursorChannel
on_mouse_motion	client/application.cpp	/^void Application::on_mouse_motion(int dx, int dy, int buttons_state)$/;"	f	class:Application
on_mouse_motion	client/inputs_channel.cpp	/^void InputsChannel::on_mouse_motion(int dx, int dy, int buttons_state)$/;"	f	class:InputsChannel
on_mouse_motion	client/inputs_handler.h	/^    virtual void on_mouse_motion(int dx, int dy, int buttons_state) {}$/;"	f	class:MouseHandler
on_mouse_motion	client/screen.cpp	/^void RedScreen::on_mouse_motion(int x, int y, unsigned int buttons_state)$/;"	f	class:RedScreen
on_mouse_position	client/inputs_channel.cpp	/^void InputsChannel::on_mouse_position(int x, int y, int buttons_state, int display_id)$/;"	f	class:InputsChannel
on_mouse_up	client/application.cpp	/^void Application::on_mouse_up(int button, int buttons_state)$/;"	f	class:Application
on_mouse_up	client/inputs_channel.cpp	/^void InputsChannel::on_mouse_up(int button, int buttons_state)$/;"	f	class:InputsChannel
on_mouse_up	client/inputs_handler.h	/^    virtual void on_mouse_up(int button, int buttons_state) {}$/;"	f	class:MouseHandler
on_msg_done	server/red_channel.h	/^    on_outgoing_msg_done_proc on_msg_done;$/;"	m	struct:OutgoingHandlerInterface
on_new_cursor_channel	server/red_worker.c	/^static void on_new_cursor_channel(RedWorker *worker, RedChannelClient *rcc)$/;"	f	file:
on_new_display_channel_client	server/red_worker.c	/^static void on_new_display_channel_client(DisplayChannelClient *dcc)$/;"	f	file:
on_new_playback_channel	server/snd_worker.c	/^static void on_new_playback_channel(SndWorker *worker)$/;"	f	file:
on_new_record_channel	server/snd_worker.c	/^static void on_new_record_channel(SndWorker *worker)$/;"	f	file:
on_outgoing_block_proc	server/red_channel.h	/^typedef void (*on_outgoing_block_proc)(void *opaque);$/;"	t
on_outgoing_error_proc	server/red_channel.h	/^typedef void (*on_outgoing_error_proc)(void *opaque);$/;"	t
on_outgoing_msg_done_proc	server/red_channel.h	/^typedef void (*on_outgoing_msg_done_proc)(void *opaque);$/;"	t
on_output	server/red_channel.h	/^    on_output_proc on_output;$/;"	m	struct:OutgoingHandlerInterface
on_output_proc	server/red_channel.h	/^typedef void (*on_output_proc)(void *opaque, int n);$/;"	t
on_pointer_enter	client/application.cpp	/^    virtual void on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:GUIBarrier
on_pointer_enter	client/display_channel.cpp	/^void DisplayChannel::on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:DisplayChannel
on_pointer_enter	client/gui/gui.cpp	/^void GUI::on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:GUI
on_pointer_enter	client/screen.cpp	/^void RedScreen::on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:RedScreen
on_pointer_enter	client/screen_layer.h	/^    virtual void on_pointer_enter(int x, int y, unsigned int buttons_state) {}$/;"	f	class:ScreenLayer
on_pointer_enter	client/windows/red_window.cpp	/^void RedWindow::on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:RedWindow
on_pointer_enter	client/x11/red_window.cpp	/^void RedWindow::on_pointer_enter(int x, int y, unsigned int buttons_state)$/;"	f	class:RedWindow
on_pointer_leave	client/display_channel.cpp	/^void DisplayChannel::on_pointer_leave()$/;"	f	class:DisplayChannel
on_pointer_leave	client/gui/gui.cpp	/^void GUI::on_pointer_leave()$/;"	f	class:GUI
on_pointer_leave	client/screen.cpp	/^void RedScreen::on_pointer_leave()$/;"	f	class:RedScreen
on_pointer_leave	client/screen_layer.h	/^    virtual void on_pointer_leave() {}$/;"	f	class:ScreenLayer
on_pointer_leave	client/windows/red_window.cpp	/^void RedWindow::on_pointer_leave()$/;"	f	class:RedWindow
on_pointer_leave	client/x11/red_window.cpp	/^void RedWindow::on_pointer_leave()$/;"	f	class:RedWindow
on_pointer_motion	client/display_channel.cpp	/^void DisplayChannel::on_pointer_motion(int x, int y, unsigned int buttons_state)$/;"	f	class:DisplayChannel
on_pointer_motion	client/gui/gui.cpp	/^void GUI::on_pointer_motion(int x, int y, unsigned int buttons_state)$/;"	f	class:GUI
on_pointer_motion	client/screen.cpp	/^void RedScreen::on_pointer_motion(int x, int y, unsigned int buttons_state)$/;"	f	class:RedScreen
on_pointer_motion	client/screen_layer.h	/^    virtual void on_pointer_motion(int x, int y, unsigned int buttons_state) {}$/;"	f	class:ScreenLayer
on_pos_changing	client/windows/red_window.cpp	/^void RedWindow_p::on_pos_changing(RedWindow& red_window)$/;"	f	class:RedWindow_p
on_restored	client/windows/red_window.cpp	/^void RedWindow_p::on_restored()$/;"	f	class:RedWindow_p
on_screen_destroyed	client/application.cpp	/^void Application::on_screen_destroyed(int id, bool was_captured)$/;"	f	class:Application
on_screen_unlocked	client/application.cpp	/^void Application::on_screen_unlocked(RedScreen& screen)$/;"	f	class:Application
on_send_trigger	client/red_channel.cpp	/^void RedChannel::on_send_trigger()$/;"	f	class:RedChannel
on_size_changed	client/application.cpp	/^void InfoLayer::on_size_changed()$/;"	f	class:InfoLayer
on_size_changed	client/gui/gui.cpp	/^void GUI::on_size_changed()$/;"	f	class:GUI
on_size_changed	client/screen_layer.h	/^    virtual void on_size_changed() {}$/;"	f	class:ScreenLayer
on_start_key_interception	client/screen.cpp	/^void RedScreen::on_start_key_interception()$/;"	f	class:RedScreen
on_start_running	client/application.cpp	/^void Application::on_start_running()$/;"	f	class:Application
on_start_running	client/process_loop.h	/^    virtual void on_start_running() {}$/;"	f	class:ProcessLoop
on_start_screen_key_interception	client/application.cpp	/^void Application::on_start_screen_key_interception(RedScreen* screen)$/;"	f	class:Application
on_stop_key_interception	client/screen.cpp	/^void RedScreen::on_stop_key_interception()$/;"	f	class:RedScreen
on_stop_screen_key_interception	client/application.cpp	/^void Application::on_stop_screen_key_interception(RedScreen* screen)$/;"	f	class:Application
on_streams_trigger	client/display_channel.cpp	/^void DisplayChannel::on_streams_trigger()$/;"	f	class:DisplayChannel
on_update_completion	client/display_channel.cpp	/^void DisplayChannel::on_update_completion(uint64_t mark)$/;"	f	class:DisplayChannel
on_update_completion	client/screen_layer.h	/^    virtual void on_update_completion(uint64_t mark) {}$/;"	f	class:ScreenLayer
on_visibility_start	client/application.cpp	/^void Application::on_visibility_start(int screen_id)$/;"	f	class:Application
one_byte_pixel_t	client/glz_decoder.cpp	/^typedef struct ATTR_PACKED one_byte_pixel_t {$/;"	s	file:
one_byte_pixel_t	client/glz_decoder.cpp	/^} one_byte_pixel_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
one_byte_pixel_t	server/glz_encoder.c	/^typedef struct __attribute__ ((__packed__)) one_byte_pixel_t {$/;"	s	file:
one_byte_pixel_t	server/glz_encoder.c	/^} one_byte_pixel_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
one_byte_pixel_t	spice-common/common/lz.c	/^typedef struct ATTR_PACKED one_byte_pixel_t {$/;"	s	file:
one_byte_pixel_t	spice-common/common/lz.c	/^} one_byte_pixel_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
one_byte_pixel_t	spice-common/common/quic.c	/^typedef struct ATTR_PACKED one_byte_pixel_t {$/;"	s	file:
one_byte_t	spice-common/common/quic.c	/^} one_byte_t;$/;"	t	typeref:struct:one_byte_pixel_t	file:
op_begin_decode	client/jpeg_decoder.cpp	/^static void op_begin_decode(SpiceJpegDecoder *decoder,$/;"	f	file:
op_decode	client/glz_decoder.cpp	/^static void op_decode (SpiceGlzDecoder *decoder,$/;"	f	file:
op_decode	client/jpeg_decoder.cpp	/^static void op_decode(SpiceJpegDecoder *decoder,$/;"	f	file:
op_decode	client/zlib_decoder.cpp	/^static void op_decode(SpiceZlibDecoder *decoder,$/;"	f	file:
op_get	client/canvas.h	/^    static SpicePalette* op_get(SpicePaletteCache *c, uint64_t id)$/;"	f	class:SpicePaletteCacheBase
op_get	client/canvas.h	/^    static pixman_image_t* op_get(SpiceImageCache *c, uint64_t id)$/;"	f	class:SpiceImageCacheBase
op_get_lossless	client/canvas.h	/^    static pixman_image_t* op_get_lossless(SpiceImageCache *c, uint64_t id)$/;"	f	class:SpiceImageCacheBase
op_put	client/canvas.h	/^    static void op_put(SpiceImageCache *c, uint64_t id, pixman_image_t *surface)$/;"	f	class:SpiceImageCacheBase
op_put	client/canvas.h	/^    static void op_put(SpicePaletteCache *c, SpicePalette *palette)$/;"	f	class:SpicePaletteCacheBase
op_put_lossy	client/canvas.h	/^    static void op_put_lossy(SpiceImageCache *c, uint64_t id, pixman_image_t *surface)$/;"	f	class:SpiceImageCacheBase
op_release	client/canvas.h	/^    static void op_release (SpicePaletteCache *c,$/;"	f	class:SpicePaletteCacheBase
op_replace_lossy	client/canvas.h	/^    static void op_replace_lossy(SpiceImageCache *c, uint64_t id, pixman_image_t *surface)$/;"	f	class:SpiceImageCacheBase
opaque	server/char_device.c	/^    void *opaque;$/;"	m	struct:SpiceCharDeviceState	file:
opaque	server/dispatcher.h	/^    void *opaque;$/;"	m	struct:Dispatcher
opaque	server/main_channel.c	/^    void *opaque;$/;"	m	struct:AgentDataPipeItem	file:
opaque	server/red_channel.h	/^    void *opaque;$/;"	m	struct:IncomingHandler
opaque	server/red_channel.h	/^    void *opaque;$/;"	m	struct:OutgoingHandler
opaque	server/red_parse_qxl.h	/^        SpiceOpaque opaque;$/;"	m	union:RedDrawable::__anon161
opaque	server/reds_stream.c	/^    void *opaque;$/;"	m	struct:AsyncRead	file:
opaque	server/spice_timer_queue.c	/^    void *opaque;$/;"	m	struct:SpiceTimer	file:
opaque	server/tests/basic_event_loop.c	/^    void *opaque;$/;"	m	struct:SpiceTimer	file:
opaque	server/tests/basic_event_loop.c	/^    void *opaque;$/;"	m	struct:SpiceWatch	file:
opaque	spice-common/common/marshaller.c	/^    void *opaque;$/;"	m	struct:__anon18	file:
opaque	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLOpaque opaque;$/;"	m	union:QXLCompatDrawable::__anon76
opaque	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLOpaque opaque;$/;"	m	union:QXLDrawable::__anon77
opaque	spice-common/spice-protocol/spice/vd_agent.h	/^    uint64_t opaque;$/;"	m	struct:VDAgentMessage
opened	server/spicevmc.c	/^    uint8_t opened;$/;"	m	struct:PortInitPipeItem	file:
opened	spice-common/common/messages.h	/^    uint8_t opened;$/;"	m	struct:SpiceMsgPortInit
openssl_init	server/reds.c	/^static void openssl_init(RedLinkInfo *link)$/;"	f	file:
openssl_thread_setup	server/reds.c	/^static void openssl_thread_setup(void)$/;"	f	file:
openssl_verify	spice-common/common/ssl_verify.c	/^static int openssl_verify(int preverify_ok, X509_STORE_CTX *ctx)$/;"	f	file:
operator ()	client/cursor_channel.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:AttachDispayEvent::UpdateDisplayChannel
operator ()	client/display_channel.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:AttachChannelsEvent::AttachChannels
operator ()	client/display_channel.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:DetachChannelsEvent::DetatchChannels
operator ()	client/gui/gui.cpp	/^        bool operator () (const CEGUI::EventArgs& e)$/;"	f	class:GUI::Dialog::BottonAction
operator ()	client/inputs_channel.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:RemoveInputsHandlerEvent::DetachFunc
operator ()	client/inputs_channel.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:SetInputsHandlerEvent::AttachFunc
operator ()	client/process_loop.h	/^        bool operator () (const Timer* timer1, const Timer* timer2) const$/;"	f	class:Timer::Compare
operator ()	client/red_client.cpp	/^        virtual bool operator() (RedChannel& channel)$/;"	f	class:MouseModeEvent::SetModeFunc
operator ()	client/utils.h	/^    void operator () (T p) { delete p;}$/;"	f	class:FreeObject
operator ()	client/windows/platform_utils.h	/^    void operator () (HDC dc) { DeleteDC(dc);}$/;"	f	class:Delete_DC
operator ()	client/windows/platform_utils.h	/^    void operator () (HGDIOBJ obj) { DeleteObject(obj);}$/;"	f	class:Delete_Object
operator ()	client/windows/platform_utils.h	/^    void operator () (HGLRC ctx) { wglDeleteContext(ctx);}$/;"	f	class:DeleteOGLContext
operator ()	client/x11/platform.cpp	/^    bool operator () (XMonitor* mon1, XMonitor* mon2) const$/;"	f	class:SortBottomToTop
operator ()	client/x11/platform.cpp	/^    bool operator () (XMonitor* mon1, XMonitor* mon2) const$/;"	f	class:SortLeftToRight
operator ()	client/x11/platform.cpp	/^    bool operator () (XMonitor* mon1, XMonitor* mon2) const$/;"	f	class:SortRightToLeft
operator ()	client/x11/platform.cpp	/^    bool operator () (XMonitor* mon1, XMonitor* mon2) const$/;"	f	class:SortTopToBottom
operator ()	client/x11/platform.cpp	/^    bool operator () (const ModeInfo& mode1, const ModeInfo& mode2) const$/;"	f	class:ModeCompare
operator ()	client/x11/platform.cpp	/^    bool operator () (const SizeInfo& size1, const SizeInfo& size2) const$/;"	f	class:SizeCompare
operator ()	client/x11/platform.cpp	/^    void operator () (XRRCrtcInfo* crtc_info) { XRRFreeCrtcInfo(crtc_info);}$/;"	f	class:FreeCrtcInfo
operator ()	client/x11/platform.cpp	/^    void operator () (XRROutputInfo* output_info) { XRRFreeOutputInfo(output_info);}$/;"	f	class:FreeOutputInfo
operator ()	client/x11/platform.cpp	/^    void operator () (XRRScreenResources* res) { XRRFreeScreenResources(res);}$/;"	f	class:FreeScreenResources
operator *	client/utils.h	/^    T* operator * () {return _obj;}$/;"	f	class:AutoRef
operator *	client/windows/platform_utils.h	/^    HDC operator * () { return _dc;}$/;"	f	class:WindowDC
operator ++	client/windows/atomic_count.h	/^    uint32_t operator ++ ()$/;"	f	class:AtomicCount
operator ++	client/x11/atomic_count.h	/^    uint32_t operator ++ ()$/;"	f	class:AtomicCount
operator --	client/windows/atomic_count.h	/^    uint32_t operator -- ()$/;"	f	class:AtomicCount
operator --	client/x11/atomic_count.h	/^    uint32_t operator -- ()$/;"	f	class:AtomicCount
operator ->	client/utils.h	/^    T* operator -> () { return _res;}$/;"	f	class:_AutoRes
operator <	client/gui/softrenderer.h	/^            bool operator < (const QuadInfo& other) const$/;"	f	struct:CEGUI::SoftRenderer::QuadInfo
operator []	client/utils.h	/^    T& operator [] (int i) {return _array[i];}$/;"	f	class:AutoArray
operator uint32_t	client/windows/atomic_count.h	/^    operator uint32_t () { return _count;}$/;"	f	class:AtomicCount
operator uint32_t	client/x11/atomic_count.h	/^    operator uint32_t () { return _count;}$/;"	f	class:AtomicCount
ops	spice-common/common/canvas_base.h	/^    SpiceJpegDecoderOps *ops;$/;"	m	struct:_SpiceJpegDecoder
ops	spice-common/common/canvas_base.h	/^  SpiceCanvasOps *ops;$/;"	m	struct:_SpiceCanvas
ops	spice-common/common/canvas_base.h	/^  SpiceGlzDecoderOps *ops;$/;"	m	struct:_SpiceGlzDecoder
ops	spice-common/common/canvas_base.h	/^  SpiceImageCacheOps *ops;$/;"	m	struct:_SpiceImageCache
ops	spice-common/common/canvas_base.h	/^  SpicePaletteCacheOps *ops;$/;"	m	struct:_SpicePaletteCache
ops	spice-common/common/canvas_base.h	/^  SpiceZlibDecoderOps *ops;$/;"	m	struct:_SpiceZlibDecoder
ops	spice-common/common/canvas_base.h	/^ SpiceImageSurfacesOps *ops;$/;"	m	struct:_SpiceImageSurfaces
ops	spice-common/common/lines.h	/^    lineGCOps *ops;$/;"	m	struct:lineGC
optional	client/cmd_line_parser.h	/^        bool optional;$/;"	m	class:CmdLineParser::Option
optional_block	spice-common/python_modules/codegen.py	/^    def optional_block(self, scope):$/;"	m	class:CodeWriter
options	server/reds.c	/^    uint32_t options;$/;"	m	struct:ChannelSecurityOptions	file:
opus_decoder	spice-common/common/snd_codec.c	/^    OpusDecoder *opus_decoder;$/;"	m	struct:__anon37	file:
opus_encoder	spice-common/common/snd_codec.c	/^    OpusEncoder *opus_encoder;$/;"	m	struct:__anon37	file:
orientation	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t orientation;$/;"	m	struct:QXLMode
orig_size	server/red_worker.c	/^    uint64_t orig_size;$/;"	m	struct:stat_info_s	file:
origin	server/char_device.h	/^    int origin;$/;"	m	struct:SpiceCharDeviceWriteBuffer
os	spice-common/spice_codegen.py	/^import os$/;"	i
out_bytes	server/red_channel.h	/^    uint32_t out_bytes;$/;"	m	struct:RedChannelClientConnectivityMonitor
out_bytes_counter	server/red_channel.h	/^    uint64_t *out_bytes_counter;$/;"	m	struct:RedChannel
out_messages	server/snd_worker.c	/^    uint32_t out_messages;$/;"	m	struct:SndChannel	file:
out_size	server/jpeg_encoder.c	/^        unsigned int out_size;$/;"	m	struct:JpegEncoder::__anon167	file:
out_surface	spice-common/common/canvas_utils.h	/^    pixman_image_t       *out_surface;$/;"	m	struct:LzDecodeUsrData
outbuffer	server/mjpeg_encoder.c	/^  unsigned char ** outbuffer;	\/* target buffer *\/$/;"	m	struct:__anon196	file:
outgoing	server/red_channel.h	/^    OutgoingHandler outgoing;$/;"	m	struct:RedChannelClient
outgoing_cb	server/red_channel.h	/^    OutgoingHandlerInterface outgoing_cb;$/;"	m	struct:RedChannel
output	spice-common/spice-protocol/spice/vdi_dev.h	/^    VDIPortRing output;$/;"	m	struct:VDIPortRam
outsize	server/mjpeg_encoder.c	/^  size_t * outsize;$/;"	m	struct:__anon196	file:
owner	server/red_worker.c	/^    struct DrawItem* owner;$/;"	m	struct:Shadow	typeref:struct:Shadow::DrawItem	file:
owner	spice-common/common/glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPat	file:
owner	spice-common/common/glc.c	/^    InternaCtx *owner;$/;"	m	struct:InternalPath	file:
owner_client	client/platform.h	/^    enum { owner_none, owner_guest, owner_client };$/;"	e	enum:Platform::__anon107
owner_guest	client/platform.h	/^    enum { owner_none, owner_guest, owner_client };$/;"	e	enum:Platform::__anon107
owner_none	client/platform.h	/^    enum { owner_none, owner_guest, owner_client };$/;"	e	enum:Platform::__anon107
pad	client/glz_decoder.cpp	/^    uint8_t pad;$/;"	m	struct:rgb32_pixel_t	file:
pad	server/glz_encoder.c	/^    BYTE pad;$/;"	m	struct:rgb32_pixel_t	file:
pad	server/red_worker.c	/^    uint8_t pad;$/;"	m	struct:rgb32_pixel_t	file:
pad	spice-common/common/lz.c	/^    uint8_t pad;$/;"	m	struct:rgb32_pixel_t	file:
pad	spice-common/common/quic.c	/^    BYTE pad;$/;"	m	struct:rgb32_pixel_t	file:
padding	spice-common/common/messages.h	/^    uint8_t padding;$/;"	m	struct:SpiceMsgEmpty
padding	spice-common/spice-protocol/spice/qxl_dev.h	/^        uint16_t padding;$/;"	m	struct:QXLRom::__anon69
padding	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t padding;$/;"	m	struct:QXLCommand
paddr_ext	server/spice.h	/^    struct sockaddr_storage paddr_ext;$/;"	m	struct:SpiceChannelEventInfo	typeref:struct:SpiceChannelEventInfo::sockaddr_storage
pages_offset	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t pages_offset;            \/* qxl-1 *\/$/;"	m	struct:QXLRom
palette	client/canvas.h	/^    SpicePalette* palette() { return _palette;}$/;"	f	class:CachedPalette
palette	spice-common/common/draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceBitmap
palette	spice-common/common/draw.h	/^    SpicePalette *palette;$/;"	m	struct:SpiceLZPLTData
palette	spice-common/common/lz.c	/^    const SpicePalette    *palette;    \/\/ for decoding images with palettes to rgb$/;"	m	struct:Encoder	file:
palette	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL palette;$/;"	m	struct:QXLBitmap
palette_cache	client/canvas.h	/^    PaletteCache& palette_cache() { return _palette_cache;}$/;"	f	class:Canvas
palette_cache	server/red_worker.c	/^    CacheItem *palette_cache[PALETTE_CACHE_HASH_SIZE];$/;"	m	struct:DisplayChannelClient	file:
palette_cache	spice-common/common/canvas_base.c	/^    SpicePaletteCache *palette_cache;$/;"	m	struct:CanvasBase	file:
palette_cache_available	server/red_worker.c	/^    long palette_cache_available;$/;"	m	struct:DisplayChannelClient	file:
palette_cache_items	server/red_worker.c	/^    uint32_t palette_cache_items;$/;"	m	struct:DisplayChannelClient	file:
palette_cache_lru	server/red_worker.c	/^    Ring palette_cache_lru;$/;"	m	struct:DisplayChannelClient	file:
palette_id	spice-common/common/draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceBitmap
palette_id	spice-common/common/draw.h	/^    uint64_t palette_id;$/;"	m	struct:SpiceLZPLTData
pallet	spice-common/common/glc.h	/^    uint32_t *pallet;$/;"	m	struct:GLCPImage
parent	spice-common/common/canvas_base.c	/^    SpiceCanvas parent;$/;"	m	struct:CanvasBase	file:
parent_console	client/windows/platform.cpp	/^static BOOL parent_console;$/;"	v	file:
parse	spice-common/common/generated_client_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:
parse	spice-common/common/generated_client_demarshallers1.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:
parse	spice-common/common/generated_server_demarshallers.c	/^    parse_func_t parse;$/;"	m	struct:PointerInfo	file:
parse	spice-common/python_modules/spice_parser.py	/^def parse(filename):$/;"	f
parseVariableDef	spice-common/python_modules/spice_parser.py	/^def parseVariableDef(toks):$/;"	f
parse_CursorChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_CursorChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_CursorChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_CursorChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_CursorChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_CursorChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_DisplayChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_DisplayChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_DisplayChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_DisplayChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_DisplayChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_DisplayChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_InputsChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_InputsChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_InputsChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_InputsChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_InputsChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_InputsChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_MainChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_MainChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_MainChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_MainChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_MainChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_MainChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_PlaybackChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_PlaybackChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_PlaybackChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_PlaybackChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_PlaybackChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_PlaybackChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_PortChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_PortChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_PortChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_PortChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_RecordChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_RecordChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_RecordChannel_msg	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_RecordChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_RecordChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_RecordChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_SmartcardChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_SmartcardChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_SmartcardChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_SmartcardChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgAudioMute	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgAudioMute(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgAudioVolume	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgAudioVolume(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgData	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgData	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgData	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_SpiceMsgData(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgEmpty	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgEmpty	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_SpiceMsgEmpty	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_SpiceMsgEmpty(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_TunnelChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_TunnelChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_TunnelChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_TunnelChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_UsbredirChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_UsbredirChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_UsbredirChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_UsbredirChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_WebDAVChannel_msg	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_WebDAVChannel_msg(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_WebDAVChannel_msgc	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_WebDAVChannel_msgc(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f	file:
parse_array_int32	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_array_int32(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_array_int32	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_array_int32(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_array_uint8	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_array_uint8(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_func_t	spice-common/common/generated_client_demarshallers.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_func_t	spice-common/common/generated_client_demarshallers1.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_func_t	spice-common/common/generated_server_demarshallers.c	/^typedef uint8_t * (*parse_func_t)(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *ptr_info, int minor);$/;"	t	file:
parse_keys	client/hot_keys.cpp	/^void HotKeysParser::parse_keys(int command_id, const std::string& hotkey)$/;"	f	class:HotKeysParser
parse_msg_cursor_init	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_init	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_inval_one	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_inval_one(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_inval_one	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_inval_one(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_move	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_move(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_move	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_move(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_set	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_set(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_set	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_set(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_trail	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_cursor_trail(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_cursor_trail	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_cursor_trail(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_disconnecting	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_disconnecting(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_disconnecting	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_disconnecting(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_copy_bits	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_copy_bits(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_copy_bits	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_copy_bits(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_alpha_blend	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_alpha_blend(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_alpha_blend	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_alpha_blend(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_blackness	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_blackness(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_blackness	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_blackness(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_blend	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_blend(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_blend	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_blend(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_composite	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_composite(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_copy	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_copy(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_copy	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_copy(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_fill	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_fill(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_fill	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_fill(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_invers	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_invers(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_invers	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_invers(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_opaque	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_opaque(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_opaque	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_opaque(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_rop3	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_rop3(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_rop3	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_rop3(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_stroke	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_stroke(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_stroke	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_stroke(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_text	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_text(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_text	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_text(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_transparent	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_transparent(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_transparent	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_transparent(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_whiteness	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_draw_whiteness(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_draw_whiteness	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_draw_whiteness(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_all_pixmaps	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_all_pixmaps(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_all_pixmaps	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_all_pixmaps(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_list	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_list(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_list	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_list(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_palette	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_inval_palette(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_inval_palette	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_inval_palette(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_mode	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_mode	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_monitors_config	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_monitors_config(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_activate_report	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_activate_report(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_clip	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_clip(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_clip	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_clip(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_create	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_create(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_create	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_create(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_data	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_data	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_data_sized	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_data_sized(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_destroy	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_stream_destroy(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_stream_destroy	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_display_stream_destroy(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_surface_create	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_surface_create(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_display_surface_destroy	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_display_surface_destroy(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_func_t	spice-common/common/generated_client_demarshallers.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_func_t	spice-common/common/generated_client_demarshallers1.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_func_t	spice-common/common/generated_server_demarshallers.c	/^typedef uint8_t * (*parse_msg_func_t)(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
parse_msg_inputs_init	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_inputs_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_inputs_init	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_inputs_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_inputs_key_modifiers	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_inputs_key_modifiers	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_agent_connected_tokens	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_connected_tokens(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_agent_disconnected	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_disconnected(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_agent_disconnected	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_agent_disconnected(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_agent_token	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_agent_token(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_agent_token	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_agent_token(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_channels_list	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_channels_list(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_channels_list	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_channels_list(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_init	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_init	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_migrate_begin	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_begin(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_migrate_begin	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_migrate_begin(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_migrate_begin_seamless	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_begin_seamless(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_migrate_switch_host	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_migrate_switch_host(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_migrate_switch_host	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_migrate_switch_host(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_mouse_mode	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_mouse_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_mouse_mode	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_mouse_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_multi_media_time	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_multi_media_time(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_multi_media_time	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_main_multi_media_time(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_name	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_name(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_main_uuid	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_main_uuid(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_migrate	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_migrate(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_migrate	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_migrate(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_notify	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_notify(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_notify	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_notify(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_ping	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_ping(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_ping	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_ping(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_data	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_data	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_latency	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_latency(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_mode	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_mode	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_start	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_playback_start(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_playback_start	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_playback_start(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_port_event	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_port_event(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_port_init	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_port_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_record_start	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_record_start(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_record_start	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_record_start(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_set_ack	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_set_ack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_set_ack	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_set_ack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_smartcard_data	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_smartcard_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_init	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_service_ip_map	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_service_ip_map(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_close	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_close(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_closed_ack	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_closed_ack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_data	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_fin	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_fin(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_open	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_open(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_tunnel_socket_token	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_tunnel_socket_token(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_wait_for_channels	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_msg_wait_for_channels(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msg_wait_for_channels	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_msg_wait_for_channels(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_ack_sync	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_ack_sync(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_disconnecting	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_disconnecting(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_display_init	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_display_init(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_display_stream_report	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_display_stream_report(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_key_down	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_down(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_key_modifiers	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_modifiers(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_key_up	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_key_up(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_mouse_motion	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_motion(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_mouse_position	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_position(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_mouse_press	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_press(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_inputs_mouse_release	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_inputs_mouse_release(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_main_agent_start	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_agent_start(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_main_agent_token	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_agent_token(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_main_client_info	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_client_info(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_main_migrate_dst_do_seamless	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_migrate_dst_do_seamless(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_main_mouse_mode_request	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_main_mouse_mode_request(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_pong	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_pong(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_port_event	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_port_event(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_record_data	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_record_mode	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_mode(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_record_start_mark	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_record_start_mark(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_smartcard_reader_add	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_smartcard_reader_add(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_service_add	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_service_add(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_service_remove	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_service_remove(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_closed	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_closed(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_closed_ack	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_closed_ack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_data	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_data(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_fin	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_fin(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_open_ack	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_open_ack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_open_nack	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_open_nack(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_msgc_tunnel_socket_token	spice-common/common/generated_server_demarshallers.c	/^static uint8_t * parse_msgc_tunnel_socket_token(uint8_t *message_start, uint8_t *message_end, int minor, size_t *size, message_destructor_t *free_message)$/;"	f	file:
parse_struct_SpiceClipRects	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceClipRects(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpiceClipRects	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceClipRects(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpiceImage	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpiceImage	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpicePalette	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpicePalette	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpicePath	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpicePath(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpicePath	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpicePath(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpiceString	spice-common/common/generated_client_demarshallers.c	/^static uint8_t * parse_struct_SpiceString(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parse_struct_SpiceString	spice-common/common/generated_client_demarshallers1.c	/^static uint8_t * parse_struct_SpiceString(uint8_t *message_start, uint8_t *message_end, uint8_t *struct_data, PointerInfo *this_ptr_info, int minor)$/;"	f	file:
parser	server/red_channel.h	/^    spice_parse_channel_func_t parser;$/;"	m	struct:IncomingHandlerInterface
parser	server/snd_worker.c	/^    spice_parse_channel_func_t parser;$/;"	m	struct:SndChannel	file:
parser	spice-common/spice_codegen.py	/^parser = OptionParser(usage="usage: %prog [options] <protocol_file> <destination file>")$/;"	v
partial_block	spice-common/python_modules/codegen.py	/^    def partial_block(self, scope, semicolon=False, newline=True):$/;"	m	class:CodeWriter
password	server/reds-private.h	/^    char password[SPICE_MAX_PASSWORD_LENGTH];$/;"	m	struct:TicketAuthentication
past_copy	client/x11/red_pixmap_gl.cpp	/^void RedPixmapGL::past_copy()$/;"	f	class:RedPixmapGL
pat	spice-common/common/draw.h	/^    SpiceImage *pat;$/;"	m	struct:SpicePattern
pat	spice-common/common/glc.c	/^    InternalPat *pat;$/;"	m	struct:InternaCtx	file:
pat	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSanaxx, (~(*pat & *src) & *dest) ^ *src ^ *pat, 0x16);$/;"	v
pat	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSaoxx, ((*src & *pat) | *dest) ^ *src ^ *pat, 0xd6);$/;"	v
pat	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSoaxx, ((*src | *pat) & *dest) ^ *src ^ *pat, 0x94);$/;"	v
pat	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSonoxx, (~(*src | *pat) | *dest) ^ *src ^ *pat, 0x97);$/;"	v
pat	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL pat;$/;"	m	struct:QXLPattern
path	server/tests/test_display_base.c	/^Path path;$/;"	v
path	spice-common/common/draw.h	/^    SpicePath *path;$/;"	m	struct:SpiceStroke
path	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL path;$/;"	m	struct:QXLStroke
path_append	client/windows/platform.cpp	/^void Platform::path_append(std::string& path, const std::string& partial_path)$/;"	f	class:Platform
path_append	client/x11/platform.cpp	/^void Platform::path_append(std::string& path, const std::string& partial_path)$/;"	f	class:Platform
path_init	server/tests/test_display_base.c	/^static void path_init(Path *path, int min, int max)$/;"	f	file:
path_progress	server/tests/test_display_base.c	/^static void path_progress(Path *path)$/;"	f	file:
path_stroke	spice-common/common/glc.c	/^    PathStroke path_stroke;$/;"	m	struct:InternaCtx	file:
paths	spice-common/common/glc.c	/^    Path *paths;$/;"	m	struct:InternalPath	file:
paths_pos	spice-common/common/glc.c	/^    int paths_pos;$/;"	m	struct:InternalPath	file:
paths_size	spice-common/common/glc.c	/^    int paths_size;$/;"	m	struct:InternalPath	file:
pattern	spice-common/common/draw.h	/^        SpicePattern pattern;$/;"	m	union:SpiceBrush::__anon36
pattern	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLPattern pattern;$/;"	m	union:QXLBrush::__anon73
payload	server/dispatcher.h	/^    void *payload; \/* allocated as max of message sizes *\/$/;"	m	struct:Dispatcher
payload_size	server/dispatcher.h	/^    size_t payload_size; \/* used to track realloc calls *\/$/;"	m	struct:Dispatcher
pbuf_create	spice-common/common/ogl_ctx.c	/^OGLCtx *pbuf_create(int width, int heigth)$/;"	f
pbuff	client/x11/pixels_source_p.h	/^                GLXPbuffer pbuff;$/;"	m	union:PixelsSource_p::__anon116::__anon118::__anon119
pbuff	client/x11/pixels_source_p.h	/^                GLXPbuffer pbuff;$/;"	m	union:PixelsSource_p::__anon116::__anon120::__anon121
pcounters	spice-common/common/quic.c	/^    COUNTER *pcounters;     \/* pointer to array of counters *\/$/;"	m	struct:s_bucket	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	client/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	docs/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	docs/manual/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	server/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	server/tests/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	spice-common/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	spice-common/common/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	spice-common/python_modules/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	spice-common/spice-protocol/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	spice-common/spice-protocol/spice/Makefile	/^pdfdir = ${docdir}$/;"	m
peer_message	client/inputs_channel.cpp	/^RedPeer::OutMessage& MotionMessage::peer_message()$/;"	f	class:MotionMessage
peer_message	client/inputs_channel.cpp	/^RedPeer::OutMessage& PositionMessage::peer_message()$/;"	f	class:PositionMessage
peer_message	client/record_channel.cpp	/^    virtual RedPeer::OutMessage& peer_message() { return *_message;}$/;"	f	class:RecordSamplesMessage
peer_message	client/red_channel.h	/^    virtual RedPeer::OutMessage& peer_message() { return *this;}$/;"	f	class:Message
peer_minor_version	server/reds-private.h	/^    int peer_minor_version;$/;"	m	struct:RedsState
pending	server/red_dispatcher.c	/^    uint32_t pending;$/;"	m	struct:RedDispatcher	file:
pending	server/red_worker.c	/^    uint32_t *pending;$/;"	m	struct:RedWorker	file:
pending	server/red_worker.h	/^    uint32_t *pending;$/;"	m	struct:WorkerInitData
pending_frame	server/snd_worker.c	/^    AudioFrame *pending_frame;$/;"	m	struct:PlaybackChannel	file:
pending_links	server/reds-private.h	/^    Ring pending_links;$/;"	m	struct:RedsMigTargetClient
pending_mouse_event	server/reds-private.h	/^    int pending_mouse_event;$/;"	m	struct:RedsState
pending_pixmaps_sync	server/red_worker.c	/^    int pending_pixmaps_sync;$/;"	m	struct:DisplayChannelClient	file:
periodic_update	client/screen.cpp	/^void RedScreen::periodic_update()$/;"	f	class:RedScreen
permit_focus_loss	client/gui/gui.h	/^    virtual bool permit_focus_loss() { return false;}$/;"	f	class:GUI
permit_focus_loss	client/inputs_handler.h	/^    virtual bool permit_focus_loss() { return true;}$/;"	f	class:KeyHandler
phys_delta	server/red_dispatcher.c	/^    unsigned long phys_delta;$/;"	m	struct:RedWorkeState	file:
pin	client/x11/platform.cpp	/^    void pin() { _pin_count++;}$/;"	f	class:XMonitor
pin	client/x11/platform.cpp	/^static void pin(XMonitor& monitor, const XMonitorsList& monitors)$/;"	f	file:
ping_id	server/main_channel.c	/^    uint32_t ping_id;$/;"	m	struct:MainChannelClient	file:
ping_interval	server/main_channel.c	/^    int ping_interval;$/;"	m	struct:MainChannelClient	file:
ping_ms	server/tests/test_display_no_ssl.c	/^int ping_ms = 100;$/;"	v
ping_ms	server/tests/test_display_resolution_changes.c	/^int ping_ms = 100;$/;"	v
ping_ms	server/tests/test_display_width_stride.c	/^int ping_ms = 100;$/;"	v
ping_ms	server/tests/test_vdagent.c	/^int ping_ms = 100;$/;"	v
ping_timer	server/main_channel.c	/^    SpiceTimer *ping_timer;$/;"	m	struct:MainChannelClient	file:
ping_timer	server/tests/test_display_no_ssl.c	/^SpiceTimer *ping_timer;$/;"	v
ping_timer	server/tests/test_display_resolution_changes.c	/^SpiceTimer *ping_timer;$/;"	v
ping_timer	server/tests/test_display_width_stride.c	/^SpiceTimer *ping_timer;$/;"	v
ping_timer	server/tests/test_vdagent.c	/^SpiceTimer *ping_timer;$/;"	v
ping_timer_cb	server/main_channel.c	/^static void ping_timer_cb(void *opaque)$/;"	f	file:
pinger	server/tests/test_display_no_ssl.c	/^void pinger(void *opaque)$/;"	f
pinger	server/tests/test_display_resolution_changes.c	/^void pinger(void *opaque)$/;"	f
pinger	server/tests/test_display_width_stride.c	/^void pinger(void *opaque)$/;"	f
pinger	server/tests/test_vdagent.c	/^void pinger(void *opaque)$/;"	f
pipe	server/red_channel.h	/^    Ring pipe;$/;"	m	struct:RedChannelClient
pipe_data	server/red_worker.c	/^        PipeItem pipe_data;$/;"	m	union:CacheItem::__anon173	file:
pipe_depend_items	server/red_worker.c	/^    DependItem pipe_depend_items[3];$/;"	m	struct:Drawable	file:
pipe_item	server/red_worker.c	/^    PipeItem pipe_item;$/;"	m	struct:MonitorsConfigItem	file:
pipe_item	server/red_worker.c	/^    PipeItem pipe_item;$/;"	m	struct:StreamActivateReportItem	file:
pipe_item	server/red_worker.c	/^    PipeItem pipe_item;$/;"	m	struct:SurfaceCreateItem	file:
pipe_item	server/red_worker.c	/^    PipeItem pipe_item;$/;"	m	struct:SurfaceDestroyItem	file:
pipe_item	server/spicevmc.c	/^    SpiceVmcPipeItem *pipe_item;$/;"	m	struct:SpiceVmcState	file:
pipe_item_is_linked	server/red_worker.c	/^static inline int pipe_item_is_linked(PipeItem *item)$/;"	f	file:
pipe_item_rest	server/red_worker.c	/^    PipeItem *pipe_item_rest;$/;"	m	struct:Drawable	file:
pipe_rendered_drawables_intersect_with_areas	server/red_worker.c	/^static int pipe_rendered_drawables_intersect_with_areas(RedWorker *worker,$/;"	f	file:
pipe_size	server/red_channel.h	/^    uint32_t pipe_size;$/;"	m	struct:RedChannelClient
pipes	server/red_worker.c	/^    Ring pipes;$/;"	m	struct:Drawable	file:
pix_fmt	server/h264_type.h	/^    enum AVPixelFormat pix_fmt;$/;"	m	struct:_H264StreamInfo	typeref:enum:_H264StreamInfo::AVPixelFormat
pixel_converter	server/mjpeg_encoder.c	/^    void (*pixel_converter)(uint8_t *src, uint8_t *dest);$/;"	m	struct:MJpegEncoder	file:
pixel_data	client/x11/images/alt_image.c	/^        uint8_t pixel_data[17496];$/;"	m	struct:__anon122	file:
pixel_rgb16bpp_to_24	server/mjpeg_encoder.c	/^static void pixel_rgb16bpp_to_24(uint8_t *src, uint8_t *dest)$/;"	f	file:
pixel_rgb24bpp_to_24	server/mjpeg_encoder.c	/^static void pixel_rgb24bpp_to_24(uint8_t *src, uint8_t *dest)$/;"	f	file:
pixel_rgb32bpp_to_24	server/mjpeg_encoder.c	/^static void pixel_rgb32bpp_to_24(uint8_t *src, uint8_t *dest)$/;"	f	file:
pixelcmp	server/red_bitmap_utils.h	/^static inline int FNAME(pixelcmp)(PIXEL p1, PIXEL p2)$/;"	f
pixels	spice-common/common/glc.h	/^    uint8_t *pixels;$/;"	m	struct:GLCPImage
pixels_num	server/glz_encoder_dictionary_protected.h	/^    uint32_t pixels_num;            \/\/ Number of pixels in the segment$/;"	m	struct:WindowImageSegment
pixels_so_far	server/glz_encoder_dictionary_protected.h	/^        uint64_t pixels_so_far;$/;"	m	struct:SharedDictionary::__anon170
pixels_so_far	server/glz_encoder_dictionary_protected.h	/^    uint64_t pixels_so_far;         \/\/ Total no. pixels passed through the window till this segment.$/;"	m	struct:WindowImageSegment
pixels_source_p	client/windows/red_pixmap_gdi.cpp	/^    PixelsSource_p pixels_source_p;$/;"	m	struct:RedPixmap_p	file:
pixels_source_p	client/windows/red_pixmap_sw.cpp	/^    PixelsSource_p pixels_source_p;$/;"	m	struct:RedPixmap_p	file:
pixels_square_score	server/red_bitmap_utils.h	/^static inline double FNAME(pixels_square_score)(PIXEL *line1, PIXEL *line2)$/;"	f
pixman_format_compatible	spice-common/common/pixman_utils.c	/^static int pixman_format_compatible (pixman_format_code_t dest_format,$/;"	f	file:
pixman_image	client/x11/pixels_source_p.h	/^            pixman_image_t* pixman_image;$/;"	m	struct:PixelsSource_p::__anon116::__anon117
pixman_image_add_data	spice-common/common/canvas_utils.c	/^pixman_image_add_data(pixman_image_t *image)$/;"	f	file:
pixmap	client/red_types.h	/^    uint8_t* pixmap;$/;"	m	struct:IconHeader
pixmap	client/x11/images/red_icon.c	/^    uint8_t pixmap[4096];$/;"	m	struct:__anon123	file:
pixmap	client/x11/pixels_source_p.h	/^        } pixmap;$/;"	m	union:PixelsSource_p::__anon116	typeref:struct:PixelsSource_p::__anon116::__anon117
pixmap	client/x11/x_icon.h	/^        Pixmap pixmap;$/;"	m	class:XIcon::ScreenIcon
pixmap	spice-common/common/ogl_ctx.c	/^    Pixmap pixmap;$/;"	m	struct:OGLPixmapCtx	file:
pixmap_cache	client/canvas.h	/^    PixmapCache& pixmap_cache() { return _pixmap_cache;}$/;"	f	class:Canvas
pixmap_cache	server/red_worker.c	/^    PixmapCache *pixmap_cache;$/;"	m	struct:DisplayChannelClient	file:
pixmap_cache_clients	server/migration_protocol.h	/^    uint64_t pixmap_cache_clients[MIGRATE_DATA_DISPLAY_MAX_CACHE_CLIENTS];$/;"	m	struct:SpiceMigrateDataDisplay
pixmap_cache_freezer	server/migration_protocol.h	/^    uint8_t pixmap_cache_freezer;$/;"	m	struct:SpiceMigrateDataDisplay
pixmap_cache_generation	server/red_worker.c	/^    uint32_t pixmap_cache_generation;$/;"	m	struct:DisplayChannelClient	file:
pixmap_cache_id	server/migration_protocol.h	/^    uint8_t pixmap_cache_id;$/;"	m	struct:SpiceMigrateDataDisplay
pixmap_cache_id	spice-common/common/messages.h	/^    uint8_t pixmap_cache_id;$/;"	m	struct:SpiceMsgcDisplayInit
pixmap_cache_items	server/red_worker.c	/^        uint64_t pixmap_cache_items[MAX_DRAWABLE_PIXMAP_CACHE_ITEMS];$/;"	m	struct:DisplayChannelClient::__anon186	file:
pixmap_cache_list	server/red_worker.c	/^Ring pixmap_cache_list = {&pixmap_cache_list, &pixmap_cache_list};$/;"	v
pixmap_cache_size	server/migration_protocol.h	/^    int64_t pixmap_cache_size;$/;"	m	struct:SpiceMigrateDataDisplay
pixmap_cache_size	spice-common/common/messages.h	/^    int64_t pixmap_cache_size; \/\/in pixels$/;"	m	struct:SpiceMsgcDisplayInit
pixmap_create	spice-common/common/ogl_ctx.c	/^OGLCtx *pixmap_create(int width, int heigth)$/;"	f
pkgconfig_DATA	Makefile	/^pkgconfig_DATA = spice-server.pc$/;"	m
pkgconfig_DATA	spice-common/spice-protocol/Makefile	/^pkgconfig_DATA = spice-protocol.pc$/;"	m
pkgconfigdir	Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	spice-common/spice-protocol/Makefile	/^pkgconfigdir = $(datadir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	client/Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	docs/Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	docs/manual/Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	server/Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	server/tests/Makefile	/^pkgdatadir = $(datadir)\/spice$/;"	m
pkgdatadir	spice-common/Makefile	/^pkgdatadir = $(datadir)\/spice-common$/;"	m
pkgdatadir	spice-common/common/Makefile	/^pkgdatadir = $(datadir)\/spice-common$/;"	m
pkgdatadir	spice-common/python_modules/Makefile	/^pkgdatadir = $(datadir)\/spice-common$/;"	m
pkgdatadir	spice-common/spice-protocol/Makefile	/^pkgdatadir = $(datadir)\/spice-protocol$/;"	m
pkgdatadir	spice-common/spice-protocol/spice/Makefile	/^pkgdatadir = $(datadir)\/spice-protocol$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	client/Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	docs/Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	docs/manual/Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	server/Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	server/tests/Makefile	/^pkgincludedir = $(includedir)\/spice$/;"	m
pkgincludedir	spice-common/Makefile	/^pkgincludedir = $(includedir)\/spice-common$/;"	m
pkgincludedir	spice-common/common/Makefile	/^pkgincludedir = $(includedir)\/spice-common$/;"	m
pkgincludedir	spice-common/python_modules/Makefile	/^pkgincludedir = $(includedir)\/spice-common$/;"	m
pkgincludedir	spice-common/spice-protocol/Makefile	/^pkgincludedir = $(includedir)\/spice-protocol$/;"	m
pkgincludedir	spice-common/spice-protocol/spice/Makefile	/^pkgincludedir = $(includedir)\/spice-protocol$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	client/Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	docs/Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	docs/manual/Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	server/Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	server/tests/Makefile	/^pkglibdir = $(libdir)\/spice$/;"	m
pkglibdir	spice-common/Makefile	/^pkglibdir = $(libdir)\/spice-common$/;"	m
pkglibdir	spice-common/common/Makefile	/^pkglibdir = $(libdir)\/spice-common$/;"	m
pkglibdir	spice-common/python_modules/Makefile	/^pkglibdir = $(libdir)\/spice-common$/;"	m
pkglibdir	spice-common/spice-protocol/Makefile	/^pkglibdir = $(libdir)\/spice-protocol$/;"	m
pkglibdir	spice-common/spice-protocol/spice/Makefile	/^pkglibdir = $(libdir)\/spice-protocol$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	client/Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	docs/Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	docs/manual/Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	server/Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	server/tests/Makefile	/^pkglibexecdir = $(libexecdir)\/spice$/;"	m
pkglibexecdir	spice-common/Makefile	/^pkglibexecdir = $(libexecdir)\/spice-common$/;"	m
pkglibexecdir	spice-common/common/Makefile	/^pkglibexecdir = $(libexecdir)\/spice-common$/;"	m
pkglibexecdir	spice-common/python_modules/Makefile	/^pkglibexecdir = $(libexecdir)\/spice-common$/;"	m
pkglibexecdir	spice-common/spice-protocol/Makefile	/^pkglibexecdir = $(libexecdir)\/spice-protocol$/;"	m
pkglibexecdir	spice-common/spice-protocol/spice/Makefile	/^pkglibexecdir = $(libexecdir)\/spice-protocol$/;"	m
platform_win	client/windows/platform.cpp	/^static HWND platform_win = NULL;$/;"	v	file:
platform_win	client/x11/platform.cpp	/^static Window platform_win = 0;$/;"	v	file:
playback_compression	server/snd_worker.c	/^static uint32_t playback_compression = TRUE;$/;"	v	file:
playback_instance	server/tests/test_playback.c	/^SpicePlaybackInstance playback_instance;$/;"	v
playback_send_mode	server/snd_worker.c	/^static int playback_send_mode(PlaybackChannel *playback_channel)$/;"	f	file:
playback_sif	server/tests/test_playback.c	/^static const SpicePlaybackInterface playback_sif = {$/;"	v	file:
playback_timer	server/tests/test_playback.c	/^SpiceTimer *playback_timer;$/;"	v
playback_timer_cb	server/tests/test_playback.c	/^void playback_timer_cb(void *opaque)$/;"	f
playback_timer_ms	server/tests/test_playback.c	/^int playback_timer_ms;$/;"	v
plen_ext	server/spice.h	/^    socklen_t llen_ext, plen_ext;$/;"	m	struct:SpiceChannelEventInfo
plug_generation	server/reds-private.h	/^    uint32_t plug_generation;$/;"	m	struct:VDIPortState
point	spice-common/common/glc.c	/^    PathPoint point;$/;"	m	struct:TassVertex	file:
pointer_ref	spice-common/common/marshaller.c	/^    MarshallerRef pointer_ref;$/;"	m	struct:SpiceMarshaller	file:
pointer_test	client/application.cpp	/^    virtual bool pointer_test(int x, int y) { return true;}$/;"	f	class:GUIBarrier
pointer_test	client/display_channel.cpp	/^bool DisplayChannel::pointer_test(int x, int y)$/;"	f	class:DisplayChannel
pointer_test	client/gui/gui.h	/^    virtual bool pointer_test(int x, int y) { return contains_point(x, y);}$/;"	f	class:GUI
pointer_test	client/screen_layer.h	/^    virtual bool pointer_test(int x, int y) { return false;}$/;"	f	class:ScreenLayer
points	spice-common/common/canvas_base.c	/^    SpicePoint *points;$/;"	m	struct:__anon17	file:
points	spice-common/common/draw.h	/^    SpicePointFix points[0];$/;"	m	struct:SpicePathSeg
points	spice-common/common/glc.c	/^    PathPoint *points;$/;"	m	struct:InternalPath	file:
points	spice-common/common/lines.c	/^    DDXPointPtr points;         \/* pointer to list of start points  *\/$/;"	m	struct:__anon27	file:
points	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPointFix points[0];$/;"	m	struct:QXLPathSeg
points_pos	spice-common/common/glc.c	/^    int points_pos;$/;"	m	struct:InternalPath	file:
points_size	spice-common/common/glc.c	/^    int points_size;$/;"	m	struct:InternalPath	file:
poll_fds	server/red_worker.c	/^    struct pollfd poll_fds[MAX_EVENT_SOURCES];$/;"	m	struct:RedWorker	typeref:struct:RedWorker::pollfd	file:
pop_index	spice-common/python_modules/codegen.py	/^    def pop_index(self):$/;"	m	class:CodeWriter
port	client/red_client.cpp	/^    uint16_t port;$/;"	m	struct:OldRedMigrationBegin	file:
port	server/reds.h	/^    int port;$/;"	m	struct:RedsMigSpice
port	spice-common/common/messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMigrationDstInfo
port	spice-common/common/messages.h	/^    uint16_t port;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
port	spice-common/common/messages.h	/^    uint32_t port;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
port	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t port;$/;"	m	struct:VDIChunkHeader
port_opened	server/spicevmc.c	/^    uint8_t port_opened;$/;"	m	struct:SpiceVmcState	file:
portname	server/spice.h	/^    const char* portname;$/;"	m	struct:SpiceCharDeviceInstance
pos	server/red_channel.h	/^    int pos;$/;"	m	struct:OutgoingHandler
pos	server/red_worker.c	/^    SpicePoint pos;$/;"	m	struct:ImageItem	file:
pos	server/snd_worker.c	/^        uint32_t pos;$/;"	m	struct:SndChannel::__anon139	file:
pos	spice-common/common/draw.h	/^    SpicePoint pos;$/;"	m	struct:SpicePattern
pos	spice-common/common/draw.h	/^    SpicePoint pos;$/;"	m	struct:SpiceQMask
pos	spice-common/common/gdi_canvas.c	/^    SpicePoint pos;$/;"	m	struct:BitmapData	file:
pos	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint pos;$/;"	m	struct:QXLPattern
pos	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint pos;$/;"	m	struct:QXLQMask
position	client/application.h	/^    SpicePoint position;$/;"	m	struct:MonitorInfo
position	server/red_parse_qxl.h	/^            SpicePoint16 position;$/;"	m	struct:RedCursorCmd::__anon164::__anon165
position	server/red_parse_qxl.h	/^        SpicePoint16 position;$/;"	m	union:RedCursorCmd::__anon164
position	server/red_worker.c	/^    SpicePoint16 position;$/;"	m	struct:CursorData	file:
position	server/red_worker.c	/^    SpicePoint16 position;$/;"	m	struct:LocalCursor	file:
position	server/spice.h	/^    uint32_t position;$/;"	m	struct:QXLDevSurfaceCreate
position	server/spice.h	/^    void (*position)(SpiceTabletInstance* tablet, int x, int y, uint32_t buttons_state);$/;"	m	struct:SpiceTabletInterface
position	spice-common/common/messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorInit
position	spice-common/common/messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorMove
position	spice-common/common/messages.h	/^    SpicePoint16 position;$/;"	m	struct:SpiceMsgCursorSet
position	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t position;$/;"	m	struct:FrgMenuAddItem
position	spice-common/spice-protocol/spice/qxl_dev.h	/^            QXLPoint16 position;$/;"	m	struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
position	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLPoint16 position;$/;"	m	union:QXLCursorCmd::__anon71
position	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t position;$/;"	m	struct:QXLSurfaceCreate
position_after	client/windows/red_window.cpp	/^void RedWindow::position_after(RedWindow *win)$/;"	f	class:RedWindow
position_after	client/x11/red_window.cpp	/^void RedWindow::position_after(RedWindow *after)$/;"	f	class:RedWindow
position_changed	client/x11/platform.cpp	/^bool XMonitor::position_changed()$/;"	f	class:XMonitor
position_full_screen	client/screen.cpp	/^void RedScreen::position_full_screen(const SpicePoint& position)$/;"	f	class:RedScreen
position_screens	client/application.cpp	/^void Application::position_screens()$/;"	f	class:Application
post_decode	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::post_decode(GlzDecodedImage *image)$/;"	f	class:GlzDecoderWindow
post_decode_intialize	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::post_decode_intialize()$/;"	f	class:GlzDecoderWindow
post_decode_update_window	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::post_decode_update_window(GlzDecodedImage *image)$/;"	f	class:GlzDecoderWindow
post_gl_copy	client/red_gl_canvas.cpp	/^void GCanvas::post_gl_copy()$/;"	f	class:GCanvas
post_message	client/red_channel.cpp	/^void RedChannel::post_message(RedChannel::OutMessage* message)$/;"	f	class:RedChannel
post_migrate	client/display_channel.cpp	/^void DisplayChannel::post_migrate()$/;"	f	class:DisplayChannel
post_migrate	client/red_window.h	/^    virtual void post_migrate() { }$/;"	f	class:RedWindow::Listener
post_migrate	client/screen.cpp	/^void RedScreen::post_migrate()$/;"	f	class:RedScreen
post_migrate	client/screen_layer.h	/^    virtual void post_migrate() { }$/;"	f	class:ScreenLayer
pre_copy	client/x11/red_pixmap_gl.cpp	/^void RedPixmapGL::pre_copy()$/;"	f	class:RedPixmapGL
pre_decode	client/glz_decoder_window.cpp	/^DecodedImageWinId GlzDecoderWindow::pre_decode(uint64_t image_id, uint64_t relative_head_id)$/;"	f	class:GlzDecoderWindow
pre_decode_finalize	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::pre_decode_finalize()$/;"	f	class:GlzDecoderWindow
pre_decode_update_window	client/glz_decoder_window.cpp	/^DecodedImageWinId GlzDecoderWindow::pre_decode_update_window(uint64_t image_id,$/;"	f	class:GlzDecoderWindow
pre_destroy	client/gui/gui.cpp	/^void GUI::Dialog::pre_destroy()$/;"	f	class:GUI::Dialog
pre_gl_copy	client/red_gl_canvas.cpp	/^void GCanvas::pre_gl_copy()$/;"	f	class:GCanvas
pre_migrate	client/display_channel.cpp	/^void DisplayChannel::pre_migrate()$/;"	f	class:DisplayChannel
pre_migrate	client/red_window.h	/^    virtual void pre_migrate() { }$/;"	f	class:RedWindow::Listener
pre_migrate	client/screen.cpp	/^void RedScreen::pre_migrate()$/;"	f	class:RedScreen
pre_migrate	client/screen_layer.h	/^    virtual void pre_migrate() { }$/;"	f	class:ScreenLayer
pre_stream_item_swap	server/red_worker.c	/^static inline void pre_stream_item_swap(RedWorker *worker, Stream *stream, Drawable *new_frame)$/;"	f	file:
prefix	Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	client/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	docs/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	docs/manual/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	server/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	server/tests/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	spice-common/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	spice-common/common/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	spice-common/python_modules/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	spice-common/spice-protocol/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix	spice-common/spice-protocol/spice/Makefile	/^prefix = \/home\/lichenxiang\/opt$/;"	m
prefix_camel	spice-common/python_modules/codegen.py	/^def prefix_camel(*args):$/;"	f
prefix_underscore_lower	spice-common/python_modules/codegen.py	/^def prefix_underscore_lower(*args):$/;"	f
prefix_underscore_upper	spice-common/python_modules/codegen.py	/^def prefix_underscore_upper(*args):$/;"	f
preload_group_id	server/red_worker.c	/^    uint32_t preload_group_id;$/;"	m	struct:RedWorker	file:
prepare	server/red_channel.h	/^    prepare_outgoing_proc prepare;$/;"	m	struct:OutgoingHandlerInterface
prepare_dialog	client/gui/gui.cpp	/^bool GUI::prepare_dialog()$/;"	f	class:GUI
prepare_monitors	client/application.cpp	/^void Application::prepare_monitors(std::vector<SpicePoint> *sizes)$/;"	f	class:Application
prepare_outgoing_proc	server/red_channel.h	/^typedef void (*prepare_outgoing_proc)(void *opaque, struct iovec *vec, int *vec_size, int pos);$/;"	t
press_key	client/application.cpp	/^bool Application::press_key(RedKey key)$/;"	f	class:Application
prev	spice-common/common/ring.h	/^    RingItem *prev;$/;"	m	struct:Ring
prev_bitmap	client/windows/pixels_source.cpp	/^    HBITMAP prev_bitmap;$/;"	m	struct:ResImage_p	file:
prev_bitmap	client/windows/red_pixmap_gdi.cpp	/^    HBITMAP prev_bitmap;$/;"	m	struct:RedPixmap_p	file:
prev_bitmap	client/windows/red_pixmap_sw.cpp	/^    HBITMAP prev_bitmap;$/;"	m	struct:RedPixmap_p	file:
prev_chunk	server/red_parse_qxl.h	/^    RedDataChunk *prev_chunk;$/;"	m	struct:RedDataChunk
prev_chunk	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL prev_chunk;$/;"	m	struct:QXLDataChunk
prev_hbitmap	spice-common/common/gdi_canvas.c	/^    HBITMAP prev_hbitmap;$/;"	m	struct:BitmapData	file:
primary_active	server/red_dispatcher.c	/^    int primary_active;$/;"	m	struct:RedDispatcher	file:
primary_height	server/tests/test_display_base.h	/^    int primary_height;$/;"	m	struct:Test
primary_monitor	client/windows/platform.cpp	/^static Monitor* primary_monitor = NULL;$/;"	v	file:
primary_monitor	client/x11/platform.cpp	/^static Monitor* primary_monitor = NULL;$/;"	v	file:
primary_surface	server/tests/test_display_base.h	/^    uint8_t primary_surface[MAX_HEIGHT * MAX_WIDTH * 4];$/;"	m	struct:Test
primary_width	server/tests/test_display_base.h	/^    int primary_width;$/;"	m	struct:Test
primitive_type	spice-common/python_modules/ptypes.py	/^    def primitive_type(self):$/;"	m	class:EnumBaseType
primitive_type	spice-common/python_modules/ptypes.py	/^    def primitive_type(self):$/;"	m	class:IntegerType
primitive_type	spice-common/python_modules/ptypes.py	/^    def primitive_type(self):$/;"	m	class:PointerType
primitive_type	spice-common/python_modules/ptypes.py	/^    def primitive_type(self):$/;"	m	class:TypeAlias
print_base_item	server/red_worker.c	/^static void print_base_item(const char* prefix, const TreeItem *base)$/;"	f	file:
print_base_item	server/red_worker.c	2221;"	d	file:
print_compress_stats	server/red_worker.c	/^static void print_compress_stats(DisplayChannel *display_channel)$/;"	f	file:
print_container_item	server/red_worker.c	/^static void print_container_item(const char* prefix, const Container *item)$/;"	f	file:
print_draw_item	server/red_worker.c	/^static void print_draw_item(const char* prefix, const DrawItem *draw_item)$/;"	f	file:
print_draw_private	server/red_worker.c	2218;"	d	file:
print_memslots	server/red_memslots.c	/^static void print_memslots(RedMemSlotInfo *info)$/;"	f	file:
print_rgn	server/red_worker.c	/^static void print_rgn(const char* prefix, const QRegion* rgn)$/;"	f	file:
print_rgn	server/red_worker.c	2217;"	d	file:
print_shadow_item	server/red_worker.c	/^static void print_shadow_item(const char* prefix, const Shadow *item)$/;"	f	file:
print_shadow_item	server/red_worker.c	2220;"	d	file:
print_spice_bmp_fmt	server/red_worker.c	/^static void print_spice_bmp_fmt(SpiceBitmapFmt fmt)$/;"	f	file:
print_targets	client/x11/platform.cpp	/^static void print_targets(const char *action, Atom *atoms, int c)$/;"	f	file:
priv	server/reds_stream.h	/^    RedsStreamPrivate *priv;$/;"	m	struct:RedsStream
private_data	spice-common/common/gl_canvas.c	/^    void *private_data;$/;"	m	struct:GLCanvas	file:
private_data	spice-common/common/sw_canvas.c	/^    uint32_t *private_data;$/;"	m	struct:SwCanvas	file:
private_data_size	spice-common/common/gl_canvas.c	/^    int private_data_size;$/;"	m	struct:GLCanvas	file:
private_data_size	spice-common/common/sw_canvas.c	/^    int private_data_size;$/;"	m	struct:SwCanvas	file:
private_key_file	server/reds.c	/^    char private_key_file[256];$/;"	m	struct:RedSSLParameters	file:
private_tex	spice-common/common/glc.c	/^    GLuint private_tex;$/;"	m	struct:InternaCtx	file:
private_tex_height	spice-common/common/glc.c	/^    int private_tex_height;$/;"	m	struct:InternaCtx	file:
private_tex_width	spice-common/common/glc.c	/^    int private_tex_width;$/;"	m	struct:InternaCtx	file:
process_cmd_line	client/application.cpp	/^bool Application::process_cmd_line(int argc, char** argv, bool &full_screen)$/;"	f	class:Application
process_commands_generation	server/red_worker.c	/^    uint32_t process_commands_generation;$/;"	m	struct:Drawable	file:
process_commands_generation	server/red_worker.c	/^    uint32_t process_commands_generation;$/;"	m	struct:RedWorker	file:
process_events	client/process_loop.cpp	/^void EventsQueue::process_events()$/;"	f	class:EventsQueue
process_events_queue	client/process_loop.cpp	/^void ProcessLoop::process_events_queue()$/;"	f	class:ProcessLoop
process_monitor_configure_events	client/x11/platform.cpp	/^static void process_monitor_configure_events(Window root)$/;"	f	file:
process_system_events	client/windows/event_sources_p.cpp	/^bool EventSources_p::process_system_events()$/;"	f	class:EventSources_p
produce_command	server/tests/test_display_base.c	/^static void produce_command(Test *test)$/;"	f	file:
profile	server/h264_type.h	/^    int profile;$/;"	m	struct:_H264StreamInfo
program_details	missing	/^program_details ()$/;"	f
program_details	spice-common/build-aux/missing	/^program_details ()$/;"	f
program_details	spice-common/spice-protocol/missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	client/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	docs/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	docs/manual/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	server/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	server/tests/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	spice-common/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	spice-common/common/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	spice-common/python_modules/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	spice-common/spice-protocol/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	spice-common/spice-protocol/spice/Makefile	/^program_transform_name = s,x,x,$/;"	m
propagated_attributes	spice-common/python_modules/ptypes.py	/^propagated_attributes=["ptr_array", "nonnull", "chunk"]$/;"	v
prossec_menu_commands	client/windows/red_window.cpp	/^bool RedWindow_p::prossec_menu_commands(int cmd)$/;"	f	class:RedWindow_p
proto	spice-common/spice_codegen.py	/^proto = spice_parser.parse(proto_file)$/;"	v
proto_file	spice-common/spice_codegen.py	/^proto_file = args[0]$/;"	v
proto_prefix	spice-common/python_modules/codegen.py	/^proto_prefix = "Temp"$/;"	v
protocol	client/red_peer.h	/^        int protocol; \/\/ 0 == auto$/;"	m	class:RedPeer::ConnectionOptions
protocol	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t protocol;$/;"	m	struct:VDAgentMessage
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	spice-common/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	client/Makefile	/^psdir = ${docdir}$/;"	m
psdir	docs/Makefile	/^psdir = ${docdir}$/;"	m
psdir	docs/manual/Makefile	/^psdir = ${docdir}$/;"	m
psdir	server/Makefile	/^psdir = ${docdir}$/;"	m
psdir	server/tests/Makefile	/^psdir = ${docdir}$/;"	m
psdir	spice-common/Makefile	/^psdir = ${docdir}$/;"	m
psdir	spice-common/common/Makefile	/^psdir = ${docdir}$/;"	m
psdir	spice-common/python_modules/Makefile	/^psdir = ${docdir}$/;"	m
psdir	spice-common/spice-protocol/Makefile	/^psdir = ${docdir}$/;"	m
psdir	spice-common/spice-protocol/spice/Makefile	/^psdir = ${docdir}$/;"	m
pthreads_locking_callback	server/reds.c	/^static void pthreads_locking_callback(int mode, int type, const char *file, int line)$/;"	f	file:
pthreads_thread_id	server/reds.c	/^static unsigned long pthreads_thread_id(void)$/;"	f	file:
ptypes	spice-common/python_modules/demarshal.py	/^import ptypes$/;"	i
ptypes	spice-common/python_modules/marshal.py	/^import ptypes$/;"	i
ptypes	spice-common/python_modules/spice_parser.py	/^import ptypes$/;"	i
ptypes	spice-common/spice_codegen.py	/^from python_modules import ptypes$/;"	i
pub	server/mjpeg_encoder.c	/^  struct jpeg_destination_mgr pub; \/* public fields *\/$/;"	m	struct:__anon196	typeref:struct:__anon196::jpeg_destination_mgr	file:
pub_key	spice-common/spice-protocol/spice/protocol.h	/^    uint8_t pub_key[SPICE_TICKET_PUBKEY_BYTES];$/;"	m	struct:SpiceLinkReply
pub_key_data	spice-common/common/messages.h	/^    uint8_t *pub_key_data;$/;"	m	struct:SpiceMigrationDstInfo
pub_key_size	spice-common/common/messages.h	/^    uint32_t pub_key_size;$/;"	m	struct:SpiceMigrationDstInfo
pub_key_type	spice-common/common/messages.h	/^    uint16_t pub_key_type;$/;"	m	struct:SpiceMigrationDstInfo
pubkey	spice-common/common/ssl_verify.h	/^    char                *pubkey;$/;"	m	struct:__anon4
pubkey_size	spice-common/common/ssl_verify.h	/^    size_t              pubkey_size;$/;"	m	struct:__anon4
publish_monitors	client/x11/platform.cpp	/^    virtual void publish_monitors(MonitorsList& monitors)$/;"	f	class:StaticScreen
publish_monitors	client/x11/platform.cpp	/^void DynamicScreen::publish_monitors(MonitorsList& monitors)$/;"	f	class:DynamicScreen
publish_monitors	client/x11/platform.cpp	/^void MultyMonScreen::publish_monitors(MonitorsList& monitors)$/;"	f	class:MultyMonScreen
publish_monitors	client/x11/platform.cpp	/^void XineramaScreen::publish_monitors(MonitorsList& monitors)$/;"	f	class:XineramaScreen
push	client/x11/platform.cpp	/^static int push(XMonitor& pusher, XMonitor& monitor, const XMonitorsList& monitors, int delta)$/;"	f	file:
push_command	server/tests/test_display_base.c	/^static void push_command(QXLCommandExt *ext)$/;"	f	file:
push_data	client/display_channel.cpp	/^void VideoStream::push_data(uint32_t mm_time, uint32_t length, uint8_t* data)$/;"	f	class:VideoStream
push_disconnect	client/client_net_socket.cpp	/^void ClientNetSocket::push_disconnect()$/;"	f	class:ClientNetSocket
push_event	client/process_loop.cpp	/^int EventsQueue::push_event(Event* event)$/;"	f	class:EventsQueue
push_event	client/process_loop.cpp	/^void ProcessLoop::push_event(Event* event)$/;"	f	class:ProcessLoop
push_event	client/red_client.cpp	/^void RedClient::push_event(Event* event)$/;"	f	class:RedClient
push_ext	server/inputs_channel.c	/^    bool push_ext;$/;"	m	struct:SpiceKbdState	file:
push_fin	client/client_net_socket.cpp	/^void ClientNetSocket::push_fin()$/;"	f	class:ClientNetSocket
push_frame	client/record_channel.cpp	/^void RecordChannel::push_frame(uint8_t *frame)$/;"	f	class:RecordChannel
push_frames	client/windows/record.cpp	/^void WaveRecorder::push_frames()$/;"	f	class:WaveRecorder
push_index	spice-common/python_modules/codegen.py	/^    def push_index(self):$/;"	m	class:CodeWriter
push_new_primary_surface	server/red_worker.c	/^static void push_new_primary_surface(DisplayChannelClient *dcc)$/;"	f	file:
push_scan_freg	server/spice.h	/^    void (*push_scan_freg)(SpiceKbdInstance *sin, uint8_t frag);$/;"	m	struct:SpiceKbdInterface
push_send	client/client_net_socket.cpp	/^void ClientNetSocket::push_send(SendBuffer& buf)$/;"	f	class:ClientNetSocket
push_stream_clip	server/red_worker.c	/^static void push_stream_clip(DisplayChannelClient* dcc, StreamAgent *agent)$/;"	f	file:
push_sync_event	client/smartcard_channel.cpp	/^void SmartCardChannel::push_sync_event(VEventType type, Event *event)$/;"	f	class:SmartCardChannel
push_trans	client/x11/platform.cpp	/^void XMonitor::push_trans()$/;"	f	class:XMonitor
put	spice-common/common/canvas_base.h	/^    void (*put)(SpiceImageCache *cache,$/;"	m	struct:__anon8
put	spice-common/common/canvas_base.h	/^    void (*put)(SpicePaletteCache *cache,$/;"	m	struct:__anon10
put_cursor_pipe_item	server/red_worker.c	/^static void put_cursor_pipe_item(CursorChannelClient *ccc, CursorPipeItem *pipe_item)$/;"	f	file:
put_drawable_pipe_item	server/red_worker.c	/^static void put_drawable_pipe_item(DrawablePipeItem *dpi)$/;"	f	file:
put_image	client/canvas.cpp	/^void Canvas::put_image($/;"	f	class:Canvas
put_image	spice-common/common/canvas_base.h	/^    void (*put_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
put_lossy	spice-common/common/canvas_base.h	/^    void (*put_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8
put_point	spice-common/common/glc.c	/^static inline void put_point(InternalPath *path, double x, double y)$/;"	f	file:
put_red_drawable	server/red_worker.c	/^static inline void put_red_drawable(RedWorker *worker, RedDrawable *red_drawable,$/;"	f	file:
put_wave_data	client/playback_channel.cpp	/^static void put_wave_data(uint8_t *data, uint32_t size)$/;"	f	file:
qcompress	server/h264_type.h	/^    float qcompress;  $/;"	m	struct:_H264StreamInfo
qif	server/reds.h	/^    QXLInterface          *qif;$/;"	m	struct:QXLState
qmax	server/h264_type.h	/^    int qmax;$/;"	m	struct:_H264StreamInfo
qmin	server/h264_type.h	/^    int qmin;$/;"	m	struct:_H264StreamInfo
quality_eval_data	server/mjpeg_encoder.c	/^    MJpegEncoderQualityEval quality_eval_data;$/;"	m	struct:MJpegEncoderRateControl	file:
quality_id	server/mjpeg_encoder.c	/^    int quality_id;$/;"	m	struct:MJpegEncoderRateControl	file:
query_keyboard	client/x11/red_window.cpp	/^static void query_keyboard()$/;"	f	file:
queue	server/spice_timer_queue.c	/^    SpiceTimerQueue *queue;$/;"	m	struct:SpiceTimer	file:
queue_count	server/spice_timer_queue.c	/^static int queue_count = 0;$/;"	v	file:
queue_list_lock	server/spice_timer_queue.c	/^static pthread_mutex_t queue_list_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
quic	server/red_worker.c	/^    QuicContext *quic;$/;"	m	struct:RedWorker	file:
quic	spice-common/common/canvas_base.c	/^    QuicContext *quic;$/;"	m	struct:QuicData	file:
quic	spice-common/common/draw.h	/^        SpiceQUICData       quic;$/;"	m	union:SpiceImage::__anon35
quic	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLQUICData quic;$/;"	m	union:QXLImage::__anon82
quic_create	spice-common/common/quic.c	/^QuicContext *quic_create(QuicUsrContext *usr)$/;"	f
quic_data	server/red_worker.c	/^    QuicData quic_data;$/;"	m	struct:RedWorker	file:
quic_data	spice-common/common/canvas_base.c	/^    QuicData quic_data;$/;"	m	struct:CanvasBase	file:
quic_decode	spice-common/common/quic.c	/^int quic_decode(QuicContext *quic, QuicImageType type, uint8_t *buf, int stride)$/;"	f
quic_decode_begin	spice-common/common/quic.c	/^int quic_decode_begin(QuicContext *quic, uint32_t *io_ptr, unsigned int num_io_words,$/;"	f
quic_destroy	spice-common/common/quic.c	/^void quic_destroy(QuicContext *quic)$/;"	f
quic_encode	spice-common/common/quic.c	/^int quic_encode(QuicContext *quic, QuicImageType type, int width, int height,$/;"	f
quic_image_params	spice-common/common/quic.c	/^static void quic_image_params(Encoder *encoder, QuicImageType type, int *channels, int *bpc)$/;"	f	file:
quic_init	spice-common/common/quic.c	/^void quic_init(void)$/;"	f
quic_stat	server/red_worker.c	/^    stat_info_t quic_stat;$/;"	m	struct:DisplayChannel	file:
quic_stat_name	server/red_worker.c	/^static const char *quic_stat_name = "quic";$/;"	v	file:
quic_usr_error	server/red_worker.c	/^quic_usr_error(QuicUsrContext *usr, const char *fmt, ...)$/;"	f
quic_usr_error	spice-common/common/canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void quic_usr_error(QuicUsrContext *usr, const char *fmt, ...)$/;"	f	file:
quic_usr_free	server/red_worker.c	/^static void quic_usr_free(QuicUsrContext *usr, void *ptr)$/;"	f	file:
quic_usr_free	spice-common/common/canvas_base.c	/^static void quic_usr_free(QuicUsrContext *usr, void *ptr)$/;"	f	file:
quic_usr_malloc	server/red_worker.c	/^static void *quic_usr_malloc(QuicUsrContext *usr, int size)$/;"	f	file:
quic_usr_malloc	spice-common/common/canvas_base.c	/^static void *quic_usr_malloc(QuicUsrContext *usr, int size)$/;"	f	file:
quic_usr_more_lines	server/red_worker.c	/^static int quic_usr_more_lines(QuicUsrContext *usr, uint8_t **lines)$/;"	f	file:
quic_usr_more_lines	spice-common/common/canvas_base.c	/^static int quic_usr_more_lines(QuicUsrContext *usr, uint8_t **lines)$/;"	f	file:
quic_usr_more_space	server/red_worker.c	/^static int quic_usr_more_space(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed)$/;"	f	file:
quic_usr_more_space	spice-common/common/canvas_base.c	/^static int quic_usr_more_space(QuicUsrContext *usr, uint32_t **io_ptr, int rows_completed)$/;"	f	file:
quic_usr_warn	server/red_worker.c	/^static SPICE_GNUC_PRINTF(2, 3) void quic_usr_warn(QuicUsrContext *usr, const char *fmt, ...)$/;"	f
quic_usr_warn	spice-common/common/canvas_base.c	/^SPICE_ATTR_PRINTF(2, 3) static void quic_usr_warn(QuicUsrContext *usr, const char *fmt, ...)$/;"	f	file:
quit	client/application.cpp	/^void Application::quit()$/;"	f	class:Application
quit	client/process_loop.cpp	/^void ProcessLoop::quit(int error_code)$/;"	f	class:ProcessLoop
quit_handler	client/x11/platform.cpp	/^static void quit_handler(int sig)$/;"	f	file:
qxl	server/red_dispatcher.c	/^    QXLInstance *qxl;$/;"	m	struct:RedDispatcher	file:
qxl	server/red_worker.c	/^    QXLInstance *qxl;$/;"	m	struct:RedWorker	file:
qxl	server/red_worker.h	/^    struct QXLInstance *qxl;$/;"	m	struct:WorkerInitData	typeref:struct:WorkerInitData::QXLInstance
qxl_area	server/red_dispatcher.h	/^    QXLRect * qxl_area;$/;"	m	struct:RedWorkerMessageUpdate
qxl_area	server/red_dispatcher.h	/^    QXLRect qxl_area;$/;"	m	struct:RedWorkerMessageUpdateAsync
qxl_dirty_rects	server/red_dispatcher.h	/^    QXLRect * qxl_dirty_rects;$/;"	m	struct:RedWorkerMessageUpdate
qxl_instance	server/tests/test_display_base.h	/^    QXLInstance qxl_instance;$/;"	m	struct:Test
qxl_process_cursor	server/red_worker.c	/^static void qxl_process_cursor(RedWorker *worker, RedCursorCmd *cursor_cmd, uint32_t group_id)$/;"	f	file:
qxl_ram_size	server/spice.h	/^    uint32_t qxl_ram_size;$/;"	m	struct:QXLDevInitInfo
qxl_ram_size	server/spice.h	/^    uint32_t qxl_ram_size;$/;"	m	struct:QXLDevMemSlot
qxl_worker	server/tests/test_display_base.h	/^    QXLWorker *qxl_worker;$/;"	m	struct:Test
qxl_worker_add_memslot	server/red_dispatcher.c	/^static void qxl_worker_add_memslot(QXLWorker *qxl_worker, QXLDevMemSlot *mem_slot)$/;"	f	file:
qxl_worker_create_primary_surface	server/red_dispatcher.c	/^static void qxl_worker_create_primary_surface(QXLWorker *qxl_worker, uint32_t surface_id,$/;"	f	file:
qxl_worker_del_memslot	server/red_dispatcher.c	/^static void qxl_worker_del_memslot(QXLWorker *qxl_worker, uint32_t slot_group_id, uint32_t slot_id)$/;"	f	file:
qxl_worker_destroy_primary_surface	server/red_dispatcher.c	/^static void qxl_worker_destroy_primary_surface(QXLWorker *qxl_worker, uint32_t surface_id)$/;"	f	file:
qxl_worker_destroy_surface_wait	server/red_dispatcher.c	/^static void qxl_worker_destroy_surface_wait(QXLWorker *qxl_worker, uint32_t surface_id)$/;"	f	file:
qxl_worker_destroy_surfaces	server/red_dispatcher.c	/^static void qxl_worker_destroy_surfaces(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_loadvm_commands	server/red_dispatcher.c	/^static void qxl_worker_loadvm_commands(QXLWorker *qxl_worker,$/;"	f	file:
qxl_worker_oom	server/red_dispatcher.c	/^static void qxl_worker_oom(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_reset_cursor	server/red_dispatcher.c	/^static void qxl_worker_reset_cursor(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_reset_image_cache	server/red_dispatcher.c	/^static void qxl_worker_reset_image_cache(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_reset_memslots	server/red_dispatcher.c	/^static void qxl_worker_reset_memslots(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_start	server/red_dispatcher.c	/^static void qxl_worker_start(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_stop	server/red_dispatcher.c	/^static void qxl_worker_stop(QXLWorker *qxl_worker)$/;"	f	file:
qxl_worker_update_area	server/red_dispatcher.c	/^static void qxl_worker_update_area(QXLWorker *qxl_worker, uint32_t surface_id,$/;"	f	file:
qxl_worker_wakeup	server/red_dispatcher.c	/^static void qxl_worker_wakeup(QXLWorker *qxl_worker)$/;"	f	file:
r	client/glz_decoder.cpp	/^    uint8_t r;$/;"	m	struct:rgb24_pixel_t	file:
r	client/glz_decoder.cpp	/^    uint8_t r;$/;"	m	struct:rgb32_pixel_t	file:
r	client/gui/softrenderer.h	/^            uint8_t r;$/;"	m	class:CEGUI::SoftRenderer::ColourI
r	server/glz_encoder.c	/^    BYTE r;$/;"	m	struct:rgb24_pixel_t	file:
r	server/glz_encoder.c	/^    BYTE r;$/;"	m	struct:rgb32_pixel_t	file:
r	server/red_worker.c	/^    uint8_t r;$/;"	m	struct:rgb24_pixel_t	file:
r	server/red_worker.c	/^    uint8_t r;$/;"	m	struct:rgb32_pixel_t	file:
r	spice-common/common/lz.c	/^    uint8_t r;$/;"	m	struct:rgb24_pixel_t	file:
r	spice-common/common/lz.c	/^    uint8_t r;$/;"	m	struct:rgb32_pixel_t	file:
r	spice-common/common/quic.c	/^    BYTE r;$/;"	m	struct:rgb24_pixel_t	file:
r	spice-common/common/quic.c	/^    BYTE r;$/;"	m	struct:rgb32_pixel_t	file:
raise	client/windows/red_window.cpp	/^void RedWindow::raise()$/;"	f	class:RedWindow
raise	client/x11/red_window.cpp	/^void RedWindow::raise()$/;"	f	class:RedWindow
ram_header_offset	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t ram_header_offset;$/;"	m	struct:QXLRom
ram_hint	server/main_channel.c	/^    int ram_hint;$/;"	m	struct:InitPipeItem	file:
ram_hint	spice-common/common/messages.h	/^    uint32_t ram_hint;$/;"	m	struct:SpiceMsgMainInit
ram_size	server/spice.h	/^    uint32_t ram_size;$/;"	m	struct:QXLDevInfo
random_region	spice-common/common/region.c	/^static void random_region(QRegion *reg)$/;"	f	file:
raster_ops	spice-common/common/gdi_canvas.c	/^uint32_t raster_ops[] = {$/;"	v
rate_control	server/mjpeg_encoder.c	/^    MJpegEncoderRateControl rate_control;$/;"	m	struct:MJpegEncoder	file:
rate_control_is_active	server/mjpeg_encoder.c	/^    int rate_control_is_active;$/;"	m	struct:MJpegEncoder	file:
rbo	client/x11/pixels_source_p.h	/^            GLuint rbo;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
rc_buffer_size	server/h264_type.h	/^    int rc_buffer_size;$/;"	m	struct:_H264StreamInfo
rc_max_rate	server/h264_type.h	/^    int rc_max_rate;$/;"	m	struct:_H264StreamInfo
rc_min_rate	server/h264_type.h	/^    int rc_min_rate;$/;"	m	struct:_H264StreamInfo
rcc	server/red_dispatcher.h	/^    RedChannelClient *rcc;$/;"	m	struct:RedWorkerMessageCursorDisconnect
rcc	server/red_dispatcher.h	/^    RedChannelClient *rcc;$/;"	m	struct:RedWorkerMessageCursorMigrate
rcc	server/red_dispatcher.h	/^    RedChannelClient *rcc;$/;"	m	struct:RedWorkerMessageDisplayDisconnect
rcc	server/red_dispatcher.h	/^    RedChannelClient *rcc;$/;"	m	struct:RedWorkerMessageDisplayMigrate
rcc	server/spicevmc.c	/^    RedChannelClient *rcc;$/;"	m	struct:SpiceVmcState	file:
rcc_disconnect_if_pending_send	server/red_worker.c	/^static void rcc_disconnect_if_pending_send(RedChannelClient *rcc)$/;"	f	file:
rcc_item_cond_t	server/red_channel.c	/^typedef int (*rcc_item_cond_t)(RedChannelClient *rcc, PipeItem *item);$/;"	t	file:
rcc_item_t	server/red_channel.c	/^typedef void (*rcc_item_t)(RedChannelClient *rcc, PipeItem *item);$/;"	t	file:
read	client/windows/named_pipe.cpp	/^int32_t PipeReader::read(uint8_t *buf, int32_t size)$/;"	f	class:PipeReader
read	client/windows/named_pipe.cpp	/^int32_t WinConnection::read(uint8_t *buf, int32_t size)$/;"	f	class:WinConnection
read	client/windows/platform.cpp	/^int32_t NamedPipe::read(ConnectionRef conn_ref, uint8_t *buf, int32_t size)$/;"	f	class:NamedPipe
read	client/x11/named_pipe.cpp	/^int32_t Session::read(uint8_t *buf, int32_t size)$/;"	f	class:Session
read	client/x11/platform.cpp	/^int32_t NamedPipe::read(ConnectionRef conn_ref, uint8_t* buf, int32_t size)$/;"	f	class:NamedPipe
read	server/reds_stream.c	/^    ssize_t (*read)(RedsStream *s, void *buf, size_t nbyte);$/;"	m	struct:RedsStreamPrivate	file:
read	server/spice.h	/^    int (*read)(SpiceCharDeviceInstance *sin, uint8_t *buf, int len);$/;"	m	struct:SpiceCharDeviceInterface
read_array_len	spice-common/python_modules/demarshal.py	/^def read_array_len(writer, prefix, array, dest, scope, is_ptr):$/;"	f
read_bits	spice-common/common/canvas_base.h	/^    void (*read_bits)(SpiceCanvas *canvas, uint8_t *dest, int dest_stride, const SpiceRect *area);$/;"	m	struct:__anon13
read_bufs	server/reds-private.h	/^    Ring read_bufs;$/;"	m	struct:VDIPortState
read_count	client/read_write_mutex.h	/^        unsigned int read_count;$/;"	m	struct:ReadWriteMutex::__anon114
read_data_ptr	server/migration_protocol.h	/^    uint32_t read_data_ptr;$/;"	m	struct:SpiceMigrateDataSmartcard
read_filter	server/reds-private.h	/^    AgentMsgFilter read_filter;$/;"	m	struct:VDIPortState
read_int16	spice-common/common/generated_client_demarshallers.c	42;"	d	file:
read_int16	spice-common/common/generated_client_demarshallers.c	59;"	d	file:
read_int16	spice-common/common/generated_client_demarshallers1.c	42;"	d	file:
read_int16	spice-common/common/generated_client_demarshallers1.c	59;"	d	file:
read_int16	spice-common/common/generated_server_demarshallers.c	42;"	d	file:
read_int16	spice-common/common/generated_server_demarshallers.c	59;"	d	file:
read_int32	spice-common/common/generated_client_demarshallers.c	46;"	d	file:
read_int32	spice-common/common/generated_client_demarshallers.c	63;"	d	file:
read_int32	spice-common/common/generated_client_demarshallers1.c	46;"	d	file:
read_int32	spice-common/common/generated_client_demarshallers1.c	63;"	d	file:
read_int32	spice-common/common/generated_server_demarshallers.c	46;"	d	file:
read_int32	spice-common/common/generated_server_demarshallers.c	63;"	d	file:
read_int64	spice-common/common/generated_client_demarshallers.c	50;"	d	file:
read_int64	spice-common/common/generated_client_demarshallers.c	67;"	d	file:
read_int64	spice-common/common/generated_client_demarshallers1.c	50;"	d	file:
read_int64	spice-common/common/generated_client_demarshallers1.c	67;"	d	file:
read_int64	spice-common/common/generated_server_demarshallers.c	50;"	d	file:
read_int64	spice-common/common/generated_server_demarshallers.c	67;"	d	file:
read_int8	spice-common/common/generated_client_demarshallers.c	38;"	d	file:
read_int8	spice-common/common/generated_client_demarshallers.c	55;"	d	file:
read_int8	spice-common/common/generated_client_demarshallers1.c	38;"	d	file:
read_int8	spice-common/common/generated_client_demarshallers1.c	55;"	d	file:
read_int8	spice-common/common/generated_server_demarshallers.c	38;"	d	file:
read_int8	spice-common/common/generated_server_demarshallers.c	55;"	d	file:
read_io_word	spice-common/common/quic.c	/^static inline void read_io_word(Encoder *encoder)$/;"	f	file:
read_lock	client/read_write_mutex.h	/^    void read_lock()$/;"	f	class:ReadWriteMutex
read_message	server/red_worker.h	/^static inline void read_message(int fd, RedWorkerMessage *message)$/;"	f
read_msgs	client/controller.cpp	/^bool ControllerConnection::read_msgs()$/;"	f	class:ControllerConnection
read_msgs	client/foreign_menu.cpp	/^bool ForeignMenuConnection::read_msgs()$/;"	f	class:ForeignMenuConnection
read_one_msg_from_device	server/char_device.h	/^    SpiceCharDeviceMsgToClient* (*read_one_msg_from_device)(SpiceCharDeviceInstance *sin,$/;"	m	struct:SpiceCharDeviceCallbacks
read_pos	server/snd_worker.c	/^    uint32_t read_pos;$/;"	m	struct:RecordChannel	file:
read_safe	server/dispatcher.c	/^static int read_safe(int fd, uint8_t *buf, size_t size, int block)$/;"	f	file:
read_size	server/migration_protocol.h	/^    uint32_t read_size; \/* partial data read from dev *\/$/;"	m	struct:SpiceMigrateDataSmartcard
read_state	server/reds-private.h	/^    uint32_t read_state;$/;"	m	struct:VDIPortState
read_uint16	spice-common/common/generated_client_demarshallers.c	44;"	d	file:
read_uint16	spice-common/common/generated_client_demarshallers.c	61;"	d	file:
read_uint16	spice-common/common/generated_client_demarshallers1.c	44;"	d	file:
read_uint16	spice-common/common/generated_client_demarshallers1.c	61;"	d	file:
read_uint16	spice-common/common/generated_server_demarshallers.c	44;"	d	file:
read_uint16	spice-common/common/generated_server_demarshallers.c	61;"	d	file:
read_uint32	spice-common/common/generated_client_demarshallers.c	48;"	d	file:
read_uint32	spice-common/common/generated_client_demarshallers.c	65;"	d	file:
read_uint32	spice-common/common/generated_client_demarshallers1.c	48;"	d	file:
read_uint32	spice-common/common/generated_client_demarshallers1.c	65;"	d	file:
read_uint32	spice-common/common/generated_server_demarshallers.c	48;"	d	file:
read_uint32	spice-common/common/generated_server_demarshallers.c	65;"	d	file:
read_uint64	spice-common/common/generated_client_demarshallers.c	52;"	d	file:
read_uint64	spice-common/common/generated_client_demarshallers.c	69;"	d	file:
read_uint64	spice-common/common/generated_client_demarshallers1.c	52;"	d	file:
read_uint64	spice-common/common/generated_client_demarshallers1.c	69;"	d	file:
read_uint64	spice-common/common/generated_server_demarshallers.c	52;"	d	file:
read_uint64	spice-common/common/generated_server_demarshallers.c	69;"	d	file:
read_uint8	spice-common/common/generated_client_demarshallers.c	40;"	d	file:
read_uint8	spice-common/common/generated_client_demarshallers.c	57;"	d	file:
read_uint8	spice-common/common/generated_client_demarshallers1.c	40;"	d	file:
read_uint8	spice-common/common/generated_client_demarshallers1.c	57;"	d	file:
read_uint8	spice-common/common/generated_server_demarshallers.c	40;"	d	file:
read_uint8	spice-common/common/generated_server_demarshallers.c	57;"	d	file:
read_unlock	client/read_write_mutex.h	/^    void read_unlock()$/;"	f	class:ReadWriteMutex
reader_added	server/migration_protocol.h	/^    uint8_t reader_added;$/;"	m	struct:SpiceMigrateDataSmartcard
reader_added	server/smartcard.c	/^    int                  reader_added; \/\/ has reader_add been sent to the device$/;"	m	struct:SmartCardDeviceState	file:
reader_data_from_reader_id	client/smartcard_channel.cpp	/^ReaderData* SmartCardChannel::reader_data_from_reader_id(uint32_t reader_id)$/;"	f	class:SmartCardChannel
reader_data_from_vreader	client/smartcard_channel.cpp	/^ReaderData* SmartCardChannel::reader_data_from_vreader(VReader* vreader)$/;"	f	class:SmartCardChannel
reader_id	client/smartcard_channel.h	/^    uint32_t reader_id;$/;"	m	struct:ReaderData
reader_id	server/smartcard.c	/^    uint32_t             reader_id;$/;"	m	struct:SmartCardDeviceState	file:
reader_id	spice-common/common/messages.h	/^    uint32_t reader_id;$/;"	m	struct:SpiceMsgSmartcard
readers_by_id_t	client/smartcard_channel.h	/^    typedef std::map<uint32_t, ReaderData*> readers_by_id_t;$/;"	t	class:SmartCardChannel
readers_by_vreader_t	client/smartcard_channel.h	/^    typedef std::map<VReader*, ReaderData*> readers_by_vreader_t;$/;"	t	class:SmartCardChannel
realloc	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::realloc(int size)$/;"	f	class:GlzDecoderWindow
rearrange_monitors	client/application.cpp	/^void Application::rearrange_monitors(bool force_capture,$/;"	f	class:Application
reason	server/mjpeg_encoder.c	/^    int reason;$/;"	m	struct:MJpegEncoderQualityEval	file:
reason	spice-common/common/messages.h	/^    uint32_t reason; \/\/ SPICE_ERR_?$/;"	m	struct:SpiceMsgDisconnect
receive	client/client_net_socket.cpp	/^void ClientNetSocket::receive()$/;"	f	class:ClientNetSocket
receive	client/red_channel.cpp	/^RedPeer::CompoundInMessage *RedChannel::receive()$/;"	f	class:RedChannel
receive	client/red_peer.cpp	/^RedPeer::CompoundInMessage* RedPeer::receive()$/;"	f	class:RedPeer
receive	client/red_peer.cpp	/^uint32_t RedPeer::receive(uint8_t *buf, uint32_t size)$/;"	f	class:RedPeer
receive_buf	client/client_net_socket.cpp	/^uint32_t ClientNetSocket::receive_buf(uint8_t* buf, uint32_t max_size, bool& shutdown)$/;"	f	class:ClientNetSocket
receive_data	server/red_worker.h	/^static inline void receive_data(int fd, void *in_buf, int n)$/;"	f
receive_data	server/snd_worker.c	/^    } receive_data;$/;"	m	struct:SndChannel	typeref:struct:SndChannel::__anon140	file:
receive_len	server/reds-private.h	/^    uint32_t receive_len;$/;"	m	struct:VDIPortState
receive_messages	client/red_channel.cpp	/^void RedChannel::receive_messages()$/;"	f	class:RedChannel
receive_pos	server/reds-private.h	/^    uint8_t *receive_pos;$/;"	m	struct:VDIPortState
reclaim	client/windows/playback.cpp	/^void WavePlayer::reclaim()$/;"	f	class:WavePlayer
reclaim	client/windows/record.cpp	/^void WaveRecorder::reclaim()$/;"	f	class:WaveRecorder
recreate_ogl_context	client/display_channel.cpp	/^void DisplayChannel::recreate_ogl_context()$/;"	f	class:DisplayChannel
recreate_ogl_context_interrupt	client/display_channel.cpp	/^void DisplayChannel::recreate_ogl_context_interrupt()$/;"	f	class:DisplayChannel
rect_contains	spice-common/common/rect.h	/^static inline int rect_contains(const SpiceRect *big, const SpiceRect *small)$/;"	f
rect_contains	spice-common/common/rect.h	/^static inline int rect_contains(const SpiceRect& big, const SpiceRect& small)$/;"	f
rect_debug	spice-common/common/rect.h	/^static inline void rect_debug(const SpiceRect &r)$/;"	f
rect_debug	spice-common/common/rect.h	/^static inline void rect_debug(const SpiceRect *r)$/;"	f
rect_get_area	spice-common/common/rect.h	/^static inline int rect_get_area(const SpiceRect *r)$/;"	f
rect_get_area	spice-common/common/rect.h	/^static inline int rect_get_area(const SpiceRect& r)$/;"	f
rect_intersects	spice-common/common/rect.h	/^static inline int rect_intersects(const SpiceRect& r1, const SpiceRect& r2)$/;"	f
rect_intersects	spice-common/common/rect.h	/^static inline int rect_intersects(const SpiceRect* r1, const SpiceRect* r2)$/;"	f
rect_is_empty	spice-common/common/rect.h	/^static inline int rect_is_empty(const SpiceRect& r)$/;"	f
rect_is_empty	spice-common/common/rect.h	/^static inline int rect_is_empty(const SpiceRect* r)$/;"	f
rect_is_equal	spice-common/common/rect.h	/^static inline int rect_is_equal(const SpiceRect *r1, const SpiceRect *r2)$/;"	f
rect_is_equal	spice-common/common/rect.h	/^static inline int rect_is_equal(const SpiceRect& r1, const SpiceRect& r2)$/;"	f
rect_is_same_size	spice-common/common/rect.h	/^static inline int rect_is_same_size(const SpiceRect *r1, const SpiceRect *r2)$/;"	f
rect_is_same_size	spice-common/common/rect.h	/^static inline int rect_is_same_size(const SpiceRect& r1, const SpiceRect& r2)$/;"	f
rect_is_valid	spice-common/common/region.c	/^static int rect_is_valid(const SpiceRect *r)$/;"	f	file:
rect_offset	spice-common/common/rect.h	/^static inline void rect_offset(SpiceRect& r, int dx, int dy)$/;"	f
rect_offset	spice-common/common/rect.h	/^static inline void rect_offset(SpiceRect* r, int dx, int dy)$/;"	f
rect_sect	spice-common/common/rect.h	/^static inline void rect_sect(SpiceRect& r, const SpiceRect& bounds)$/;"	f
rect_sect	spice-common/common/rect.h	/^static inline void rect_sect(SpiceRect* r, const SpiceRect* bounds)$/;"	f
rect_set	spice-common/common/region.c	/^static void rect_set(SpiceRect *r, int32_t top, int32_t left, int32_t bottom, int32_t right)$/;"	f	file:
rect_union	spice-common/common/rect.h	/^static inline void rect_union(SpiceRect *dest, const SpiceRect *r)$/;"	f
rect_union	spice-common/common/rect.h	/^static inline void rect_union(SpiceRect& dest, const SpiceRect& r)$/;"	f
rects	server/red_worker.c	/^    SpiceClipRects *rects;$/;"	m	struct:StreamClipItem	file:
rects	server/red_worker.c	/^    SpiceClipRects *rects;$/;"	m	struct:UpgradeItem	file:
rects	server/tests/test_display_base.c	/^static int rects = 16; \/\/number of rects that will be draw$/;"	v	file:
rects	spice-common/common/draw.h	/^    SpiceClipRects *rects;$/;"	m	struct:SpiceClip
rects	spice-common/common/draw.h	/^  SpiceRect rects[0];$/;"	m	struct:SpiceClipRects
recv_buf	server/inputs_channel.c	/^    uint8_t recv_buf[RECEIVE_BUF_SIZE];$/;"	m	struct:InputsChannel	file:
recv_buf	server/main_channel.h	/^    uint8_t recv_buf[MAIN_CHANNEL_RECEIVE_BUF_SIZE];$/;"	m	struct:MainChannel
recv_buf	server/red_worker.c	/^    uint8_t recv_buf[CHANNEL_RECEIVE_BUF_SIZE];$/;"	m	struct:CommonChannel	file:
recv_core	server/dispatcher.h	/^    SpiceCoreInterface *recv_core;$/;"	m	struct:Dispatcher
recv_fd	server/dispatcher.h	/^    int recv_fd;$/;"	m	struct:Dispatcher
recv_from_client_buf	server/reds-private.h	/^    SpiceCharDeviceWriteBuffer *recv_from_client_buf;$/;"	m	struct:VDIPortState
recv_from_client_buf	server/spicevmc.c	/^    SpiceCharDeviceWriteBuffer *recv_from_client_buf;$/;"	m	struct:SpiceVmcState	file:
recv_from_client_buf_pushed	server/reds-private.h	/^    int recv_from_client_buf_pushed;$/;"	m	struct:VDIPortState
red_add_item_trace	server/red_worker.c	/^static inline void red_add_item_trace(RedWorker *worker, Drawable *item)$/;"	f	file:
red_add_lossless_drawable_dependencies	server/red_worker.c	/^static void red_add_lossless_drawable_dependencies(RedWorker *worker,$/;"	f	file:
red_add_surface_area_image	server/red_worker.c	/^static ImageItem *red_add_surface_area_image(DisplayChannelClient *dcc, int surface_id,$/;"	f	file:
red_alloc_stream	server/red_worker.c	/^static inline Stream *red_alloc_stream(RedWorker *worker)$/;"	f	file:
red_attach_stream	server/red_worker.c	/^static void red_attach_stream(RedWorker *worker, Drawable *drawable, Stream *stream)$/;"	f	file:
red_channel_add_client	server/red_channel.c	/^static void red_channel_add_client(RedChannel *channel, RedChannelClient *rcc)$/;"	f	file:
red_channel_all_blocked	server/red_channel.c	/^int red_channel_all_blocked(RedChannel *channel)$/;"	f
red_channel_any_blocked	server/red_channel.c	/^int red_channel_any_blocked(RedChannel *channel)$/;"	f
red_channel_apply_clients	server/red_channel.c	/^void red_channel_apply_clients(RedChannel *channel, channel_client_callback cb)$/;"	f
red_channel_apply_clients_data	server/red_channel.c	/^void red_channel_apply_clients_data(RedChannel *channel, channel_client_callback_data cb, void *data)$/;"	f
red_channel_client_ack_set_client_window	server/red_channel.c	/^void red_channel_client_ack_set_client_window(RedChannelClient *rcc, int client_window)$/;"	f
red_channel_client_ack_zero_messages_window	server/red_channel.c	/^void red_channel_client_ack_zero_messages_window(RedChannelClient *rcc)$/;"	f
red_channel_client_begin_send_message	server/red_channel.c	/^void red_channel_client_begin_send_message(RedChannelClient *rcc)$/;"	f
red_channel_client_blocked	server/red_channel.c	/^int red_channel_client_blocked(RedChannelClient *rcc)$/;"	f
red_channel_client_cancel_ping_timer	server/red_channel.c	/^static void red_channel_client_cancel_ping_timer(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_clear_sent_item	server/red_channel.c	/^void red_channel_client_clear_sent_item(RedChannelClient *rcc)$/;"	f
red_channel_client_connectivity_timer	server/red_channel.c	/^static void red_channel_client_connectivity_timer(void *opaque)$/;"	f	file:
red_channel_client_create	server/red_channel.c	/^RedChannelClient *red_channel_client_create(int size, RedChannel *channel, RedClient  *client,$/;"	f
red_channel_client_create_dummy	server/red_channel.c	/^RedChannelClient *red_channel_client_create_dummy(int size,$/;"	f
red_channel_client_default_connect	server/red_channel.c	/^static void red_channel_client_default_connect(RedChannel *channel, RedClient *client,$/;"	f	file:
red_channel_client_default_disconnect	server/red_channel.c	/^static void red_channel_client_default_disconnect(RedChannelClient *base)$/;"	f	file:
red_channel_client_default_migrate	server/red_channel.c	/^void red_channel_client_default_migrate(RedChannelClient *rcc)$/;"	f
red_channel_client_default_peer_on_error	server/red_channel.c	/^static void red_channel_client_default_peer_on_error(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_destroy	server/red_channel.c	/^void red_channel_client_destroy(RedChannelClient *rcc)$/;"	f
red_channel_client_destroy_remote_caps	server/red_channel.c	/^static void red_channel_client_destroy_remote_caps(RedChannelClient* rcc)$/;"	f	file:
red_channel_client_disconnect	server/red_channel.c	/^void red_channel_client_disconnect(RedChannelClient *rcc)$/;"	f
red_channel_client_disconnect_dummy	server/red_channel.c	/^static void red_channel_client_disconnect_dummy(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_event	server/red_channel.c	/^static void red_channel_client_event(int fd, int event, void *data)$/;"	f	file:
red_channel_client_get_client	server/red_channel.c	/^RedClient *red_channel_client_get_client(RedChannelClient *rcc)$/;"	f
red_channel_client_get_marshaller	server/red_channel.c	/^SpiceMarshaller *red_channel_client_get_marshaller(RedChannelClient *rcc)$/;"	f
red_channel_client_get_message_serial	server/red_channel.c	/^uint64_t red_channel_client_get_message_serial(RedChannelClient *rcc)$/;"	f
red_channel_client_get_roundtrip_ms	server/red_channel.c	/^int red_channel_client_get_roundtrip_ms(RedChannelClient *rcc)$/;"	f
red_channel_client_get_stream	server/red_channel.c	/^RedsStream *red_channel_client_get_stream(RedChannelClient *rcc)$/;"	f
red_channel_client_handle_message	server/red_channel.c	/^int red_channel_client_handle_message(RedChannelClient *rcc, uint32_t size,$/;"	f
red_channel_client_handle_pong	server/red_channel.c	/^static void red_channel_client_handle_pong(RedChannelClient *rcc, SpiceMsgPing *ping)$/;"	f	file:
red_channel_client_init_outgoing_messages_window	server/red_channel.c	/^static void red_channel_client_init_outgoing_messages_window(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_init_send_data	server/red_channel.c	/^void red_channel_client_init_send_data(RedChannelClient *rcc, uint16_t msg_type, PipeItem *item)$/;"	f
red_channel_client_is_connected	server/red_channel.c	/^int red_channel_client_is_connected(RedChannelClient *rcc)$/;"	f
red_channel_client_no_item_being_sent	server/red_channel.c	/^int red_channel_client_no_item_being_sent(RedChannelClient *rcc)$/;"	f
red_channel_client_on_input	server/red_channel.c	/^static void red_channel_client_on_input(void *opaque, int n)$/;"	f	file:
red_channel_client_on_output	server/red_channel.c	/^static void red_channel_client_on_output(void *opaque, int n)$/;"	f	file:
red_channel_client_peer_get_out_msg_size	server/red_channel.c	/^static int red_channel_client_peer_get_out_msg_size(void *opaque)$/;"	f	file:
red_channel_client_peer_on_out_block	server/red_channel.c	/^static void red_channel_client_peer_on_out_block(void *opaque)$/;"	f	file:
red_channel_client_peer_prepare_out_msg	server/red_channel.c	/^static void red_channel_client_peer_prepare_out_msg($/;"	f	file:
red_channel_client_ping_timer	server/red_channel.c	/^static void red_channel_client_ping_timer(void *opaque)$/;"	f	file:
red_channel_client_pipe_add	server/red_channel.c	/^void red_channel_client_pipe_add(RedChannelClient *rcc, PipeItem *item)$/;"	f
red_channel_client_pipe_add_after	server/red_channel.c	/^void red_channel_client_pipe_add_after(RedChannelClient *rcc,$/;"	f
red_channel_client_pipe_add_empty_msg	server/red_channel.c	/^void red_channel_client_pipe_add_empty_msg(RedChannelClient *rcc, int msg_type)$/;"	f
red_channel_client_pipe_add_push	server/red_channel.c	/^void red_channel_client_pipe_add_push(RedChannelClient *rcc, PipeItem *item)$/;"	f
red_channel_client_pipe_add_tail	server/red_channel.c	/^void red_channel_client_pipe_add_tail(RedChannelClient *rcc, PipeItem *item)$/;"	f
red_channel_client_pipe_add_tail_no_push	server/red_channel.c	/^void red_channel_client_pipe_add_tail_no_push(RedChannelClient *rcc,$/;"	f
red_channel_client_pipe_add_type	server/red_channel.c	/^void red_channel_client_pipe_add_type(RedChannelClient *rcc, int pipe_item_type)$/;"	f
red_channel_client_pipe_clear	server/red_channel.c	/^void red_channel_client_pipe_clear(RedChannelClient *rcc)$/;"	f
red_channel_client_pipe_item_get	server/red_channel.c	/^static inline PipeItem *red_channel_client_pipe_item_get(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_pipe_item_is_linked	server/red_channel.c	/^int red_channel_client_pipe_item_is_linked(RedChannelClient *rcc,$/;"	f
red_channel_client_pipe_remove	server/red_channel.c	/^static void red_channel_client_pipe_remove(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
red_channel_client_pipe_remove_and_release	server/red_channel.c	/^void red_channel_client_pipe_remove_and_release(RedChannelClient *rcc,$/;"	f
red_channel_client_pre_create_validate	server/red_channel.c	/^static int red_channel_client_pre_create_validate(RedChannel *channel, RedClient  *client)$/;"	f	file:
red_channel_client_push	server/red_channel.c	/^void red_channel_client_push(RedChannelClient *rcc)$/;"	f
red_channel_client_push_ping	server/red_channel.c	/^static void red_channel_client_push_ping(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_push_set_ack	server/red_channel.c	/^void red_channel_client_push_set_ack(RedChannelClient *rcc)$/;"	f
red_channel_client_receive	server/red_channel.c	/^void red_channel_client_receive(RedChannelClient *rcc)$/;"	f
red_channel_client_ref	server/red_channel.c	/^static void red_channel_client_ref(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_release_item	server/red_channel.c	/^static void red_channel_client_release_item(RedChannelClient *rcc, PipeItem *item, int item_pushed)$/;"	f	file:
red_channel_client_release_sent_item	server/red_channel.c	/^static inline void red_channel_client_release_sent_item(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_reset_send_data	server/red_channel.c	/^static void red_channel_client_reset_send_data(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_restart_ping_timer	server/red_channel.c	/^static void red_channel_client_restart_ping_timer(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_restore_main_sender	server/red_channel.c	/^static void red_channel_client_restore_main_sender(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_seamless_migration_done	server/red_channel.c	/^static void red_channel_client_seamless_migration_done(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_send	server/red_channel.c	/^void red_channel_client_send(RedChannelClient *rcc)$/;"	f
red_channel_client_send_empty_msg	server/red_channel.c	/^static void red_channel_client_send_empty_msg(RedChannelClient *rcc, PipeItem *base)$/;"	f	file:
red_channel_client_send_item	server/red_channel.c	/^static void red_channel_client_send_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
red_channel_client_send_message_pending	server/red_channel.c	/^int red_channel_client_send_message_pending(RedChannelClient *rcc)$/;"	f
red_channel_client_send_migrate	server/red_channel.c	/^static void red_channel_client_send_migrate(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_send_ping	server/red_channel.c	/^static void red_channel_client_send_ping(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_send_set_ack	server/red_channel.c	/^static void red_channel_client_send_set_ack(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_set_header_sub_list	server/red_channel.c	/^void red_channel_client_set_header_sub_list(RedChannelClient *rcc, uint32_t sub_list)$/;"	f
red_channel_client_set_message_serial	server/red_channel.c	/^void red_channel_client_set_message_serial(RedChannelClient *rcc, uint64_t serial)$/;"	f
red_channel_client_set_migration_seamless	server/red_channel.c	/^static void red_channel_client_set_migration_seamless(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_set_remote_caps	server/red_channel.c	/^static void red_channel_client_set_remote_caps(RedChannelClient* rcc,$/;"	f	file:
red_channel_client_shutdown	server/red_channel.c	/^void red_channel_client_shutdown(RedChannelClient *rcc)$/;"	f
red_channel_client_start_connectivity_monitoring	server/red_channel.c	/^void red_channel_client_start_connectivity_monitoring(RedChannelClient *rcc, uint32_t timeout_ms)$/;"	f
red_channel_client_start_ping_timer	server/red_channel.c	/^static void red_channel_client_start_ping_timer(RedChannelClient *rcc, uint32_t timeout)$/;"	f	file:
red_channel_client_switch_to_urgent_sender	server/red_channel.c	/^SpiceMarshaller *red_channel_client_switch_to_urgent_sender(RedChannelClient *rcc)$/;"	f
red_channel_client_test_remote_cap	server/red_channel.c	/^int red_channel_client_test_remote_cap(RedChannelClient *rcc, uint32_t cap)$/;"	f
red_channel_client_test_remote_common_cap	server/red_channel.c	/^int red_channel_client_test_remote_common_cap(RedChannelClient *rcc, uint32_t cap)$/;"	f
red_channel_client_unref	server/red_channel.c	/^static void red_channel_client_unref(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_urgent_marshaller_is_active	server/red_channel.c	/^static inline int red_channel_client_urgent_marshaller_is_active(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_wait_outgoing_item	server/red_channel.c	/^int red_channel_client_wait_outgoing_item(RedChannelClient *rcc,$/;"	f
red_channel_client_wait_pipe_item_sent	server/red_channel.c	/^int red_channel_client_wait_pipe_item_sent(RedChannelClient *rcc,$/;"	f
red_channel_client_waiting_for_ack	server/red_channel.c	/^static inline int red_channel_client_waiting_for_ack(RedChannelClient *rcc)$/;"	f	file:
red_channel_client_waits_for_migrate_data	server/red_channel.c	/^int red_channel_client_waits_for_migrate_data(RedChannelClient *rcc)$/;"	f
red_channel_create	server/red_channel.c	/^RedChannel *red_channel_create(int size,$/;"	f
red_channel_create_dummy	server/red_channel.c	/^RedChannel *red_channel_create_dummy(int size, uint32_t type, uint32_t id)$/;"	f
red_channel_create_parser	server/red_channel.c	/^RedChannel *red_channel_create_parser(int size,$/;"	f
red_channel_destroy	server/red_channel.c	/^void red_channel_destroy(RedChannel *channel)$/;"	f
red_channel_disconnect	server/red_channel.c	/^void red_channel_disconnect(RedChannel *channel)$/;"	f
red_channel_get_first_socket	server/red_channel.c	/^int red_channel_get_first_socket(RedChannel *channel)$/;"	f
red_channel_handle_migrate_data	server/red_channel.c	/^static void red_channel_handle_migrate_data(RedChannelClient *rcc, uint32_t size, void *message)$/;"	f	file:
red_channel_handle_migrate_flush_mark	server/red_channel.c	/^static void red_channel_handle_migrate_flush_mark(RedChannelClient *rcc)$/;"	f	file:
red_channel_init_outgoing_messages_window	server/red_channel.c	/^void red_channel_init_outgoing_messages_window(RedChannel *channel)$/;"	f
red_channel_is_connected	server/red_channel.c	/^int red_channel_is_connected(RedChannel *channel)$/;"	f
red_channel_max_pipe_size	server/red_channel.c	/^uint32_t red_channel_max_pipe_size(RedChannel *channel)$/;"	f
red_channel_min_pipe_size	server/red_channel.c	/^uint32_t red_channel_min_pipe_size(RedChannel *channel)$/;"	f
red_channel_no_item_being_sent	server/red_channel.c	/^int red_channel_no_item_being_sent(RedChannel *channel)$/;"	f
red_channel_peer_on_out_msg_done	server/red_channel.c	/^static void red_channel_peer_on_out_msg_done(void *opaque)$/;"	f	file:
red_channel_pipe_item_init	server/red_channel.c	/^void red_channel_pipe_item_init(RedChannel *channel, PipeItem *item, int type)$/;"	f
red_channel_pipes_add_empty_msg	server/red_channel.c	/^void red_channel_pipes_add_empty_msg(RedChannel *channel, int msg_type)$/;"	f
red_channel_pipes_add_type	server/red_channel.c	/^void red_channel_pipes_add_type(RedChannel *channel, int pipe_item_type)$/;"	f
red_channel_pipes_create_batch	server/red_channel.c	/^static void red_channel_pipes_create_batch(RedChannel *channel,$/;"	f	file:
red_channel_pipes_new_add	server/red_channel.c	/^void red_channel_pipes_new_add(RedChannel *channel, new_pipe_item_t creator, void *data)$/;"	f
red_channel_pipes_new_add_push	server/red_channel.c	/^void red_channel_pipes_new_add_push(RedChannel *channel,$/;"	f
red_channel_pipes_new_add_tail	server/red_channel.c	/^void red_channel_pipes_new_add_tail(RedChannel *channel, new_pipe_item_t creator, void *data)$/;"	f
red_channel_push	server/red_channel.c	/^void red_channel_push(RedChannel *channel)$/;"	f
red_channel_push_set_ack	server/red_channel.c	/^void red_channel_push_set_ack(RedChannel *channel)$/;"	f
red_channel_receive	server/red_channel.c	/^void red_channel_receive(RedChannel *channel)$/;"	f
red_channel_ref	server/red_channel.c	/^static void red_channel_ref(RedChannel *channel)$/;"	f	file:
red_channel_register_client_cbs	server/red_channel.c	/^void red_channel_register_client_cbs(RedChannel *channel, ClientCbs *client_cbs)$/;"	f
red_channel_remove_client	server/red_channel.c	/^static void red_channel_remove_client(RedChannelClient *rcc)$/;"	f	file:
red_channel_send	server/red_channel.c	/^void red_channel_send(RedChannel *channel)$/;"	f
red_channel_set_cap	server/red_channel.c	/^void red_channel_set_cap(RedChannel *channel, uint32_t cap)$/;"	f
red_channel_set_common_cap	server/red_channel.c	/^void red_channel_set_common_cap(RedChannel *channel, uint32_t cap)$/;"	f
red_channel_set_data	server/red_channel.c	/^void red_channel_set_data(RedChannel *channel, void *data)$/;"	f
red_channel_sum_pipes_size	server/red_channel.c	/^uint32_t red_channel_sum_pipes_size(RedChannel *channel)$/;"	f
red_channel_test_remote_cap	server/red_channel.c	/^int red_channel_test_remote_cap(RedChannel *channel, uint32_t cap)$/;"	f
red_channel_test_remote_common_cap	server/red_channel.c	/^int red_channel_test_remote_common_cap(RedChannel *channel, uint32_t cap)$/;"	f
red_channel_unref	server/red_channel.c	/^static void red_channel_unref(RedChannel *channel)$/;"	f	file:
red_channel_wait_all_sent	server/red_channel.c	/^int red_channel_wait_all_sent(RedChannel *channel,$/;"	f
red_channel_waits_for_migrate_data	server/red_channel.c	/^int red_channel_waits_for_migrate_data(RedChannel *channel)$/;"	f
red_clear_surface_drawables_from_pipe	server/red_worker.c	/^static int red_clear_surface_drawables_from_pipe(DisplayChannelClient *dcc, int surface_id,$/;"	f	file:
red_clear_surface_drawables_from_pipes	server/red_worker.c	/^static void red_clear_surface_drawables_from_pipes(RedWorker *worker,$/;"	f	file:
red_client_add_channel	server/red_channel.c	/^static void red_client_add_channel(RedClient *client, RedChannelClient *rcc)$/;"	f	file:
red_client_destroy	server/red_channel.c	/^void red_client_destroy(RedClient *client)$/;"	f
red_client_during_migrate_at_target	server/red_channel.c	/^int red_client_during_migrate_at_target(RedClient *client)$/;"	f
red_client_get_channel	server/red_channel.c	/^static RedChannelClient *red_client_get_channel(RedClient *client, int type, int id)$/;"	f	file:
red_client_get_main	server/red_channel.c	/^MainChannelClient *red_client_get_main(RedClient *client) {$/;"	f
red_client_migrate	server/red_channel.c	/^void red_client_migrate(RedClient *client)$/;"	f
red_client_new	server/red_channel.c	/^RedClient *red_client_new(int migrated)$/;"	f
red_client_ref	server/red_channel.c	/^RedClient *red_client_ref(RedClient *client)$/;"	f
red_client_remove_channel	server/red_channel.c	/^static void red_client_remove_channel(RedChannelClient *rcc)$/;"	f	file:
red_client_semi_seamless_migrate_complete	server/red_channel.c	/^void red_client_semi_seamless_migrate_complete(RedClient *client)$/;"	f
red_client_set_main	server/red_channel.c	/^void red_client_set_main(RedClient *client, MainChannelClient *mcc) {$/;"	f
red_client_set_migration_seamless	server/red_channel.c	/^void red_client_set_migration_seamless(RedClient *client) \/\/ dest$/;"	f
red_client_unref	server/red_channel.c	/^RedClient *red_client_unref(RedClient *client)$/;"	f
red_compress_image	server/red_worker.c	/^static inline int red_compress_image(DisplayChannelClient *dcc,$/;"	f	file:
red_connect_cursor	server/red_worker.c	/^static void red_connect_cursor(RedWorker *worker, RedClient *client, RedsStream *stream,$/;"	f	file:
red_create_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *red_create_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
red_create_h264_stream	server/red_worker.c	/^static void red_create_h264_stream(DisplayChannelClient *dcc, Stream *stream)$/;"	f	file:
red_create_pixmap_cache	server/red_worker.c	/^static PixmapCache *red_create_pixmap_cache(RedClient *client, uint8_t id, int64_t size)$/;"	f	file:
red_create_restored_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *red_create_restored_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
red_create_stream	server/red_worker.c	/^static void red_create_stream(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_create_surface	server/red_worker.c	/^static inline void red_create_surface(RedWorker *worker, uint32_t surface_id, uint32_t width,$/;"	f	file:
red_create_surface_item	server/red_worker.c	/^static inline void red_create_surface_item(DisplayChannelClient *dcc, int surface_id)$/;"	f	file:
red_current_add	server/red_worker.c	/^static inline int red_current_add(RedWorker *worker, Ring *ring, Drawable *drawable)$/;"	f	file:
red_current_add_equal	server/red_worker.c	/^static inline int red_current_add_equal(RedWorker *worker, DrawItem *item, TreeItem *other)$/;"	f	file:
red_current_add_qxl	server/red_worker.c	/^static inline int red_current_add_qxl(RedWorker *worker, Ring *ring, Drawable *drawable,$/;"	f	file:
red_current_add_with_shadow	server/red_worker.c	/^static inline int red_current_add_with_shadow(RedWorker *worker, Ring *ring, Drawable *item,$/;"	f	file:
red_current_clear	server/red_worker.c	/^static void red_current_clear(RedWorker *worker, int surface_id)$/;"	f	file:
red_current_flush	server/red_worker.c	/^static void red_current_flush(RedWorker *worker, int surface_id)$/;"	f	file:
red_cursor	server/red_worker.c	/^    RedCursorCmd *red_cursor;$/;"	m	struct:CursorItem	file:
red_cursor	server/red_worker.c	/^    SpiceCursor red_cursor;$/;"	m	struct:LocalCursor	file:
red_cursor_marshall_inval	server/red_worker.c	/^static void red_cursor_marshall_inval(RedChannelClient *rcc,$/;"	f	file:
red_cursor_reset	server/red_worker.c	/^static inline void red_cursor_reset(RedWorker *worker)$/;"	f	file:
red_dec_surfaces_drawable_dependencies	server/red_worker.c	/^static inline void red_dec_surfaces_drawable_dependencies(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_destroy_streams	server/red_worker.c	/^static void red_destroy_streams(RedWorker *worker)$/;"	f	file:
red_destroy_surface	server/red_worker.c	/^static inline void red_destroy_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
red_destroy_surface_item	server/red_worker.c	/^static inline void red_destroy_surface_item(RedWorker *worker,$/;"	f	file:
red_detach_stream	server/red_worker.c	/^static inline void red_detach_stream(RedWorker *worker, Stream *stream, int detach_sized)$/;"	f	file:
red_detach_stream_gracefully	server/red_worker.c	/^static inline void red_detach_stream_gracefully(RedWorker *worker, Stream *stream,$/;"	f	file:
red_detach_streams_behind	server/red_worker.c	/^static void red_detach_streams_behind(RedWorker *worker, QRegion *region, Drawable *drawable)$/;"	f	file:
red_disconnect_all_display_TODO_remove_me	server/red_worker.c	/^void red_disconnect_all_display_TODO_remove_me(RedChannel *channel)$/;"	f
red_disconnect_cursor	server/red_worker.c	/^static void red_disconnect_cursor(RedChannel *channel)$/;"	f	file:
red_dispatcher	server/red_worker.c	/^    RedDispatcher *red_dispatcher;$/;"	m	struct:RedWorker	file:
red_dispatcher	server/red_worker.h	/^    RedDispatcher *red_dispatcher;$/;"	m	struct:WorkerInitData
red_dispatcher_add_memslot	server/red_dispatcher.c	/^static void red_dispatcher_add_memslot(RedDispatcher *dispatcher, QXLDevMemSlot *mem_slot)$/;"	f	file:
red_dispatcher_add_memslot_async	server/red_dispatcher.c	/^static void red_dispatcher_add_memslot_async(RedDispatcher *dispatcher, QXLDevMemSlot *mem_slot, uint64_t cookie)$/;"	f	file:
red_dispatcher_add_renderer	server/red_dispatcher.c	/^int red_dispatcher_add_renderer(const char *name)$/;"	f
red_dispatcher_async_complete	server/red_dispatcher.c	/^void red_dispatcher_async_complete(struct RedDispatcher *dispatcher,$/;"	f
red_dispatcher_check_qxl_version	server/red_dispatcher.c	/^static int red_dispatcher_check_qxl_version(RedDispatcher *rd, int major, int minor)$/;"	f	file:
red_dispatcher_client_monitors_config	server/red_dispatcher.c	/^void red_dispatcher_client_monitors_config(VDAgentMonitorsConfig *monitors_config)$/;"	f
red_dispatcher_count	server/red_dispatcher.c	/^int red_dispatcher_count(void)$/;"	f
red_dispatcher_create_primary_surface	server/red_dispatcher.c	/^red_dispatcher_create_primary_surface(RedDispatcher *dispatcher, uint32_t surface_id,$/;"	f	file:
red_dispatcher_create_primary_surface_async	server/red_dispatcher.c	/^red_dispatcher_create_primary_surface_async(RedDispatcher *dispatcher, uint32_t surface_id,$/;"	f	file:
red_dispatcher_create_primary_surface_complete	server/red_dispatcher.c	/^static void red_dispatcher_create_primary_surface_complete(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_create_primary_surface_sync	server/red_dispatcher.c	/^red_dispatcher_create_primary_surface_sync(RedDispatcher *dispatcher, uint32_t surface_id,$/;"	f	file:
red_dispatcher_cursor_channel_create	server/red_dispatcher.c	/^static RedChannel *red_dispatcher_cursor_channel_create(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_cursor_migrate	server/red_dispatcher.c	/^static void red_dispatcher_cursor_migrate(RedChannelClient *rcc)$/;"	f	file:
red_dispatcher_del_memslot	server/red_dispatcher.c	/^static void red_dispatcher_del_memslot(RedDispatcher *dispatcher, uint32_t slot_group_id, uint32_t slot_id)$/;"	f	file:
red_dispatcher_destroy_primary_surface	server/red_dispatcher.c	/^red_dispatcher_destroy_primary_surface(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_primary_surface_async	server/red_dispatcher.c	/^red_dispatcher_destroy_primary_surface_async(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_primary_surface_complete	server/red_dispatcher.c	/^static void red_dispatcher_destroy_primary_surface_complete(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_destroy_primary_surface_sync	server/red_dispatcher.c	/^red_dispatcher_destroy_primary_surface_sync(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_surface_wait	server/red_dispatcher.c	/^static void red_dispatcher_destroy_surface_wait(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_surface_wait_async	server/red_dispatcher.c	/^static void red_dispatcher_destroy_surface_wait_async(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_surface_wait_sync	server/red_dispatcher.c	/^static void red_dispatcher_destroy_surface_wait_sync(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_destroy_surfaces	server/red_dispatcher.c	/^static void red_dispatcher_destroy_surfaces(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_destroy_surfaces_async	server/red_dispatcher.c	/^static void red_dispatcher_destroy_surfaces_async(RedDispatcher *dispatcher, uint64_t cookie)$/;"	f	file:
red_dispatcher_disconnect_cursor_peer	server/red_dispatcher.c	/^static void red_dispatcher_disconnect_cursor_peer(RedChannelClient *rcc)$/;"	f	file:
red_dispatcher_disconnect_display_peer	server/red_dispatcher.c	/^static void red_dispatcher_disconnect_display_peer(RedChannelClient *rcc)$/;"	f	file:
red_dispatcher_display_channel_create	server/red_dispatcher.c	/^static RedChannel *red_dispatcher_display_channel_create(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_display_migrate	server/red_dispatcher.c	/^static void red_dispatcher_display_migrate(RedChannelClient *rcc)$/;"	f	file:
red_dispatcher_driver_unload	server/red_dispatcher.c	/^static void red_dispatcher_driver_unload(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_flush_surfaces_async	server/red_dispatcher.c	/^static void red_dispatcher_flush_surfaces_async(RedDispatcher *dispatcher, uint64_t cookie)$/;"	f	file:
red_dispatcher_get_dispatcher	server/red_dispatcher.c	/^struct Dispatcher *red_dispatcher_get_dispatcher(RedDispatcher *red_dispatcher)$/;"	f
red_dispatcher_init	server/red_dispatcher.c	/^void red_dispatcher_init(QXLInstance *qxl)$/;"	f
red_dispatcher_loadvm_commands	server/red_dispatcher.c	/^static void red_dispatcher_loadvm_commands(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_monitors_config_async	server/red_dispatcher.c	/^static void red_dispatcher_monitors_config_async(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_on_ic_change	server/red_dispatcher.c	/^void red_dispatcher_on_ic_change(void)$/;"	f
red_dispatcher_on_sv_change	server/red_dispatcher.c	/^void red_dispatcher_on_sv_change(void)$/;"	f
red_dispatcher_on_svc_change	server/red_dispatcher.c	/^void red_dispatcher_on_svc_change(void)$/;"	f
red_dispatcher_on_vm_start	server/red_dispatcher.c	/^void red_dispatcher_on_vm_start(void)$/;"	f
red_dispatcher_on_vm_stop	server/red_dispatcher.c	/^void red_dispatcher_on_vm_stop(void)$/;"	f
red_dispatcher_oom	server/red_dispatcher.c	/^static void red_dispatcher_oom(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_qxl_count	server/red_dispatcher.c	/^int red_dispatcher_qxl_count(void)$/;"	f
red_dispatcher_qxl_ram_size	server/red_dispatcher.c	/^uint32_t red_dispatcher_qxl_ram_size(void)$/;"	f
red_dispatcher_reset_cursor	server/red_dispatcher.c	/^static void red_dispatcher_reset_cursor(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_reset_image_cache	server/red_dispatcher.c	/^static void red_dispatcher_reset_image_cache(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_reset_memslots	server/red_dispatcher.c	/^static void red_dispatcher_reset_memslots(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_set_cursor_peer	server/red_dispatcher.c	/^static void red_dispatcher_set_cursor_peer(RedChannel *channel, RedClient *client, RedsStream *stream,$/;"	f	file:
red_dispatcher_set_dispatcher_opaque	server/red_dispatcher.c	/^void red_dispatcher_set_dispatcher_opaque(struct RedDispatcher *red_dispatcher,$/;"	f
red_dispatcher_set_display_peer	server/red_dispatcher.c	/^static void red_dispatcher_set_display_peer(RedChannel *channel, RedClient *client,$/;"	f	file:
red_dispatcher_set_mm_time	server/red_dispatcher.c	/^void red_dispatcher_set_mm_time(uint32_t mm_time)$/;"	f
red_dispatcher_set_mouse_mode	server/red_dispatcher.c	/^void red_dispatcher_set_mouse_mode(uint32_t mode)$/;"	f
red_dispatcher_start	server/red_dispatcher.c	/^static void red_dispatcher_start(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_stop	server/red_dispatcher.c	/^static void red_dispatcher_stop(RedDispatcher *dispatcher)$/;"	f	file:
red_dispatcher_update_area	server/red_dispatcher.c	/^static void red_dispatcher_update_area(RedDispatcher *dispatcher, uint32_t surface_id,$/;"	f	file:
red_dispatcher_update_area_async	server/red_dispatcher.c	/^static void red_dispatcher_update_area_async(RedDispatcher *dispatcher,$/;"	f	file:
red_dispatcher_use_client_monitors_config	server/red_dispatcher.c	/^int red_dispatcher_use_client_monitors_config(void)$/;"	f
red_dispatcher_wakeup	server/red_dispatcher.c	/^static void red_dispatcher_wakeup(RedDispatcher *dispatcher)$/;"	f	file:
red_display_add_glz_drawable_instance	server/red_worker.c	/^static GlzDrawableInstanceItem *red_display_add_glz_drawable_instance(RedGlzDrawable *glz_drawable)$/;"	f	file:
red_display_add_image_to_pixmap_cache	server/red_worker.c	/^static inline void red_display_add_image_to_pixmap_cache(RedChannelClient *rcc,$/;"	f	file:
red_display_alloc_compress_buf	server/red_worker.c	/^static inline RedCompressBuf *red_display_alloc_compress_buf(DisplayChannelClient *dcc)$/;"	f	file:
red_display_cc_free_glz_drawables	server/red_worker.c	/^static void red_display_cc_free_glz_drawables(RedChannelClient *rcc)$/;"	f	file:
red_display_clear_glz_drawables	server/red_worker.c	/^static void red_display_clear_glz_drawables(DisplayChannel *display_channel)$/;"	f	file:
red_display_client_clear_glz_drawables	server/red_worker.c	/^static void red_display_client_clear_glz_drawables(DisplayChannelClient *dcc)$/;"	f	file:
red_display_client_init_streams	server/red_worker.c	/^static void red_display_client_init_streams(DisplayChannelClient *dcc)$/;"	f	file:
red_display_create_stream	server/red_worker.c	/^static void red_display_create_stream(DisplayChannelClient *dcc, Stream *stream)$/;"	f	file:
red_display_destroy_compress_bufs	server/red_worker.c	/^static void red_display_destroy_compress_bufs(DisplayChannel *display_channel)$/;"	f	file:
red_display_destroy_streams_agents	server/red_worker.c	/^static void red_display_destroy_streams_agents(DisplayChannelClient *dcc)$/;"	f	file:
red_display_detach_stream_gracefully	server/red_worker.c	/^static inline void red_display_detach_stream_gracefully(DisplayChannelClient *dcc,$/;"	f	file:
red_display_drawable_is_in_pipe	server/red_worker.c	/^static int red_display_drawable_is_in_pipe(DisplayChannelClient *dcc, Drawable *drawable)$/;"	f	file:
red_display_free_compress_buf	server/red_worker.c	/^static void red_display_free_compress_buf(DisplayChannelClient *dcc,$/;"	f	file:
red_display_free_glz_drawable	server/red_worker.c	/^static void red_display_free_glz_drawable(DisplayChannelClient *dcc, RedGlzDrawable *drawable)$/;"	f	file:
red_display_free_glz_drawable_instance	server/red_worker.c	/^static void red_display_free_glz_drawable_instance(DisplayChannelClient *dcc,$/;"	f	file:
red_display_free_some_independent_glz_drawables	server/red_worker.c	/^static int red_display_free_some_independent_glz_drawables(DisplayChannelClient *dcc)$/;"	f	file:
red_display_get_glz_drawable	server/red_worker.c	/^static RedGlzDrawable *red_display_get_glz_drawable(DisplayChannelClient *dcc, Drawable *drawable)$/;"	f	file:
red_display_handle_glz_drawables_to_free	server/red_worker.c	/^static void red_display_handle_glz_drawables_to_free(DisplayChannelClient* dcc)$/;"	f	file:
red_display_init_glz_data	server/red_worker.c	/^static inline void red_display_init_glz_data(DisplayChannelClient *dcc)$/;"	f	file:
red_display_marshall_stream_clip	server/red_worker.c	/^static void red_display_marshall_stream_clip(RedChannelClient *rcc,$/;"	f	file:
red_display_marshall_stream_end	server/red_worker.c	/^static void red_display_marshall_stream_end(RedChannelClient *rcc,$/;"	f	file:
red_display_marshall_stream_start	server/red_worker.c	/^static void red_display_marshall_stream_start(RedChannelClient *rcc,$/;"	f	file:
red_display_marshall_upgrade	server/red_worker.c	/^static void red_display_marshall_upgrade(RedChannelClient *rcc, SpiceMarshaller *m,$/;"	f	file:
red_display_release_stream	server/red_worker.c	/^static void red_display_release_stream(RedWorker *worker, StreamAgent *agent)$/;"	f	file:
red_display_release_stream_clip	server/red_worker.c	/^static void red_display_release_stream_clip(RedWorker *worker, StreamClipItem *item)$/;"	f	file:
red_display_reset_compress_buf	server/red_worker.c	/^static void red_display_reset_compress_buf(DisplayChannelClient *dcc)$/;"	f	file:
red_display_reset_send_data	server/red_worker.c	/^static inline void red_display_reset_send_data(DisplayChannelClient *dcc)$/;"	f	file:
red_display_stream_agent_stop	server/red_worker.c	/^static void red_display_stream_agent_stop(DisplayChannelClient *dcc, StreamAgent *agent)$/;"	f	file:
red_display_update_streams_max_latency	server/red_worker.c	/^static void red_display_update_streams_max_latency(DisplayChannelClient *dcc, StreamAgent *remove_agent)$/;"	f	file:
red_disply_start_streams	server/red_worker.c	/^static void red_disply_start_streams(DisplayChannelClient *dcc)$/;"	f	file:
red_draw_drawable	server/red_worker.c	/^static void red_draw_drawable(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_draw_drawable	server/red_worker.c	1071;"	d	file:
red_draw_qxl_drawable	server/red_worker.c	/^static void red_draw_qxl_drawable(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_drawable	server/red_worker.c	/^    RedDrawable *red_drawable;$/;"	m	struct:Drawable	file:
red_drawable	server/red_worker.c	/^    RedDrawable *red_drawable;$/;"	m	struct:RedGlzDrawable	file:
red_drawable_count	server/red_worker.c	/^    uint32_t red_drawable_count;$/;"	m	struct:RedWorker	file:
red_drawable_new	server/red_worker.c	/^static RedDrawable *red_drawable_new(void)$/;"	f	file:
red_flush_source_surfaces	server/red_worker.c	/^static void red_flush_source_surfaces(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_free_some	server/red_worker.c	/^static void red_free_some(RedWorker *worker)$/;"	f	file:
red_free_stream	server/red_worker.c	/^static inline void red_free_stream(RedWorker *worker, Stream *stream)$/;"	f	file:
red_freeze_glz	server/red_worker.c	/^static void red_freeze_glz(DisplayChannelClient *dcc)$/;"	f	file:
red_get_alpha_blend_ptr	server/red_parse_qxl.c	/^static void red_get_alpha_blend_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_alpha_blend_ptr_compat	server/red_parse_qxl.c	/^static void red_get_alpha_blend_ptr_compat(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_area	server/red_worker.c	/^static void red_get_area(RedWorker *worker, int surface_id, const SpiceRect *area, uint8_t *dest,$/;"	f	file:
red_get_blackness_ptr	server/red_parse_qxl.c	/^static void red_get_blackness_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_blend_ptr	server/red_parse_qxl.c	/^static void red_get_blend_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_brush_ptr	server/red_parse_qxl.c	/^static void red_get_brush_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_clip_ptr	server/red_parse_qxl.c	/^static void red_get_clip_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_clip_rects	server/red_parse_qxl.c	/^static SpiceClipRects *red_get_clip_rects(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_compat_drawable	server/red_parse_qxl.c	/^static int red_get_compat_drawable(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_composite_ptr	server/red_parse_qxl.c	/^static void red_get_composite_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_copy_ptr	server/red_parse_qxl.c	/^static int red_get_copy_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_cursor	server/red_parse_qxl.c	/^static int red_get_cursor(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_cursor_cmd	server/red_parse_qxl.c	/^int red_get_cursor_cmd(RedMemSlotInfo *slots, int group_id,$/;"	f
red_get_data_chunks	server/red_parse_qxl.c	/^static size_t red_get_data_chunks(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_data_chunks_ptr	server/red_parse_qxl.c	/^static size_t red_get_data_chunks_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_drawable	server/red_parse_qxl.c	/^int red_get_drawable(RedMemSlotInfo *slots, int group_id,$/;"	f
red_get_fill_ptr	server/red_parse_qxl.c	/^static void red_get_fill_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *red_get_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
red_get_image	server/red_parse_qxl.c	/^static SpiceImage *red_get_image(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_image_data_chunked	server/red_parse_qxl.c	/^static SpiceChunks *red_get_image_data_chunked(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_image_data_flat	server/red_parse_qxl.c	/^static SpiceChunks *red_get_image_data_flat(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_image_line	server/red_worker.c	/^static inline uint8_t *red_get_image_line(SpiceChunks *chunks, size_t *offset,$/;"	f	file:
red_get_invers_ptr	server/red_parse_qxl.c	/^static void red_get_invers_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_message	server/red_parse_qxl.c	/^int red_get_message(RedMemSlotInfo *slots, int group_id,$/;"	f
red_get_native_drawable	server/red_parse_qxl.c	/^static int red_get_native_drawable(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_opaque_ptr	server/red_parse_qxl.c	/^static void red_get_opaque_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_path	server/red_parse_qxl.c	/^static SpicePath *red_get_path(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_pixmap_cache	server/red_worker.c	/^static PixmapCache *red_get_pixmap_cache(RedClient *client, uint8_t id, int64_t size)$/;"	f	file:
red_get_point16_ptr	server/red_parse_qxl.c	/^static void red_get_point16_ptr(SpicePoint16 *red, QXLPoint16 *qxl)$/;"	f	file:
red_get_point_ptr	server/red_parse_qxl.c	/^static void red_get_point_ptr(SpicePoint *red, QXLPoint *qxl)$/;"	f	file:
red_get_qmask_ptr	server/red_parse_qxl.c	/^static void red_get_qmask_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_rect_ptr	server/red_parse_qxl.c	/^void red_get_rect_ptr(SpiceRect *red, const QXLRect *qxl)$/;"	f
red_get_rop3_ptr	server/red_parse_qxl.c	/^static void red_get_rop3_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_streams_timout	server/red_worker.c	/^static inline unsigned int red_get_streams_timout(RedWorker *worker)$/;"	f	file:
red_get_string	server/red_parse_qxl.c	/^static SpiceString *red_get_string(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_stroke_ptr	server/red_parse_qxl.c	/^static int red_get_stroke_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_surface_cmd	server/red_parse_qxl.c	/^int red_get_surface_cmd(RedMemSlotInfo *slots, int group_id,$/;"	f
red_get_text_ptr	server/red_parse_qxl.c	/^static void red_get_text_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_transparent_ptr	server/red_parse_qxl.c	/^static void red_get_transparent_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_get_update_cmd	server/red_parse_qxl.c	/^int red_get_update_cmd(RedMemSlotInfo *slots, int group_id,$/;"	f
red_get_whiteness_ptr	server/red_parse_qxl.c	/^static void red_get_whiteness_ptr(RedMemSlotInfo *slots, int group_id,$/;"	f	file:
red_glz_compress_image	server/red_worker.c	/^static inline int red_glz_compress_image(DisplayChannelClient *dcc,$/;"	f	file:
red_glz_drawable	server/red_worker.c	/^    RedGlzDrawable         *red_glz_drawable;$/;"	m	struct:GlzDrawableInstanceItem	file:
red_handle_depends_on_target_surface	server/red_worker.c	/^static inline int red_handle_depends_on_target_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
red_handle_drawable_surfaces_client_synced	server/red_worker.c	/^static inline void red_handle_drawable_surfaces_client_synced($/;"	f	file:
red_handle_self_bitmap	server/red_worker.c	/^static inline int red_handle_self_bitmap(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_handle_streams_timout	server/red_worker.c	/^static inline void red_handle_streams_timout(RedWorker *worker)$/;"	f	file:
red_handle_surfaces_dependencies	server/red_worker.c	/^static inline int red_handle_surfaces_dependencies(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_icon	client/x11/res.cpp	/^static const IconHeader red_icon = {$/;"	v	file:
red_inc_surfaces_drawable_dependencies	server/red_worker.c	/^static inline void red_inc_surfaces_drawable_dependencies(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_init	server/red_worker.c	/^static void red_init(RedWorker *worker, WorkerInitData *init_data)$/;"	f	file:
red_init_jpeg	server/red_worker.c	/^static inline void red_init_jpeg(RedWorker *worker)$/;"	f	file:
red_init_lz	server/red_worker.c	/^static inline void red_init_lz(RedWorker *worker)$/;"	f	file:
red_init_more_video_compress	server/red_worker.c	/^static void red_init_more_video_compress(RedWorker *worker)$/;"	f	file:
red_init_quic	server/red_worker.c	/^static inline void red_init_quic(RedWorker *worker)$/;"	f	file:
red_init_streams	server/red_worker.c	/^static void red_init_streams(RedWorker *worker)$/;"	f	file:
red_init_zlib	server/red_worker.c	/^static inline void red_init_zlib(RedWorker *worker)$/;"	f	file:
red_is_next_stream_frame	server/red_worker.c	/^static inline int red_is_next_stream_frame(RedWorker *worker, const Drawable *candidate,$/;"	f	file:
red_is_stream_start	server/red_worker.c	/^static inline int red_is_stream_start(Drawable *drawable)$/;"	f	file:
red_jpeg_compress_image	server/red_worker.c	/^static int red_jpeg_compress_image(DisplayChannelClient *dcc, SpiceImage *dest,$/;"	f	file:
red_ket_cegui_scan	client/gui/gui.cpp	/^static inline CEGUI::Key::Scan red_ket_cegui_scan(RedKey key)$/;"	f	file:
red_linearize_chunk	server/red_parse_qxl.c	/^static uint8_t *red_linearize_chunk(RedDataChunk *head, size_t size, bool *free_chunk)$/;"	f	file:
red_lossy_marshall_qxl_copy_bits	server/red_worker.c	/^static void red_lossy_marshall_qxl_copy_bits(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_alpha_blend	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_alpha_blend(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_blackness	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_blackness(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_blend	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_blend(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_composite	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_composite(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_copy	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_copy(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_fill	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_fill(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_inverse	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_inverse(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_opaque	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_opaque(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_rop3	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_rop3(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_stroke	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_stroke(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_text	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_text(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_transparent	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_transparent(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_draw_whiteness	server/red_worker.c	/^static void red_lossy_marshall_qxl_draw_whiteness(RedWorker *worker,$/;"	f	file:
red_lossy_marshall_qxl_drawable	server/red_worker.c	/^static void red_lossy_marshall_qxl_drawable(RedWorker *worker, RedChannelClient *rcc,$/;"	f	file:
red_lz_compress_image	server/red_worker.c	/^static inline int red_lz_compress_image(DisplayChannelClient *dcc,$/;"	f	file:
red_marshall_cursor	server/red_worker.c	/^static void red_marshall_cursor(RedChannelClient *rcc,$/;"	f	file:
red_marshall_cursor_init	server/red_worker.c	/^static void red_marshall_cursor_init(RedChannelClient *rcc, SpiceMarshaller *base_marshaller,$/;"	f	file:
red_marshall_image	server/red_worker.c	/^static void red_marshall_image(RedChannelClient *rcc, SpiceMarshaller *m, ImageItem *item)$/;"	f	file:
red_marshall_inval	server/red_worker.c	/^static inline void red_marshall_inval(RedChannelClient *rcc,$/;"	f	file:
red_marshall_monitors_config	server/red_worker.c	/^static void red_marshall_monitors_config(RedChannelClient *rcc, SpiceMarshaller *base_marshaller,$/;"	f	file:
red_marshall_qxl_copy_bits	server/red_worker.c	/^static void red_marshall_qxl_copy_bits(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_alpha_blend	server/red_worker.c	/^static FillBitsType red_marshall_qxl_draw_alpha_blend(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_blackness	server/red_worker.c	/^static void red_marshall_qxl_draw_blackness(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_blend	server/red_worker.c	/^static void red_marshall_qxl_draw_blend(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_composite	server/red_worker.c	/^static void red_marshall_qxl_draw_composite(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_copy	server/red_worker.c	/^static FillBitsType red_marshall_qxl_draw_copy(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_fill	server/red_worker.c	/^static void red_marshall_qxl_draw_fill(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_inverse	server/red_worker.c	/^static void red_marshall_qxl_draw_inverse(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_opaque	server/red_worker.c	/^static FillBitsType red_marshall_qxl_draw_opaque(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_rop3	server/red_worker.c	/^static void red_marshall_qxl_draw_rop3(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_stroke	server/red_worker.c	/^static void red_marshall_qxl_draw_stroke(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_text	server/red_worker.c	/^static void red_marshall_qxl_draw_text(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_transparent	server/red_worker.c	/^static void red_marshall_qxl_draw_transparent(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_draw_whiteness	server/red_worker.c	/^static void red_marshall_qxl_draw_whiteness(RedWorker *worker,$/;"	f	file:
red_marshall_qxl_drawable	server/red_worker.c	/^static inline void red_marshall_qxl_drawable(RedWorker *worker, RedChannelClient *rcc,$/;"	f	file:
red_marshall_stream_activate_report	server/red_worker.c	/^static void red_marshall_stream_activate_report(RedChannelClient *rcc,$/;"	f	file:
red_marshall_stream_data	server/red_worker.c	/^static inline int red_marshall_stream_data(RedChannelClient *rcc,$/;"	f	file:
red_marshall_stream_h264_data	server/red_worker.c	/^static inline int red_marshall_stream_h264_data(RedChannelClient *rcc,$/;"	f	file:
red_marshall_surface_create	server/red_worker.c	/^static void red_marshall_surface_create(RedChannelClient *rcc,$/;"	f	file:
red_marshall_surface_destroy	server/red_worker.c	/^static void red_marshall_surface_destroy(RedChannelClient *rcc,$/;"	f	file:
red_marshall_verb	server/red_worker.c	/^static inline void red_marshall_verb(RedChannelClient *rcc, uint16_t verb)$/;"	f	file:
red_memslot_info_add_slot	server/red_memslots.c	/^void red_memslot_info_add_slot(RedMemSlotInfo *info, uint32_t slot_group_id, uint32_t slot_id,$/;"	f
red_memslot_info_del_slot	server/red_memslots.c	/^void red_memslot_info_del_slot(RedMemSlotInfo *info, uint32_t slot_group_id, uint32_t slot_id)$/;"	f
red_memslot_info_init	server/red_memslots.c	/^void red_memslot_info_init(RedMemSlotInfo *info,$/;"	f
red_memslot_info_reset	server/red_memslots.c	/^void red_memslot_info_reset(RedMemSlotInfo *info)$/;"	f
red_migrate_cursor	server/red_worker.c	/^static void red_migrate_cursor(RedWorker *worker, RedChannelClient *rcc)$/;"	f	file:
red_migrate_display	server/red_worker.c	/^static void red_migrate_display(RedWorker *worker, RedChannelClient *rcc)$/;"	f	file:
red_monitors_config_item_add	server/red_worker.c	/^static inline void red_monitors_config_item_add(DisplayChannelClient *dcc)$/;"	f	file:
red_now	server/red_time.h	/^static inline uint64_t red_now(void)$/;"	f
red_peer_handle_incoming	server/red_channel.c	/^static void red_peer_handle_incoming(RedsStream *stream, IncomingHandler *handler)$/;"	f	file:
red_peer_handle_outgoing	server/red_channel.c	/^static void red_peer_handle_outgoing(RedsStream *stream, OutgoingHandler *handler)$/;"	f	file:
red_peer_receive	server/red_channel.c	/^static int red_peer_receive(RedsStream *stream, uint8_t *buf, uint32_t size)$/;"	f	file:
red_pipe_add_drawable	server/red_worker.c	/^static inline void red_pipe_add_drawable(DisplayChannelClient *dcc, Drawable *drawable)$/;"	f	file:
red_pipe_add_drawable_to_tail	server/red_worker.c	/^static inline void red_pipe_add_drawable_to_tail(DisplayChannelClient *dcc, Drawable *drawable)$/;"	f	file:
red_pipe_add_image_item	server/red_worker.c	/^static inline void red_pipe_add_image_item(DisplayChannelClient *dcc, ImageItem *item)$/;"	f	file:
red_pipe_add_image_item_after	server/red_worker.c	/^static inline void red_pipe_add_image_item_after(DisplayChannelClient *dcc, ImageItem *item,$/;"	f	file:
red_pipe_add_verb	server/red_worker.c	/^static void red_pipe_add_verb(RedChannelClient* rcc, uint16_t verb)$/;"	f	file:
red_pipe_get_tail	server/red_worker.c	/^static inline PipeItem *red_pipe_get_tail(DisplayChannelClient *dcc)$/;"	f	file:
red_pipe_replace_rendered_drawables_with_images	server/red_worker.c	/^static void red_pipe_replace_rendered_drawables_with_images(RedWorker *worker,$/;"	f	file:
red_pipes_add_drawable	server/red_worker.c	/^static inline void red_pipes_add_drawable(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_pipes_add_drawable_after	server/red_worker.c	/^static inline void red_pipes_add_drawable_after(RedWorker *worker,$/;"	f	file:
red_pipes_add_verb	server/red_worker.c	/^static void red_pipes_add_verb(RedChannel *channel, uint16_t verb)$/;"	f	file:
red_pipes_remove_drawable	server/red_worker.c	/^static inline void red_pipes_remove_drawable(Drawable *drawable)$/;"	f	file:
red_print_stream_stats	server/red_worker.c	/^static void red_print_stream_stats(DisplayChannelClient *dcc, StreamAgent *agent)$/;"	f	file:
red_process_commands	server/red_worker.c	/^static int red_process_commands(RedWorker *worker, uint32_t max_pipe_size, int *ring_is_empty)$/;"	f	file:
red_process_cursor	server/red_worker.c	/^static int red_process_cursor(RedWorker *worker, uint32_t max_pipe_size, int *ring_is_empty)$/;"	f	file:
red_process_drawable	server/red_worker.c	/^static inline void red_process_drawable(RedWorker *worker, RedDrawable *red_drawable,$/;"	f	file:
red_process_surface	server/red_worker.c	/^static inline void red_process_surface(RedWorker *worker, RedSurfaceCmd *surface,$/;"	f	file:
red_push	server/red_worker.c	/^static inline void red_push(RedWorker *worker)$/;"	f	file:
red_push_monitors_config	server/red_worker.c	/^static void red_push_monitors_config(DisplayChannelClient *dcc)$/;"	f	file:
red_push_surface_image	server/red_worker.c	/^static void red_push_surface_image(DisplayChannelClient *dcc, int surface_id)$/;"	f	file:
red_put_alpha_blend	server/red_parse_qxl.c	/^static void red_put_alpha_blend(SpiceAlphaBlend *red)$/;"	f	file:
red_put_blackness	server/red_parse_qxl.c	/^static void red_put_blackness(SpiceWhiteness *red)$/;"	f	file:
red_put_blend	server/red_parse_qxl.c	/^static void red_put_blend(SpiceBlend *red)$/;"	f	file:
red_put_brush	server/red_parse_qxl.c	/^static void red_put_brush(SpiceBrush *red)$/;"	f	file:
red_put_clip	server/red_parse_qxl.c	/^static void red_put_clip(SpiceClip *red)$/;"	f	file:
red_put_composite	server/red_parse_qxl.c	/^static void red_put_composite(SpiceComposite *red)$/;"	f	file:
red_put_copy	server/red_parse_qxl.c	/^static void red_put_copy(SpiceCopy *red)$/;"	f	file:
red_put_cursor	server/red_parse_qxl.c	/^static void red_put_cursor(SpiceCursor *red)$/;"	f	file:
red_put_cursor_cmd	server/red_parse_qxl.c	/^void red_put_cursor_cmd(RedCursorCmd *red)$/;"	f
red_put_data_chunks	server/red_parse_qxl.c	/^static void red_put_data_chunks(RedDataChunk *red)$/;"	f	file:
red_put_drawable	server/red_parse_qxl.c	/^void red_put_drawable(RedDrawable *red)$/;"	f
red_put_fill	server/red_parse_qxl.c	/^static void red_put_fill(SpiceFill *red)$/;"	f	file:
red_put_image	server/red_parse_qxl.c	/^void red_put_image(SpiceImage *red)$/;"	f
red_put_invers	server/red_parse_qxl.c	/^static void red_put_invers(SpiceWhiteness *red)$/;"	f	file:
red_put_message	server/red_parse_qxl.c	/^void red_put_message(RedMessage *red)$/;"	f
red_put_opaque	server/red_parse_qxl.c	/^static void red_put_opaque(SpiceOpaque *red)$/;"	f	file:
red_put_qmask	server/red_parse_qxl.c	/^static void red_put_qmask(SpiceQMask *red)$/;"	f	file:
red_put_rop3	server/red_parse_qxl.c	/^static void red_put_rop3(SpiceRop3 *red)$/;"	f	file:
red_put_stroke	server/red_parse_qxl.c	/^static void red_put_stroke(SpiceStroke *red)$/;"	f	file:
red_put_surface_cmd	server/red_parse_qxl.c	/^void red_put_surface_cmd(RedSurfaceCmd *red)$/;"	f
red_put_text_ptr	server/red_parse_qxl.c	/^static void red_put_text_ptr(SpiceText *red)$/;"	f	file:
red_put_transparent	server/red_parse_qxl.c	/^static void red_put_transparent(SpiceTransparent *red)$/;"	f	file:
red_put_update_cmd	server/red_parse_qxl.c	/^void red_put_update_cmd(RedUpdateCmd *red)$/;"	f
red_put_whiteness	server/red_parse_qxl.c	/^static void red_put_whiteness(SpiceWhiteness *red)$/;"	f	file:
red_quic_compress_image	server/red_worker.c	/^static inline int red_quic_compress_image(DisplayChannelClient *dcc, SpiceImage *dest,$/;"	f	file:
red_release_cursor	server/red_worker.c	/^static void red_release_cursor(RedWorker *worker, CursorItem *cursor)$/;"	f	file:
red_release_glz	server/red_worker.c	/^static void red_release_glz(DisplayChannelClient *dcc)$/;"	f	file:
red_release_pixmap_cache	server/red_worker.c	/^static void red_release_pixmap_cache(DisplayChannelClient *dcc)$/;"	f	file:
red_release_stream	server/red_worker.c	/^static void red_release_stream(RedWorker *worker, Stream *stream)$/;"	f	file:
red_reset_cursor_cache	server/red_worker.c	/^static void red_reset_cursor_cache(RedChannelClient *rcc)$/;"	f	file:
red_reset_palette_cache	server/red_worker.c	/^static void red_reset_palette_cache(DisplayChannelClient *dcc)$/;"	f	file:
red_reset_stream_trace	server/red_worker.c	/^static void red_reset_stream_trace(RedWorker *worker)$/;"	f	file:
red_restore_glz_dictionary	server/red_worker.c	/^static GlzSharedDictionary *red_restore_glz_dictionary(DisplayChannelClient *dcc,$/;"	f	file:
red_set_cursor	server/red_worker.c	/^static void red_set_cursor(RedWorker *worker, CursorItem *cursor)$/;"	f	file:
red_show_tree	server/red_worker.c	/^void red_show_tree(RedWorker *worker)$/;"	f
red_spicefmt_to_ffmpeg_fmt	server/red_worker.c	/^static enum AVPixelFormat red_spicefmt_to_ffmpeg_fmt(SpiceBitmapFmt fmt) $/;"	f	file:
red_stop_stream	server/red_worker.c	/^static void red_stop_stream(RedWorker *worker, Stream *stream)$/;"	f	file:
red_stream_add_frame	server/red_worker.c	/^static int red_stream_add_frame(RedWorker *worker,$/;"	f	file:
red_stream_get_initial_bit_rate	server/red_worker.c	/^static uint64_t red_stream_get_initial_bit_rate(DisplayChannelClient *dcc,$/;"	f	file:
red_stream_input_fps_timer_cb	server/red_worker.c	/^static void red_stream_input_fps_timer_cb(void *opaque)$/;"	f	file:
red_stream_maintenance	server/red_worker.c	/^static inline void red_stream_maintenance(RedWorker *worker, Drawable *candidate, Drawable *prev)$/;"	f	file:
red_stream_mjpeg_encoder_get_roundtrip	server/red_worker.c	/^static uint32_t red_stream_mjpeg_encoder_get_roundtrip(void *opaque)$/;"	f	file:
red_stream_mjpeg_encoder_get_source_fps	server/red_worker.c	/^static uint32_t red_stream_mjpeg_encoder_get_source_fps(void *opaque)$/;"	f	file:
red_stream_update_client_playback_latency	server/red_worker.c	/^static void red_stream_update_client_playback_latency(void *opaque, uint32_t delay_ms)$/;"	f	file:
red_streams_update_visible_region	server/red_worker.c	/^static void red_streams_update_visible_region(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_time_t	server/red_worker.c	/^typedef int64_t red_time_t;$/;"	t	file:
red_update_area	server/red_worker.c	/^static void red_update_area(RedWorker *worker, const SpiceRect *area, int surface_id)$/;"	f	file:
red_update_area	server/red_worker.c	1070;"	d	file:
red_update_area_till	server/red_worker.c	/^static void red_update_area_till(RedWorker *worker, const SpiceRect *area, int surface_id,$/;"	f	file:
red_update_copy_graduality	server/red_worker.c	/^static inline void red_update_copy_graduality(RedWorker* worker, Drawable *drawable)$/;"	f	file:
red_update_streamable	server/red_worker.c	/^static inline void red_update_streamable(RedWorker *worker, Drawable *drawable,$/;"	f	file:
red_use_stream_trace	server/red_worker.c	/^static inline void red_use_stream_trace(RedWorker *worker, Drawable *drawable)$/;"	f	file:
red_worker_create_surface_item	server/red_worker.c	/^static void red_worker_create_surface_item(RedWorker *worker, int surface_id)$/;"	f	file:
red_worker_main	server/red_worker.c	/^SPICE_GNUC_NORETURN void *red_worker_main(void *arg)$/;"	f
red_worker_push_monitors_config	server/red_worker.c	/^static void red_worker_push_monitors_config(RedWorker *worker)$/;"	f	file:
red_worker_push_surface_image	server/red_worker.c	/^static void red_worker_push_surface_image(RedWorker *worker, int surface_id)$/;"	f	file:
reds	server/reds.c	/^static RedsState *reds = NULL;$/;"	v	file:
reds_accept	server/reds.c	/^static void reds_accept(int fd, int event, void *data)$/;"	f	file:
reds_accept_ssl_connection	server/reds.c	/^static void reds_accept_ssl_connection(int fd, int event, void *data)$/;"	f	file:
reds_agent_remove	server/reds.c	/^static void reds_agent_remove(void)$/;"	f	file:
reds_agent_state_restore	server/reds.c	/^static int reds_agent_state_restore(SpiceMigrateDataMain *mig_data)$/;"	f	file:
reds_channel_do_link	server/reds.c	/^static void reds_channel_do_link(RedChannel *channel, RedClient *client,$/;"	f	file:
reds_channel_init_auth_caps	server/reds.c	/^static void reds_channel_init_auth_caps(RedLinkInfo *link, RedChannel *channel)$/;"	f	file:
reds_char_device_add_state	server/reds.c	/^static void reds_char_device_add_state(SpiceCharDeviceState *st)$/;"	f	file:
reds_char_device_remove_state	server/reds.c	/^static void reds_char_device_remove_state(SpiceCharDeviceState *st)$/;"	f	file:
reds_client_disconnect	server/reds.c	/^void reds_client_disconnect(RedClient *client)$/;"	f
reds_client_monitors_config_cleanup	server/reds.c	/^static void reds_client_monitors_config_cleanup(void)$/;"	f	file:
reds_disable_mm_timer	server/reds.c	/^void reds_disable_mm_timer(void)$/;"	f
reds_disconnect	server/reds.c	/^static void reds_disconnect(void)$/;"	f	file:
reds_enable_mm_timer	server/reds.c	/^void reds_enable_mm_timer(void)$/;"	f
reds_exit	server/reds.c	/^static void reds_exit(void)$/;"	f	file:
reds_expects_link_id	server/reds.c	/^int reds_expects_link_id(uint32_t connection_id)$/;"	f
reds_fill_channels	server/reds.c	/^void reds_fill_channels(SpiceMsgChannels *channels_info)$/;"	f
reds_find_channel	server/reds.c	/^static RedChannel *reds_find_channel(uint32_t type, uint32_t id)$/;"	f	file:
reds_find_client	server/reds.c	/^static int reds_find_client(RedClient *client)$/;"	f	file:
reds_get_agent_data_buffer	server/reds.c	/^uint8_t *reds_get_agent_data_buffer(MainChannelClient *mcc, size_t size)$/;"	f
reds_get_agent_mouse	server/reds.c	/^int reds_get_agent_mouse(void)$/;"	f
reds_get_client	server/reds.c	/^static RedClient *reds_get_client(void)$/;"	f	file:
reds_get_mm_time	server/reds.c	/^uint32_t reds_get_mm_time(void)$/;"	f
reds_get_mouse_mode	server/reds.c	/^int reds_get_mouse_mode(void)$/;"	f
reds_get_spice_ticket	server/reds.c	/^static void reds_get_spice_ticket(RedLinkInfo *link)$/;"	f	file:
reds_handle_agent_mouse_event	server/reds.c	/^void reds_handle_agent_mouse_event(const VDAgentMouseState *mouse_state)$/;"	f
reds_handle_auth_mechanism	server/reds.c	/^static void reds_handle_auth_mechanism(void *opaque)$/;"	f	file:
reds_handle_auth_mechlen	server/reds.c	/^static void reds_handle_auth_mechlen(void *opaque)$/;"	f	file:
reds_handle_auth_mechname	server/reds.c	/^static void reds_handle_auth_mechname(void *opaque)$/;"	f	file:
reds_handle_auth_sasl_start	server/reds.c	/^static void reds_handle_auth_sasl_start(void *opaque)$/;"	f	file:
reds_handle_auth_sasl_step	server/reds.c	/^static void reds_handle_auth_sasl_step(void *opaque)$/;"	f	file:
reds_handle_auth_sasl_steplen	server/reds.c	/^static void reds_handle_auth_sasl_steplen(void *opaque)$/;"	f	file:
reds_handle_auth_startlen	server/reds.c	/^static void reds_handle_auth_startlen(void *opaque)$/;"	f	file:
reds_handle_channel_event	server/reds.c	/^void reds_handle_channel_event(int event, SpiceChannelEventInfo *info)$/;"	f
reds_handle_link	server/reds.c	/^static void reds_handle_link(RedLinkInfo *link)$/;"	f	file:
reds_handle_link_error	server/reds.c	/^static void reds_handle_link_error(void *opaque, int err)$/;"	f	file:
reds_handle_main_link	server/reds.c	/^static void reds_handle_main_link(RedLinkInfo *link)$/;"	f	file:
reds_handle_migrate_data	server/reds.c	/^int reds_handle_migrate_data(MainChannelClient *mcc, SpiceMigrateDataMain *mig_data, uint32_t size)$/;"	f
reds_handle_new_link	server/reds.c	/^static void reds_handle_new_link(RedLinkInfo *link)$/;"	f	file:
reds_handle_other_links	server/reds.c	/^static void reds_handle_other_links(RedLinkInfo *link)$/;"	f	file:
reds_handle_read_header_done	server/reds.c	/^static void reds_handle_read_header_done(void *opaque)$/;"	f	file:
reds_handle_read_link_done	server/reds.c	/^static void reds_handle_read_link_done(void *opaque)$/;"	f	file:
reds_handle_ssl_accept	server/reds.c	/^static void reds_handle_ssl_accept(int fd, int event, void *data)$/;"	f	file:
reds_handle_ticket	server/reds.c	/^static void reds_handle_ticket(void *opaque)$/;"	f	file:
reds_has_vdagent	server/reds.c	/^int reds_has_vdagent(void)$/;"	f
reds_info_new_channel	server/reds.c	/^static void reds_info_new_channel(RedLinkInfo *link, int connection_id)$/;"	f	file:
reds_init_client_connection	server/reds.c	/^static RedLinkInfo *reds_init_client_connection(int socket)$/;"	f	file:
reds_init_client_ssl_connection	server/reds.c	/^static RedLinkInfo *reds_init_client_ssl_connection(int socket)$/;"	f	file:
reds_init_net	server/reds.c	/^static int reds_init_net(void)$/;"	f	file:
reds_init_socket	server/reds.c	/^static int reds_init_socket(const char *addr, int portnr, int family)$/;"	f	file:
reds_init_ssl	server/reds.c	/^static int reds_init_ssl(void)$/;"	f	file:
reds_link_free	server/reds.c	/^static void reds_link_free(RedLinkInfo *link)$/;"	f	file:
reds_link_mig_target_channels	server/reds.c	/^static int reds_link_mig_target_channels(RedClient *client)$/;"	f	file:
reds_main_channel_connected	server/reds.c	/^static int reds_main_channel_connected(void)$/;"	f	file:
reds_marshall_migrate_data	server/reds.c	/^void reds_marshall_migrate_data(SpiceMarshaller *m)$/;"	f
reds_mig_cleanup	server/reds.c	/^static void reds_mig_cleanup(void)$/;"	f	file:
reds_mig_cleanup_wait_disconnect	server/reds.c	/^static void reds_mig_cleanup_wait_disconnect(void)$/;"	f	file:
reds_mig_disconnect	server/reds.c	/^static void reds_mig_disconnect(void)$/;"	f	file:
reds_mig_fill_wait_disconnect	server/reds.c	/^static void reds_mig_fill_wait_disconnect(void)$/;"	f	file:
reds_mig_finished	server/reds.c	/^static void reds_mig_finished(int completed)$/;"	f	file:
reds_mig_release	server/reds.c	/^static void reds_mig_release(void)$/;"	f	file:
reds_mig_remove_wait_disconnect_client	server/reds.c	/^static void reds_mig_remove_wait_disconnect_client(RedClient *client)$/;"	f	file:
reds_mig_started	server/reds.c	/^static void reds_mig_started(void)$/;"	f	file:
reds_mig_switch	server/reds.c	/^static void reds_mig_switch(void)$/;"	f	file:
reds_mig_target_client_add	server/reds.c	/^static void reds_mig_target_client_add(RedClient *client)$/;"	f	file:
reds_mig_target_client_add_pending_link	server/reds.c	/^static void reds_mig_target_client_add_pending_link(RedsMigTargetClient *client,$/;"	f	file:
reds_mig_target_client_disconnect_all	server/reds.c	/^static void reds_mig_target_client_disconnect_all(void)$/;"	f	file:
reds_mig_target_client_find	server/reds.c	/^static RedsMigTargetClient* reds_mig_target_client_find(RedClient *client)$/;"	f	file:
reds_mig_target_client_free	server/reds.c	/^static void reds_mig_target_client_free(RedsMigTargetClient *mig_client)$/;"	f	file:
reds_migrate_channels_seamless	server/reds.c	/^static void reds_migrate_channels_seamless(void)$/;"	f	file:
reds_num_of_channels	server/reds.c	/^int reds_num_of_channels(void)$/;"	f
reds_num_of_clients	server/reds.c	/^int reds_num_of_clients(void)$/;"	f
reds_on_char_device_state_destroy	server/reds.c	/^void reds_on_char_device_state_destroy(SpiceCharDeviceState *dev)$/;"	f
reds_on_client_seamless_migrate_complete	server/reds.c	/^void reds_on_client_seamless_migrate_complete(RedClient *client)$/;"	f
reds_on_client_semi_seamless_migrate_complete	server/reds.c	/^void reds_on_client_semi_seamless_migrate_complete(RedClient *client)$/;"	f
reds_on_main_agent_data	server/reds.c	/^void reds_on_main_agent_data(MainChannelClient *mcc, void *message, size_t size)$/;"	f
reds_on_main_agent_monitors_config	server/reds.c	/^static void reds_on_main_agent_monitors_config($/;"	f	file:
reds_on_main_agent_start	server/reds.c	/^void reds_on_main_agent_start(MainChannelClient *mcc, uint32_t num_tokens)$/;"	f
reds_on_main_agent_tokens	server/reds.c	/^void reds_on_main_agent_tokens(MainChannelClient *mcc, uint32_t num_tokens)$/;"	f
reds_on_main_channel_migrate	server/reds.c	/^void reds_on_main_channel_migrate(MainChannelClient *mcc)$/;"	f
reds_on_main_migrate_connected	server/reds.c	/^void reds_on_main_migrate_connected(int seamless)$/;"	f
reds_on_main_mouse_mode_request	server/reds.c	/^void reds_on_main_mouse_mode_request(void *message, size_t size)$/;"	f
reds_on_migrate_dst_set_seamless	server/reds.c	/^int reds_on_migrate_dst_set_seamless(MainChannelClient *mcc, uint32_t src_version)$/;"	f
reds_register_channel	server/reds.c	/^void reds_register_channel(RedChannel *channel)$/;"	f
reds_release_agent_data_buffer	server/reds.c	/^void reds_release_agent_data_buffer(uint8_t *buf)$/;"	f
reds_reset_vdp	server/reds.c	/^static void reds_reset_vdp(void)$/;"	f	file:
reds_sasl_handle_auth_mechlen	server/reds_stream.c	/^bool reds_sasl_handle_auth_mechlen(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_handle_auth_mechname	server/reds_stream.c	/^bool reds_sasl_handle_auth_mechname(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_handle_auth_start	server/reds_stream.c	/^RedsSaslError reds_sasl_handle_auth_start(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_handle_auth_startlen	server/reds_stream.c	/^RedsSaslError reds_sasl_handle_auth_startlen(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_handle_auth_step	server/reds_stream.c	/^RedsSaslError reds_sasl_handle_auth_step(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_handle_auth_steplen	server/reds_stream.c	/^RedsSaslError reds_sasl_handle_auth_steplen(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_sasl_start_auth	server/reds_stream.c	/^bool reds_sasl_start_auth(RedsStream *stream, AsyncReadDone read_cb, void *opaque)$/;"	f
reds_security_check	server/reds.c	/^static int reds_security_check(RedLinkInfo *link)$/;"	f	file:
reds_send_link_ack	server/reds.c	/^static int reds_send_link_ack(RedLinkInfo *link)$/;"	f	file:
reds_send_link_error	server/reds.c	/^static bool reds_send_link_error(RedLinkInfo *link, uint32_t error)$/;"	f	file:
reds_send_link_result	server/reds.c	/^static void reds_send_link_result(RedLinkInfo *link, uint32_t error)$/;"	f	file:
reds_send_mm_time	server/reds.c	/^static void reds_send_mm_time(void)$/;"	f	file:
reds_set_client_mm_time_latency	server/reds.c	/^void reds_set_client_mm_time_latency(RedClient *client, uint32_t latency)$/;"	f
reds_set_client_mouse_allowed	server/reds.c	/^void reds_set_client_mouse_allowed(int is_client_mouse_allowed, int x_res, int y_res)$/;"	f
reds_set_migration_dest_info	server/reds.c	/^static int reds_set_migration_dest_info(const char* dest,$/;"	f	file:
reds_set_mouse_mode	server/reds.c	/^static void reds_set_mouse_mode(uint32_t mode)$/;"	f	file:
reds_start_auth_sasl	server/reds.c	/^static void reds_start_auth_sasl(RedLinkInfo *link)$/;"	f	file:
reds_stream_async_read	server/reds_stream.c	/^void reds_stream_async_read(RedsStream *stream,$/;"	f
reds_stream_disable_writev	server/reds_stream.c	/^void reds_stream_disable_writev(RedsStream *stream)$/;"	f
reds_stream_enable_ssl	server/reds_stream.c	/^int reds_stream_enable_ssl(RedsStream *stream, SSL_CTX *ctx)$/;"	f
reds_stream_free	server/reds_stream.c	/^void reds_stream_free(RedsStream *s)$/;"	f
reds_stream_get_local_address	server/reds_stream.c	/^static char *reds_stream_get_local_address(RedsStream *stream)$/;"	f	file:
reds_stream_get_remote_address	server/reds_stream.c	/^static char *reds_stream_get_remote_address(RedsStream *stream)$/;"	f	file:
reds_stream_is_ssl	server/reds_stream.c	/^bool reds_stream_is_ssl(RedsStream *stream)$/;"	f
reds_stream_new	server/reds_stream.c	/^RedsStream *reds_stream_new(int socket)$/;"	f
reds_stream_push_channel_event	server/reds_stream.c	/^void reds_stream_push_channel_event(RedsStream *s, int event)$/;"	f
reds_stream_read	server/reds_stream.c	/^ssize_t reds_stream_read(RedsStream *s, void *buf, size_t nbyte)$/;"	f
reds_stream_remove_watch	server/reds_stream.c	/^void reds_stream_remove_watch(RedsStream* s)$/;"	f
reds_stream_sasl_read	server/reds_stream.c	/^static ssize_t reds_stream_sasl_read(RedsStream *s, uint8_t *buf, size_t nbyte)$/;"	f	file:
reds_stream_sasl_write	server/reds_stream.c	/^static ssize_t reds_stream_sasl_write(RedsStream *s, const void *buf, size_t nbyte)$/;"	f	file:
reds_stream_set_async_error_handler	server/reds_stream.c	/^void reds_stream_set_async_error_handler(RedsStream *stream,$/;"	f
reds_stream_set_channel	server/reds_stream.c	/^void reds_stream_set_channel(RedsStream *stream, int connection_id,$/;"	f
reds_stream_set_info_flag	server/reds_stream.c	/^void reds_stream_set_info_flag(RedsStream *stream, unsigned int flag)$/;"	f
reds_stream_set_socket	server/reds_stream.c	/^static void reds_stream_set_socket(RedsStream *stream, int socket)$/;"	f	file:
reds_stream_ssl_accept	server/reds_stream.c	/^RedsStreamSslStatus reds_stream_ssl_accept(RedsStream *stream)$/;"	f
reds_stream_write	server/reds_stream.c	/^ssize_t reds_stream_write(RedsStream *s, const void *buf, size_t nbyte)$/;"	f
reds_stream_write_all	server/reds_stream.c	/^bool reds_stream_write_all(RedsStream *stream, const void *in_buf, size_t n)$/;"	f
reds_stream_write_u32	server/reds_stream.c	/^bool reds_stream_write_u32(RedsStream *s, uint32_t n)$/;"	f
reds_stream_write_u8	server/reds_stream.c	/^bool reds_stream_write_u8(RedsStream *s, uint8_t n)$/;"	f
reds_stream_writev	server/reds_stream.c	/^ssize_t reds_stream_writev(RedsStream *s, const struct iovec *iov, int iovcnt)$/;"	f
reds_unregister_channel	server/reds.c	/^void reds_unregister_channel(RedChannel *channel)$/;"	f
reds_update_mm_timer	server/reds.c	/^void reds_update_mm_timer(uint32_t mm_time)$/;"	f
reds_update_mouse_mode	server/reds.c	/^static void reds_update_mouse_mode(void)$/;"	f	file:
reds_update_stat_value	server/reds.c	/^void reds_update_stat_value(uint32_t value)$/;"	f
ref	client/canvas.h	/^    CachedPalette* ref()$/;"	f	class:CachedPalette
ref	client/controller.h	/^    Controller* ref() { _refs++; return this;}$/;"	f	class:Controller
ref	client/cursor.h	/^    CursorData *ref() { ++_atomic; return this;}$/;"	f	class:CursorData
ref	client/cursor.h	/^    LocalCursor* ref() { ++_atomic; return this;}$/;"	f	class:LocalCursor
ref	client/foreign_menu.h	/^    ForeignMenu* ref() { _refs++; return this;}$/;"	f	class:ForeignMenu
ref	client/icon.h	/^    Icon* ref() { _refs++; return this;}$/;"	f	class:Icon
ref	client/menu.h	/^    Menu* ref() { _refs++; return this;}$/;"	f	class:Menu
ref	client/process_loop.h	/^    EventBase* ref() { ++_refs; return this;}$/;"	f	class:EventBase
ref	client/red_peer.h	/^    RedPeer::InMessage* ref() { _refs++; return this;}$/;"	f	class:RedPeer::CompoundInMessage
ref	client/screen.cpp	/^RedScreen* RedScreen::ref()$/;"	f	class:RedScreen
ref	spice-common/common/lz.c	/^    uint8_t            *ref;$/;"	m	struct:HashEntry	file:
ref_cursor_pipe_item	server/red_worker.c	/^static CursorPipeItem *ref_cursor_pipe_item(CursorPipeItem *item)$/;"	f	file:
ref_drawable_pipe_item	server/red_worker.c	/^static inline DrawablePipeItem *ref_drawable_pipe_item(DrawablePipeItem *dpi)$/;"	f	file:
ref_msg_to_client	server/char_device.h	/^    SpiceCharDeviceMsgToClient* (*ref_msg_to_client)(SpiceCharDeviceMsgToClient *msg,$/;"	m	struct:SpiceCharDeviceCallbacks
ref_pat	spice-common/common/glc.c	/^static inline InternalPat *ref_pat(InternalPat *pat)$/;"	f	file:
ref_pix_idx	server/glz_encoder_dictionary_protected.h	/^    uint32_t ref_pix_idx;$/;"	m	struct:HashEntry
ref_red_drawable	server/red_worker.c	/^static RedDrawable *ref_red_drawable(RedDrawable *drawable)$/;"	f	file:
refs	client/shared_cache.hpp	/^        int refs;$/;"	m	class:SharedCache::Item
refs	server/char_device.c	/^    uint32_t refs;$/;"	m	struct:SpiceCharDeviceState	file:
refs	server/char_device.h	/^    uint32_t refs;$/;"	m	struct:SpiceCharDeviceWriteBuffer
refs	server/main_channel.c	/^    int *refs;$/;"	m	struct:RefsPipeItem	file:
refs	server/red_channel.h	/^    int refs;$/;"	m	struct:RedClient
refs	server/red_channel.h	/^    uint32_t refs;$/;"	m	struct:RedChannel
refs	server/red_channel.h	/^    uint32_t refs;$/;"	m	struct:RedChannelClient
refs	server/red_parse_qxl.h	/^    int refs;$/;"	m	struct:RedDrawable
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:CursorItem	file:
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:CursorPipeItem	file:
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:ImageItem	file:
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:MonitorsConfig	file:
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:StreamClipItem	file:
refs	server/red_worker.c	/^    int refs;$/;"	m	struct:UpgradeItem	file:
refs	server/red_worker.c	/^    uint32_t refs;$/;"	m	struct:GlzSharedDictionary	file:
refs	server/red_worker.c	/^    uint32_t refs;$/;"	m	struct:PixmapCache	file:
refs	server/red_worker.c	/^    uint32_t refs;$/;"	m	struct:RedSurface	file:
refs	server/red_worker.c	/^    uint8_t refs;$/;"	m	struct:Drawable	file:
refs	server/red_worker.c	/^    uint8_t refs;$/;"	m	struct:DrawablePipeItem	file:
refs	server/red_worker.c	/^    uint8_t refs;$/;"	m	struct:Stream	file:
refs	server/reds-private.h	/^    uint32_t refs;$/;"	m	struct:VDIReadBuf
refs	server/smartcard.c	/^    uint32_t refs;$/;"	m	struct:MsgItem	file:
refs	server/snd_worker.c	/^    int refs;$/;"	m	struct:SndChannel	file:
refs	server/spicevmc.c	/^    uint32_t refs;$/;"	m	struct:SpiceVmcPipeItem	file:
refs	spice-common/common/glc.c	/^    int refs;$/;"	m	struct:InternalPat	file:
region_add	spice-common/common/region.c	/^void region_add(QRegion *rgn, const SpiceRect *r)$/;"	f
region_and	spice-common/common/region.c	/^void region_and(QRegion *rgn, const QRegion *other_rgn)$/;"	f
region_bounds_intersects	spice-common/common/region.c	/^int region_bounds_intersects(const QRegion *rgn1, const QRegion *rgn2)$/;"	f
region_clear	spice-common/common/region.c	/^void region_clear(QRegion *rgn)$/;"	f
region_clone	spice-common/common/region.c	/^void region_clone(QRegion *dest, const QRegion *src)$/;"	f
region_contains	spice-common/common/region.c	/^int region_contains(const QRegion *rgn, const QRegion *other)$/;"	f
region_contains_point	spice-common/common/region.c	/^int region_contains_point(const QRegion *rgn, int32_t x, int32_t y)$/;"	f
region_destroy	spice-common/common/region.c	/^void region_destroy(QRegion *rgn)$/;"	f
region_dump	spice-common/common/region.c	/^void region_dump(const QRegion *rgn, const char *prefix)$/;"	f
region_dup_rects	spice-common/common/region.c	/^SpiceRect *region_dup_rects(const QRegion *rgn, uint32_t *num_rects)$/;"	f
region_exclude	spice-common/common/region.c	/^void region_exclude(QRegion *rgn, const QRegion *other_rgn)$/;"	f
region_extents	spice-common/common/region.c	/^void region_extents(const QRegion *rgn, SpiceRect *r)$/;"	f
region_init	spice-common/common/region.c	/^void region_init(QRegion *rgn)$/;"	f
region_intersects	spice-common/common/region.c	/^int region_intersects(const QRegion *rgn1, const QRegion *rgn2)$/;"	f
region_is_empty	spice-common/common/region.c	/^int region_is_empty(const QRegion *rgn)$/;"	f
region_is_equal	spice-common/common/region.c	/^int region_is_equal(const QRegion *rgn1, const QRegion *rgn2)$/;"	f
region_is_valid	spice-common/common/region.c	/^int region_is_valid(const QRegion *rgn)$/;"	f
region_offset	spice-common/common/region.c	/^void region_offset(QRegion *rgn, int32_t dx, int32_t dy)$/;"	f
region_or	spice-common/common/region.c	/^void region_or(QRegion *rgn, const QRegion *other_rgn)$/;"	f
region_remove	spice-common/common/region.c	/^void region_remove(QRegion *rgn, const SpiceRect *r)$/;"	f
region_ret_rects	spice-common/common/region.c	/^void region_ret_rects(const QRegion *rgn, SpiceRect *rects, uint32_t num_rects)$/;"	f
region_test	spice-common/common/region.c	/^int region_test(const QRegion *_reg1, const QRegion *_reg2, int query)$/;"	f
region_xor	spice-common/common/region.c	/^void region_xor(QRegion *rgn, const QRegion *other_rgn)$/;"	f
register	spice-common/python_modules/ptypes.py	/^    def register(self):$/;"	m	class:Type
register	spice-common/python_modules/ptypes.py	/^    def register(self):$/;"	m	class:TypeRef
register_callbacks	server/red_worker.c	/^static void register_callbacks(Dispatcher *dispatcher)$/;"	f	file:
register_channel_factory	client/red_client.cpp	/^void RedClient::register_channel_factory(ChannelFactory& factory)$/;"	f	class:RedClient
register_channels	client/application.cpp	/^void Application::register_channels()$/;"	f	class:Application
register_class	client/windows/red_window.cpp	/^static ATOM register_class(HINSTANCE instance)$/;"	f	file:
register_tab_factory	client/gui/gui.cpp	/^void GUI::register_tab_factory(TabFactory& factory)$/;"	f	class:GUI
regression_test	server/tests/test_display_base.c	/^static void regression_test(void)$/;"	f	file:
rel_time	client/threads.cpp	/^static inline void rel_time(struct timespec& time, uint64_t delta_nano)$/;"	f	file:
relase_mouse	client/screen.cpp	/^void RedScreen::relase_mouse()$/;"	f	class:RedScreen
release	client/canvas.h	/^    static inline void release(CachedPalette* palette)$/;"	f	class:PaletteCacheTreat
release	client/canvas.h	/^    static inline void release(pixman_image_t *surf)$/;"	f	class:PixmapCacheTreat
release	client/cursor_channel.h	/^    static inline void release(CursorData* cursor)$/;"	f	class:CursorCacheTreat
release	client/inputs_channel.cpp	/^void MotionMessage::release()$/;"	f	class:MotionMessage
release	client/inputs_channel.cpp	/^void PositionMessage::release()$/;"	f	class:PositionMessage
release	client/record_channel.cpp	/^void RecordSamplesMessage::release()$/;"	f	class:RecordSamplesMessage
release	client/red_channel.cpp	/^RedChannel::OutMessage* AutoMessage::release()$/;"	f	class:AutoMessage
release	client/red_channel.h	/^    virtual void release() {delete this;}$/;"	f	class:Message
release	client/utils.h	/^    T* release() {T* tmp = _array; _array = NULL; return tmp; }$/;"	f	class:AutoArray
release	client/utils.h	/^    T* release() {T* tmp = _res; _res = NULL; return tmp; }$/;"	f	class:_AutoRes
release	client/utils.h	/^    T* release()$/;"	f	class:AutoRef
release	client/windows/platform_utils.h	/^    T release() {T tmp = res; res = invalid; return tmp; }$/;"	f	class:AutoRes
release	spice-common/common/canvas_base.h	/^    void (*release)(SpicePaletteCache *cache,$/;"	m	struct:__anon10
release_all_bufs	client/display_channel.cpp	/^void VideoStream::release_all_bufs()$/;"	f	class:VideoStream
release_bitmap	spice-common/common/gdi_canvas.c	/^static void release_bitmap(HDC dc, HBITMAP bitmap, HBITMAP prev_bitmap, int cache)$/;"	f	file:
release_capture	client/application.cpp	/^bool Application::release_capture()$/;"	f	class:Application
release_data	spice-common/common/canvas_utils.c	/^static void release_data(pixman_image_t *image, void *release_data)$/;"	f	file:
release_drawable	server/red_worker.c	/^static inline void release_drawable(RedWorker *worker, Drawable *drawable)$/;"	f	file:
release_image_item	server/red_worker.c	/^static void release_image_item(ImageItem *item)$/;"	f	file:
release_images	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::release_images()$/;"	f	class:GlzDecoderWindow
release_info	server/red_parse_qxl.h	/^    QXLReleaseInfo *release_info;$/;"	m	struct:RedCursorCmd
release_info	server/red_parse_qxl.h	/^    QXLReleaseInfo *release_info;$/;"	m	struct:RedDrawable
release_info	server/red_parse_qxl.h	/^    QXLReleaseInfo *release_info;$/;"	m	struct:RedMessage
release_info	server/red_parse_qxl.h	/^    QXLReleaseInfo *release_info;$/;"	m	struct:RedSurfaceCmd
release_info	server/red_parse_qxl.h	/^    QXLReleaseInfo *release_info;$/;"	m	struct:RedUpdateCmd
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLCompatDrawable
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLCompatUpdateCmd
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLCursorCmd
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLDrawable
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLMessage
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLSurfaceCmd
release_info	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseInfo release_info;$/;"	m	struct:QXLUpdateCmd
release_item	server/red_channel.h	/^    channel_release_pipe_item_proc release_item;$/;"	m	struct:__anon145
release_menu	client/windows/red_window.cpp	/^void RedWindow_p::release_menu(Menu* menu)$/;"	f	class:RedWindow_p
release_message	client/record_channel.cpp	/^void RecordChannel::release_message(RecordSamplesMessage *message)$/;"	f	class:RecordChannel
release_mouse	client/windows/red_window.cpp	/^void RedWindow::release_mouse()$/;"	f	class:RedWindow
release_mouse	client/x11/red_window.cpp	/^void RedWindow::release_mouse()$/;"	f	class:RedWindow
release_mouse_capture	client/application.cpp	/^void Application::release_mouse_capture()$/;"	f	class:Application
release_msg_buf	server/red_channel.h	/^    release_msg_recv_buf_proc release_msg_buf; \/\/ for errors$/;"	m	struct:IncomingHandlerInterface
release_msg_recv_buf_proc	server/red_channel.h	/^typedef void (*release_msg_recv_buf_proc)(void *opaque,$/;"	t
release_recv_buf	server/red_channel.h	/^    channel_release_msg_recv_buf_proc release_recv_buf;$/;"	m	struct:__anon145
release_resource	server/spice.h	/^    void (*release_resource)(QXLInstance *qin, struct QXLReleaseInfoExt release_info);$/;"	m	struct:QXLInterface
release_resource	server/tests/test_display_base.c	/^static void release_resource(QXLInstance *qin, struct QXLReleaseInfoExt release_info)$/;"	f	file:
release_ring	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLReleaseRing release_ring;$/;"	m	struct:QXLRam
release_upgrade_item	server/red_worker.c	/^static void release_upgrade_item(RedWorker* worker, UpgradeItem *item)$/;"	f	file:
release_wait_send_messages	client/client_net_socket.cpp	/^void ClientNetSocket::release_wait_send_messages()$/;"	f	class:ClientNetSocket
release_waiters	client/read_write_mutex.h	/^    void release_waiters()$/;"	f	class:ReadWriteMutex
remaining_buffer_size	spice-common/common/marshaller.c	/^static size_t remaining_buffer_size(SpiceMarshallerData *d)$/;"	f	file:
remote_caps	server/red_channel.h	/^    RedChannelCapabilities remote_caps;$/;"	m	struct:RedChannelClient
remove	client/cache.hpp	/^    void remove(uint64_t id)$/;"	f	class:Cache
remove	client/shared_cache.hpp	/^    void remove(uint64_t id)$/;"	f	class:SharedCache
remove	server/red_client_cache.h	/^static void FUNC_NAME(remove)(CHANNELCLIENT *channel_client, CacheItem *item)$/;"	f
remove_client	server/char_device.h	/^    void (*remove_client)(RedClient *client, void *opaque);$/;"	m	struct:SpiceCharDeviceCallbacks
remove_command	client/menu.cpp	/^void Menu::remove_command(int cmd_id)$/;"	f	class:Menu
remove_connection	client/controller.cpp	/^void Controller::remove_connection(NamedPipe::ConnectionRef conn_ref)$/;"	f	class:Controller
remove_connection	client/foreign_menu.cpp	/^void ForeignMenu::remove_connection(NamedPipe::ConnectionRef conn_ref)$/;"	f	class:ForeignMenu
remove_cursor	client/cursor_channel.cpp	/^void CursorChannel::remove_cursor()$/;"	f	class:CursorChannel
remove_dead_frames	client/display_channel.cpp	/^void VideoStream::remove_dead_frames(uint32_t mm_time)$/;"	f	class:VideoStream
remove_depended_item	server/red_worker.c	/^static void remove_depended_item(DependItem *item)$/;"	f	file:
remove_drawable	server/red_worker.c	/^static void remove_drawable(RedWorker *worker, Drawable *drawable)$/;"	f	file:
remove_drawable_dependencies	server/red_worker.c	/^static void remove_drawable_dependencies(RedWorker *worker, Drawable *drawable)$/;"	f	file:
remove_event	client/windows/event_sources_p.cpp	/^void EventSources_p::remove_event(EventSource* source)$/;"	f	class:EventSources_p
remove_event	client/x11/event_sources_p.cpp	/^void EventSources_p::remove_event(EventSource* source)$/;"	f	class:EventSources_p
remove_event_source	client/record_channel.cpp	/^void RecordChannel::remove_event_source(EventSources::File& event_source)$/;"	f	class:RecordChannel
remove_event_source	client/record_channel.cpp	/^void RecordChannel::remove_event_source(EventSources::Trigger& event_source)$/;"	f	class:RecordChannel
remove_file	client/process_loop.cpp	/^void ProcessLoop::remove_file(EventSources::File& file)$/;"	f	class:ProcessLoop
remove_file	client/windows/event_sources_p.cpp	/^void EventSources::remove_file(File& file)$/;"	f	class:EventSources
remove_file	client/x11/event_sources_p.cpp	/^void EventSources::remove_file(File& file)$/;"	f	class:EventSources
remove_handle	client/process_loop.cpp	/^void ProcessLoop::remove_handle(EventSources::Handle& handle)$/;"	f	class:ProcessLoop
remove_handle	client/windows/event_sources_p.cpp	/^void EventSources::remove_handle(Handle& handle)$/;"	f	class:EventSources
remove_handle	client/x11/event_sources_p.cpp	/^void EventSources::remove_handle(Handle& file)$/;"	f	class:EventSources
remove_head	client/glz_decoder_window.cpp	/^inline void GlzDecoderWindow::remove_head(uint64_t new_head_image_id)$/;"	f	class:GlzDecoderWindow
remove_key_handler	client/application.cpp	/^void Application::remove_key_handler(KeyHandler& handler)$/;"	f	class:Application
remove_menu_item	client/application.cpp	/^void Application::remove_menu_item(int item_id)$/;"	f	class:Application
remove_mouse_handler	client/application.cpp	/^void Application::remove_mouse_handler(MouseHandler& handler)$/;"	f	class:Application
remove_reader	client/smartcard_channel.cpp	/^void SmartCardChannel::remove_reader(ReaderData* data)$/;"	f	class:SmartCardChannel
remove_rect_area	client/screen_layer.cpp	/^void ScreenLayer::remove_rect_area(const SpiceRect& r)$/;"	f	class:ScreenLayer
remove_shadow	server/red_worker.c	/^static inline void remove_shadow(RedWorker *worker, DrawItem *item)$/;"	f	file:
remove_socket	client/process_loop.cpp	/^void ProcessLoop::remove_socket(EventSources::Socket& socket)$/;"	f	class:ProcessLoop
remove_socket	client/windows/event_sources_p.cpp	/^void EventSources::remove_socket(Socket& socket)$/;"	f	class:EventSources
remove_socket	client/x11/event_sources_p.cpp	/^void EventSources::remove_socket(Socket& socket)$/;"	f	class:EventSources
remove_stencil_client	spice-common/common/glc.c	/^static inline void remove_stencil_client(InternaCtx *ctx)$/;"	f	file:
remove_sub	client/menu.cpp	/^void Menu::remove_sub(Menu* menu)$/;"	f	class:Menu
remove_trigger	client/process_loop.cpp	/^void ProcessLoop::remove_trigger(EventSources::Trigger& trigger)$/;"	f	class:ProcessLoop
remove_trigger	client/windows/event_sources_p.cpp	/^void EventSources::remove_trigger(Trigger& trigger)$/;"	f	class:EventSources
remove_trigger	client/x11/event_sources_p.cpp	/^void EventSources::remove_trigger(Trigger& trigger)$/;"	f	class:EventSources
remove_worker	server/snd_worker.c	/^static void remove_worker(SndWorker *worker)$/;"	f	file:
removed	server/tests/basic_event_loop.c	/^    int removed;$/;"	m	struct:SpiceWatch	file:
renderQuad	client/gui/softrenderer.cpp	/^void SoftRenderer::renderQuad(const QuadInfo& quad)$/;"	f	class:CEGUI::SoftRenderer
renderQuadWithColourRect	client/gui/softrenderer.cpp	/^void SoftRenderer::renderQuadWithColourRect(const QuadInfo& quad)$/;"	f	class:CEGUI::SoftRenderer
render_last_frame	server/tests/test_display_streaming.c	/^static int render_last_frame;$/;"	v	file:
render_pos	spice-common/common/draw.h	/^    SpicePoint render_pos;$/;"	m	struct:SpiceRasterGlyph
render_pos	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint render_pos;$/;"	m	struct:QXLRasterGlyph
renderer	server/red_worker.c	/^    uint32_t renderer;$/;"	m	struct:RedWorker	file:
renderers	server/red_dispatcher.c	/^static uint32_t renderers[RED_MAX_RENDERERS];$/;"	v	file:
renderers	server/red_worker.c	/^    uint32_t renderers[RED_MAX_RENDERERS];$/;"	m	struct:RedWorker	file:
renderers	server/red_worker.h	/^    uint32_t renderers[RED_MAX_RENDERERS];$/;"	m	struct:WorkerInitData
renderers_info	server/red_dispatcher.c	/^static RendererInfo renderers_info[] = {$/;"	v	file:
rendering_incorrect	server/red_worker.c	/^static void rendering_incorrect(const char *msg)$/;"	f	file:
rendertype	client/x11/pixels_source_p.h	/^            RenderType rendertype;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
rendertype	client/x11/pixels_source_p.h	/^            RenderType rendertype;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
replace	client/shared_cache.hpp	/^        void replace(T* new_data, bool is_lossy = FALSE)$/;"	f	class:SharedCache::Item
replace	client/shared_cache.hpp	/^    void replace(uint64_t id, T* data, bool is_lossy = FALSE)$/;"	f	class:SharedCache
replaceWith	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
replace_lossy	spice-common/common/canvas_base.h	/^    void (*replace_lossy)(SpiceImageCache *cache,$/;"	m	struct:__anon8
repoll_cmd_ring	server/red_worker.c	/^    uint32_t repoll_cmd_ring;$/;"	m	struct:RedWorker	file:
repoll_cursor_ring	server/red_worker.c	/^    uint32_t repoll_cursor_ring;$/;"	m	struct:RedWorker	file:
report_id	server/red_worker.c	/^    uint32_t report_id;$/;"	m	struct:StreamAgent	file:
req_cmd_notification	server/spice.h	/^    int (*req_cmd_notification)(QXLInstance *qin);$/;"	m	struct:QXLInterface
req_cmd_notification	server/tests/test_display_base.c	/^static int req_cmd_notification(QXLInstance *qin)$/;"	f	file:
req_cursor_notification	server/spice.h	/^    int (*req_cursor_notification)(QXLInstance *qin);$/;"	m	struct:QXLInterface
req_cursor_notification	server/tests/test_display_base.c	/^static int req_cursor_notification(QXLInstance *qin)$/;"	f	file:
request	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t  request;$/;"	m	struct:VDAgentAnnounceCapabilities
res	client/windows/platform_utils.h	/^    T res;$/;"	m	class:AutoRes
res	server/red_worker.c	/^    SpiceResourceList *res;$/;"	m	struct:FreeList	file:
res_get_icon	client/x11/res.cpp	/^const IconHeader *res_get_icon(int id)$/;"	f
res_get_image	client/x11/res.cpp	/^const PixmapHeader *res_get_image(int id)$/;"	f
res_get_string	client/gui/resource_provider.cpp	/^const char* res_get_string(int id)$/;"	f
res_icon_map	client/x11/res.cpp	/^static const ResIcon res_icon_map[] = {$/;"	v	file:
res_icons	client/x11/x_icon.cpp	/^static IconsMap res_icons;$/;"	v	file:
res_image_map	client/x11/res.cpp	/^static const ResImage res_image_map[] = {$/;"	v	file:
res_size	server/red_worker.c	/^    int res_size;$/;"	m	struct:FreeList	file:
res_strings	client/gui/resource_provider.cpp	/^} res_strings[] = {$/;"	v	typeref:struct:ResString
reserv	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t reserv[32];$/;"	m	struct:VDIPortRam
reset	client/red_peer.cpp	/^void RedPeer::OutMessage::reset(uint32_t type)$/;"	f	class:RedPeer::OutMessage
reset	client/utils.h	/^    void reset(T* obj)$/;"	f	class:AutoRef
reset	client/windows/event_sources_p.cpp	/^void EventSources::Trigger::reset()$/;"	f	class:EventSources::Trigger
reset	client/x11/event_sources_p.cpp	/^void EventSources::Trigger::reset()$/;"	f	class:EventSources::Trigger
reset	server/red_client_cache.h	/^static void FUNC_NAME(reset)(CHANNELCLIENT *channel_client, long size)$/;"	f
reset	server/red_client_shared_cache.h	/^static void FUNC_NAME(reset)(CACHE *cache, DisplayChannelClient *dcc, SpiceMsgWaitForChannels* sync_data)$/;"	f
reset_cursor_pos	client/windows/platform.cpp	/^void Platform::reset_cursor_pos()$/;"	f	class:Platform
reset_cursor_pos	client/x11/platform.cpp	/^void Platform::reset_cursor_pos()$/;"	f	class:Platform
reset_event	client/x11/event_sources_p.cpp	/^bool Trigger_p::reset_event()$/;"	f	class:Trigger_p
reset_handler	client/controller.h	/^    void reset_handler() { _handler = NULL;}$/;"	f	class:ControllerConnection
reset_handler	client/foreign_menu.h	/^    void reset_handler() { _handler = NULL;}$/;"	f	class:ForeignMenuConnection
reset_mouse_pos	client/screen.cpp	/^void RedScreen::reset_mouse_pos()$/;"	f	class:RedScreen
reset_screen	client/display_channel.cpp	/^void DisplayChannel::reset_screen()$/;"	f	class:DisplayChannel
reset_sticky	client/application.cpp	/^void Application::reset_sticky()$/;"	f	class:Application
reset_surface	client/gui/softrenderer.cpp	/^void SoftRenderer::reset_surface(uint8_t* surface, uint width, uint height, uint stride)$/;"	f	class:CEGUI::SoftRenderer
reset_tass_vertex	spice-common/common/glc.c	/^static void reset_tass_vertex(InternaCtx *ctx)$/;"	f	file:
resize	client/screen.cpp	/^void RedScreen::resize(int width, int height)$/;"	f	class:RedScreen
resize	client/windows/red_window.cpp	/^void RedWindow::resize(int width, int height)$/;"	f	class:RedWindow
resize	client/x11/red_window.cpp	/^void RedWindow::resize(int width, int height)$/;"	f	class:RedWindow
resize_screen	client/application.cpp	/^void Application::resize_screen(RedScreen *screen, int width, int height)$/;"	f	class:Application
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:ArrayType
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:ChannelType
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:ContainerType
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:PointerType
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:ProtocolType
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:Type
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:TypeAlias
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self):$/;"	m	class:TypeRef
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self, channel):$/;"	m	class:ChannelMember
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self, container):$/;"	m	class:Member
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self, container):$/;"	m	class:Switch
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self, container):$/;"	m	class:SwitchCase
resolve	spice-common/python_modules/ptypes.py	/^    def resolve(self, protocol):$/;"	m	class:ProtocolMember
resources	spice-common/common/messages.h	/^    SpiceResourceID resources[0];$/;"	m	struct:SpiceResourceList
response	client/application.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:GUITimer
response	client/application.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:TestTimer
response	client/application.cpp	/^    virtual void response(int response)$/;"	f	class:TestResponce
response	client/application.cpp	/^void ConnectedEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ConnectedEvent
response	client/application.cpp	/^void DisconnectedEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:DisconnectedEvent
response	client/application.cpp	/^void StickyKeyTimer::response(AbstractProcessLoop& events_loop)$/;"	f	class:StickyKeyTimer
response	client/application.cpp	/^void SwitchHostEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:SwitchHostEvent
response	client/application.cpp	/^void VisibilityEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:VisibilityEvent
response	client/cursor_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:AttachDispayEvent
response	client/cursor_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:CursorUpdateEvent
response	client/display_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:ActivateTimerEvent
response	client/display_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:AttachChannelsEvent
response	client/display_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:DetachChannelsEvent
response	client/display_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:MigPrimarySurfaceTimer
response	client/display_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:UnlockScreenEvent
response	client/display_channel.cpp	/^void ResetTimer::response(AbstractProcessLoop& events_loop)$/;"	f	class:ResetTimer
response	client/display_channel.cpp	/^void StreamsTimer::response(AbstractProcessLoop& events_loop)$/;"	f	class:StreamsTimer
response	client/gui/gui.cpp	/^    virtual void response(AbstractProcessLoop &events_loop)$/;"	f	class:BoxAbortEvent
response	client/gui/gui.cpp	/^    virtual void response(AbstractProcessLoop &events_loop)$/;"	f	class:BoxResponseEvent
response	client/inputs_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:KeyModifiersEvent
response	client/inputs_channel.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:SetInputsHandlerEvent
response	client/process_loop.cpp	/^void ProcessLoop::QuitEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ProcessLoop::QuitEvent
response	client/process_loop.cpp	/^void SyncEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:SyncEvent
response	client/red_channel.cpp	/^void MigrationConnectTargetEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:MigrationConnectTargetEvent
response	client/red_channel.cpp	/^void MigrationDisconnectSrcEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:MigrationDisconnectSrcEvent
response	client/red_client.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:MouseModeEvent
response	client/red_client.cpp	/^void AgentTimer::response(AbstractProcessLoop& events_loop)$/;"	f	class:AgentTimer
response	client/red_client.cpp	/^void ClipboardGrabEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ClipboardGrabEvent
response	client/red_client.cpp	/^void ClipboardNotifyEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ClipboardNotifyEvent
response	client/red_client.cpp	/^void ClipboardReleaseEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ClipboardReleaseEvent
response	client/red_client.cpp	/^void ClipboardRequestEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ClipboardRequestEvent
response	client/red_client.cpp	/^void MigrateEndEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:MigrateEndEvent
response	client/screen.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:LayerChangedEvent
response	client/screen.cpp	/^    virtual void response(AbstractProcessLoop& events_loop)$/;"	f	class:UpdateEvent
response	client/screen.cpp	/^void UpdateTimer::response(AbstractProcessLoop& events_loop)$/;"	f	class:UpdateTimer
response	client/smartcard_channel.cpp	/^void CardInsertEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:CardInsertEvent
response	client/smartcard_channel.cpp	/^void CardRemoveEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:CardRemoveEvent
response	client/smartcard_channel.cpp	/^void ReaderAddEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ReaderAddEvent
response	client/smartcard_channel.cpp	/^void ReaderRemoveEvent::response(AbstractProcessLoop& events_loop)$/;"	f	class:ReaderRemoveEvent
response	client/smartcard_channel.cpp	/^void VSCMessageEvent::response(AbstractProcessLoop& loop)$/;"	f	class:VSCMessageEvent
response_test	client/application.cpp	/^TestResponce response_test;$/;"	v
restOfLine	spice-common/python_modules/spice_parser.py	/^            alphanums, ParseException, ParseResults, Keyword, StringEnd, replaceWith$/;"	i
restore	client/gui/gui.cpp	/^        void restore()$/;"	f	class:GUI::Dialog::UndimInfo
restore	client/monitor.cpp	/^void Monitor::restore()$/;"	f	class:Monitor
restore	client/x11/platform.cpp	/^void MultyMonScreen::restore()$/;"	f	class:MultyMonScreen
restore_monitors	client/application.cpp	/^void Application::restore_monitors()$/;"	f	class:Application
restore_screens_size	client/application.cpp	/^void Application::restore_screens_size()$/;"	f	class:Application
result	server/agent-msg-filter.h	/^    int result;$/;"	m	struct:AgentMsgFilter
result	spice-common/spice-protocol/spice/vd_agent.h	/^   uint32_t result;$/;"	m	struct:VDAgentFileXferStatusMessage
revers_bits	client/cursor_channel.cpp	/^static inline uint8_t revers_bits(uint8_t byte)$/;"	f	file:
revers_bits	spice-common/common/canvas_base.c	/^static inline uint8_t revers_bits(uint8_t byte)$/;"	f	file:
reverse	server/red_worker.c	/^            int reverse;$/;"	m	struct:__anon177::__anon178::__anon179	file:
revert	client/x11/platform.cpp	/^void XMonitor::revert()$/;"	f	class:XMonitor
rgb16_pixel_t	client/glz_decoder.cpp	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb16_pixel_t	server/glz_encoder.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb16_pixel_t	server/red_worker.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb16_pixel_t	spice-common/common/lz.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb16_pixel_t	spice-common/common/quic.c	/^typedef uint16_t rgb16_pixel_t;$/;"	t	file:
rgb24_pixel_t	client/glz_decoder.cpp	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	client/glz_decoder.cpp	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t	server/glz_encoder.c	/^typedef struct __attribute__ ((__packed__)) rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	server/glz_encoder.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t	server/red_worker.c	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	server/red_worker.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t	spice-common/common/lz.c	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	spice-common/common/lz.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb24_pixel_t	spice-common/common/quic.c	/^typedef struct ATTR_PACKED rgb24_pixel_t {$/;"	s	file:
rgb24_pixel_t	spice-common/common/quic.c	/^} rgb24_pixel_t;$/;"	t	typeref:struct:rgb24_pixel_t	file:
rgb32_data_has_alpha	server/red_worker.c	/^static int rgb32_data_has_alpha(int width, int height, size_t stride,$/;"	f	file:
rgb32_get_blue	client/red_drawable.h	/^static inline uint8_t rgb32_get_blue(rgb32_t color)$/;"	f
rgb32_get_green	client/red_drawable.h	/^static inline uint8_t rgb32_get_green(rgb32_t color)$/;"	f
rgb32_get_red	client/red_drawable.h	/^static inline uint8_t rgb32_get_red(rgb32_t color)$/;"	f
rgb32_make	client/red_drawable.h	/^static inline rgb32_t rgb32_make(uint8_t r, uint8_t g, uint8_t b)$/;"	f
rgb32_pixel_t	client/glz_decoder.cpp	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	client/glz_decoder.cpp	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t	server/glz_encoder.c	/^typedef struct __attribute__ ((__packed__)) rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	server/glz_encoder.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t	server/red_worker.c	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	server/red_worker.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t	spice-common/common/lz.c	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	spice-common/common/lz.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_pixel_t	spice-common/common/quic.c	/^typedef struct ATTR_PACKED rgb32_pixel_t {$/;"	s	file:
rgb32_pixel_t	spice-common/common/quic.c	/^} rgb32_pixel_t;$/;"	t	typeref:struct:rgb32_pixel_t	file:
rgb32_t	client/red_drawable.h	/^typedef uint32_t rgb32_t;$/;"	t
rgb_16_555_to_32	spice-common/common/pixman_utils.c	/^static inline uint32_t rgb_16_555_to_32(uint16_t color)$/;"	f	file:
rgb_32_to_16_555	spice-common/common/canvas_base.c	/^static inline uint16_t rgb_32_to_16_555(uint32_t color)$/;"	f	file:
rgb_32_to_16_555	spice-common/common/pixman_utils.c	/^static inline uint16_t rgb_32_to_16_555(uint32_t color)$/;"	f	file:
rgb_32_to_16_565	spice-common/common/canvas_base.c	/^static inline uint16_t rgb_32_to_16_565(uint32_t color)$/;"	f	file:
rgb_fmt	server/h264_encoder.h	/^   enum AVPixelFormat rgb_fmt;$/;"	m	struct:_H264Encoder	typeref:enum:_H264Encoder::AVPixelFormat
rgb_state	spice-common/common/quic.c	/^    CommonState rgb_state;$/;"	m	struct:Encoder	file:
rgbframe	server/h264_encoder.h	/^   AVFrame *rgbframe;$/;"	m	struct:_H264Encoder
rgn	server/red_worker.c	/^    QRegion rgn;$/;"	m	struct:TreeItem	file:
right	client/gui/softrenderer.h	/^            int right;$/;"	m	struct:CEGUI::SoftRenderer::RectI
right	server/migration_protocol.h	/^    int32_t right;$/;"	m	struct:SpiceMigrateDataRect
right	spice-common/common/draw.h	/^    int32_t right;$/;"	m	struct:SpiceRect
right	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t right;$/;"	m	struct:QXLRect
right	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t right;$/;"	m	struct:QXLURect
ring_add	spice-common/common/ring.h	/^static inline void ring_add(Ring *ring, RingItem *item)$/;"	f
ring_add_after	spice-common/common/ring.h	/^static inline void ring_add_after(RingItem *item, RingItem *pos)$/;"	f
ring_add_before	spice-common/common/ring.h	/^static inline void ring_add_before(RingItem *item, RingItem *pos)$/;"	f
ring_get_head	spice-common/common/ring.h	/^static inline RingItem *ring_get_head(Ring *ring)$/;"	f
ring_get_length	spice-common/common/ring.h	/^static inline unsigned int ring_get_length(Ring *ring)$/;"	f
ring_get_tail	spice-common/common/ring.h	/^static inline RingItem *ring_get_tail(Ring *ring)$/;"	f
ring_init	spice-common/common/ring.h	/^static inline void ring_init(Ring *ring)$/;"	f
ring_is_empty	spice-common/common/ring.h	/^static inline int ring_is_empty(Ring *ring)$/;"	f
ring_item	server/red_worker.c	/^    RingItem ring_item;$/;"	m	struct:DependItem	file:
ring_item_init	spice-common/common/ring.h	/^static inline void ring_item_init(RingItem *item)$/;"	f
ring_item_is_linked	spice-common/common/ring.h	/^static inline int ring_item_is_linked(RingItem *item)$/;"	f
ring_link	server/reds-private.h	/^    RingItem ring_link; \/\/ list of links that belongs to the same client$/;"	m	struct:RedsMigPendingLink
ring_next	spice-common/common/ring.h	/^static inline RingItem *ring_next(Ring *ring, RingItem *pos)$/;"	f
ring_of	server/red_worker.c	/^static inline Ring *ring_of(RedWorker *worker, Ring *ring, TreeItem *item)$/;"	f	file:
ring_prev	spice-common/common/ring.h	/^static inline RingItem *ring_prev(Ring *ring, RingItem *pos)$/;"	f
ring_remove	spice-common/common/ring.h	/^static inline void ring_remove(RingItem *item)$/;"	f
root_index	spice-common/spice-protocol/spice/stats.h	/^    uint32_t root_index;$/;"	m	struct:SpiceStat
root_win_proc	client/x11/platform.cpp	/^static void root_win_proc(XEvent& event)$/;"	f	file:
root_window	client/gui/gui.cpp	/^    CEGUI::Window& root_window() { return *_root;}$/;"	f	class:GUI::Dialog
rop3	server/red_parse_qxl.h	/^        SpiceRop3 rop3;$/;"	m	union:RedDrawable::__anon161
rop3	spice-common/common/draw.h	/^    uint8_t rop3;$/;"	m	struct:SpiceRop3
rop3	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLRop3 rop3;$/;"	m	union:QXLCompatDrawable::__anon76
rop3	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLRop3 rop3;$/;"	m	union:QXLDrawable::__anon77
rop3	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t rop3;$/;"	m	struct:QXLRop3
rop3_init	spice-common/common/rop3.c	/^void rop3_init(void)$/;"	f
rop3_test_handler_t	spice-common/common/rop3.c	/^typedef void (*rop3_test_handler_t)(void);$/;"	t	file:
rop3_test_handlers_16	spice-common/common/rop3.c	/^static rop3_test_handler_t rop3_test_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_test_handlers_32	spice-common/common/rop3.c	/^static rop3_test_handler_t rop3_test_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_color_handler_t	spice-common/common/rop3.c	/^typedef void (*rop3_with_color_handler_t)(pixman_image_t *d, pixman_image_t *s,$/;"	t	file:
rop3_with_color_handlers_16	spice-common/common/rop3.c	/^static rop3_with_color_handler_t rop3_with_color_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_color_handlers_32	spice-common/common/rop3.c	/^static rop3_with_color_handler_t rop3_with_color_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_pattern_handler_t	spice-common/common/rop3.c	/^typedef void (*rop3_with_pattern_handler_t)(pixman_image_t *d, pixman_image_t *s,$/;"	t	file:
rop3_with_pattern_handlers_16	spice-common/common/rop3.c	/^static rop3_with_pattern_handler_t rop3_with_pattern_handlers_16[ROP3_NUM_OPS];$/;"	v	file:
rop3_with_pattern_handlers_32	spice-common/common/rop3.c	/^static rop3_with_pattern_handler_t rop3_with_pattern_handlers_32[ROP3_NUM_OPS];$/;"	v	file:
rop_descriptor	spice-common/common/draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceCopy
rop_descriptor	spice-common/common/draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceFill
rop_descriptor	spice-common/common/draw.h	/^    uint16_t rop_descriptor;$/;"	m	struct:SpiceOpaque
rop_descriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t rop_descriptor;$/;"	m	struct:QXLCopy
rop_descriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t rop_descriptor;$/;"	m	struct:QXLFill
rop_descriptor	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t rop_descriptor;$/;"	m	struct:QXLOpaque
ropd_descriptor_to_rop	spice-common/common/canvas_base.c	/^static SpiceROP ropd_descriptor_to_rop(int desc,$/;"	f	file:
roundtrip	server/red_channel.h	/^    int64_t roundtrip;$/;"	m	struct:RedChannelClientLatencyMonitor
roundtrip_stat	server/reds-private.h	/^    RedsStatValue roundtrip_stat;$/;"	m	struct:RedsState
row	server/mjpeg_encoder.c	/^    uint8_t *row;$/;"	m	struct:MJpegEncoder	file:
row_size	server/mjpeg_encoder.c	/^    uint32_t row_size;$/;"	m	struct:MJpegEncoder	file:
rows_completed	spice-common/common/quic.c	/^    int rows_completed;$/;"	m	struct:Encoder	file:
rsa	server/reds-private.h	/^    RSA *rsa;$/;"	m	struct:TicketInfo
rsa_size	server/reds-private.h	/^    int rsa_size;$/;"	m	struct:TicketInfo
run	client/application.cpp	/^int Application::run()$/;"	f	class:Application
run	client/process_loop.cpp	/^int ProcessLoop::run()$/;"	f	class:ProcessLoop
run	client/red_channel.cpp	/^void RedChannel::run()$/;"	f	class:RedChannel
run	client/red_client.cpp	/^void Migrate::run()$/;"	f	class:Migrate
runSSF	server/reds_stream.c	/^    int runSSF :1;$/;"	m	struct:RedsSASL	file:
running	server/char_device.c	/^    int running;$/;"	m	struct:SpiceCharDeviceState	file:
running	server/red_worker.c	/^    int running;$/;"	m	struct:RedWorker	file:
rw_alloc_lock	server/glz_encoder_dictionary_protected.h	/^    pthread_rwlock_t rw_alloc_lock;$/;"	m	struct:SharedDictionary
s_bucket	spice-common/common/quic.c	/^typedef struct s_bucket {$/;"	s	file:
s_bucket	spice-common/common/quic.c	/^} s_bucket;$/;"	t	typeref:struct:s_bucket	file:
s_pix_fmt	server/h264_type.h	/^    enum AVPixelFormat s_pix_fmt;$/;"	m	struct:_H264StreamInfo	typeref:enum:_H264StreamInfo::AVPixelFormat
sample_rate	client/playback_channel.cpp	/^    uint32_t sample_rate;$/;"	m	struct:FormatInfo	file:
samples	server/snd_worker.c	/^    uint32_t samples[RECORD_SAMPLES_SIZE];$/;"	m	struct:RecordChannel	file:
samples	server/snd_worker.c	/^    uint32_t samples[SND_CODEC_MAX_FRAME_SIZE];$/;"	m	struct:AudioFrame	file:
sasl	server/reds_stream.c	/^    RedsSASL sasl;$/;"	m	struct:RedsStreamPrivate	file:
sasl_appname	server/reds.c	/^static char *sasl_appname = NULL; \/\/ default to "spice" if NULL$/;"	v	file:
sasl_enabled	server/reds.c	/^static int sasl_enabled = 0; \/\/ sasl disabled by default$/;"	v	file:
save_position	client/screen.cpp	/^void RedScreen::save_position()$/;"	f	class:RedScreen
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	client/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	docs/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	docs/manual/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	server/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	server/tests/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	spice-common/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	spice-common/common/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	spice-common/python_modules/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	spice-common/spice-protocol/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	spice-common/spice-protocol/spice/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scale	spice-common/common/glc.c	/^static void scale(uint32_t *dest, uint32_t dest_width, uint32_t dest_height,$/;"	f	file:
scale_image	spice-common/common/canvas_base.h	/^    void (*scale_image)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
scale_image	spice-common/common/sw_canvas.c	/^static void scale_image(SpiceCanvas *spice_canvas,$/;"	f	file:
scale_image_from_surface	spice-common/common/canvas_base.h	/^    void (*scale_image_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
scale_image_from_surface	spice-common/common/sw_canvas.c	/^static void scale_image_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
scale_image_rop	spice-common/common/canvas_base.h	/^    void (*scale_image_rop)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
scale_image_rop	spice-common/common/sw_canvas.c	/^static void scale_image_rop(SpiceCanvas *spice_canvas,$/;"	f	file:
scale_image_rop_from_surface	spice-common/common/canvas_base.h	/^    void (*scale_image_rop_from_surface)(SpiceCanvas *canvas,$/;"	m	struct:__anon13
scale_image_rop_from_surface	spice-common/common/sw_canvas.c	/^static void scale_image_rop_from_surface(SpiceCanvas *spice_canvas,$/;"	f	file:
scale_mode	spice-common/common/draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceCopy
scale_mode	spice-common/common/draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceOpaque
scale_mode	spice-common/common/draw.h	/^    uint8_t scale_mode;$/;"	m	struct:SpiceRop3
scale_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t scale_mode;$/;"	m	struct:QXLCopy
scale_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t scale_mode;$/;"	m	struct:QXLOpaque
scale_mode	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t scale_mode;$/;"	m	struct:QXLRop3
scc	server/smartcard.c	/^    SmartCardChannelClient    *scc; \/\/ client providing the remote card$/;"	m	struct:SmartCardDeviceState	file:
screen	client/screen_layer.h	/^    RedScreen* screen() { return _screen; }$/;"	f	class:ScreenLayer
screen	client/x11/pixels_source_p.h	/^            int screen;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
screen_format	client/x11/platform.cpp	/^static RedDrawable::Format *screen_format = NULL;$/;"	v	file:
screens	client/x11/platform.cpp	/^static ScreenList screens;$/;"	v	file:
seamless_mig_dst	server/main_channel.c	/^    int seamless_mig_dst;$/;"	m	struct:MainChannelClient	file:
seamless_migrate	server/red_channel.h	/^    int seamless_migrate;$/;"	m	struct:RedClient
seamless_migration_enabled	server/reds-private.h	/^    int seamless_migration_enabled; \/* command line arg *\/$/;"	m	struct:RedsState
secondary_channels	server/reds.c	/^static int secondary_channels[] = {$/;"	v	file:
secondary_surface	server/tests/test_display_base.h	/^    uint8_t secondary_surface[SURF_WIDTH * SURF_HEIGHT * 4];$/;"	m	struct:Test
secs	server/tests/test_display_base.h	/^    uint32_t secs;$/;"	m	struct:CommandSleep
secure_listen_socket	server/reds-private.h	/^    int secure_listen_socket;$/;"	m	struct:RedsState
secure_listen_watch	server/reds-private.h	/^    SpiceWatch *secure_listen_watch;$/;"	m	struct:RedsState
secure_port	client/red_peer.h	/^        int secure_port;$/;"	m	class:RedPeer::ConnectionOptions
segments	spice-common/common/draw.h	/^  SpicePathSeg *segments[0];$/;"	m	struct:SpicePath
segments	spice-common/common/glc.c	/^    PathSegment *segments;$/;"	m	struct:InternalPath	file:
segments_pos	spice-common/common/glc.c	/^    int segments_pos;$/;"	m	struct:InternalPath	file:
segments_size	spice-common/common/glc.c	/^    int segments_size;$/;"	m	struct:InternalPath	file:
segs	server/glz_encoder_dictionary_protected.h	/^        WindowImageSegment  *segs;$/;"	m	struct:SharedDictionary::__anon170
segs_quota	server/glz_encoder_dictionary_protected.h	/^        uint32_t segs_quota;$/;"	m	struct:SharedDictionary::__anon170
selection_request	client/x11/platform.cpp	/^struct selection_request {$/;"	s	file:
self	server/dispatcher.h	/^    pthread_t self;$/;"	m	struct:Dispatcher
self_bitmap	server/red_parse_qxl.h	/^    uint8_t self_bitmap;$/;"	m	struct:RedDrawable
self_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t self_bitmap;$/;"	m	struct:QXLDrawable
self_bitmap_area	server/red_parse_qxl.h	/^    SpiceRect self_bitmap_area;$/;"	m	struct:RedDrawable
self_bitmap_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect self_bitmap_area;$/;"	m	struct:QXLDrawable
self_bitmap_image	server/red_parse_qxl.h	/^    SpiceImage *self_bitmap_image;$/;"	m	struct:RedDrawable
self_monitors_change	client/monitor.cpp	/^uint32_t Monitor::self_monitors_change = 0;$/;"	m	class:Monitor	file:
self_monitors_change	client/monitor.h	/^    static uint32_t self_monitors_change;$/;"	m	class:Monitor
send	client/client_net_socket.cpp	/^void ClientNetSocket::send()$/;"	f	class:ClientNetSocket
send	client/red_peer.cpp	/^uint32_t RedPeer::send(RedPeer::OutMessage& message)$/;"	f	class:RedPeer
send	client/red_peer.cpp	/^uint32_t RedPeer::send(uint8_t *buf, uint32_t size)$/;"	f	class:RedPeer
send_active_state	client/foreign_menu.cpp	/^void ForeignMenu::send_active_state(ForeignMenuConnection *conn, int32_t cmd)$/;"	f	class:ForeignMenu
send_agent_announce_capabilities	client/red_client.cpp	/^void RedClient::send_agent_announce_capabilities(bool request)$/;"	f	class:RedClient
send_agent_clipboard_message	client/red_client.cpp	/^void RedClient::send_agent_clipboard_message(uint32_t message_type, uint32_t size, void* data)$/;"	f	class:RedClient
send_agent_clipboard_notify_message	client/red_client.cpp	/^void RedClient::send_agent_clipboard_notify_message(uint32_t type, uint8_t *data, uint32_t size)$/;"	f	class:RedClient
send_agent_display_config	client/red_client.cpp	/^void RedClient::send_agent_display_config()$/;"	f	class:RedClient
send_agent_monitors_config	client/red_client.cpp	/^void RedClient::send_agent_monitors_config()$/;"	f	class:RedClient
send_alt_ctl_del	client/application.cpp	/^void Application::send_alt_ctl_del()$/;"	f	class:Application
send_atr	client/smartcard_channel.cpp	/^void SmartCardChannel::send_atr(VReader* vreader)$/;"	f	class:SmartCardChannel
send_buf	client/client_net_socket.cpp	/^uint32_t ClientNetSocket::send_buf(const uint8_t* buf, uint32_t size)$/;"	f	class:ClientNetSocket
send_command_hotkey	client/application.cpp	/^void Application::send_command_hotkey(int action)$/;"	f	class:Application
send_ctrl_alt_end	client/application.cpp	/^void Application::send_ctrl_alt_end()$/;"	f	class:Application
send_data	server/red_channel.h	/^    } send_data;$/;"	m	struct:RedChannelClient	typeref:struct:RedChannelClient::__anon148
send_data	server/red_worker.c	/^    } send_data;$/;"	m	struct:DisplayChannelClient	typeref:struct:DisplayChannelClient::__anon186	file:
send_data	server/red_worker.h	/^static inline void send_data(int fd, void *in_buf, int n)$/;"	f
send_data	server/snd_worker.c	/^    } send_data;$/;"	m	struct:SndChannel	typeref:struct:SndChannel::__anon139	file:
send_expose	client/x11/red_window.cpp	/^static void send_expose(Window window, int width, int height)$/;"	f	file:
send_fd	server/dispatcher.h	/^    int send_fd;$/;"	m	struct:Dispatcher
send_filtered_keys	client/windows/red_window.cpp	/^static inline void send_filtered_keys(RedWindow* window)$/;"	f	file:
send_hotkey_key_set	client/application.cpp	/^void Application::send_hotkey_key_set(const HotkeySet& key_set)$/;"	f	class:Application
send_item	server/red_channel.h	/^    channel_send_pipe_item_proc send_item;$/;"	m	struct:__anon145
send_key_down	client/application.cpp	/^void Application::send_key_down(RedKey key)$/;"	f	class:Application
send_key_up	client/application.cpp	/^void Application::send_key_up(RedKey key)$/;"	f	class:Application
send_main_attach_channels	client/red_client.cpp	/^void RedClient::send_main_attach_channels(void)$/;"	f	class:RedClient
send_message	client/smartcard_channel.cpp	/^void SmartCardChannel::send_message(uint32_t reader_id, VSCMsgType type, uint8_t* data, uint32_t len)$/;"	f	class:SmartCardChannel
send_message_done	client/client_net_socket.cpp	/^void ClientNetSocket::send_message_done()$/;"	f	class:ClientNetSocket
send_messages	client/red_channel.cpp	/^void RedChannel::send_messages()$/;"	f	class:RedChannel
send_messages	server/snd_worker.c	/^    snd_channel_send_messages_proc send_messages;$/;"	m	struct:SndChannel	file:
send_migrate_end	client/red_client.cpp	/^void RedClient::send_migrate_end()$/;"	f	class:RedClient
send_migrate_flush_mark	client/red_channel.cpp	/^void RedChannel::send_migrate_flush_mark()$/;"	f	class:RedChannel
send_msg_to_client	server/char_device.h	/^    void (*send_msg_to_client)(SpiceCharDeviceMsgToClient *msg,$/;"	m	struct:SpiceCharDeviceCallbacks
send_next	server/red_worker.c	/^    RedCompressBuf *send_next;$/;"	m	struct:RedCompressBuf	file:
send_next_sync_event	client/smartcard_channel.cpp	/^void SmartCardChannel::send_next_sync_event()$/;"	f	class:SmartCardChannel
send_packet	server/spice-experimental.h	/^    void (*send_packet)(SpiceNetWireInstance *sin, const uint8_t *pkt, int len);$/;"	m	struct:SpiceNetWireInterface
send_queue	server/char_device.c	/^    Ring send_queue;$/;"	m	struct:SpiceCharDeviceClientState	file:
send_queue_size	server/char_device.c	/^    uint32_t send_queue_size;$/;"	m	struct:SpiceCharDeviceClientState	file:
send_quit_request	client/windows/platform.cpp	/^void Platform::send_quit_request()$/;"	f	class:Platform
send_quit_request	client/x11/platform.cpp	/^void Platform::send_quit_request()$/;"	f	class:Platform
send_reader_added	client/smartcard_channel.cpp	/^void SmartCardChannel::send_reader_added(const char* reader_name)$/;"	f	class:SmartCardChannel
send_reader_removed	client/smartcard_channel.cpp	/^void SmartCardChannel::send_reader_removed(uint32_t reader_id)$/;"	f	class:SmartCardChannel
send_record_mode	client/record_channel.cpp	/^void RecordChannel::send_record_mode()$/;"	f	class:RecordChannel
send_selection_notify	client/x11/platform.cpp	/^static void send_selection_notify(Atom prop, int process_next_req)$/;"	f	file:
send_start_mark	client/record_channel.cpp	/^void RecordChannel::send_start_mark()$/;"	f	class:RecordChannel
send_targets	client/x11/platform.cpp	/^static void send_targets(XEvent& request_event)$/;"	f	file:
send_tokens_to_client	server/char_device.h	/^    void (*send_tokens_to_client)(RedClient *client, uint32_t tokens, void *opaque);$/;"	m	struct:SpiceCharDeviceCallbacks
separator	client/cmd_line_parser.h	/^        char separator;$/;"	m	class:CmdLineParser::Option
serial	client/red_peer.h	/^    uint64_t serial() { return _serial;}$/;"	f	class:RedPeer::CompoundInMessage
serial	server/red_channel.h	/^        uint64_t serial;$/;"	m	struct:RedChannelClient::__anon148
serial	server/red_channel.h	/^    uint64_t serial;$/;"	m	struct:IncomingHandler
serial	server/snd_worker.c	/^        uint64_t serial;$/;"	m	struct:SndChannel::__anon139	file:
serial	spice-common/spice-protocol/spice/protocol.h	/^    uint64_t serial;$/;"	m	struct:SpiceDataHeader
server	server/tests/test_display_base.h	/^    SpiceServer *server;$/;"	m	struct:Test
server_state	server/mjpeg_encoder.c	/^    MJpegEncoderServerState server_state;$/;"	m	struct:MJpegEncoderRateControl	file:
service_id	spice-common/common/messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelServiceIpMap
service_id	spice-common/common/messages.h	/^    uint32_t service_id;$/;"	m	struct:SpiceMsgTunnelSocketOpen
session_id	spice-common/common/messages.h	/^    uint32_t session_id;$/;"	m	struct:SpiceMsgMainInit
set	client/cursor.h	/^    virtual void set(Window window) {}$/;"	f	class:LocalCursor
set	client/red_channel.cpp	/^    void set(RedChannel::OutMessage* message) { _message = message;}$/;"	f	class:AutoMessage
set	client/utils.h	/^    void set(T* array) { delete[] _array; _array = array;}$/;"	f	class:AutoArray
set	client/utils.h	/^    void set(T* res) {if (_res) _free_res(_res); _res = res; }$/;"	f	class:_AutoRes
set	client/windows/platform.cpp	/^    void set(Window window) { SetCursor(_handle);}$/;"	f	class:WinBaseLocalCursor
set	client/windows/platform_utils.h	/^    void set(T inRes) {if (res != invalid) free_res(res); res = inRes; }$/;"	f	class:AutoRes
set	client/x11/platform.cpp	/^void XBaseLocalCursor::set(Window window)$/;"	f	class:XBaseLocalCursor
set	server/red_parse_qxl.h	/^        } set;$/;"	m	union:RedCursorCmd::__anon164	typeref:struct:RedCursorCmd::__anon164::__anon165
set	spice-common/spice-protocol/spice/qxl_dev.h	/^        } set;$/;"	m	union:QXLCursorCmd::__anon71	typeref:struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
setQueueingEnabled	client/gui/softrenderer.cpp	/^void SoftRenderer::setQueueingEnabled(bool val)$/;"	f	class:CEGUI::SoftRenderer
setRGB	client/gui/softrenderer.cpp	/^inline void SoftRenderer::setRGB(ColourI& dest, const colour& src)$/;"	f	class:CEGUI::SoftRenderer
set_area	client/screen_layer.cpp	/^void ScreenLayer::set_area(const QRegion& area)$/;"	f	class:ScreenLayer
set_auto_display_res	client/application.cpp	/^void Application::set_auto_display_res(bool auto_display_res)$/;"	f	class:Application
set_auto_display_res	client/red_client.h	/^    void set_auto_display_res(bool auto_display_res) { _auto_display_res = auto_display_res;}$/;"	f	class:RedClient
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_base_from	spice-common/build-aux/depcomp	/^set_base_from ()$/;"	f
set_bit	client/utils.h	/^static inline void set_bit(const void* addr, int bit)$/;"	f
set_bit	server/spice_server_utils.h	/^static inline void set_bit(int index, uint32_t *addr)$/;"	f
set_bit_be	client/utils.h	/^static inline void set_bit_be(const void* addr, int bit)$/;"	f
set_blocking	client/x11/event_sources_p.cpp	/^static void set_blocking(int fd)$/;"	f	file:
set_broken	client/x11/platform.cpp	/^    void set_broken() {_broken = true;}$/;"	f	class:XScreen
set_brush	spice-common/common/gdi_canvas.c	/^static HBRUSH set_brush(HDC dc, HBRUSH hbrush, SpiceBrush *brush)$/;"	f	file:
set_brush	spice-common/common/gl_canvas.c	/^static void set_brush(GLCanvas *canvas, SpiceBrush *brush)$/;"	f	file:
set_ca_file	client/application.cpp	/^bool Application::set_ca_file(const char* ca_file, const char* arg0)$/;"	f	class:Application
set_canvas_option	client/application.cpp	/^bool Application::set_canvas_option(CmdLineParser& parser, char *val, const char* arg0)$/;"	f	class:Application
set_capability	client/red_channel.cpp	/^void RedChannelBase::set_capability(ChannelCaps& caps, uint32_t cap)$/;"	f	class:RedChannelBase
set_capability	client/red_channel.cpp	/^void RedChannelBase::set_capability(uint32_t cap)$/;"	f	class:RedChannelBase
set_capture_mode	client/display_channel.cpp	/^void DisplayChannel::set_capture_mode(bool on)$/;"	f	class:DisplayChannel
set_channels_security	client/application.cpp	/^bool Application::set_channels_security(CmdLineParser& parser, bool on, char *val,$/;"	f	class:Application
set_channels_security	client/application.cpp	/^bool Application::set_channels_security(int port, int sport)$/;"	f	class:Application
set_client_capabilities	server/spice.h	/^    void (*set_client_capabilities)(QXLInstance *qin,$/;"	m	struct:QXLInterface
set_client_capabilities	server/tests/test_display_base.c	/^static void set_client_capabilities(QXLInstance *qin,$/;"	f	file:
set_client_capabilities_pending	server/red_worker.c	/^    int set_client_capabilities_pending;$/;"	m	struct:RedWorker	file:
set_clip	client/display_channel.cpp	/^void VideoStream::set_clip(int type, uint32_t num_clip_rects, SpiceRect* clip_rects)$/;"	f	class:VideoStream
set_clip	spice-common/common/gdi_canvas.c	/^static void set_clip(GdiCanvas *canvas, SpiceClip *clip)$/;"	f	file:
set_clip	spice-common/common/gl_canvas.c	/^static void set_clip(GLCanvas *canvas, SpiceRect *bbox, SpiceClip *clip)$/;"	f	file:
set_clip_rects	client/display_channel.cpp	/^void DisplayChannel::set_clip_rects(const SpiceClip& clip, uint32_t& num_clip_rects,$/;"	f	class:DisplayChannel
set_clipboard_listener	client/windows/platform.cpp	/^void Platform::set_clipboard_listener(ClipboardListener* listener)$/;"	f	class:Platform
set_clipboard_listener	client/x11/platform.cpp	/^void Platform::set_clipboard_listener(ClipboardListener* listener)$/;"	f	class:Platform
set_clipboard_owner	client/windows/platform.cpp	/^void Platform::set_clipboard_owner(int new_owner)$/;"	f	class:Platform
set_clipboard_owner	client/x11/platform.cpp	/^void Platform::set_clipboard_owner(int new_owner)$/;"	f	class:Platform
set_clipboard_owner_unlocked	client/windows/platform.cpp	/^void Platform::set_clipboard_owner_unlocked(int new_owner)$/;"	f	class:Platform
set_clipboard_owner_unlocked	client/x11/platform.cpp	/^void Platform::set_clipboard_owner_unlocked(int new_owner)$/;"	f	class:Platform
set_cmd	server/tests/test_display_base.c	/^static void set_cmd(QXLCommandExt *ext, uint32_t type, QXLPHYSICAL data)$/;"	f	file:
set_common_capability	client/red_channel.cpp	/^void RedChannelBase::set_common_capability(uint32_t cap)$/;"	f	class:RedChannelBase
set_compression_level	server/spice.h	/^    void (*set_compression_level)(QXLInstance *qin, int level);$/;"	m	struct:QXLInterface
set_compression_level	server/tests/test_display_base.c	/^static void set_compression_level(QXLInstance *qin, int level)$/;"	f	file:
set_connection_ciphers	client/application.cpp	/^bool Application::set_connection_ciphers(const char* ciphers, const char* arg0)$/;"	f	class:Application
set_cursor	client/cursor_channel.cpp	/^void CursorChannel::set_cursor(SpiceCursor& red_cursor, int x, int y, bool visible)$/;"	f	class:CursorChannel
set_cursor	client/display_channel.cpp	/^void DisplayChannel::set_cursor(CursorData* cursor)$/;"	f	class:DisplayChannel
set_cursor	client/screen.cpp	/^void RedScreen::set_cursor(LocalCursor* cursor)$/;"	f	class:RedScreen
set_cursor	client/windows/red_window.cpp	/^void RedWindow::set_cursor(LocalCursor* local_cursor)$/;"	f	class:RedWindow
set_cursor	client/x11/red_window.cpp	/^void RedWindow::set_cursor(LocalCursor* local_cursor)$/;"	f	class:RedWindow
set_data_handler	client/playback_channel.cpp	/^void PlaybackChannel::set_data_handler()$/;"	f	class:PlaybackChannel
set_default_hotkeys	client/application.cpp	/^void Application::set_default_hotkeys(void)$/;"	f	class:Application
set_desired_mode	client/record_channel.cpp	/^void RecordChannel::set_desired_mode(int frequency)$/;"	f	class:RecordChannel
set_destroy_parameters	server/tests/test_display_width_stride.c	/^void set_destroy_parameters(Test *test, Command *command)$/;"	f
set_dialog	client/gui/gui.cpp	/^    void set_dialog(Dialog* dialog) { _gui.set_dialog(dialog);}$/;"	f	class:GUI::Dialog
set_dialog	client/gui/gui.cpp	/^void GUI::set_dialog(Dialog* dialog)$/;"	f	class:GUI
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
set_dir_from	spice-common/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_disabled_display_effects	client/application.cpp	/^bool Application::set_disabled_display_effects(CmdLineParser& parser, char *val, const char* arg0,$/;"	f	class:Application
set_display_mode_listner	client/windows/platform.cpp	/^void Platform::set_display_mode_listner(DisplayModeListener* listener)$/;"	f	class:Platform
set_display_mode_listner	client/x11/platform.cpp	/^void Platform::set_display_mode_listner(DisplayModeListener* listener)$/;"	f	class:Platform
set_display_setting	client/red_client.h	/^    void set_display_setting(DisplaySetting& setting) { _display_setting = setting;}$/;"	f	class:RedClient
set_draw_handlers	client/display_channel.cpp	/^void DisplayChannel::set_draw_handlers()$/;"	f	class:DisplayChannel
set_draw_parameters	server/tests/test_display_width_stride.c	/^void set_draw_parameters(Test *test, Command *command)$/;"	f
set_enable_channels	client/application.cpp	/^bool Application::set_enable_channels(CmdLineParser& parser, bool enable, char *val,$/;"	f	class:Application
set_event_listener	client/windows/platform.cpp	/^void Platform::set_event_listener(EventListener* listener)$/;"	f	class:Platform
set_event_listener	client/x11/platform.cpp	/^void Platform::set_event_listener(EventListener* listener)$/;"	f	class:Platform
set_exclusive	client/controller.cpp	/^bool Controller::set_exclusive(bool exclusive)$/;"	f	class:Controller
set_free	client/monitor.h	/^    void set_free() {_free = true;}$/;"	f	class:Monitor
set_generation	client/process_loop.h	/^    void set_generation(uint32_t gen) { _generation = gen;}$/;"	f	class:Event
set_gl_context	client/x11/red_window.cpp	/^void RedWindow::set_gl_context(RedGlContext context)$/;"	f	class:RedWindow
set_handler	client/red_channel.h	/^void MessageHandlerImp<HandlerClass, channel_id>::set_handler(unsigned int id, Handler handler)$/;"	f	class:MessageHandlerImp
set_handler	client/windows/named_pipe.cpp	/^void WinConnection::set_handler(NamedPipe::ConnectionInterface* handler)$/;"	f	class:WinConnection
set_handler	client/windows/named_pipe.h	/^    void set_handler(NamedPipe::ConnectionInterface* handler) { _handler = handler;}$/;"	f	class:PipeBuffer
set_height	client/x11/platform.cpp	/^    void set_height(int height) {_height = height;}$/;"	f	class:XScreen
set_host_cert_subject	client/application.cpp	/^bool Application::set_host_cert_subject(const char* subject, const char* arg0)$/;"	f	class:Application
set_hotkeys	client/application.cpp	/^void Application::set_hotkeys(const std::string& hotkeys)$/;"	f	class:Application
set_icon	client/windows/red_window.cpp	/^void RedWindow::set_icon(Icon* icon)$/;"	f	class:RedWindow
set_icon	client/x11/red_window.cpp	/^void RedWindow::set_icon(Icon* icon)$/;"	f	class:RedWindow
set_image_compression	server/reds.c	/^static void set_image_compression(spice_image_compression_t val)$/;"	f	file:
set_info_mode	client/application.cpp	/^void InfoLayer::set_info_mode()$/;"	f	class:InfoLayer
set_is_generated	spice-common/python_modules/codegen.py	/^    def set_is_generated(self, kind, name):$/;"	m	class:CodeWriter
set_key_handler	client/application.cpp	/^void Application::set_key_handler(KeyHandler& handler)$/;"	f	class:Application
set_keyboard_led	client/x11/platform.cpp	/^static void  set_keyboard_led(XLed led, int set)$/;"	f	file:
set_keyboard_lock_modifiers	client/windows/platform.cpp	/^void Platform::set_keyboard_lock_modifiers(uint32_t modifiers)$/;"	f	class:Platform
set_keyboard_lock_modifiers	client/x11/platform.cpp	/^void Platform::set_keyboard_lock_modifiers(uint32_t modifiers)$/;"	f	class:Platform
set_local	client/cursor.cpp	/^void CursorData::set_local(LocalCursor* local_cursor)$/;"	f	class:CursorData
set_local_modifiers	client/inputs_channel.cpp	/^void InputsChannel::set_local_modifiers()$/;"	f	class:InputsChannel
set_logical_size	server/spice.h	/^    void (*set_logical_size)(SpiceTabletInstance* tablet, int width, int height);$/;"	m	struct:SpiceTabletInterface
set_lossy	server/red_client_shared_cache.h	/^static int FUNC_NAME(set_lossy)(CACHE *cache, uint64_t id, int lossy)$/;"	f
set_mask	spice-common/common/gl_canvas.c	/^static void set_mask(GLCanvas *canvas, SpiceQMask *mask, int x, int y)$/;"	f	file:
set_menu	client/application.cpp	/^void Application::set_menu(Menu* menu)$/;"	f	class:Application
set_menu	client/windows/red_window.cpp	/^int RedWindow::set_menu(Menu* menu)$/;"	f	class:RedWindow
set_menu	client/x11/red_window.cpp	/^int RedWindow::set_menu(Menu* menu)$/;"	f	class:RedWindow
set_minmax	client/x11/red_window.cpp	/^void RedWindow_p::set_minmax(PixelsSource_p& pix_source)$/;"	f	class:RedWindow_p
set_mm_time	client/red_client.cpp	/^void RedClient::set_mm_time(uint32_t time)$/;"	f	class:RedClient
set_mm_time	server/spice.h	/^    void (*set_mm_time)(QXLInstance *qin, uint32_t mm_time);$/;"	m	struct:QXLInterface
set_mm_time	server/tests/test_display_base.c	/^static void set_mm_time(QXLInstance *qin, uint32_t mm_time)$/;"	f	file:
set_modal_loop_timer	client/windows/platform.cpp	/^static bool set_modal_loop_timer()$/;"	f	file:
set_mode	client/monitor.cpp	/^void Monitor::set_mode(int width, int height)$/;"	f	class:Monitor
set_mode	client/x11/platform.cpp	/^void XMonitor::set_mode(const XRRModeInfo& mode)$/;"	f	class:XMonitor
set_monitor	client/screen.h	/^    void set_monitor(Monitor *monitor) { _monitor = monitor;}$/;"	f	class:RedScreen
set_monitor_mode	client/x11/platform.cpp	/^bool MultyMonScreen::set_monitor_mode(XMonitor& monitor, const XRRModeInfo& mode_info)$/;"	f	class:MultyMonScreen
set_monitors_config_to_primary	server/red_worker.c	/^static void set_monitors_config_to_primary(RedWorker *worker)$/;"	f	file:
set_mouse_handler	client/application.cpp	/^void Application::set_mouse_handler(MouseHandler& handler)$/;"	f	class:Application
set_mouse_mode	client/red_client.cpp	/^void RedClient::set_mouse_mode(uint32_t supported_modes, uint32_t current_mode)$/;"	f	class:RedClient
set_mouse_position	client/windows/red_window.cpp	/^void RedWindow::set_mouse_position(int x, int y)$/;"	f	class:RedWindow
set_mouse_position	client/x11/red_window.cpp	/^void RedWindow::set_mouse_position(int x, int y)$/;"	f	class:RedWindow
set_msg_serial	server/red_channel.h	/^    set_msg_serial_proc set_msg_serial;$/;"	m	struct:SpiceDataHeaderOpaque
set_msg_serial_proc	server/red_channel.h	/^typedef void (*set_msg_serial_proc)(SpiceDataHeaderOpaque *header, uint64_t serial);$/;"	t
set_msg_size	server/red_channel.h	/^    set_msg_size_proc set_msg_size;$/;"	m	struct:SpiceDataHeaderOpaque
set_msg_size_proc	server/red_channel.h	/^typedef void (*set_msg_size_proc)(SpiceDataHeaderOpaque *header, uint32_t size);$/;"	t
set_msg_sub_list	server/red_channel.h	/^    set_msg_sub_list_proc set_msg_sub_list;$/;"	m	struct:SpiceDataHeaderOpaque
set_msg_sub_list_proc	server/red_channel.h	/^typedef void (*set_msg_sub_list_proc)(SpiceDataHeaderOpaque *header, uint32_t sub_list);$/;"	t
set_msg_type	server/red_channel.h	/^    set_msg_type_proc set_msg_type;$/;"	m	struct:SpiceDataHeaderOpaque
set_msg_type_proc	server/red_channel.h	/^typedef void (*set_msg_type_proc)(SpiceDataHeaderOpaque *header, uint16_t type);$/;"	t
set_multi	client/cmd_line_parser.cpp	/^void CmdLineParser::set_multi(int id, char separator)$/;"	f	class:CmdLineParser
set_multi_val	client/controller.cpp	/^bool ControllerConnection::set_multi_val(uint32_t op, char* multi_val)$/;"	f	class:ControllerConnection
set_name	client/menu.h	/^    void set_name(const std::string& name) { _name = name;}$/;"	f	class:Menu
set_name	client/screen.cpp	/^void RedScreen::set_name(const std::string& name)$/;"	f	class:RedScreen
set_non_blocking	client/x11/event_sources_p.cpp	/^static void set_non_blocking(int fd)$/;"	f	file:
set_one_channel_security	server/reds.c	/^static void set_one_channel_security(int id, uint32_t security)$/;"	f	file:
set_op	spice-common/common/gl_canvas.c	/^static void set_op(GLCanvas *canvas, uint16_t rop_decriptor)$/;"	f	file:
set_opaque	client/cursor.h	/^    void set_opaque(CursorOpaque* opaque) { delete _opaque; _opaque = opaque;}$/;"	f	class:CursorData
set_opaque	client/gui/gui.cpp	/^void GUI::Dialog::set_opaque(CEGUI::Window* win)$/;"	f	class:GUI::Dialog
set_option	spice-common/python_modules/codegen.py	/^    def set_option(self, opt, value = True):$/;"	m	class:CodeWriter
set_origin	client/pixels_source.h	/^    void set_origin(int x, int y) { _origin.x = x; _origin.y = y;}$/;"	f	class:PixelsSource
set_password	client/red_client.h	/^    void set_password(const std::string& password) { _password = password;}$/;"	f	class:RedClient
set_pat	spice-common/common/glc.c	/^static void set_pat(InternaCtx *ctx, InternalPat *pat)$/;"	f	file:
set_path	spice-common/common/gdi_canvas.c	/^static void set_path(GdiCanvas *canvas, SpicePath *s)$/;"	f	file:
set_port_text	client/gui/gui.cpp	/^void LoginDialog::set_port_text(CEGUI::Window* win, int port)$/;"	f	class:LoginDialog
set_prefix	spice-common/python_modules/codegen.py	/^def set_prefix(prefix):$/;"	f
set_primary_params	server/tests/test_display_resolution_changes.c	/^void set_primary_params(Test *test, Command *command)$/;"	f
set_process_loop	client/process_loop.h	/^    void set_process_loop(AbstractProcessLoop* process_loop) { _process_loop = process_loop;}$/;"	f	class:Event
set_process_loop	client/windows/platform.cpp	/^void Platform::set_process_loop(ProcessLoop& main_process_loop)$/;"	f	class:Platform
set_process_loop	client/x11/platform.cpp	/^void Platform::set_process_loop(ProcessLoop& main_process_loop)$/;"	f	class:Platform
set_protocol	client/red_client.h	/^    void set_protocol(int protocol) { _protocol = protocol;}$/;"	f	class:RedClient
set_ptr_size	spice-common/python_modules/ptypes.py	/^    def set_ptr_size(self, new_size):$/;"	m	class:PointerType
set_pusher	client/x11/platform.cpp	/^    void set_pusher(XMonitor& pusher) { _pusher = &pusher;}$/;"	f	class:XMonitor
set_raster_pos	spice-common/common/glc.c	/^static inline void set_raster_pos(InternaCtx *ctx, int x, int y)$/;"	f	file:
set_rect_area	client/screen_layer.cpp	/^void ScreenLayer::set_rect_area(const SpiceRect& r)$/;"	f	class:ScreenLayer
set_render_fbo	client/x11/red_window.cpp	/^void RedWindow::set_render_fbo(GLuint fbo)$/;"	f	class:RedWindow
set_render_pbuff	client/x11/red_window.cpp	/^void RedWindow::set_render_pbuff(RedPbuffer pbuff)$/;"	f	class:RedWindow
set_required	client/cmd_line_parser.cpp	/^void CmdLineParser::set_required(int id)$/;"	f	class:CmdLineParser
set_scale_mode	spice-common/common/gdi_canvas.c	/^static void set_scale_mode(GdiCanvas *canvas, uint8_t scale_mode)$/;"	f	file:
set_screen	client/gui/gui.cpp	/^void GUI::set_screen(RedScreen* in_screen)$/;"	f	class:GUI
set_screen	client/screen_layer.h	/^    void set_screen(RedScreen* screen) { _screen = screen;}$/;"	f	class:ScreenLayer
set_screen_size	client/x11/platform.cpp	/^bool DynamicScreen::set_screen_size(int size_index)$/;"	f	class:DynamicScreen
set_size	client/x11/platform.cpp	/^void MultyMonScreen::set_size(int width, int height)$/;"	f	class:MultyMonScreen
set_state	client/application.cpp	/^void Application::set_state(State state)$/;"	f	class:Application
set_state	client/gui/gui.cpp	/^void GUI::set_state(Application::State state)$/;"	f	class:GUI
set_state	client/red_channel.cpp	/^void RedChannel::set_state(int state)$/;"	f	class:RedChannel
set_sticky	client/application.cpp	/^void InfoLayer::set_sticky(bool is_on)$/;"	f	class:InfoLayer
set_surface_params	server/tests/test_display_width_stride.c	/^void set_surface_params(Test *test, Command *command)$/;"	f
set_surface_release_info	server/red_worker.c	/^static inline void set_surface_release_info(RedWorker *worker, uint32_t surface_id, int is_create,$/;"	f	file:
set_target	client/red_client.cpp	/^void RedClient::set_target(const std::string& host, int port, int sport, int protocol)$/;"	f	class:RedClient
set_thread_priority	client/windows/platform.cpp	/^void Platform::set_thread_priority(void* thread, Platform::ThreadPriority in_priority)$/;"	f	class:Platform
set_thread_priority	client/x11/platform.cpp	/^void Platform::set_thread_priority(void* thread, Platform::ThreadPriority in_priority)$/;"	f	class:Platform
set_title	client/application.cpp	/^void Application::set_title(const std::string& title)$/;"	f	class:Application
set_title	client/windows/red_window.cpp	/^void RedWindow::set_title(std::string& title)$/;"	f	class:RedWindow
set_title	client/x11/red_window.cpp	/^void RedWindow::set_title(std::string& title)$/;"	f	class:RedWindow
set_type	client/red_window.h	/^    void set_type(Type type) { _type = type;}$/;"	f	class:RedWindow
set_type_gl	client/screen.cpp	/^void RedScreen::set_type_gl()$/;"	f	class:RedScreen
set_type_gl	client/x11/red_window.cpp	/^void RedWindow::set_type_gl()$/;"	f	class:RedWindow
set_update_interrupt_trigger	client/screen.cpp	/^void RedScreen::set_update_interrupt_trigger(EventSources::Trigger *trigger)$/;"	f	class:RedScreen
set_used	client/monitor.h	/^    void set_used() {_free = false;}$/;"	f	class:Monitor
set_using_ogl	client/screen_layer.h	/^    void set_using_ogl(bool val) {_using_ogl = val;}$/;"	f	class:ScreenLayer
set_valid	client/red_client.h	/^    void set_valid(bool val) { _valid = val;}$/;"	f	class:MigChannel
set_visibale	client/x11/red_window_p.h	/^    void set_visibale(bool vis) { _visibale = vis;}$/;"	f	class:RedWindow_p
set_width	client/x11/platform.cpp	/^    void set_width(int width) {_width = width;}$/;"	f	class:XScreen
set_win_pos	client/gui/gui.cpp	/^static inline void set_win_pos(CEGUI::Window* win, int x, int y)$/;"	f	file:
set_win_proc	client/x11/platform.cpp	/^void XPlatform::set_win_proc(Window win, win_proc_t proc)$/;"	f	class:XPlatform
set_win_size	client/gui/gui.cpp	/^static inline void set_win_size(CEGUI::Window* win, int width, int height)$/;"	f	file:
set_wm_trigger	spice-common/common/quic.c	/^static void set_wm_trigger(CommonState *state)$/;"	f	file:
setupImageCodec	client/gui/softrenderer.cpp	/^void SoftRenderer::setupImageCodec()$/;"	f	class:CEGUI::SoftRenderer
setup_dummy_signal_handler	server/dispatcher.c	/^static void setup_dummy_signal_handler(void)$/;"	f	file:
severity	spice-common/common/messages.h	/^    uint32_t severity;$/;"	m	struct:SpiceMsgNotify
shadow	server/red_worker.c	/^    Shadow *shadow;$/;"	m	struct:DrawItem	file:
shadows_count	server/red_worker.c	/^    uint32_t shadows_count;$/;"	m	struct:RedWorker	file:
shape	server/red_parse_qxl.h	/^            SpiceCursor shape;$/;"	m	struct:RedCursorCmd::__anon164::__anon165
shape	spice-common/spice-protocol/spice/qxl_dev.h	/^            QXLPHYSICAL shape;$/;"	m	struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	client/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	docs/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	docs/manual/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	server/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	server/tests/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	spice-common/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	spice-common/common/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	spice-common/python_modules/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	spice-common/spice-protocol/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	spice-common/spice-protocol/spice/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shminfo	client/x11/pixels_source_p.h	/^            XShmSegmentInfo *shminfo;$/;"	m	struct:PixelsSource_p::__anon116::__anon117
short_name	client/cmd_line_parser.h	/^        char short_name;$/;"	m	class:CmdLineParser::Option
show	client/application.cpp	/^void Application::show()$/;"	f	class:Application
show	client/screen.cpp	/^void RedScreen::show()$/;"	f	class:RedScreen
show	client/screen.cpp	/^void RedScreen::show(bool activate, RedScreen* pos)$/;"	f	class:RedScreen
show	client/windows/red_window.cpp	/^void RedWindow::show(int screen_id)$/;"	f	class:RedWindow
show	client/x11/red_window.cpp	/^void RedWindow::show(int screen_id)$/;"	f	class:RedWindow
show_current	server/red_worker.c	/^static void show_current(RedWorker *worker, Ring *ring)$/;"	f	file:
show_current	server/red_worker.c	2219;"	d	file:
show_cursor	client/windows/red_window.cpp	/^void RedWindow::show_cursor()$/;"	f	class:RedWindow
show_cursor	client/x11/red_window.cpp	/^void RedWindow::show_cursor()$/;"	f	class:RedWindow
show_draw_item	server/red_worker.c	/^static void show_draw_item(RedWorker *worker, DrawItem *draw_item, const char *prefix)$/;"	f	file:
show_full_screen	client/application.cpp	/^void Application::show_full_screen()$/;"	f	class:Application
show_full_screen	client/screen.cpp	/^void RedScreen::show_full_screen()$/;"	f	class:RedScreen
show_gui	client/application.cpp	/^void Application::show_gui()$/;"	f	class:Application
show_help	client/cmd_line_parser.cpp	/^void CmdLineParser::show_help()$/;"	f	class:CmdLineParser
show_info_layer	client/application.cpp	/^void Application::show_info_layer()$/;"	f	class:Application
show_me	client/application.cpp	/^void Application::show_me(bool full_screen)$/;"	f	class:Application
show_red_drawable	server/red_worker.c	/^static void show_red_drawable(RedWorker *worker, RedDrawable *drawable, const char *prefix)$/;"	f	file:
show_red_key	client/application.cpp	/^static void show_red_key(RedKey key)$/;"	f	file:
show_scren_info	client/x11/platform.cpp	/^static void show_scren_info()$/;"	f	file:
shrink	client/x11/platform.cpp	/^    static void shrink(SpiceRect& area, int delta)$/;"	f	class:LeftVariant
shrink	client/x11/platform.cpp	/^    static void shrink(SpiceRect& area, int delta)$/;"	f	class:TopVariant
shrink	client/x11/platform.cpp	/^static void shrink(XMonitor& monitor, const XMonitorsList& monitors, int delta)$/;"	f	file:
shutdown	client/red_peer.cpp	/^void RedPeer::shutdown()$/;"	f	class:RedPeer
shutdown	server/reds_stream.h	/^    int shutdown;$/;"	m	struct:RedsStream
siblings_link	server/red_worker.c	/^    RingItem siblings_link;$/;"	m	struct:TreeItem	file:
sif	server/spice.h	/^    const SpiceBaseInterface *sif;$/;"	m	struct:SpiceBaseInstance
sigchld_handler	server/tests/test_display_base.c	/^static void sigchld_handler(int signal_num) \/\/ wait for the child process and exit$/;"	f	file:
signdx	spice-common/common/lines.c	/^    int signdx;                 \/* variable dx sign *\/$/;"	m	struct:_PolyEdge	file:
simple_commands	server/tests/test_display_no_ssl.c	/^int simple_commands[] = {$/;"	v
simple_commands	server/tests/test_two_servers.c	/^int simple_commands[] = {$/;"	v
simple_set_release_info	server/tests/test_display_base.c	/^static void simple_set_release_info(QXLReleaseInfo *info, intptr_t ptr)$/;"	f	file:
sin	server/char_device.c	/^    SpiceCharDeviceInstance *sin;$/;"	m	struct:SpiceCharDeviceState	file:
sin	server/smartcard.c	/^    SpiceCharDeviceInstance* sin[SMARTCARD_MAX_READERS];$/;"	m	struct:Readers	file:
sin	server/snd_worker.c	/^    SpicePlaybackInstance *sin;$/;"	m	struct:SpicePlaybackState	file:
sin	server/snd_worker.c	/^    SpiceRecordInstance *sin;$/;"	m	struct:SpiceRecordState	file:
size	client/application.h	/^    SpicePoint size;$/;"	m	struct:MonitorInfo
size	client/playback_channel.cpp	/^    uint32_t size;$/;"	m	struct:ChunkHeader	file:
size	client/red_peer.h	/^    virtual uint32_t size() { return _size;}$/;"	f	class:RedPeer::InMessage
size	client/red_peer.h	/^    virtual uint32_t size() { return _sub_list ? _sub_list : _size;}$/;"	f	class:RedPeer::CompoundInMessage
size	client/x11/platform.cpp	/^    XRRScreenSize* size;$/;"	m	class:SizeInfo	file:
size	server/dispatcher.h	/^    size_t size;$/;"	m	struct:DispatcherMessage
size	server/glz_encoder_dictionary.h	/^    uint32_t size;$/;"	m	struct:GlzEncDictRestoreData
size	server/glz_encoder_dictionary_protected.h	/^    int size;                    \/\/ in pixels$/;"	m	struct:WindowImage
size	server/main_channel.c	/^    int size;$/;"	m	struct:PingPipeItem	file:
size	server/red_channel.h	/^        uint32_t size;$/;"	m	struct:RedChannelClient::__anon148
size	server/red_channel.h	/^    int size;$/;"	m	struct:OutgoingHandler
size	server/red_channel.h	/^    uint32_t size;$/;"	m	struct:BufDescriptor
size	server/red_worker.c	/^    int64_t size;$/;"	m	struct:PixmapCache	file:
size	server/red_worker.c	/^    size_t size;$/;"	m	struct:CacheItem	file:
size	server/red_worker.c	/^    size_t size;$/;"	m	struct:NewCacheItem	file:
size	server/red_worker.c	/^    uint32_t size;$/;"	m	struct:__anon192	file:
size	server/snd_worker.c	/^        uint32_t size;$/;"	m	struct:SndChannel::__anon139	file:
size	server/spice.h	/^    uint32_t size;$/;"	m	struct:QXLDrawArea
size	spice-common/common/canvas_base.c	/^    int size;$/;"	m	struct:__anon17	file:
size	spice-common/common/lines.c	/^    int size;                   \/* Total number of *Spans allocated     *\/$/;"	m	struct:__anon28	file:
size	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t size;$/;"	m	struct:ControllerInitHeader
size	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t size;$/;"	m	struct:ControllerMsg
size	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t size;$/;"	m	struct:FrgMenuInitHeader
size	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t size;$/;"	m	struct:FrgMenuMsg
size	spice-common/spice-protocol/spice/protocol.h	/^    uint16_t size;$/;"	m	struct:SpiceSubMessageList
size	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t size;$/;"	m	struct:SpiceDataHeader
size	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t size;$/;"	m	struct:SpiceLinkHeader
size	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t size;$/;"	m	struct:SpiceMiniDataHeader
size	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t size;$/;"	m	struct:SpiceSubMessage
size	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t size;$/;"	m	struct:VDAgentMessage
size	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t size;$/;"	m	struct:VDIChunkHeader
size	spice-common/spice-protocol/spice/vd_agent.h	/^   uint64_t size;$/;"	m	struct:VDAgentFileXferDataMessage
size	spice-common/spice-protocol/spice/vdi_dev.h	/^    uint32_t size;$/;"	m	struct:VDIPortPacket
size_delta	spice-common/common/lz.c	/^    unsigned int size_delta;    \/\/ total size of the previous segments in units of$/;"	m	struct:LzImageSegment	file:
size_left	server/red_worker.c	/^            int size_left;$/;"	m	struct:__anon177::__anon178::__anon180	file:
size_limit	server/glz_encoder_dictionary_protected.h	/^        uint32_t size_limit;                 \/\/ max number of pixels in a window (per encoder)$/;"	m	struct:SharedDictionary::__anon170
size_pipe_item_rest	server/red_worker.c	/^    uint32_t size_pipe_item_rest;$/;"	m	struct:Drawable	file:
size_sent	server/red_worker.c	/^   uint64_t size_sent;$/;"	m	struct:StreamStats	file:
sized	server/tests/test_display_streaming.c	/^static int sized;$/;"	v	file:
sized_stream	server/red_worker.c	/^    Stream *sized_stream;$/;"	m	struct:Drawable	file:
sizeof	spice-common/python_modules/ptypes.py	/^    def sizeof(self):$/;"	m	class:ArrayType
sizeof	spice-common/python_modules/ptypes.py	/^    def sizeof(self):$/;"	m	class:Member
sizeof	spice-common/python_modules/ptypes.py	/^    def sizeof(self):$/;"	m	class:Switch
sizeof	spice-common/python_modules/ptypes.py	/^    def sizeof(self):$/;"	m	class:Type
skip_auth	server/reds.c	/^    int skip_auth;$/;"	m	struct:RedLinkInfo	file:
sleep	server/tests/test_display_base.h	/^        CommandSleep sleep;$/;"	m	union:Command::__anon131
slot	server/tests/test_display_base.c	/^QXLDevMemSlot slot = {$/;"	v
slot_gen_bits	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t slot_gen_bits;$/;"	m	struct:QXLRom
slot_generation	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t slot_generation;$/;"	m	struct:QXLRom
slot_group_id	server/red_dispatcher.h	/^    uint32_t slot_group_id;$/;"	m	struct:RedWorkerMessageDelMemslot
slot_group_id	server/spice.h	/^    uint32_t slot_group_id;$/;"	m	struct:QXLDevMemSlot
slot_id	server/red_dispatcher.h	/^    uint32_t slot_id;$/;"	m	struct:RedWorkerMessageDelMemslot
slot_id	server/spice.h	/^    uint32_t slot_id;$/;"	m	struct:QXLDevMemSlot
slot_id_bits	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t slot_id_bits;$/;"	m	struct:QXLRom
slots_end	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t slots_end;$/;"	m	struct:QXLRom
slots_start	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t slots_start;$/;"	m	struct:QXLRom
slow_region_test	spice-common/common/region.c	/^static int slow_region_test(const QRegion *rgn, const QRegion *other_rgn, int query)$/;"	f	file:
smartcard_add_reader	server/smartcard.c	/^static void smartcard_add_reader(SmartCardChannelClient *scc, uint8_t *name)$/;"	f	file:
smartcard_channel_alloc_msg_rcv_buf	server/smartcard.c	/^static uint8_t *smartcard_channel_alloc_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_client_config_socket	server/smartcard.c	/^static int smartcard_channel_client_config_socket(RedChannelClient *rcc)$/;"	f	file:
smartcard_channel_client_handle_migrate_data	server/smartcard.c	/^static int smartcard_channel_client_handle_migrate_data(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_client_handle_migrate_flush_mark	server/smartcard.c	/^static int smartcard_channel_client_handle_migrate_flush_mark(RedChannelClient *rcc)$/;"	f	file:
smartcard_channel_client_pipe_add_push	server/smartcard.c	/^static void smartcard_channel_client_pipe_add_push(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
smartcard_channel_handle_message	server/smartcard.c	/^static int smartcard_channel_handle_message(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_hold_pipe_item	server/smartcard.c	/^static void smartcard_channel_hold_pipe_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
smartcard_channel_on_disconnect	server/smartcard.c	/^static void smartcard_channel_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
smartcard_channel_release_msg_rcv_buf	server/smartcard.c	/^static void smartcard_channel_release_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_release_pipe_item	server/smartcard.c	/^static void smartcard_channel_release_pipe_item(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_send_data	server/smartcard.c	/^static void smartcard_channel_send_data(RedChannelClient *rcc, SpiceMarshaller *m,$/;"	f	file:
smartcard_channel_send_error	server/smartcard.c	/^static void smartcard_channel_send_error($/;"	f	file:
smartcard_channel_send_item	server/smartcard.c	/^static void smartcard_channel_send_item(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
smartcard_channel_send_migrate_data	server/smartcard.c	/^static void smartcard_channel_send_migrate_data(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_send_msg	server/smartcard.c	/^static void smartcard_channel_send_msg(RedChannelClient *rcc,$/;"	f	file:
smartcard_channel_write_to_reader	server/smartcard.c	/^static void smartcard_channel_write_to_reader(SpiceCharDeviceWriteBuffer *write_buf)$/;"	f	file:
smartcard_char_device_add_to_readers	server/smartcard.c	/^static int smartcard_char_device_add_to_readers(SpiceCharDeviceInstance *char_device)$/;"	f	file:
smartcard_char_device_attach_client	server/smartcard.c	/^static void smartcard_char_device_attach_client(SpiceCharDeviceInstance *char_device,$/;"	f	file:
smartcard_char_device_detach_client	server/smartcard.c	/^static void smartcard_char_device_detach_client(SmartCardChannelClient *scc)$/;"	f	file:
smartcard_char_device_notify_reader_add	server/smartcard.c	/^static void smartcard_char_device_notify_reader_add(SmartCardDeviceState *st)$/;"	f	file:
smartcard_char_device_notify_reader_remove	server/smartcard.c	/^static void smartcard_char_device_notify_reader_remove(SmartCardDeviceState *st)$/;"	f	file:
smartcard_char_device_on_message_from_device	server/smartcard.c	/^MsgItem *smartcard_char_device_on_message_from_device(SmartCardDeviceState *state,$/;"	f
smartcard_connect_client	server/smartcard.c	/^static void smartcard_connect_client(RedChannel *channel, RedClient *client,$/;"	f	file:
smartcard_device_connect	server/smartcard.c	/^SpiceCharDeviceState *smartcard_device_connect(SpiceCharDeviceInstance *char_device)$/;"	f
smartcard_device_disconnect	server/smartcard.c	/^void smartcard_device_disconnect(SpiceCharDeviceInstance *char_device)$/;"	f
smartcard_device_state_free	server/smartcard.c	/^static void smartcard_device_state_free(SmartCardDeviceState* st)$/;"	f	file:
smartcard_device_state_new	server/smartcard.c	/^static SmartCardDeviceState *smartcard_device_state_new(SpiceCharDeviceInstance *sin)$/;"	f	file:
smartcard_device_state_restore_partial_read	server/smartcard.c	/^static void smartcard_device_state_restore_partial_read(SmartCardDeviceState *state,$/;"	f	file:
smartcard_get_vsc_msg_item	server/smartcard.c	/^static MsgItem *smartcard_get_vsc_msg_item(RedChannelClient *rcc, VSCMsgHeader *vheader)$/;"	f	file:
smartcard_init	client/smartcard_channel.cpp	/^void smartcard_init(const SmartcardOptions* options)$/;"	f
smartcard_init	server/smartcard.c	/^static void smartcard_init(void)$/;"	f	file:
smartcard_push_error	server/smartcard.c	/^static void smartcard_push_error(RedChannelClient *rcc, uint32_t reader_id, VSCErrorCode error)$/;"	f	file:
smartcard_read_buf_prepare	server/smartcard.c	/^static void smartcard_read_buf_prepare(SmartCardDeviceState *state, VSCMsgHeader *vheader)$/;"	f	file:
smartcard_read_msg_from_device	server/smartcard.c	/^SpiceCharDeviceMsgToClient *smartcard_read_msg_from_device(SpiceCharDeviceInstance *sin,$/;"	f
smartcard_readers_get	server/smartcard.c	/^static SpiceCharDeviceInstance *smartcard_readers_get(uint32_t reader_id)$/;"	f	file:
smartcard_readers_get_unattached	server/smartcard.c	/^static SpiceCharDeviceInstance *smartcard_readers_get_unattached(void)$/;"	f	file:
smartcard_ref_msg_to_client	server/smartcard.c	/^static SpiceCharDeviceMsgToClient *smartcard_ref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
smartcard_ref_vsc_msg_item	server/smartcard.c	/^static MsgItem *smartcard_ref_vsc_msg_item(MsgItem *item)$/;"	f	file:
smartcard_remove_client	server/smartcard.c	/^static void smartcard_remove_client(RedClient *client, void *opaque)$/;"	f	file:
smartcard_remove_reader	server/smartcard.c	/^static void smartcard_remove_reader(SmartCardChannelClient *scc, uint32_t reader_id)$/;"	f	file:
smartcard_send_msg_to_client	server/smartcard.c	/^static void smartcard_send_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
smartcard_send_tokens_to_client	server/smartcard.c	/^static void smartcard_send_tokens_to_client(RedClient *client, uint32_t tokens, void *opaque)$/;"	f	file:
smartcard_state	server/smartcard.c	/^    SmartCardDeviceState *smartcard_state;$/;"	m	struct:SmartCardChannelClient	file:
smartcard_unref_msg_to_client	server/smartcard.c	/^static void smartcard_unref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
smartcard_unref_vsc_msg_item	server/smartcard.c	/^static void smartcard_unref_vsc_msg_item(MsgItem *item)$/;"	f	file:
snd_attach_playback	server/snd_worker.c	/^void snd_attach_playback(SpicePlaybackInstance *sin)$/;"	f
snd_attach_record	server/snd_worker.c	/^void snd_attach_record(SpiceRecordInstance *sin)$/;"	f
snd_begin_send_message	server/snd_worker.c	/^static int snd_begin_send_message(SndChannel *channel)$/;"	f	file:
snd_channel_cleanup_channel_proc	server/snd_worker.c	/^typedef void (*snd_channel_cleanup_channel_proc)(SndChannel *channel);$/;"	t	file:
snd_channel_get	server/snd_worker.c	/^static SndChannel *snd_channel_get(SndChannel *channel)$/;"	f	file:
snd_channel_handle_message_proc	server/snd_worker.c	/^typedef int (*snd_channel_handle_message_proc)(SndChannel *channel, size_t size, uint32_t type, void *message);$/;"	t	file:
snd_channel_on_message_done_proc	server/snd_worker.c	/^typedef void (*snd_channel_on_message_done_proc)(SndChannel *channel);$/;"	t	file:
snd_channel_put	server/snd_worker.c	/^static SndChannel *snd_channel_put(SndChannel *channel)$/;"	f	file:
snd_channel_send_messages_proc	server/snd_worker.c	/^typedef void (*snd_channel_send_messages_proc)(void *in_channel);$/;"	t	file:
snd_channel_send_migrate	server/snd_worker.c	/^static int snd_channel_send_migrate(SndChannel *channel)$/;"	f	file:
snd_codec_create	spice-common/common/snd_codec.c	/^int snd_codec_create(SndCodec *codec, int mode, int frequency, int purpose)$/;"	f
snd_codec_create_celt051	spice-common/common/snd_codec.c	/^static int snd_codec_create_celt051(SndCodecInternal *codec, int purpose)$/;"	f	file:
snd_codec_create_opus	spice-common/common/snd_codec.c	/^static int snd_codec_create_opus(SndCodecInternal *codec, int purpose)$/;"	f	file:
snd_codec_decode	spice-common/common/snd_codec.c	/^int snd_codec_decode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f
snd_codec_decode_celt051	spice-common/common/snd_codec.c	/^static int snd_codec_decode_celt051(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:
snd_codec_decode_opus	spice-common/common/snd_codec.c	/^static int snd_codec_decode_opus(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:
snd_codec_destroy	spice-common/common/snd_codec.c	/^void snd_codec_destroy(SndCodec *codec)$/;"	f
snd_codec_destroy_celt051	spice-common/common/snd_codec.c	/^static void snd_codec_destroy_celt051(SndCodecInternal *codec)$/;"	f	file:
snd_codec_destroy_opus	spice-common/common/snd_codec.c	/^static void snd_codec_destroy_opus(SndCodecInternal *codec)$/;"	f	file:
snd_codec_encode	spice-common/common/snd_codec.c	/^int snd_codec_encode(SndCodec codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f
snd_codec_encode_celt051	spice-common/common/snd_codec.c	/^static int snd_codec_encode_celt051(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:
snd_codec_encode_opus	spice-common/common/snd_codec.c	/^static int snd_codec_encode_opus(SndCodecInternal *codec, uint8_t *in_ptr, int in_size, uint8_t *out_ptr, int *out_size)$/;"	f	file:
snd_codec_frame_size	spice-common/common/snd_codec.c	/^int snd_codec_frame_size(SndCodec codec)$/;"	f
snd_codec_is_capable	spice-common/common/snd_codec.c	/^int snd_codec_is_capable(int mode, int frequency)$/;"	f
snd_desired_audio_mode	server/snd_worker.c	/^static int snd_desired_audio_mode(int frequency, int client_can_celt, int client_can_opus)$/;"	f	file:
snd_detach_common	server/snd_worker.c	/^static void snd_detach_common(SndWorker *worker)$/;"	f	file:
snd_detach_playback	server/snd_worker.c	/^void snd_detach_playback(SpicePlaybackInstance *sin)$/;"	f
snd_detach_record	server/snd_worker.c	/^void snd_detach_record(SpiceRecordInstance *sin)$/;"	f
snd_disconnect_channel	server/snd_worker.c	/^static void snd_disconnect_channel(SndChannel *channel)$/;"	f	file:
snd_disconnect_channel_client	server/snd_worker.c	/^static void snd_disconnect_channel_client(RedChannelClient *rcc)$/;"	f	file:
snd_event	server/snd_worker.c	/^static void snd_event(int fd, int event, void *data)$/;"	f	file:
snd_get_playback_compression	server/snd_worker.c	/^int snd_get_playback_compression(void)$/;"	f
snd_playback_cleanup	server/snd_worker.c	/^static void snd_playback_cleanup(SndChannel *channel)$/;"	f	file:
snd_playback_free_frame	server/snd_worker.c	/^static void snd_playback_free_frame(PlaybackChannel *playback_channel, AudioFrame *frame)$/;"	f	file:
snd_playback_handle_message	server/snd_worker.c	/^static int snd_playback_handle_message(SndChannel *channel, size_t size, uint32_t type, void *message)$/;"	f	file:
snd_playback_migrate_channel_client	server/snd_worker.c	/^static void snd_playback_migrate_channel_client(RedChannelClient *rcc)$/;"	f	file:
snd_playback_on_message_done	server/snd_worker.c	/^static void snd_playback_on_message_done(SndChannel *channel)$/;"	f	file:
snd_playback_send	server/snd_worker.c	/^static void snd_playback_send(void* data)$/;"	f	file:
snd_playback_send_ctl	server/snd_worker.c	/^static int snd_playback_send_ctl(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_latency	server/snd_worker.c	/^static int snd_playback_send_latency(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_migrate	server/snd_worker.c	/^static int snd_playback_send_migrate(PlaybackChannel *channel)$/;"	f	file:
snd_playback_send_mute	server/snd_worker.c	/^static int snd_playback_send_mute(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_start	server/snd_worker.c	/^static int snd_playback_send_start(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_stop	server/snd_worker.c	/^static int snd_playback_send_stop(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_volume	server/snd_worker.c	/^static int snd_playback_send_volume(PlaybackChannel *playback_channel)$/;"	f	file:
snd_playback_send_write	server/snd_worker.c	/^static int snd_playback_send_write(PlaybackChannel *playback_channel)$/;"	f	file:
snd_receive	server/snd_worker.c	/^static void snd_receive(void* data)$/;"	f	file:
snd_record_cleanup	server/snd_worker.c	/^static void snd_record_cleanup(SndChannel *channel)$/;"	f	file:
snd_record_handle_message	server/snd_worker.c	/^static int snd_record_handle_message(SndChannel *channel, size_t size, uint32_t type, void *message)$/;"	f	file:
snd_record_handle_write	server/snd_worker.c	/^static int snd_record_handle_write(RecordChannel *record_channel, size_t size, void *message)$/;"	f	file:
snd_record_migrate_channel_client	server/snd_worker.c	/^static void snd_record_migrate_channel_client(RedChannelClient *rcc)$/;"	f	file:
snd_record_on_message_done	server/snd_worker.c	/^static void snd_record_on_message_done(SndChannel *channel)$/;"	f	file:
snd_record_send	server/snd_worker.c	/^static void snd_record_send(void* data)$/;"	f	file:
snd_record_send_ctl	server/snd_worker.c	/^static int snd_record_send_ctl(RecordChannel *record_channel)$/;"	f	file:
snd_record_send_migrate	server/snd_worker.c	/^static int snd_record_send_migrate(RecordChannel *record_channel)$/;"	f	file:
snd_record_send_mute	server/snd_worker.c	/^static int snd_record_send_mute(RecordChannel *record_channel)$/;"	f	file:
snd_record_send_start	server/snd_worker.c	/^static int snd_record_send_start(RecordChannel *record_channel)$/;"	f	file:
snd_record_send_stop	server/snd_worker.c	/^static int snd_record_send_stop(RecordChannel *record_channel)$/;"	f	file:
snd_record_send_volume	server/snd_worker.c	/^static int snd_record_send_volume(RecordChannel *record_channel)$/;"	f	file:
snd_reset_send_data	server/snd_worker.c	/^static inline int snd_reset_send_data(SndChannel *channel, uint16_t verb)$/;"	f	file:
snd_send_data	server/snd_worker.c	/^static int snd_send_data(SndChannel *channel)$/;"	f	file:
snd_send_mute	server/snd_worker.c	/^static int snd_send_mute(SndChannel *channel, SpiceVolumeState *st, int msg)$/;"	f	file:
snd_send_volume	server/snd_worker.c	/^static int snd_send_volume(SndChannel *channel, SpiceVolumeState *st, int msg)$/;"	f	file:
snd_set_command	server/snd_worker.c	/^static void snd_set_command(SndChannel *channel, uint32_t command)$/;"	f	file:
snd_set_playback_compression	server/snd_worker.c	/^void snd_set_playback_compression(int on)$/;"	f
snd_set_playback_latency	server/snd_worker.c	/^void snd_set_playback_latency(RedClient *client, uint32_t latency)$/;"	f
snd_set_playback_peer	server/snd_worker.c	/^static void snd_set_playback_peer(RedChannel *channel, RedClient *client, RedsStream *stream,$/;"	f	file:
snd_set_record_peer	server/snd_worker.c	/^static void snd_set_record_peer(RedChannel *channel, RedClient *client, RedsStream *stream,$/;"	f	file:
snprintf	client/debug.h	27;"	d
sock_err_message	client/windows/platform_utils.h	97;"	d
sock_err_message	client/x11/platform_utils.h	36;"	d
sock_error	client/windows/platform_utils.h	96;"	d
sock_error	client/x11/platform_utils.h	35;"	d
socket	server/reds_stream.h	/^    int socket;$/;"	m	struct:RedsStream
solid	server/tests/test_display_base.h	/^        CommandDrawSolid solid;$/;"	m	union:Command::__anon131
solid	spice-common/common/canvas_base.c	/^    int solid;$/;"	m	struct:__anon15	file:
solid_rop_16_func_t	spice-common/common/pixman_utils.c	/^typedef void (*solid_rop_16_func_t)(uint16_t *ptr, int len, uint16_t src);$/;"	t	file:
solid_rop_32_func_t	spice-common/common/pixman_utils.c	/^typedef void (*solid_rop_32_func_t)(uint32_t *ptr, int len, uint32_t src);$/;"	t	file:
solid_rop_8_func_t	spice-common/common/pixman_utils.c	/^typedef void (*solid_rop_8_func_t)(uint8_t *ptr, int len, uint8_t src);$/;"	t	file:
source	client/x11/pixels_source_p.h	/^    PixelsSource_p source;$/;"	m	struct:RedDrawable_p
source_p	client/windows/pixels_source.cpp	/^    PixelsSource_p source_p;$/;"	m	struct:ResImage_p	file:
spice_abort	spice-common/common/spice_common.h	32;"	d
spice_abort	spice-common/common/spice_common.h	34;"	d
spice_addr	server/reds.c	/^static char spice_addr[256];$/;"	v	file:
spice_assert	spice-common/common/log.h	135;"	d
spice_backtrace	spice-common/common/backtrace.c	/^void spice_backtrace(void)$/;"	f
spice_backtrace	spice-common/common/backtrace.h	27;"	d
spice_backtrace_backtrace	spice-common/common/backtrace.c	/^static void spice_backtrace_backtrace(void)$/;"	f	file:
spice_backtrace_gstack	spice-common/common/backtrace.c	/^static int spice_backtrace_gstack(void)$/;"	f	file:
spice_bit_find_msb	spice-common/common/bitops.h	/^static inline int spice_bit_find_msb(unsigned int val)$/;"	f
spice_bit_next_pow2	spice-common/common/bitops.h	/^static inline int spice_bit_next_pow2(unsigned int val)$/;"	f
spice_bitmap_convert_to_pixman	spice-common/common/pixman_utils.c	/^pixman_image_t *spice_bitmap_convert_to_pixman(pixman_format_code_t dest_format,$/;"	f
spice_bitmap_format_to_pixman	spice-common/common/pixman_utils.c	/^pixman_format_code_t spice_bitmap_format_to_pixman(int bitmap_format,$/;"	f
spice_bitmap_from_surface_type	server/spice_bitmap_utils.c	/^int spice_bitmap_from_surface_type(uint32_t surface_format)$/;"	f
spice_bitmap_to_pixman	spice-common/common/pixman_utils.c	/^pixman_image_t *spice_bitmap_to_pixman(pixman_image_t *dest_image,$/;"	f
spice_bitmap_try_as_pixman	spice-common/common/pixman_utils.c	/^pixman_image_t *spice_bitmap_try_as_pixman(int src_format,$/;"	f
spice_buffer_append	spice-common/common/mem.c	/^void spice_buffer_append(SpiceBuffer *buffer, const void *data, size_t len)$/;"	f
spice_buffer_copy	spice-common/common/mem.c	/^size_t spice_buffer_copy(SpiceBuffer *buffer, void *dest, size_t len)$/;"	f
spice_buffer_empty	spice-common/common/mem.c	/^int spice_buffer_empty(SpiceBuffer *buffer)$/;"	f
spice_buffer_end	spice-common/common/mem.c	/^uint8_t *spice_buffer_end(SpiceBuffer *buffer)$/;"	f
spice_buffer_free	spice-common/common/mem.c	/^void spice_buffer_free(SpiceBuffer *buffer)$/;"	f
spice_buffer_remove	spice-common/common/mem.c	/^size_t spice_buffer_remove(SpiceBuffer *buffer, size_t len)$/;"	f
spice_buffer_reserve	spice-common/common/mem.c	/^void spice_buffer_reserve(SpiceBuffer *buffer, size_t len)$/;"	f
spice_buffer_reset	spice-common/common/mem.c	/^void spice_buffer_reset(SpiceBuffer *buffer)$/;"	f
spice_canvas_clip_spans	spice-common/common/lines.c	/^int spice_canvas_clip_spans(pixman_region32_t *prgnDst,$/;"	f
spice_canvas_get_usr_data	spice-common/common/canvas_base.c	/^void *spice_canvas_get_usr_data(SpiceCanvas *spice_canvas)$/;"	f
spice_canvas_set_usr_data	spice-common/common/canvas_base.c	/^void spice_canvas_set_usr_data(SpiceCanvas *spice_canvas,$/;"	f
spice_channel_client_error	server/red_channel.h	346;"	d
spice_char_dev_write_retry	server/char_device.c	/^static void spice_char_dev_write_retry(void *opaque)$/;"	f	file:
spice_char_device_add_msg_to_client_queue	server/char_device.c	/^static void spice_char_device_add_msg_to_client_queue(SpiceCharDeviceClientState *dev_client,$/;"	f	file:
spice_char_device_can_send_to_client	server/char_device.c	/^static int spice_char_device_can_send_to_client(SpiceCharDeviceClientState *dev_client)$/;"	f	file:
spice_char_device_client_add	server/char_device.c	/^int spice_char_device_client_add(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_client_exists	server/char_device.c	/^int spice_char_device_client_exists(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_client_find	server/char_device.c	/^static SpiceCharDeviceClientState *spice_char_device_client_find(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_client_free	server/char_device.c	/^static void spice_char_device_client_free(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_client_remove	server/char_device.c	/^void spice_char_device_client_remove(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_client_send_queue_free	server/char_device.c	/^static void spice_char_device_client_send_queue_free(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_client_send_queue_push	server/char_device.c	/^static void spice_char_device_client_send_queue_push(SpiceCharDeviceClientState *dev_client)$/;"	f	file:
spice_char_device_client_tokens_add	server/char_device.c	/^static void spice_char_device_client_tokens_add(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_handle_client_overflow	server/char_device.c	/^static void spice_char_device_handle_client_overflow(SpiceCharDeviceClientState *dev_client)$/;"	f	file:
spice_char_device_max_send_tokens	server/char_device.c	/^static uint64_t spice_char_device_max_send_tokens(SpiceCharDeviceState *dev)$/;"	f	file:
spice_char_device_read_from_device	server/char_device.c	/^static int spice_char_device_read_from_device(SpiceCharDeviceState *dev)$/;"	f	file:
spice_char_device_reset	server/char_device.c	/^void spice_char_device_reset(SpiceCharDeviceState *dev)$/;"	f
spice_char_device_send_msg_to_clients	server/char_device.c	/^static void spice_char_device_send_msg_to_clients(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_send_to_client_tokens_absorb	server/char_device.c	/^static void spice_char_device_send_to_client_tokens_absorb(SpiceCharDeviceClientState *dev_client,$/;"	f	file:
spice_char_device_send_to_client_tokens_add	server/char_device.c	/^void spice_char_device_send_to_client_tokens_add(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_send_to_client_tokens_set	server/char_device.c	/^void spice_char_device_send_to_client_tokens_set(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_start	server/char_device.c	/^void spice_char_device_start(SpiceCharDeviceState *dev)$/;"	f
spice_char_device_state_create	server/char_device.c	/^SpiceCharDeviceState *spice_char_device_state_create(SpiceCharDeviceInstance *sin,$/;"	f
spice_char_device_state_destroy	server/char_device.c	/^void spice_char_device_state_destroy(SpiceCharDeviceState *char_dev)$/;"	f
spice_char_device_state_migrate_data_marshall	server/char_device.c	/^void spice_char_device_state_migrate_data_marshall(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_state_migrate_data_marshall_empty	server/char_device.c	/^void spice_char_device_state_migrate_data_marshall_empty(SpiceMarshaller *m)$/;"	f
spice_char_device_state_opaque_get	server/char_device.c	/^void *spice_char_device_state_opaque_get(SpiceCharDeviceState *dev)$/;"	f
spice_char_device_state_ref	server/char_device.c	/^static void spice_char_device_state_ref(SpiceCharDeviceState *char_dev)$/;"	f	file:
spice_char_device_state_reset_dev_instance	server/char_device.c	/^void spice_char_device_state_reset_dev_instance(SpiceCharDeviceState *state,$/;"	f
spice_char_device_state_restore	server/char_device.c	/^int spice_char_device_state_restore(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_state_unref	server/char_device.c	/^static void spice_char_device_state_unref(SpiceCharDeviceState *char_dev)$/;"	f	file:
spice_char_device_stop	server/char_device.c	/^void spice_char_device_stop(SpiceCharDeviceState *dev)$/;"	f
spice_char_device_wakeup	server/char_device.c	/^void spice_char_device_wakeup(SpiceCharDeviceState *dev)$/;"	f
spice_char_device_write_buffer_add	server/char_device.c	/^void spice_char_device_write_buffer_add(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_write_buffer_free	server/char_device.c	/^static void spice_char_device_write_buffer_free(SpiceCharDeviceWriteBuffer *buf)$/;"	f	file:
spice_char_device_write_buffer_get	server/char_device.c	/^SpiceCharDeviceWriteBuffer *spice_char_device_write_buffer_get(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_write_buffer_get_server_no_token	server/char_device.c	/^SpiceCharDeviceWriteBuffer *spice_char_device_write_buffer_get_server_no_token($/;"	f
spice_char_device_write_buffer_pool_add	server/char_device.c	/^static void spice_char_device_write_buffer_pool_add(SpiceCharDeviceState *dev,$/;"	f	file:
spice_char_device_write_buffer_ref	server/char_device.c	/^static SpiceCharDeviceWriteBuffer *spice_char_device_write_buffer_ref(SpiceCharDeviceWriteBuffer *write_buf)$/;"	f	file:
spice_char_device_write_buffer_release	server/char_device.c	/^void spice_char_device_write_buffer_release(SpiceCharDeviceState *dev,$/;"	f
spice_char_device_write_to_device	server/char_device.c	/^static int spice_char_device_write_to_device(SpiceCharDeviceState *dev)$/;"	f	file:
spice_chunks_destroy	spice-common/common/mem.c	/^void spice_chunks_destroy(SpiceChunks *chunks)$/;"	f
spice_chunks_linearize	spice-common/common/mem.c	/^void spice_chunks_linearize(SpiceChunks *chunks)$/;"	f
spice_chunks_new	spice-common/common/mem.c	/^SpiceChunks *spice_chunks_new(uint32_t count)$/;"	f
spice_chunks_new_linear	spice-common/common/mem.c	/^SpiceChunks *spice_chunks_new_linear(uint8_t *data, uint32_t len)$/;"	f
spice_compat_version_t	server/spice.h	/^} spice_compat_version_t;$/;"	t	typeref:enum:__anon156
spice_critical	spice-common/common/log.h	107;"	d
spice_debug	spice-common/common/log.h	95;"	d
spice_destroy_fn_t	spice-common/common/canvas_base.h	/^typedef void (*spice_destroy_fn_t)(void *data);$/;"	t
spice_error	spice-common/common/log.h	113;"	d
spice_family	server/reds.c	/^static int spice_family = PF_UNSPEC;$/;"	v	file:
spice_get_client_channel_parser	spice-common/common/generated_server_demarshallers.c	/^spice_parse_channel_func_t spice_get_client_channel_parser(uint32_t channel, unsigned int *max_message_type)$/;"	f
spice_get_current_compat_version	server/reds.c	/^SPICE_GNUC_VISIBLE spice_compat_version_t spice_get_current_compat_version(void)$/;"	f
spice_get_server_channel_parser	spice-common/common/generated_client_demarshallers.c	/^spice_parse_channel_func_t spice_get_server_channel_parser(uint32_t channel, unsigned int *max_message_type)$/;"	f
spice_get_server_channel_parser1	spice-common/common/generated_client_demarshallers1.c	/^spice_parse_channel_func_t spice_get_server_channel_parser1(uint32_t channel, unsigned int *max_message_type)$/;"	f
spice_image_compression_t	server/spice.h	/^} spice_image_compression_t;$/;"	t	typeref:enum:__anon157
spice_info	spice-common/common/log.h	89;"	d
spice_jpeg_mem_dest	server/mjpeg_encoder.c	/^spice_jpeg_mem_dest(j_compress_ptr cinfo,$/;"	f	file:
spice_link_error_string	client/red_channel.cpp	/^static const char *spice_link_error_string(int err)$/;"	f	file:
spice_listen_socket_fd	server/reds.c	/^static int spice_listen_socket_fd = -1;$/;"	v	file:
spice_log	client/application.cpp	/^void spice_log(unsigned int type, const char *function, const char *format, ...)$/;"	f
spice_log	spice-common/common/log.c	/^void spice_log(const char *log_domain,$/;"	f
spice_log_cleanup	client/application.cpp	/^void spice_log_cleanup(void)$/;"	f
spice_log_level_to_string	spice-common/common/log.c	/^static const char * spice_log_level_to_string(SpiceLogLevel level)$/;"	f	file:
spice_logv	spice-common/common/log.c	/^void spice_logv(const char *log_domain,$/;"	f
spice_malloc	spice-common/common/mem.c	/^void *spice_malloc(size_t n_bytes)$/;"	f
spice_malloc0	spice-common/common/mem.c	/^void *spice_malloc0(size_t n_bytes)$/;"	f
spice_malloc0_n	spice-common/common/mem.c	/^void *spice_malloc0_n(size_t n_blocks, size_t n_block_bytes)$/;"	f
spice_malloc_n	spice-common/common/mem.c	/^void *spice_malloc_n(size_t n_blocks, size_t n_block_bytes)$/;"	f
spice_malloc_n_m	spice-common/common/mem.c	/^void *spice_malloc_n_m(size_t n_blocks, size_t n_block_bytes, size_t extra_size)$/;"	f
spice_marshall_AlphaBlend	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_AlphaBlend(SpiceMarshaller *m, SpiceAlphaBlend *ptr, SpiceMarshaller **src_bitmap_out)$/;"	f
spice_marshall_Blackness	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Blackness(SpiceMarshaller *m, SpiceBlackness *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Blend	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Blend(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Composite	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Composite(SpiceMarshaller *m, SpiceComposite *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Copy	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Copy(SpiceMarshaller *m, SpiceCopy *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_DisplayBase	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_DisplayBase(SpiceMarshaller *m, SpiceMsgDisplayBase *ptr)$/;"	f
spice_marshall_Fill	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Fill(SpiceMarshaller *m, SpiceFill *ptr, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Image	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Image(SpiceMarshaller *m, SpiceImage *ptr, SpiceMarshaller **bitmap_palette_out, SpiceMarshaller **lzplt_palette_out)$/;"	f
spice_marshall_Invers	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Invers(SpiceMarshaller *m, SpiceInvers *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Opaque	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Opaque(SpiceMarshaller *m, SpiceOpaque *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_Palette	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Palette(SpiceMarshaller *m, SpicePalette *ptr)$/;"	f
spice_marshall_Path	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Path(SpiceMarshaller *m, SpicePath *ptr)$/;"	f
spice_marshall_Point	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Point(SpiceMarshaller *m, SpicePoint *ptr)$/;"	f
spice_marshall_Rect	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Rect(SpiceMarshaller *m, SpiceRect *ptr)$/;"	f
spice_marshall_Rop3	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Rop3(SpiceMarshaller *m, SpiceRop3 *ptr, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_SpiceMsgAudioMute	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_SpiceMsgAudioMute(SpiceMarshaller *m, SpiceMsgAudioMute *msg)$/;"	f
spice_marshall_SpiceMsgAudioVolume	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_SpiceMsgAudioVolume(SpiceMarshaller *m, SpiceMsgAudioVolume *msg)$/;"	f
spice_marshall_SpiceMsgData	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_SpiceMsgData(SpiceMarshaller *m, SpiceMsgData *msg)$/;"	f	file:
spice_marshall_SpiceMsgData	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_SpiceMsgData(SpiceMarshaller *m, SpiceMsgData *msg)$/;"	f	file:
spice_marshall_SpiceMsgData	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_SpiceMsgData(SpiceMarshaller *m, SpiceMsgData *msg)$/;"	f
spice_marshall_SpiceMsgEmpty	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_SpiceMsgEmpty(SpiceMarshaller *m, SpiceMsgEmpty *msg)$/;"	f	file:
spice_marshall_SpiceMsgEmpty	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_SpiceMsgEmpty(SpiceMarshaller *m, SpiceMsgEmpty *msg)$/;"	f	file:
spice_marshall_SpiceMsgEmpty	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_SpiceMsgEmpty(SpiceMarshaller *m, SpiceMsgEmpty *msg)$/;"	f
spice_marshall_String	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_String(SpiceMarshaller *m, SpiceString *ptr)$/;"	f
spice_marshall_Stroke	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Stroke(SpiceMarshaller *m, SpiceStroke *ptr, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)$/;"	f
spice_marshall_Text	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Text(SpiceMarshaller *m, SpiceText *ptr, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)$/;"	f
spice_marshall_Transparent	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Transparent(SpiceMarshaller *m, SpiceTransparent *ptr, SpiceMarshaller **src_bitmap_out)$/;"	f
spice_marshall_Whiteness	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_Whiteness(SpiceMarshaller *m, SpiceWhiteness *ptr, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_array_int32	spice-common/common/generated_server_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_int32(SpiceMarshaller *m, int32_t *ptr, unsigned count)$/;"	f	file:
spice_marshall_array_uint8	spice-common/common/generated_client_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_uint8(SpiceMarshaller *m, uint8_t *ptr, unsigned count)$/;"	f	file:
spice_marshall_array_uint8	spice-common/common/generated_server_marshallers.c	/^SPICE_GNUC_UNUSED static void spice_marshall_array_uint8(SpiceMarshaller *m, uint8_t *ptr, unsigned count)$/;"	f	file:
spice_marshall_msg_cursor_init	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_cursor_init(SpiceMarshaller *m, SpiceMsgCursorInit *msg)$/;"	f
spice_marshall_msg_cursor_inval_one	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_cursor_inval_one(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg)$/;"	f
spice_marshall_msg_cursor_move	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_cursor_move(SpiceMarshaller *m, SpiceMsgCursorMove *msg)$/;"	f
spice_marshall_msg_cursor_set	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_cursor_set(SpiceMarshaller *m, SpiceMsgCursorSet *msg)$/;"	f
spice_marshall_msg_cursor_trail	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_cursor_trail(SpiceMarshaller *m, SpiceMsgCursorTrail *msg)$/;"	f
spice_marshall_msg_disconnecting	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_disconnecting(SpiceMarshaller *m, SpiceMsgDisconnect *msg)$/;"	f
spice_marshall_msg_display_copy_bits	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_copy_bits(SpiceMarshaller *m, SpiceMsgDisplayCopyBits *msg)$/;"	f
spice_marshall_msg_display_draw_alpha_blend	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_alpha_blend(SpiceMarshaller *m, SpiceMsgDisplayDrawAlphaBlend *msg, SpiceMarshaller **src_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_blackness	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_blackness(SpiceMarshaller *m, SpiceMsgDisplayDrawBlackness *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_blend	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_blend(SpiceMarshaller *m, SpiceMsgDisplayDrawBlend *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_composite	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_composite(SpiceMarshaller *m, SpiceMsgDisplayDrawComposite *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_copy	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_copy(SpiceMarshaller *m, SpiceMsgDisplayDrawCopy *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_fill	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_fill(SpiceMarshaller *m, SpiceMsgDisplayDrawFill *msg, SpiceMarshaller **brush_pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_invers	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_invers(SpiceMarshaller *m, SpiceMsgDisplayDrawInvers *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_opaque	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_opaque(SpiceMarshaller *m, SpiceMsgDisplayDrawOpaque *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_rop3	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_rop3(SpiceMarshaller *m, SpiceMsgDisplayDrawRop3 *msg, SpiceMarshaller **src_bitmap_out, SpiceMarshaller **pat_out, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_stroke	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_stroke(SpiceMarshaller *m, SpiceMsgDisplayDrawStroke *msg, SpiceMarshaller **style_out, SpiceMarshaller **pat_out)$/;"	f
spice_marshall_msg_display_draw_text	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_text(SpiceMarshaller *m, SpiceMsgDisplayDrawText *msg, SpiceMarshaller **fore_brush_pat_out, SpiceMarshaller **back_brush_pat_out)$/;"	f
spice_marshall_msg_display_draw_transparent	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_transparent(SpiceMarshaller *m, SpiceMsgDisplayDrawTransparent *msg, SpiceMarshaller **src_bitmap_out)$/;"	f
spice_marshall_msg_display_draw_whiteness	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_draw_whiteness(SpiceMarshaller *m, SpiceMsgDisplayDrawWhiteness *msg, SpiceMarshaller **mask_bitmap_out)$/;"	f
spice_marshall_msg_display_inval_all_pixmaps	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_all_pixmaps(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg)$/;"	f
spice_marshall_msg_display_inval_list	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_list(SpiceMarshaller *m, SpiceResourceList *msg)$/;"	f
spice_marshall_msg_display_inval_palette	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_inval_palette(SpiceMarshaller *m, SpiceMsgDisplayInvalOne *msg)$/;"	f
spice_marshall_msg_display_mode	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_mode(SpiceMarshaller *m, SpiceMsgDisplayMode *msg)$/;"	f
spice_marshall_msg_display_monitors_config	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_monitors_config(SpiceMarshaller *m, SpiceMsgDisplayMonitorsConfig *msg)$/;"	f
spice_marshall_msg_display_stream_activate_report	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_activate_report(SpiceMarshaller *m, SpiceMsgDisplayStreamActivateReport *msg)$/;"	f
spice_marshall_msg_display_stream_clip	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_clip(SpiceMarshaller *m, SpiceMsgDisplayStreamClip *msg)$/;"	f
spice_marshall_msg_display_stream_create	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_create(SpiceMarshaller *m, SpiceMsgDisplayStreamCreate *msg)$/;"	f
spice_marshall_msg_display_stream_data	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_data(SpiceMarshaller *m, SpiceMsgDisplayStreamData *msg)$/;"	f
spice_marshall_msg_display_stream_data_sized	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_data_sized(SpiceMarshaller *m, SpiceMsgDisplayStreamDataSized *msg)$/;"	f
spice_marshall_msg_display_stream_destroy	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_stream_destroy(SpiceMarshaller *m, SpiceMsgDisplayStreamDestroy *msg)$/;"	f
spice_marshall_msg_display_surface_create	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_surface_create(SpiceMarshaller *m, SpiceMsgSurfaceCreate *msg)$/;"	f
spice_marshall_msg_display_surface_destroy	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_display_surface_destroy(SpiceMarshaller *m, SpiceMsgSurfaceDestroy *msg)$/;"	f
spice_marshall_msg_inputs_init	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_inputs_init(SpiceMarshaller *m, SpiceMsgInputsInit *msg)$/;"	f
spice_marshall_msg_inputs_key_modifiers	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_inputs_key_modifiers(SpiceMarshaller *m, SpiceMsgInputsKeyModifiers *msg)$/;"	f
spice_marshall_msg_main_agent_connected_tokens	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_connected_tokens(SpiceMarshaller *m, SpiceMsgMainAgentConnectedTokens *msg)$/;"	f
spice_marshall_msg_main_agent_disconnected	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_disconnected(SpiceMarshaller *m, SpiceMsgMainAgentDisconnect *msg)$/;"	f
spice_marshall_msg_main_agent_token	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_agent_token(SpiceMarshaller *m, SpiceMsgMainAgentTokens *msg)$/;"	f
spice_marshall_msg_main_channels_list	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_channels_list(SpiceMarshaller *m, SpiceMsgChannels *msg)$/;"	f
spice_marshall_msg_main_init	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_init(SpiceMarshaller *m, SpiceMsgMainInit *msg)$/;"	f
spice_marshall_msg_main_migrate_begin	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_begin(SpiceMarshaller *m, SpiceMsgMainMigrationBegin *msg)$/;"	f
spice_marshall_msg_main_migrate_begin_seamless	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_begin_seamless(SpiceMarshaller *m, SpiceMsgMainMigrateBeginSeamless *msg)$/;"	f
spice_marshall_msg_main_migrate_switch_host	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_migrate_switch_host(SpiceMarshaller *m, SpiceMsgMainMigrationSwitchHost *msg)$/;"	f
spice_marshall_msg_main_mouse_mode	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_mouse_mode(SpiceMarshaller *m, SpiceMsgMainMouseMode *msg)$/;"	f
spice_marshall_msg_main_multi_media_time	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_multi_media_time(SpiceMarshaller *m, SpiceMsgMainMultiMediaTime *msg)$/;"	f
spice_marshall_msg_main_name	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_name(SpiceMarshaller *m, SpiceMsgMainName *msg)$/;"	f
spice_marshall_msg_main_uuid	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_main_uuid(SpiceMarshaller *m, SpiceMsgMainUuid *msg)$/;"	f
spice_marshall_msg_migrate	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_migrate(SpiceMarshaller *m, SpiceMsgMigrate *msg)$/;"	f
spice_marshall_msg_notify	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_notify(SpiceMarshaller *m, SpiceMsgNotify *msg)$/;"	f
spice_marshall_msg_ping	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_ping(SpiceMarshaller *m, SpiceMsgPing *msg)$/;"	f
spice_marshall_msg_playback_data	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_playback_data(SpiceMarshaller *m, SpiceMsgPlaybackPacket *msg)$/;"	f
spice_marshall_msg_playback_latency	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_playback_latency(SpiceMarshaller *m, SpiceMsgPlaybackLatency *msg)$/;"	f
spice_marshall_msg_playback_mode	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_playback_mode(SpiceMarshaller *m, SpiceMsgPlaybackMode *msg)$/;"	f
spice_marshall_msg_playback_start	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_playback_start(SpiceMarshaller *m, SpiceMsgPlaybackStart *msg)$/;"	f
spice_marshall_msg_port_event	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_port_event(SpiceMarshaller *m, SpiceMsgPortEvent *msg)$/;"	f
spice_marshall_msg_port_init	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_port_init(SpiceMarshaller *m, SpiceMsgPortInit *msg)$/;"	f
spice_marshall_msg_record_start	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_record_start(SpiceMarshaller *m, SpiceMsgRecordStart *msg)$/;"	f
spice_marshall_msg_set_ack	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_set_ack(SpiceMarshaller *m, SpiceMsgSetAck *msg)$/;"	f
spice_marshall_msg_smartcard_data	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_smartcard_data(SpiceMarshaller *m, SpiceMsgSmartcard *msg)$/;"	f
spice_marshall_msg_tunnel_init	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_init(SpiceMarshaller *m, SpiceMsgTunnelInit *msg)$/;"	f
spice_marshall_msg_tunnel_service_ip_map	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_service_ip_map(SpiceMarshaller *m, SpiceMsgTunnelServiceIpMap *msg)$/;"	f
spice_marshall_msg_tunnel_socket_close	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_close(SpiceMarshaller *m, SpiceMsgTunnelSocketClose *msg)$/;"	f
spice_marshall_msg_tunnel_socket_closed_ack	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_closed_ack(SpiceMarshaller *m, SpiceMsgTunnelSocketClosedAck *msg)$/;"	f
spice_marshall_msg_tunnel_socket_data	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_data(SpiceMarshaller *m, SpiceMsgTunnelSocketData *msg)$/;"	f
spice_marshall_msg_tunnel_socket_fin	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_fin(SpiceMarshaller *m, SpiceMsgTunnelSocketFin *msg)$/;"	f
spice_marshall_msg_tunnel_socket_open	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_open(SpiceMarshaller *m, SpiceMsgTunnelSocketOpen *msg)$/;"	f
spice_marshall_msg_tunnel_socket_token	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_tunnel_socket_token(SpiceMarshaller *m, SpiceMsgTunnelSocketTokens *msg)$/;"	f
spice_marshall_msg_wait_for_channels	spice-common/common/generated_server_marshallers.c	/^void spice_marshall_msg_wait_for_channels(SpiceMarshaller *m, SpiceMsgWaitForChannels *msg)$/;"	f
spice_marshall_msgc_ack_sync	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_ack_sync(SpiceMarshaller *m, SpiceMsgcAckSync *msg)$/;"	f	file:
spice_marshall_msgc_ack_sync	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_ack_sync(SpiceMarshaller *m, SpiceMsgcAckSync *msg)$/;"	f	file:
spice_marshall_msgc_disconnecting	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_disconnecting(SpiceMarshaller *m, SpiceMsgDisconnect *msg)$/;"	f	file:
spice_marshall_msgc_disconnecting	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_disconnecting(SpiceMarshaller *m, SpiceMsgDisconnect *msg)$/;"	f	file:
spice_marshall_msgc_display_init	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_display_init(SpiceMarshaller *m, SpiceMsgcDisplayInit *msg)$/;"	f	file:
spice_marshall_msgc_display_init	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_display_init(SpiceMarshaller *m, SpiceMsgcDisplayInit *msg)$/;"	f	file:
spice_marshall_msgc_display_stream_report	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_display_stream_report(SpiceMarshaller *m, SpiceMsgcDisplayStreamReport *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_down	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_down(SpiceMarshaller *m, SpiceMsgcKeyDown *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_down	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_down(SpiceMarshaller *m, SpiceMsgcKeyDown *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_modifiers	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_modifiers(SpiceMarshaller *m, SpiceMsgcKeyModifiers *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_modifiers	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_modifiers(SpiceMarshaller *m, SpiceMsgcKeyModifiers *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_up	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_key_up(SpiceMarshaller *m, SpiceMsgcKeyUp *msg)$/;"	f	file:
spice_marshall_msgc_inputs_key_up	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_key_up(SpiceMarshaller *m, SpiceMsgcKeyUp *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_motion	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_motion(SpiceMarshaller *m, SpiceMsgcMouseMotion *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_motion	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_motion(SpiceMarshaller *m, SpiceMsgcMouseMotion *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_position	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_position(SpiceMarshaller *m, SpiceMsgcMousePosition *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_position	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_position(SpiceMarshaller *m, SpiceMsgcMousePosition *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_press	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_press(SpiceMarshaller *m, SpiceMsgcMousePress *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_press	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_press(SpiceMarshaller *m, SpiceMsgcMousePress *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_release	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_inputs_mouse_release(SpiceMarshaller *m, SpiceMsgcMouseRelease *msg)$/;"	f	file:
spice_marshall_msgc_inputs_mouse_release	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_inputs_mouse_release(SpiceMarshaller *m, SpiceMsgcMouseRelease *msg)$/;"	f	file:
spice_marshall_msgc_main_agent_start	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_main_agent_start(SpiceMarshaller *m, SpiceMsgcMainAgentStart *msg)$/;"	f	file:
spice_marshall_msgc_main_agent_start	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_agent_start(SpiceMarshaller *m, SpiceMsgcMainAgentStart *msg)$/;"	f	file:
spice_marshall_msgc_main_agent_token	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_main_agent_token(SpiceMarshaller *m, SpiceMsgcMainAgentTokens *msg)$/;"	f	file:
spice_marshall_msgc_main_agent_token	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_agent_token(SpiceMarshaller *m, SpiceMsgcMainAgentTokens *msg)$/;"	f	file:
spice_marshall_msgc_main_client_info	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_main_client_info(SpiceMarshaller *m, SpiceMsgcClientInfo *msg)$/;"	f	file:
spice_marshall_msgc_main_client_info	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_client_info(SpiceMarshaller *m, SpiceMsgcClientInfo *msg)$/;"	f	file:
spice_marshall_msgc_main_migrate_dst_do_seamless	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_main_migrate_dst_do_seamless(SpiceMarshaller *m, SpiceMsgcMainMigrateDstDoSeamless *msg)$/;"	f	file:
spice_marshall_msgc_main_mouse_mode_request	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_main_mouse_mode_request(SpiceMarshaller *m, SpiceMsgcMainMouseModeRequest *msg)$/;"	f	file:
spice_marshall_msgc_main_mouse_mode_request	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_main_mouse_mode_request(SpiceMarshaller *m, SpiceMsgcMainMouseModeRequest *msg)$/;"	f	file:
spice_marshall_msgc_pong	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_pong(SpiceMarshaller *m, SpiceMsgPing *msg)$/;"	f	file:
spice_marshall_msgc_pong	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_pong(SpiceMarshaller *m, SpiceMsgPing *msg)$/;"	f	file:
spice_marshall_msgc_port_event	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_port_event(SpiceMarshaller *m, SpiceMsgcPortEvent *msg)$/;"	f	file:
spice_marshall_msgc_record_data	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_record_data(SpiceMarshaller *m, SpiceMsgcRecordPacket *msg)$/;"	f	file:
spice_marshall_msgc_record_data	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_data(SpiceMarshaller *m, SpiceMsgcRecordPacket *msg)$/;"	f	file:
spice_marshall_msgc_record_mode	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_record_mode(SpiceMarshaller *m, SpiceMsgcRecordMode *msg)$/;"	f	file:
spice_marshall_msgc_record_mode	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_mode(SpiceMarshaller *m, SpiceMsgcRecordMode *msg)$/;"	f	file:
spice_marshall_msgc_record_start_mark	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_record_start_mark(SpiceMarshaller *m, SpiceMsgcRecordStartMark *msg)$/;"	f	file:
spice_marshall_msgc_record_start_mark	spice-common/common/generated_client_marshallers1.c	/^static void spice_marshall_msgc_record_start_mark(SpiceMarshaller *m, SpiceMsgcRecordStartMark *msg)$/;"	f	file:
spice_marshall_msgc_smartcard_atr	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_atr(SpiceMarshaller *m, VSCMsgATR *msg)$/;"	f	file:
spice_marshall_msgc_smartcard_data	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_data(SpiceMarshaller *m, SpiceMsgcSmartcard *msg, SpiceMarshaller **reader_name_out)$/;"	f	file:
spice_marshall_msgc_smartcard_error	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_error(SpiceMarshaller *m, VSCMsgError *msg)$/;"	f	file:
spice_marshall_msgc_smartcard_header	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_header(SpiceMarshaller *m, VSCMsgHeader *msg)$/;"	f	file:
spice_marshall_msgc_smartcard_reader_add	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_smartcard_reader_add(SpiceMarshaller *m, VSCMsgReaderAdd *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_service_add	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_service_add(SpiceMarshaller *m, SpiceMsgcTunnelAddGenericService *msg, SpiceMarshaller **name_out, SpiceMarshaller **description_out)$/;"	f	file:
spice_marshall_msgc_tunnel_service_remove	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_service_remove(SpiceMarshaller *m, SpiceMsgcTunnelRemoveService *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_closed	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_closed(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosed *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_closed_ack	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_closed_ack(SpiceMarshaller *m, SpiceMsgcTunnelSocketClosedAck *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_data	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_data(SpiceMarshaller *m, SpiceMsgcTunnelSocketData *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_fin	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_fin(SpiceMarshaller *m, SpiceMsgcTunnelSocketFin *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_open_ack	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_open_ack(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenAck *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_open_nack	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_open_nack(SpiceMarshaller *m, SpiceMsgcTunnelSocketOpenNack *msg)$/;"	f	file:
spice_marshall_msgc_tunnel_socket_token	spice-common/common/generated_client_marshallers.c	/^static void spice_marshall_msgc_tunnel_socket_token(SpiceMarshaller *m, SpiceMsgcTunnelSocketTokens *msg)$/;"	f	file:
spice_marshaller_add	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_add(SpiceMarshaller *m, const uint8_t *data, size_t size)$/;"	f
spice_marshaller_add_int16	spice-common/common/marshaller.c	/^void *spice_marshaller_add_int16(SpiceMarshaller *m, int16_t v)$/;"	f
spice_marshaller_add_int32	spice-common/common/marshaller.c	/^void *spice_marshaller_add_int32(SpiceMarshaller *m, int32_t v)$/;"	f
spice_marshaller_add_int64	spice-common/common/marshaller.c	/^void *spice_marshaller_add_int64(SpiceMarshaller *m, int64_t v)$/;"	f
spice_marshaller_add_int8	spice-common/common/marshaller.c	/^void *spice_marshaller_add_int8(SpiceMarshaller *m, int8_t v)$/;"	f
spice_marshaller_add_item	spice-common/common/marshaller.c	/^static MarshallerItem *spice_marshaller_add_item(SpiceMarshaller *m)$/;"	f	file:
spice_marshaller_add_ref	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_add_ref(SpiceMarshaller *m, uint8_t *data, size_t size)$/;"	f
spice_marshaller_add_ref_chunks	spice-common/common/marshaller.c	/^void spice_marshaller_add_ref_chunks(SpiceMarshaller *m, SpiceChunks *chunks)$/;"	f
spice_marshaller_add_ref_full	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_add_ref_full(SpiceMarshaller *m, uint8_t *data, size_t size,$/;"	f
spice_marshaller_add_uint16	spice-common/common/marshaller.c	/^void *spice_marshaller_add_uint16(SpiceMarshaller *m, uint16_t v)$/;"	f
spice_marshaller_add_uint32	spice-common/common/marshaller.c	/^void *spice_marshaller_add_uint32(SpiceMarshaller *m, uint32_t v)$/;"	f
spice_marshaller_add_uint64	spice-common/common/marshaller.c	/^void *spice_marshaller_add_uint64(SpiceMarshaller *m, uint64_t v)$/;"	f
spice_marshaller_add_uint8	spice-common/common/marshaller.c	/^void *spice_marshaller_add_uint8(SpiceMarshaller *m, uint8_t v)$/;"	f
spice_marshaller_destroy	spice-common/common/marshaller.c	/^void spice_marshaller_destroy(SpiceMarshaller *m)$/;"	f
spice_marshaller_fill_iovec	spice-common/common/marshaller.c	/^int spice_marshaller_fill_iovec(SpiceMarshaller *m, struct iovec *vec,$/;"	f
spice_marshaller_flush	spice-common/common/marshaller.c	/^void spice_marshaller_flush(SpiceMarshaller *m)$/;"	f
spice_marshaller_get_offset	spice-common/common/marshaller.c	/^size_t spice_marshaller_get_offset(SpiceMarshaller *m)$/;"	f
spice_marshaller_get_ptr	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_get_ptr(SpiceMarshaller *m)$/;"	f
spice_marshaller_get_ptr_submarshaller	spice-common/common/marshaller.c	/^SpiceMarshaller *spice_marshaller_get_ptr_submarshaller(SpiceMarshaller *m, int is_64bit)$/;"	f
spice_marshaller_get_size	spice-common/common/marshaller.c	/^size_t spice_marshaller_get_size(SpiceMarshaller *m)$/;"	f
spice_marshaller_get_submarshaller	spice-common/common/marshaller.c	/^SpiceMarshaller *spice_marshaller_get_submarshaller(SpiceMarshaller *m)$/;"	f
spice_marshaller_get_total_size	spice-common/common/marshaller.c	/^size_t spice_marshaller_get_total_size(SpiceMarshaller *m)$/;"	f
spice_marshaller_init	spice-common/common/marshaller.c	/^static void spice_marshaller_init(SpiceMarshaller *m,$/;"	f	file:
spice_marshaller_item_free_func	spice-common/common/marshaller.h	/^typedef void (*spice_marshaller_item_free_func)(uint8_t *data, void *opaque);$/;"	t
spice_marshaller_linearize	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_linearize(SpiceMarshaller *m, size_t skip_bytes,$/;"	f
spice_marshaller_new	spice-common/common/marshaller.c	/^SpiceMarshaller *spice_marshaller_new(void)$/;"	f
spice_marshaller_reserve_space	spice-common/common/marshaller.c	/^uint8_t *spice_marshaller_reserve_space(SpiceMarshaller *m, size_t size)$/;"	f
spice_marshaller_reset	spice-common/common/marshaller.c	/^void spice_marshaller_reset(SpiceMarshaller *m)$/;"	f
spice_marshaller_set_base	spice-common/common/marshaller.c	/^void spice_marshaller_set_base(SpiceMarshaller *m, size_t base)$/;"	f
spice_marshaller_set_uint32	spice-common/common/marshaller.c	/^void spice_marshaller_set_uint32(SpiceMarshaller *m, void *ref, uint32_t v)$/;"	f
spice_marshaller_unreserve_space	spice-common/common/marshaller.c	/^void spice_marshaller_unreserve_space(SpiceMarshaller *m, size_t size)$/;"	f
spice_mb	spice-common/spice-protocol/spice/barrier.h	38;"	d
spice_mb	spice-common/spice-protocol/spice/barrier.h	41;"	d
spice_mb	spice-common/spice-protocol/spice/barrier.h	48;"	d
spice_mb	spice-common/spice-protocol/spice/barrier.h	50;"	d
spice_memdup	spice-common/common/mem.c	/^void *spice_memdup(const void *mem, size_t n_bytes)$/;"	f
spice_message_marshallers_get	spice-common/common/generated_client_marshallers.c	/^SpiceMessageMarshallers * spice_message_marshallers_get(void)$/;"	f
spice_message_marshallers_get1	spice-common/common/generated_client_marshallers1.c	/^SpiceMessageMarshallers * spice_message_marshallers_get1(void)$/;"	f
spice_name	server/reds.c	/^static char *spice_name = NULL;$/;"	v	file:
spice_new	spice-common/common/mem.h	143;"	d
spice_new0	spice-common/common/mem.h	144;"	d
spice_openssl_verify_free	spice-common/common/ssl_verify.c	/^void spice_openssl_verify_free(SpiceOpenSSLVerify* verify)$/;"	f
spice_openssl_verify_new	spice-common/common/ssl_verify.c	/^SpiceOpenSSLVerify* spice_openssl_verify_new(SSL *ssl, SPICE_SSL_VERIFY_OP verifyop,$/;"	f
spice_parse_channel_func_t	server/demarshallers.h	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor,$/;"	t
spice_parse_channel_func_t	spice-common/common/client_demarshallers.h	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor,$/;"	t
spice_parse_channel_func_t	spice-common/common/generated_client_demarshallers.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_channel_func_t	spice-common/common/generated_client_demarshallers1.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_channel_func_t	spice-common/common/generated_server_demarshallers.c	/^typedef uint8_t * (*spice_parse_channel_func_t)(uint8_t *message_start, uint8_t *message_end, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message);$/;"	t	file:
spice_parse_msg	spice-common/common/generated_client_demarshallers.c	/^uint8_t * spice_parse_msg(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f
spice_parse_msg1	spice-common/common/generated_client_demarshallers1.c	/^uint8_t * spice_parse_msg1(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f
spice_parse_reply	spice-common/common/generated_server_demarshallers.c	/^uint8_t * spice_parse_reply(uint8_t *message_start, uint8_t *message_end, uint32_t channel, uint16_t message_type, int minor, size_t *size_out, message_destructor_t *free_message)$/;"	f
spice_parser	spice-common/spice_codegen.py	/^from python_modules import spice_parser$/;"	i
spice_pixman_blit	spice-common/common/pixman_utils.c	/^void spice_pixman_blit(pixman_image_t *dest,$/;"	f
spice_pixman_blit_colorkey	spice-common/common/pixman_utils.c	/^void spice_pixman_blit_colorkey (pixman_image_t *dest,$/;"	f
spice_pixman_blit_rop	spice-common/common/pixman_utils.c	/^void spice_pixman_blit_rop (pixman_image_t *dest,$/;"	f
spice_pixman_copy_rect	spice-common/common/pixman_utils.c	/^void spice_pixman_copy_rect (pixman_image_t *image,$/;"	f
spice_pixman_fill_rect	spice-common/common/pixman_utils.c	/^void spice_pixman_fill_rect(pixman_image_t *dest,$/;"	f
spice_pixman_fill_rect_rop	spice-common/common/pixman_utils.c	/^void spice_pixman_fill_rect_rop(pixman_image_t *dest,$/;"	f
spice_pixman_image_get_bpp	spice-common/common/pixman_utils.c	/^int spice_pixman_image_get_bpp(pixman_image_t *image)$/;"	f
spice_pixman_image_get_format	spice-common/common/canvas_utils.c	/^int spice_pixman_image_get_format(pixman_image_t *image, pixman_format_code_t *format)$/;"	f
spice_pixman_image_set_format	spice-common/common/canvas_utils.c	/^spice_pixman_image_set_format(pixman_image_t *image,$/;"	f
spice_pixman_region32_init_rects	spice-common/common/pixman_utils.c	/^pixman_bool_t spice_pixman_region32_init_rects (pixman_region32_t *region,$/;"	f
spice_pixman_tile_rect	spice-common/common/pixman_utils.c	/^void spice_pixman_tile_rect(pixman_image_t *dest,$/;"	f
spice_pixman_tile_rect_rop	spice-common/common/pixman_utils.c	/^void spice_pixman_tile_rect_rop(pixman_image_t *dest,$/;"	f
spice_playback_state_free	server/snd_worker.c	/^static void spice_playback_state_free(SpicePlaybackState *st)$/;"	f	file:
spice_port	server/reds.c	/^static int spice_port = -1;$/;"	v	file:
spice_printerr	spice-common/common/log.h	83;"	d
spice_protocol_include_HEADERS	spice-common/spice-protocol/spice/Makefile	/^spice_protocol_include_HEADERS = \\$/;"	m
spice_protocol_includedir	spice-common/spice-protocol/spice/Makefile	/^spice_protocol_includedir = $(includedir)\/spice-1\/spice$/;"	m
spice_qxl_add_memslot	server/red_dispatcher.c	/^void spice_qxl_add_memslot(QXLInstance *instance, QXLDevMemSlot *slot)$/;"	f
spice_qxl_add_memslot_async	server/red_dispatcher.c	/^void spice_qxl_add_memslot_async(QXLInstance *instance, QXLDevMemSlot *slot, uint64_t cookie)$/;"	f
spice_qxl_create_primary_surface	server/red_dispatcher.c	/^void spice_qxl_create_primary_surface(QXLInstance *instance, uint32_t surface_id,$/;"	f
spice_qxl_create_primary_surface_async	server/red_dispatcher.c	/^void spice_qxl_create_primary_surface_async(QXLInstance *instance, uint32_t surface_id,$/;"	f
spice_qxl_del_memslot	server/red_dispatcher.c	/^void spice_qxl_del_memslot(QXLInstance *instance, uint32_t slot_group_id, uint32_t slot_id)$/;"	f
spice_qxl_destroy_primary_surface	server/red_dispatcher.c	/^void spice_qxl_destroy_primary_surface(QXLInstance *instance, uint32_t surface_id)$/;"	f
spice_qxl_destroy_primary_surface_async	server/red_dispatcher.c	/^void spice_qxl_destroy_primary_surface_async(QXLInstance *instance, uint32_t surface_id, uint64_t cookie)$/;"	f
spice_qxl_destroy_surface_async	server/red_dispatcher.c	/^void spice_qxl_destroy_surface_async(QXLInstance *instance, uint32_t surface_id, uint64_t cookie)$/;"	f
spice_qxl_destroy_surface_wait	server/red_dispatcher.c	/^void spice_qxl_destroy_surface_wait(QXLInstance *instance, uint32_t surface_id)$/;"	f
spice_qxl_destroy_surfaces	server/red_dispatcher.c	/^void spice_qxl_destroy_surfaces(QXLInstance *instance)$/;"	f
spice_qxl_destroy_surfaces_async	server/red_dispatcher.c	/^void spice_qxl_destroy_surfaces_async(QXLInstance *instance, uint64_t cookie)$/;"	f
spice_qxl_driver_unload	server/red_dispatcher.c	/^void spice_qxl_driver_unload(QXLInstance *instance)$/;"	f
spice_qxl_flush_surfaces_async	server/red_dispatcher.c	/^void spice_qxl_flush_surfaces_async(QXLInstance *instance, uint64_t cookie)$/;"	f
spice_qxl_loadvm_commands	server/red_dispatcher.c	/^void spice_qxl_loadvm_commands(QXLInstance *instance, struct QXLCommandExt *ext, uint32_t count)$/;"	f
spice_qxl_monitors_config_async	server/red_dispatcher.c	/^void spice_qxl_monitors_config_async(QXLInstance *instance, QXLPHYSICAL monitors_config,$/;"	f
spice_qxl_oom	server/red_dispatcher.c	/^void spice_qxl_oom(QXLInstance *instance)$/;"	f
spice_qxl_reset_cursor	server/red_dispatcher.c	/^void spice_qxl_reset_cursor(QXLInstance *instance)$/;"	f
spice_qxl_reset_image_cache	server/red_dispatcher.c	/^void spice_qxl_reset_image_cache(QXLInstance *instance)$/;"	f
spice_qxl_reset_memslots	server/red_dispatcher.c	/^void spice_qxl_reset_memslots(QXLInstance *instance)$/;"	f
spice_qxl_start	server/red_dispatcher.c	/^void spice_qxl_start(QXLInstance *instance)$/;"	f
spice_qxl_stop	server/red_dispatcher.c	/^void spice_qxl_stop(QXLInstance *instance)$/;"	f
spice_qxl_update_area	server/red_dispatcher.c	/^void spice_qxl_update_area(QXLInstance *instance, uint32_t surface_id,$/;"	f
spice_qxl_update_area_async	server/red_dispatcher.c	/^void spice_qxl_update_area_async(QXLInstance *instance, uint32_t surface_id, QXLRect *qxl_area,$/;"	f
spice_qxl_wakeup	server/red_dispatcher.c	/^void spice_qxl_wakeup(QXLInstance *instance)$/;"	f
spice_realloc	spice-common/common/mem.c	/^void *spice_realloc(void *mem, size_t n_bytes)$/;"	f
spice_realloc_n	spice-common/common/mem.c	/^void *spice_realloc_n(void *mem, size_t n_blocks, size_t n_block_bytes)$/;"	f
spice_record_state_free	server/snd_worker.c	/^static void spice_record_state_free(SpiceRecordState *st)$/;"	f	file:
spice_renew	spice-common/common/mem.h	145;"	d
spice_return_if_fail	spice-common/common/log.h	59;"	d
spice_return_val_if_fail	spice-common/common/log.h	68;"	d
spice_secure_port	server/reds.c	/^static int spice_secure_port = -1;$/;"	v	file:
spice_server_add_client	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_add_client(SpiceServer *s, int socket, int skip_auth)$/;"	f
spice_server_add_interface	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_add_interface(SpiceServer *s,$/;"	f
spice_server_add_renderer	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_add_renderer(SpiceServer *s, const char *name)$/;"	f
spice_server_add_ssl_client	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_add_ssl_client(SpiceServer *s, int socket, int skip_auth)$/;"	f
spice_server_char_device_add_interface	server/reds.c	/^static int spice_server_char_device_add_interface(SpiceServer *s,$/;"	f	file:
spice_server_char_device_recognized_subtypes	server/reds.c	/^SPICE_GNUC_VISIBLE const char** spice_server_char_device_recognized_subtypes(void)$/;"	f
spice_server_char_device_recognized_subtypes_list	server/reds.c	/^const char *spice_server_char_device_recognized_subtypes_list[] = {$/;"	v
spice_server_char_device_remove_interface	server/reds.c	/^static void spice_server_char_device_remove_interface(SpiceBaseInstance *sin)$/;"	f	file:
spice_server_char_device_wakeup	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_char_device_wakeup(SpiceCharDeviceInstance* sin)$/;"	f
spice_server_destroy	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_destroy(SpiceServer *s)$/;"	f
spice_server_get_best_playback_rate	server/snd_worker.c	/^SPICE_GNUC_VISIBLE uint32_t spice_server_get_best_playback_rate(SpicePlaybackInstance *sin)$/;"	f
spice_server_get_best_record_rate	server/snd_worker.c	/^SPICE_GNUC_VISIBLE uint32_t spice_server_get_best_record_rate(SpiceRecordInstance *sin)$/;"	f
spice_server_get_image_compression	server/reds.c	/^SPICE_GNUC_VISIBLE spice_image_compression_t spice_server_get_image_compression(SpiceServer *s)$/;"	f
spice_server_get_num_clients	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_get_num_clients(SpiceServer *s)$/;"	f
spice_server_get_peer_info	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_get_peer_info(SpiceServer *s, struct sockaddr *sa, socklen_t *salen)$/;"	f
spice_server_get_sock_info	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_get_sock_info(SpiceServer *s, struct sockaddr *sa, socklen_t *salen)$/;"	f
spice_server_init	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_init(SpiceServer *s, SpiceCoreInterface *core)$/;"	f
spice_server_is_server_mouse	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_is_server_mouse(SpiceServer *s)$/;"	f
spice_server_kbd_leds	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_kbd_leds(SpiceKbdInstance *sin, int leds)$/;"	f
spice_server_migrate_client_state	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_client_state(SpiceServer *s)$/;"	f
spice_server_migrate_connect	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_connect(SpiceServer *s, const char* dest,$/;"	f
spice_server_migrate_end	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_end(SpiceServer *s, int completed)$/;"	f
spice_server_migrate_info	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_info(SpiceServer *s, const char* dest,$/;"	f
spice_server_migrate_start	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_start(SpiceServer *s)$/;"	f
spice_server_migrate_switch	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_migrate_switch(SpiceServer *s)$/;"	f
spice_server_new	server/reds.c	/^SPICE_GNUC_VISIBLE SpiceServer *spice_server_new(void)$/;"	f
spice_server_playback_get_buffer	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_get_buffer(SpicePlaybackInstance *sin,$/;"	f
spice_server_playback_put_samples	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_put_samples(SpicePlaybackInstance *sin, uint32_t *samples)$/;"	f
spice_server_playback_set_mute	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_set_mute(SpicePlaybackInstance *sin, uint8_t mute)$/;"	f
spice_server_playback_set_volume	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_set_volume(SpicePlaybackInstance *sin,$/;"	f
spice_server_playback_start	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_start(SpicePlaybackInstance *sin)$/;"	f
spice_server_playback_stop	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_playback_stop(SpicePlaybackInstance *sin)$/;"	f
spice_server_port_event	server/spicevmc.c	/^SPICE_GNUC_VISIBLE void spice_server_port_event(SpiceCharDeviceInstance *sin, uint8_t event)$/;"	f
spice_server_record_get_samples	server/snd_worker.c	/^SPICE_GNUC_VISIBLE uint32_t spice_server_record_get_samples(SpiceRecordInstance *sin,$/;"	f
spice_server_record_set_mute	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_record_set_mute(SpiceRecordInstance *sin, uint8_t mute)$/;"	f
spice_server_record_set_volume	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_record_set_volume(SpiceRecordInstance *sin,$/;"	f
spice_server_record_start	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_record_start(SpiceRecordInstance *sin)$/;"	f
spice_server_record_stop	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_record_stop(SpiceRecordInstance *sin)$/;"	f
spice_server_remove_interface	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_remove_interface(SpiceBaseInstance *sin)$/;"	f
spice_server_set_addr	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_set_addr(SpiceServer *s, const char *addr, int flags)$/;"	f
spice_server_set_agent_copypaste	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_agent_copypaste(SpiceServer *s, int enable)$/;"	f
spice_server_set_agent_file_xfer	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_agent_file_xfer(SpiceServer *s, int enable)$/;"	f
spice_server_set_agent_mouse	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_agent_mouse(SpiceServer *s, int enable)$/;"	f
spice_server_set_channel_security	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_channel_security(SpiceServer *s, const char *channel, int security)$/;"	f
spice_server_set_compat_version	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_compat_version(SpiceServer *s,$/;"	f
spice_server_set_exit_on_disconnect	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_exit_on_disconnect(SpiceServer *s, int flag)$/;"	f
spice_server_set_image_compression	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_image_compression(SpiceServer *s,$/;"	f
spice_server_set_jpeg_compression	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_jpeg_compression(SpiceServer *s, spice_wan_compression_t comp)$/;"	f
spice_server_set_listen_socket_fd	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_listen_socket_fd(SpiceServer *s, int listen_fd)$/;"	f
spice_server_set_name	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_set_name(SpiceServer *s, const char *name)$/;"	f
spice_server_set_noauth	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_noauth(SpiceServer *s)$/;"	f
spice_server_set_playback_compression	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_playback_compression(SpiceServer *s, int enable)$/;"	f
spice_server_set_playback_rate	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_set_playback_rate(SpicePlaybackInstance *sin, uint32_t frequency)$/;"	f
spice_server_set_port	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_port(SpiceServer *s, int port)$/;"	f
spice_server_set_record_rate	server/snd_worker.c	/^SPICE_GNUC_VISIBLE void spice_server_set_record_rate(SpiceRecordInstance *sin, uint32_t frequency)$/;"	f
spice_server_set_sasl	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_sasl(SpiceServer *s, int enabled)$/;"	f
spice_server_set_sasl_appname	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_sasl_appname(SpiceServer *s, const char *appname)$/;"	f
spice_server_set_seamless_migration	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_set_seamless_migration(SpiceServer *s, int enable)$/;"	f
spice_server_set_streaming_compression	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_streaming_compression(SpiceServer *s, int value)$/;"	f
spice_server_set_streaming_video	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_streaming_video(SpiceServer *s, int value)$/;"	f
spice_server_set_ticket	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_ticket(SpiceServer *s,$/;"	f
spice_server_set_tls	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_tls(SpiceServer *s, int port,$/;"	f
spice_server_set_uuid	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_set_uuid(SpiceServer *s, const uint8_t uuid[16])$/;"	f
spice_server_set_zlib_glz_compression	server/reds.c	/^SPICE_GNUC_VISIBLE int spice_server_set_zlib_glz_compression(SpiceServer *s, spice_wan_compression_t comp)$/;"	f
spice_server_vm_start	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_vm_start(SpiceServer *s)$/;"	f
spice_server_vm_stop	server/reds.c	/^SPICE_GNUC_VISIBLE void spice_server_vm_stop(SpiceServer *s)$/;"	f
spice_static_assert	spice-common/common/log.h	144;"	d
spice_strdup	spice-common/common/mem.c	/^char *spice_strdup(const char *str)$/;"	f
spice_strndup	spice-common/common/mem.c	/^char *spice_strndup(const char *str, size_t n_bytes)$/;"	f
spice_strnlen	spice-common/common/mem.c	/^size_t spice_strnlen(const char *str, size_t max_len)$/;"	f
spice_surface_format_to_pixman	spice-common/common/pixman_utils.c	/^pixman_format_code_t spice_surface_format_to_pixman(uint32_t surface_format)$/;"	f
spice_test_config_parse_args	server/tests/test_display_base.c	/^void spice_test_config_parse_args(int argc, char **argv)$/;"	f
spice_timer_cancel	server/spice_timer_queue.c	/^void spice_timer_cancel(SpiceTimer *timer)$/;"	f
spice_timer_queue_add	server/spice_timer_queue.c	/^SpiceTimer *spice_timer_queue_add(SpiceTimerFunc func, void *opaque)$/;"	f
spice_timer_queue_cb	server/spice_timer_queue.c	/^void spice_timer_queue_cb(void)$/;"	f
spice_timer_queue_create	server/spice_timer_queue.c	/^int spice_timer_queue_create(void)$/;"	f
spice_timer_queue_destroy	server/spice_timer_queue.c	/^void spice_timer_queue_destroy(void)$/;"	f
spice_timer_queue_find	server/spice_timer_queue.c	/^static SpiceTimerQueue *spice_timer_queue_find(void)$/;"	f	file:
spice_timer_queue_find_with_lock	server/spice_timer_queue.c	/^static SpiceTimerQueue *spice_timer_queue_find_with_lock(void)$/;"	f	file:
spice_timer_queue_get_timeout_ms	server/spice_timer_queue.c	/^unsigned int spice_timer_queue_get_timeout_ms(void)$/;"	f
spice_timer_queue_init	server/spice_timer_queue.c	/^static void spice_timer_queue_init(void)$/;"	f	file:
spice_timer_remove	server/spice_timer_queue.c	/^void spice_timer_remove(SpiceTimer *timer)$/;"	f
spice_timer_set	server/spice_timer_queue.c	/^void spice_timer_set(SpiceTimer *timer, uint32_t ms)$/;"	f
spice_uuid	server/reds.c	/^static uint8_t spice_uuid[16] = { 0, };$/;"	v	file:
spice_uuid_is_set	server/reds.c	/^static bool spice_uuid_is_set = FALSE;$/;"	v	file:
spice_wan_compression_t	server/spice.h	/^} spice_wan_compression_t;$/;"	t	typeref:enum:__anon158
spice_warn_if	spice-common/common/log.h	127;"	d
spice_warn_if_fail	spice-common/common/log.h	119;"	d
spice_warn_if_reached	spice-common/common/log.h	77;"	d
spice_warning	spice-common/common/log.h	101;"	d
spicec_DEPENDENCIES	client/Makefile	/^spicec_DEPENDENCIES =  \\$/;"	m
spicec_LDADD	client/Makefile	/^spicec_LDADD = \\$/;"	m
spicec_LDFLAGS	client/Makefile	/^spicec_LDFLAGS = $(SPICEC_STATIC_LINKAGE_BSTATIC)$/;"	m
spicec_LINK	client/Makefile	/^spicec_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
spicec_OBJECTS	client/Makefile	/^spicec_OBJECTS = $(am_spicec_OBJECTS)$/;"	m
spicec_SOURCES	client/Makefile	/^spicec_SOURCES = application.cpp application.h audio_channels.h \\$/;"	m
spicevmc_channel_client_handle_migrate_data	server/spicevmc.c	/^static int spicevmc_channel_client_handle_migrate_data(RedChannelClient *rcc,$/;"	f	file:
spicevmc_channel_client_handle_migrate_flush_mark	server/spicevmc.c	/^static int spicevmc_channel_client_handle_migrate_flush_mark(RedChannelClient *rcc)$/;"	f	file:
spicevmc_char_dev_remove_client	server/spicevmc.c	/^static void spicevmc_char_dev_remove_client(RedClient *client, void *opaque)$/;"	f	file:
spicevmc_char_dev_send_tokens_to_client	server/spicevmc.c	/^static void spicevmc_char_dev_send_tokens_to_client(RedClient *client,$/;"	f	file:
spicevmc_chardev_read_msg_from_dev	server/spicevmc.c	/^static SpiceCharDeviceMsgToClient *spicevmc_chardev_read_msg_from_dev(SpiceCharDeviceInstance *sin,$/;"	f	file:
spicevmc_chardev_ref_msg_to_client	server/spicevmc.c	/^SpiceCharDeviceMsgToClient *spicevmc_chardev_ref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f
spicevmc_chardev_send_msg_to_client	server/spicevmc.c	/^static void spicevmc_chardev_send_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
spicevmc_chardev_unref_msg_to_client	server/spicevmc.c	/^static void spicevmc_chardev_unref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
spicevmc_connect	server/spicevmc.c	/^static void spicevmc_connect(RedChannel *channel, RedClient *client,$/;"	f	file:
spicevmc_device_connect	server/spicevmc.c	/^SpiceCharDeviceState *spicevmc_device_connect(SpiceCharDeviceInstance *sin,$/;"	f
spicevmc_device_disconnect	server/spicevmc.c	/^void spicevmc_device_disconnect(SpiceCharDeviceInstance *sin)$/;"	f
spicevmc_pipe_item_ref	server/spicevmc.c	/^static SpiceVmcPipeItem *spicevmc_pipe_item_ref(SpiceVmcPipeItem *item)$/;"	f	file:
spicevmc_pipe_item_unref	server/spicevmc.c	/^static void spicevmc_pipe_item_unref(SpiceVmcPipeItem *item)$/;"	f	file:
spicevmc_port_send_event	server/spicevmc.c	/^static void spicevmc_port_send_event(RedChannelClient *rcc, uint8_t event)$/;"	f	file:
spicevmc_port_send_init	server/spicevmc.c	/^static void spicevmc_port_send_init(RedChannelClient *rcc)$/;"	f	file:
spicevmc_red_channel_alloc_msg_rcv_buf	server/spicevmc.c	/^static uint8_t *spicevmc_red_channel_alloc_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_client_config_socket	server/spicevmc.c	/^static int spicevmc_red_channel_client_config_socket(RedChannelClient *rcc)$/;"	f	file:
spicevmc_red_channel_client_get_state	server/spicevmc.c	/^static SpiceVmcState *spicevmc_red_channel_client_get_state(RedChannelClient *rcc)$/;"	f	file:
spicevmc_red_channel_client_handle_message	server/spicevmc.c	/^static int spicevmc_red_channel_client_handle_message(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_client_on_disconnect	server/spicevmc.c	/^static void spicevmc_red_channel_client_on_disconnect(RedChannelClient *rcc)$/;"	f	file:
spicevmc_red_channel_hold_pipe_item	server/spicevmc.c	/^static void spicevmc_red_channel_hold_pipe_item(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_release_msg_rcv_buf	server/spicevmc.c	/^static void spicevmc_red_channel_release_msg_rcv_buf(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_release_pipe_item	server/spicevmc.c	/^static void spicevmc_red_channel_release_pipe_item(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_send_data	server/spicevmc.c	/^static void spicevmc_red_channel_send_data(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_send_item	server/spicevmc.c	/^static void spicevmc_red_channel_send_item(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_send_migrate_data	server/spicevmc.c	/^static void spicevmc_red_channel_send_migrate_data(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_send_port_event	server/spicevmc.c	/^static void spicevmc_red_channel_send_port_event(RedChannelClient *rcc,$/;"	f	file:
spicevmc_red_channel_send_port_init	server/spicevmc.c	/^static void spicevmc_red_channel_send_port_init(RedChannelClient *rcc,$/;"	f	file:
sport	client/red_client.cpp	/^    uint16_t sport;$/;"	m	struct:OldRedMigrationBegin	file:
sport	server/reds.h	/^    int sport;$/;"	m	struct:RedsMigSpice
sport	spice-common/common/messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMigrationDstInfo
sport	spice-common/common/messages.h	/^    uint16_t sport;$/;"	m	struct:SpiceMsgMainMigrationSwitchHost
src	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL		src;$/;"	m	struct:QXLComposite
src_area	spice-common/common/draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceAlphaBlend
src_area	spice-common/common/draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceCopy
src_area	spice-common/common/draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceOpaque
src_area	spice-common/common/draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceRop3
src_area	spice-common/common/draw.h	/^    SpiceRect src_area;$/;"	m	struct:SpiceTransparent
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLAlphaBlend
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLCompatAlphaBlend
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLCopy
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLOpaque
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLRop3
src_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect src_area;$/;"	m	struct:QXLTransparent
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceAlphaBlend
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceComposite
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceCopy
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceOpaque
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceRop3
src_bitmap	spice-common/common/draw.h	/^    SpiceImage *src_bitmap;$/;"	m	struct:SpiceTransparent
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLAlphaBlend
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLCompatAlphaBlend
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLCopy
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLOpaque
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLRop3
src_bitmap	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL src_bitmap;$/;"	m	struct:QXLTransparent
src_color	spice-common/common/draw.h	/^    uint32_t src_color;$/;"	m	struct:SpiceTransparent
src_color	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t src_color;$/;"	m	struct:QXLTransparent
src_do_seamless_migrate	server/reds-private.h	/^    int src_do_seamless_migrate; \/* per migration. Updated after the migration handshake$/;"	m	struct:RedsState
src_during_migrate	server/inputs_channel.c	/^    int src_during_migrate;$/;"	m	struct:InputsChannel	file:
src_height	spice-common/common/messages.h	/^    uint32_t src_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate
src_mig_version	spice-common/common/messages.h	/^    uint32_t src_mig_version;$/;"	m	struct:SpiceMsgMainMigrateBeginSeamless
src_origin	spice-common/common/draw.h	/^    SpicePoint16 src_origin;$/;"	m	struct:SpiceComposite
src_origin	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint16		src_origin;$/;"	m	struct:QXLComposite
src_pos	server/red_parse_qxl.h	/^            SpicePoint src_pos;$/;"	m	struct:RedDrawable::__anon161::__anon162
src_pos	spice-common/common/messages.h	/^    SpicePoint src_pos;$/;"	m	struct:SpiceMsgDisplayCopyBits
src_pos	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPoint src_pos;$/;"	m	struct:QXLCopyBits
src_transform	spice-common/common/draw.h	/^    SpiceTransform src_transform;$/;"	m	struct:SpiceComposite
src_transform	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL		src_transform;		\/* May be NULL *\/$/;"	m	struct:QXLComposite
src_version	spice-common/common/messages.h	/^    uint32_t src_version;$/;"	m	struct:SpiceMsgcMainMigrateDstDoSeamless
src_width	spice-common/common/messages.h	/^    uint32_t src_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	client/Makefile	/^srcdir = .$/;"	m
srcdir	docs/Makefile	/^srcdir = .$/;"	m
srcdir	docs/manual/Makefile	/^srcdir = .$/;"	m
srcdir	server/Makefile	/^srcdir = .$/;"	m
srcdir	server/tests/Makefile	/^srcdir = .$/;"	m
srcdir	spice-common/Makefile	/^srcdir = .$/;"	m
srcdir	spice-common/common/Makefile	/^srcdir = .$/;"	m
srcdir	spice-common/python_modules/Makefile	/^srcdir = .$/;"	m
srcdir	spice-common/spice-protocol/Makefile	/^srcdir = .$/;"	m
srcdir	spice-common/spice-protocol/spice/Makefile	/^srcdir = .$/;"	m
ssl	server/reds_stream.c	/^    SSL *ssl;$/;"	m	struct:RedsStreamPrivate	file:
ssl	spice-common/common/ssl_verify.h	/^    SSL                 *ssl;$/;"	m	struct:__anon4
ssl_error	client/red_peer.cpp	/^static void SPICE_GNUC_NORETURN ssl_error()$/;"	f	file:
ssl_parameters	server/reds.c	/^static RedSSLParameters ssl_parameters;$/;"	v	file:
ssl_password_cb	server/reds.c	/^static int ssl_password_cb(char *buf, int size, int flags, void *userdata)$/;"	f	file:
st	server/reds-private.h	/^    SpiceCharDeviceState *st;$/;"	m	struct:SpiceCharDeviceStateItem
st	server/spice-experimental.h	/^    SpiceNetWireState *st;$/;"	m	struct:SpiceNetWireInstance
st	server/spice.h	/^    QXLState           *st;$/;"	m	struct:QXLInstance
st	server/spice.h	/^    SpiceCharDeviceState *st;$/;"	m	struct:SpiceCharDeviceInstance
st	server/spice.h	/^    SpiceKbdState     *st;$/;"	m	struct:SpiceKbdInstance
st	server/spice.h	/^    SpiceMigrateState *st;$/;"	m	struct:SpiceMigrateInstance
st	server/spice.h	/^    SpiceMouseState   *st;$/;"	m	struct:SpiceMouseInstance
st	server/spice.h	/^    SpicePlaybackState *st;$/;"	m	struct:SpicePlaybackInstance
st	server/spice.h	/^    SpiceRecordState  *st;$/;"	m	struct:SpiceRecordInstance
st	server/spice.h	/^    SpiceTabletState  *st;$/;"	m	struct:SpiceTabletInstance
stabrand	spice-common/common/quic.c	/^static unsigned int stabrand(void)$/;"	f	file:
stage	server/dispatcher.h	/^    int stage;  \/* message parser stage - sender has no stages *\/$/;"	m	struct:Dispatcher
stamp	spice-common/common/messages.h	/^    uint64_t stamp;$/;"	m	struct:SpiceMsgDisplayStreamCreate
start	client/red_channel.cpp	/^void RedChannel::start()$/;"	f	class:RedChannel
start	client/red_client.cpp	/^void Migrate::start(const SpiceMsgMainMigrationBegin* migrate)$/;"	f	class:Migrate
start	client/windows/record.cpp	/^void WaveRecorder::start()$/;"	f	class:WaveRecorder
start	client/x11/record.cpp	/^void WaveRecorder::start()$/;"	f	class:WaveRecorder
start	server/glz_encoder.c	/^        uint8_t            *start;$/;"	m	struct:Encoder::__anon203	file:
start	server/red_worker.c	/^   uint64_t start;$/;"	m	struct:StreamStats	file:
start_draw	spice-common/common/glc.c	/^static inline void start_draw(InternaCtx *ctx)$/;"	f	file:
start_frame_mm_time	spice-common/common/messages.h	/^    uint32_t start_frame_mm_time;$/;"	m	struct:SpiceMsgcDisplayStreamReport
start_key_interception	client/windows/red_window.cpp	/^void RedWindow::start_key_interception()$/;"	f	class:RedWindow
start_key_interception	client/x11/red_window.cpp	/^void RedWindow::start_key_interception()$/;"	f	class:RedWindow
start_multi	client/cmd_line_parser.cpp	/^char* CmdLineParser::start_multi(char *optarg, char separator)$/;"	f	class:CmdLineParser
start_point	spice-common/common/glc.c	/^    int start_point;$/;"	m	struct:Pathpath	file:
start_time	server/snd_worker.c	/^    uint32_t start_time;$/;"	m	struct:RecordChannel	file:
start_wave	client/playback_channel.cpp	/^static void start_wave()$/;"	f	file:
starting_bit_rate	server/mjpeg_encoder.c	/^    uint64_t starting_bit_rate;$/;"	m	struct:MJpegEncoder	file:
starting_bit_rate	server/mjpeg_encoder.h	/^    uint64_t starting_bit_rate;$/;"	m	struct:MJpegEncoderStats
stat	server/red_worker.c	/^    StatNodeRef stat;$/;"	m	struct:CursorChannel	file:
stat	server/red_worker.c	/^    StatNodeRef stat;$/;"	m	struct:DisplayChannel	file:
stat	server/red_worker.c	/^    StatNodeRef stat;$/;"	m	struct:RedWorker	file:
stat	server/reds-private.h	/^    SpiceStat *stat;$/;"	m	struct:RedsState
stat_add	server/red_worker.c	/^static inline void stat_add(stat_info_t *info, stat_time_t start)$/;"	f	file:
stat_add	server/red_worker.c	244;"	d	file:
stat_add_counter	server/reds.c	/^uint64_t *stat_add_counter(StatNodeRef parent, const char *name, int visible)$/;"	f
stat_add_counter	server/stat.h	42;"	d
stat_add_node	server/reds.c	/^StatNodeRef stat_add_node(StatNodeRef parent, const char *name, int visible)$/;"	f
stat_add_node	server/stat.h	40;"	d
stat_byte_to_mega	server/red_worker.c	/^double inline stat_byte_to_mega(uint64_t size)$/;"	f
stat_compress_add	server/red_worker.c	/^static inline void stat_compress_add(stat_info_t *info, stat_time_t start, int orig_size,$/;"	f	file:
stat_compress_add	server/red_worker.c	282;"	d	file:
stat_compress_init	server/red_worker.c	/^static inline void stat_compress_init(stat_info_t *info, const char *name)$/;"	f	file:
stat_compress_init	server/red_worker.c	281;"	d	file:
stat_cpu_time_to_sec	server/red_worker.c	/^double stat_cpu_time_to_sec(stat_time_t time)$/;"	f
stat_inc_counter	server/stat.h	33;"	d
stat_inc_counter	server/stat.h	44;"	d
stat_info_s	server/red_worker.c	/^typedef struct stat_info_s {$/;"	s	file:
stat_info_t	server/red_worker.c	/^} stat_info_t;$/;"	t	typeref:struct:stat_info_s	file:
stat_init	server/red_worker.c	/^static inline void stat_init(stat_info_t *info, const char *name)$/;"	f	file:
stat_init	server/red_worker.c	245;"	d	file:
stat_lock	server/reds-private.h	/^    pthread_mutex_t stat_lock;$/;"	m	struct:RedsState
stat_now	server/red_worker.c	/^static stat_time_t stat_now(void)$/;"	f	file:
stat_remove	server/reds.c	/^static void stat_remove(SpiceStatNode *node)$/;"	f	file:
stat_remove_counter	server/reds.c	/^void stat_remove_counter(uint64_t *counter)$/;"	f
stat_remove_counter	server/stat.h	43;"	d
stat_remove_node	server/reds.c	/^void stat_remove_node(StatNodeRef ref)$/;"	f
stat_remove_node	server/stat.h	41;"	d
stat_reset	server/red_worker.c	/^static inline void stat_reset(stat_info_t *info)$/;"	f	file:
stat_shm_name	server/reds-private.h	/^    char *stat_shm_name;$/;"	m	struct:RedsState
stat_time_t	server/red_worker.c	/^typedef unsigned long stat_time_t;$/;"	t	file:
state	server/red_channel.h	/^    int state;$/;"	m	struct:RedChannelClientConnectivityMonitor
state	server/red_channel.h	/^    int state;$/;"	m	struct:RedChannelClientLatencyMonitor
state	server/spice.h	/^    void (*state)(SpiceCharDeviceInstance *sin, int connected);$/;"	m	struct:SpiceCharDeviceInterface
state	spice-common/common/glc.c	/^    int state;$/;"	m	struct:PathStroke	file:
state	spice-common/common/quic.c	/^    CommonState state;$/;"	m	struct:Channel	file:
statement	spice-common/python_modules/codegen.py	/^    def statement(self, s):$/;"	m	class:CodeWriter
static_assert	spice-common/common/verify.h	210;"	d
static_buffer	spice-common/common/marshaller.c	/^    MarshallerBuffer static_buffer;$/;"	m	struct:SpiceMarshallerData	file:
static_items	spice-common/common/marshaller.c	/^    MarshallerItem static_items[N_STATIC_ITEMS];$/;"	m	struct:SpiceMarshaller	file:
static_marshaller	spice-common/common/marshaller.c	/^    SpiceMarshaller static_marshaller;$/;"	m	struct:SpiceMarshallerData	file:
stats	server/red_worker.c	/^    StreamStats stats;$/;"	m	struct:StreamAgent	file:
stencil_mask	spice-common/common/glc.c	/^    int stencil_mask;$/;"	m	struct:InternaCtx	file:
stencil_refs	spice-common/common/glc.c	/^    int stencil_refs;$/;"	m	struct:InternaCtx	file:
stencil_tex	client/x11/pixels_source_p.h	/^            GLuint stencil_tex;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
stepx	spice-common/common/lines.c	/^    int stepx;                  \/* fixed integral dx *\/$/;"	m	struct:_PolyEdge	file:
sticky_mode	client/application.h	/^    bool sticky_mode;$/;"	m	struct:StickyInfo
stop	client/windows/playback.cpp	/^void WavePlayer::stop()$/;"	f	class:WavePlayer
stop	client/windows/record.cpp	/^void WaveRecorder::stop()$/;"	f	class:WaveRecorder
stop	client/x11/playback.cpp	/^void WavePlayer::stop()$/;"	f	class:WavePlayer
stop	client/x11/record.cpp	/^void WaveRecorder::stop()$/;"	f	class:WaveRecorder
stop_key_interception	client/windows/red_window.cpp	/^void RedWindow::stop_key_interception()$/;"	f	class:RedWindow
stop_key_interception	client/x11/red_window.cpp	/^void RedWindow::stop_key_interception()$/;"	f	class:RedWindow
str	client/gui/resource_provider.cpp	/^    const char* str;$/;"	m	struct:ResString	file:
str	spice-common/common/draw.h	/^    SpiceString *str;$/;"	m	struct:SpiceText
str	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL str;$/;"	m	struct:QXLText
str_to_port	client/utils.cpp	/^int str_to_port(const char *str)$/;"	f
strcasecmp	client/common.h	67;"	d
stream	server/red_channel.h	/^    RedsStream *stream;$/;"	m	struct:RedChannelClient
stream	server/red_dispatcher.h	/^    RedsStream * stream;$/;"	m	struct:RedWorkerMessageDisplayConnect
stream	server/red_dispatcher.h	/^    RedsStream *stream;$/;"	m	struct:RedWorkerMessageCursorConnect
stream	server/red_worker.c	/^    Stream *stream;$/;"	m	struct:Drawable	file:
stream	server/red_worker.c	/^    Stream *stream;$/;"	m	struct:StreamAgent	file:
stream	server/reds-private.h	/^    RedsStream *stream;$/;"	m	struct:RedsMigPendingLink
stream	server/reds.c	/^    RedsStream *stream;$/;"	m	struct:RedLinkInfo	file:
stream	server/reds_stream.c	/^    RedsStream *stream;$/;"	m	struct:AsyncRead	file:
stream	server/snd_worker.c	/^    RedsStream *stream;$/;"	m	struct:SndChannel	file:
stream_agent	server/red_worker.c	/^    StreamAgent *stream_agent;$/;"	m	struct:StreamClipItem	file:
stream_agents	server/red_worker.c	/^    StreamAgent stream_agents[NUM_STREAMS];$/;"	m	struct:DisplayChannelClient	file:
stream_count	server/red_worker.c	/^    uint32_t stream_count;$/;"	m	struct:RedWorker	file:
stream_height	spice-common/common/messages.h	/^    uint32_t stream_height;$/;"	m	struct:SpiceMsgDisplayStreamCreate
stream_id	server/red_worker.c	/^    uint32_t stream_id;$/;"	m	struct:StreamActivateReportItem	file:
stream_id	spice-common/common/messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport
stream_id	spice-common/common/messages.h	/^    uint32_t stream_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport
stream_outbuf	server/red_worker.c	/^        uint8_t *stream_outbuf; \/\/ caution stream buffer is also used as compress bufs!!!$/;"	m	struct:DisplayChannelClient::__anon186	file:
stream_outbuf_size	server/red_worker.c	/^        uint32_t stream_outbuf_size;$/;"	m	struct:DisplayChannelClient::__anon186	file:
stream_read_cb	server/reds_stream.c	/^static ssize_t stream_read_cb(RedsStream *s, void *buf, size_t size)$/;"	f	file:
stream_ssl_read_cb	server/reds_stream.c	/^static ssize_t stream_ssl_read_cb(RedsStream *s, void *buf, size_t size)$/;"	f	file:
stream_ssl_write_cb	server/reds_stream.c	/^static ssize_t stream_ssl_write_cb(RedsStream *s, const void *buf, size_t size)$/;"	f	file:
stream_update_request	client/display_channel.cpp	/^void DisplayChannel::stream_update_request(uint32_t mm_time)$/;"	f	class:DisplayChannel
stream_width	spice-common/common/messages.h	/^    uint32_t stream_width;$/;"	m	struct:SpiceMsgDisplayStreamCreate
stream_write_cb	server/reds_stream.c	/^static ssize_t stream_write_cb(RedsStream *s, const void *buf, size_t size)$/;"	f	file:
stream_writev_cb	server/reds_stream.c	/^static ssize_t stream_writev_cb(RedsStream *s, const struct iovec *iov, int iovcnt)$/;"	f	file:
streamable	server/red_worker.c	/^    int streamable;$/;"	m	struct:Drawable	file:
streaming_video	server/red_dispatcher.h	/^    uint32_t streaming_video;$/;"	m	struct:RedWorkerMessageSetStreamingVideo
streaming_video	server/red_worker.c	/^    uint32_t streaming_video;$/;"	m	struct:RedWorker	file:
streaming_video	server/red_worker.h	/^    int streaming_video;$/;"	m	struct:WorkerInitData
streaming_video	server/reds.c	/^uint32_t streaming_video = STREAM_VIDEO_FILTER;$/;"	v
streaming_video_compression	server/red_dispatcher.h	/^    uint32_t streaming_video_compression;$/;"	m	struct:RedWorkerMessageSetStreamingVideoCompression
streaming_video_compression	server/red_worker.c	/^    uint32_t streaming_video_compression;$/;"	m	struct:DisplayChannelClient	file:
streaming_video_compression	server/red_worker.c	/^    uint32_t streaming_video_compression;$/;"	m	struct:RedWorker	file:
streaming_video_compression	server/red_worker.h	/^    int streaming_video_compression;$/;"	m	struct:WorkerInitData
streaming_video_compression	server/reds.c	/^uint32_t streaming_video_compression = SPICE_STREAM_VIDEO_COMPRESSION_MJPEG;$/;"	v
streams	server/red_worker.c	/^    Ring streams;$/;"	m	struct:RedWorker	file:
streams_buf	server/red_worker.c	/^    Stream streams_buf[NUM_STREAMS];$/;"	m	struct:RedWorker	file:
streams_max_bit_rate	server/red_worker.c	/^    uint64_t streams_max_bit_rate;$/;"	m	struct:DisplayChannelClient	file:
streams_max_latency	server/red_worker.c	/^    uint32_t streams_max_latency;$/;"	m	struct:DisplayChannelClient	file:
streams_size_total	server/red_worker.c	/^    uint64_t streams_size_total;$/;"	m	struct:RedWorker	file:
streams_time	client/display_channel.cpp	/^void DisplayChannel::streams_time()$/;"	f	class:DisplayChannel
stride	client/red_types.h	/^    int stride;$/;"	m	struct:PixmapHeader
stride	server/jpeg_encoder.c	/^        int stride;$/;"	m	struct:JpegEncoder::__anon167	file:
stride	server/red_dispatcher.c	/^    uint32_t stride;$/;"	m	struct:RedWorkeState	file:
stride	server/red_parse_qxl.h	/^    int32_t stride;$/;"	m	struct:RedSurfaceCreate
stride	server/red_worker.c	/^            int stride;$/;"	m	struct:__anon177::__anon178::__anon179	file:
stride	server/red_worker.c	/^    int stride;$/;"	m	struct:ImageItem	file:
stride	server/red_worker.c	/^    int32_t stride;$/;"	m	struct:DrawContext	file:
stride	server/spice.h	/^    int stride;$/;"	m	struct:QXLDrawArea
stride	server/spice.h	/^    int32_t stride;$/;"	m	struct:QXLDevSurfaceCreate
stride	spice-common/common/draw.h	/^    uint32_t stride;$/;"	m	struct:SpiceBitmap
stride	spice-common/common/glc.c	/^    int stride;$/;"	m	struct:FillMaskInfo	file:
stride	spice-common/common/glc.h	/^    int stride;$/;"	m	struct:GLCPImage
stride	spice-common/common/lz.c	/^    int stride;                       \/\/ stride is in bytes. For rgb must be equal to$/;"	m	struct:Encoder	file:
stride	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t stride;$/;"	m	struct:QXLSurface
stride	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t stride;$/;"	m	struct:QXLSurfaceCreate
stride	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t stride;$/;"	m	struct:QXLBitmap
stride	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t stride;$/;"	m	struct:QXLMode
string	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint8_t string[0]; \/\/UTF8$/;"	m	struct:FrgMenuAddItem
string	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint8_t string[0]; \/\/UTF8$/;"	m	struct:FrgMenuSetTitle
string_printf	client/utils.cpp	/^void string_printf(std::string& str, const char* format, ...)$/;"	f
string_vprintf	client/windows/platform_utils.cpp	/^void string_vprintf(std::string& str, const char* format, va_list ap)$/;"	f
string_vprintf	client/x11/platform_utils.cpp	/^void string_vprintf(std::string& str, const char* format, va_list ap)$/;"	f
strm	server/zlib_encoder.c	/^    z_stream strm;$/;"	m	struct:ZlibEncoder	file:
stroke	server/red_parse_qxl.h	/^        SpiceStroke stroke;$/;"	m	union:RedDrawable::__anon161
stroke	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLStroke stroke;$/;"	m	union:QXLCompatDrawable::__anon76
stroke	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLStroke stroke;$/;"	m	union:QXLDrawable::__anon77
stroke_fill_rects	spice-common/common/canvas_base.c	/^static void stroke_fill_rects(lineGC * pGC,$/;"	f	file:
stroke_fill_spans	spice-common/common/canvas_base.c	/^static void stroke_fill_spans(lineGC * pGC,$/;"	f	file:
stroke_lines_append	spice-common/common/canvas_base.c	/^static void stroke_lines_append(StrokeLines *lines,$/;"	f	file:
stroke_lines_append_bezier	spice-common/common/canvas_base.c	/^static void stroke_lines_append_bezier(StrokeLines *lines,$/;"	f	file:
stroke_lines_append_fix	spice-common/common/canvas_base.c	/^static void stroke_lines_append_fix(StrokeLines *lines,$/;"	f	file:
stroke_lines_draw	spice-common/common/canvas_base.c	/^static void stroke_lines_draw(StrokeLines *lines,$/;"	f	file:
stroke_lines_free	spice-common/common/canvas_base.c	/^static void stroke_lines_free(StrokeLines *lines)$/;"	f	file:
stroke_lines_init	spice-common/common/canvas_base.c	/^static void stroke_lines_init(StrokeLines *lines)$/;"	f	file:
style	spice-common/common/draw.h	/^    SPICE_FIXED28_4 *style;$/;"	m	struct:SpiceLineAttr
style	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLPHYSICAL style;$/;"	m	struct:QXLLineAttr
style_nseg	spice-common/common/draw.h	/^    uint8_t style_nseg;$/;"	m	struct:SpiceLineAttr
style_nseg	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t style_nseg;$/;"	m	struct:QXLLineAttr
sub_at	client/menu.cpp	/^Menu* Menu::sub_at(int pos)$/;"	f	class:Menu
sub_list	client/red_peer.h	/^    uint32_t sub_list() { return _sub_list;}$/;"	f	class:RedPeer::CompoundInMessage
sub_list	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t sub_list; \/\/offset to SpiceSubMessageList[]$/;"	m	struct:SpiceDataHeader
sub_messages	spice-common/spice-protocol/spice/protocol.h	/^    uint32_t sub_messages[0]; \/\/offsets to SpicedSubMessage$/;"	m	struct:SpiceSubMessageList
subdir	Makefile	/^subdir = .$/;"	m
subdir	client/Makefile	/^subdir = client$/;"	m
subdir	docs/Makefile	/^subdir = docs$/;"	m
subdir	docs/manual/Makefile	/^subdir = docs\/manual$/;"	m
subdir	server/Makefile	/^subdir = server$/;"	m
subdir	server/tests/Makefile	/^subdir = server\/tests$/;"	m
subdir	spice-common/Makefile	/^subdir = .$/;"	m
subdir	spice-common/common/Makefile	/^subdir = common$/;"	m
subdir	spice-common/python_modules/Makefile	/^subdir = python_modules$/;"	m
subdir	spice-common/spice-protocol/Makefile	/^subdir = .$/;"	m
subdir	spice-common/spice-protocol/spice/Makefile	/^subdir = spice$/;"	m
subdirs	Makefile	/^subdirs =  spice-common$/;"	m
subdirs	client/Makefile	/^subdirs =  spice-common$/;"	m
subdirs	docs/Makefile	/^subdirs =  spice-common$/;"	m
subdirs	docs/manual/Makefile	/^subdirs =  spice-common$/;"	m
subdirs	server/Makefile	/^subdirs =  spice-common$/;"	m
subdirs	server/tests/Makefile	/^subdirs =  spice-common$/;"	m
subdirs	spice-common/Makefile	/^subdirs =  spice-protocol$/;"	m
subdirs	spice-common/common/Makefile	/^subdirs =  spice-protocol$/;"	m
subdirs	spice-common/python_modules/Makefile	/^subdirs =  spice-protocol$/;"	m
subdivide_bezier	spice-common/common/canvas_base.c	/^static void subdivide_bezier(StrokeLines *lines,$/;"	f	file:
subject	spice-common/common/ssl_verify.h	/^    char                *subject;$/;"	m	struct:__anon4
subject_to_x509_name	spice-common/common/ssl_verify.c	/^static X509_NAME* subject_to_x509_name(const char *subject, int *nentries)$/;"	f	file:
subtype	server/spice.h	/^    const char* subtype;$/;"	m	struct:SpiceCharDeviceInstance
success	client/process_loop.h	/^    bool success() { return !_err;}$/;"	f	class:SyncEvent
sum_array	spice-common/python_modules/codegen.py	/^def sum_array(array):$/;"	f
sum_enc_size	server/mjpeg_encoder.c	/^    uint64_t sum_enc_size;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
sum_recent_enc_size	server/mjpeg_encoder.c	/^    uint64_t sum_recent_enc_size;$/;"	m	struct:MJpegEncoderRateControl	file:
supported_modes	spice-common/common/messages.h	/^    uint32_t supported_modes;$/;"	m	struct:SpiceMsgMainMouseMode
supported_mouse_modes	spice-common/common/messages.h	/^    uint32_t supported_mouse_modes;$/;"	m	struct:SpiceMsgMainInit
surface	server/red_dispatcher.h	/^    QXLDevSurfaceCreate surface;$/;"	m	struct:RedWorkerMessageCreatePrimarySurface
surface	server/red_dispatcher.h	/^    QXLDevSurfaceCreate surface;$/;"	m	struct:RedWorkerMessageCreatePrimarySurfaceAsync
surface	spice-common/common/draw.h	/^        SpiceSurface        surface;$/;"	m	union:SpiceImage::__anon35
surface0_area_size	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface0_area_size;      \/* qxl-1 name: draw_area_size *\/$/;"	m	struct:QXLRom
surface_canvas	spice-common/common/canvas_base.c	/^        SpiceCanvas *surface_canvas;$/;"	m	union:__anon15::__anon16	file:
surface_client_created	server/red_worker.c	/^    uint8_t surface_client_created[NUM_SURFACES];$/;"	m	struct:DisplayChannelClient	file:
surface_client_lossy_region	server/red_worker.c	/^    QRegion surface_client_lossy_region[NUM_SURFACES];$/;"	m	struct:DisplayChannelClient	file:
surface_cmd	server/tests/test_display_base.c	/^    QXLSurfaceCmd surface_cmd;$/;"	m	struct:SimpleSurfaceCmd	file:
surface_create	server/red_dispatcher.c	/^    QXLDevSurfaceCreate surface_create;$/;"	m	struct:RedDispatcher	file:
surface_create	server/red_parse_qxl.h	/^        RedSurfaceCreate surface_create;$/;"	m	union:RedSurfaceCmd::__anon163
surface_create	server/red_worker.c	/^    SpiceMsgSurfaceCreate surface_create;$/;"	m	struct:SurfaceCreateItem	file:
surface_create	spice-common/common/canvas_utils.c	/^pixman_image_t *surface_create(HDC dc, pixman_format_code_t format,$/;"	f
surface_create	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLSurface surface_create;$/;"	m	union:QXLSurfaceCmd::__anon78
surface_create_stride	spice-common/common/canvas_utils.c	/^pixman_image_t *surface_create_stride(HDC dc, pixman_format_code_t format, int width, int height,$/;"	f
surface_destroy	server/red_worker.c	/^    SpiceMsgSurfaceDestroy surface_destroy;$/;"	m	struct:SurfaceDestroyItem	file:
surface_dirty_region_to_rects	server/red_worker.c	/^static void surface_dirty_region_to_rects(RedSurface *surface,$/;"	f	file:
surface_flush	server/red_worker.c	/^static void surface_flush(RedWorker *worker, int surface_id, SpiceRect *rect)$/;"	f	file:
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageCreatePrimarySurface
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageCreatePrimarySurfaceAsync
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageDestroyPrimarySurface
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageDestroyPrimarySurfaceAsync
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageDestroySurfaceWait
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageDestroySurfaceWaitAsync
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageUpdate
surface_id	server/red_dispatcher.h	/^    uint32_t surface_id;$/;"	m	struct:RedWorkerMessageUpdateAsync
surface_id	server/red_parse_qxl.h	/^    uint32_t surface_id;$/;"	m	struct:RedDrawable
surface_id	server/red_parse_qxl.h	/^    uint32_t surface_id;$/;"	m	struct:RedSurfaceCmd
surface_id	server/red_parse_qxl.h	/^    uint32_t surface_id;$/;"	m	struct:RedUpdateCmd
surface_id	server/red_worker.c	/^    int surface_id;$/;"	m	struct:Drawable	file:
surface_id	server/red_worker.c	/^    int surface_id;$/;"	m	struct:ImageItem	file:
surface_id	server/tests/test_display_base.h	/^    uint32_t surface_id;$/;"	m	struct:CommandCreateSurface
surface_id	server/tests/test_display_base.h	/^    uint32_t surface_id;$/;"	m	struct:CommandDrawBitmap
surface_id	server/tests/test_display_base.h	/^    uint32_t surface_id;$/;"	m	struct:CommandDrawSolid
surface_id	spice-common/common/draw.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceSurface
surface_id	spice-common/common/messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayBase
surface_id	spice-common/common/messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayHead
surface_id	spice-common/common/messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgDisplayStreamCreate
surface_id	spice-common/common/messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceCreate
surface_id	spice-common/common/messages.h	/^    uint32_t surface_id;$/;"	m	struct:SpiceMsgSurfaceDestroy
surface_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface_id;$/;"	m	struct:QXLDrawable
surface_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface_id;$/;"	m	struct:QXLHead
surface_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface_id;$/;"	m	struct:QXLSurfaceCmd
surface_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface_id;$/;"	m	struct:QXLSurfaceId
surface_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t surface_id;$/;"	m	struct:QXLUpdateCmd
surface_image	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLSurfaceId surface_image;$/;"	m	union:QXLImage::__anon82
surface_list_link	server/red_worker.c	/^    RingItem surface_list_link;$/;"	m	struct:Drawable	file:
surface_lossy_region_update	server/red_worker.c	/^static void surface_lossy_region_update(RedWorker *worker, DisplayChannelClient *dcc,$/;"	f	file:
surface_to_image	spice-common/common/gl_canvas.c	/^static inline void surface_to_image(GLCanvas *canvas, pixman_image_t *surface, GLCImage *image,$/;"	f	file:
surfaces	server/migration_protocol.h	/^    MigrateDisplaySurfaceLossless surfaces[0];$/;"	m	struct:MigrateDisplaySurfacesAtClientLossless
surfaces	server/migration_protocol.h	/^    MigrateDisplaySurfaceLossy surfaces[0];$/;"	m	struct:MigrateDisplaySurfacesAtClientLossy
surfaces	server/red_worker.c	/^    RedSurface surfaces[NUM_SURFACES];$/;"	m	struct:RedWorker	file:
surfaces	spice-common/common/canvas_base.c	/^    SpiceImageSurfaces *surfaces;$/;"	m	struct:CanvasBase	file:
surfaces_at_client_ptr	server/migration_protocol.h	/^    uint32_t surfaces_at_client_ptr; \/* reference to MigrateDisplaySurfacesAtClientLossless\/Lossy.$/;"	m	struct:SpiceMigrateDataDisplay
surfaces_cache	client/canvas.h	/^    SurfacesCache& surfaces_cache() { return _surfaces_cache;}$/;"	f	class:Canvas
surfaces_cache_op_get	client/canvas.cpp	/^static SpiceCanvas* surfaces_cache_op_get(SpiceImageSurfaces *surfaces, uint32_t surface_id)$/;"	f	file:
surfaces_dest	server/red_parse_qxl.h	/^    int32_t surfaces_dest[3];$/;"	m	struct:RedDrawable
surfaces_dest	server/red_worker.c	/^    int surfaces_dest[3];$/;"	m	struct:Drawable	file:
surfaces_dest	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t surfaces_dest[3];$/;"	m	struct:QXLDrawable
surfaces_rects	server/red_parse_qxl.h	/^    SpiceRect surfaces_rects[3];$/;"	m	struct:RedDrawable
surfaces_rects	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect surfaces_rects[3];$/;"	m	struct:QXLDrawable
sw_canvas_init	spice-common/common/sw_canvas.c	/^void sw_canvas_init(void) \/\/unsafe global function$/;"	f
sw_canvas_ops	spice-common/common/sw_canvas.c	/^static SpiceCanvasOps sw_canvas_ops;$/;"	v	file:
swap	client/red_channel.cpp	/^void RedChannelBase::swap(RedChannelBase* other)$/;"	f	class:RedChannelBase
swap	client/red_peer.cpp	/^void RedPeer::swap(RedPeer* other)$/;"	f	class:RedPeer
swap_gl	client/x11/red_window.cpp	/^void RedWindow::swap_gl()$/;"	f	class:RedWindow
swap_peer	client/red_client.cpp	/^void Migrate::swap_peer(RedChannelBase& other)$/;"	f	class:Migrate
switch_host	client/application.cpp	/^void Application::switch_host(const std::string& host, int port, int sport,$/;"	f	class:Application
swprintf_s	client/common.h	49;"	d
sws_context	server/h264_encoder.h	/^   struct SwsContext *sws_context;$/;"	m	struct:_H264Encoder	typeref:struct:_H264Encoder::SwsContext
sync	client/x11/red_window.cpp	/^void RedWindow_p::sync(bool shadowed)$/;"	f	class:RedWindow_p
sync	server/red_worker.c	/^    uint64_t sync[MAX_CACHE_CLIENTS]; \/\/ here CLIENTS refer to different channel$/;"	m	struct:PixmapCache	file:
sync	server/red_worker.c	/^    uint64_t sync[MAX_CACHE_CLIENTS];$/;"	m	struct:FreeList	file:
sync	server/red_worker.c	/^    uint64_t sync[MAX_CACHE_CLIENTS];$/;"	m	struct:NewCacheItem	file:
sync_keyboard_modifiers	client/application.cpp	/^void Application::sync_keyboard_modifiers()$/;"	f	class:Application
sys	spice-common/python_modules/spice_parser.py	/^import sys$/;"	i
sys	spice-common/spice_codegen.py	/^import sys$/;"	i
sys_err_to_str	client/windows/platform_utils.cpp	/^const char* sys_err_to_str(int error)$/;"	f
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	client/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	docs/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	docs/manual/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	server/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	server/tests/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	spice-common/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	spice-common/common/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	spice-common/python_modules/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	spice-common/spice-protocol/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	spice-common/spice-protocol/spice/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t	server/tests/test_display_base.c	/^    int t;$/;"	m	struct:Path	file:
t	spice-common/spice_codegen.py	/^        t = ptypes.lookup_type(structname)$/;"	v
t00	spice-common/common/draw.h	/^    uint32_t t00;$/;"	m	struct:SpiceTransform
t00	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t00;$/;"	m	struct:__anon75
t01	spice-common/common/draw.h	/^    uint32_t t01;$/;"	m	struct:SpiceTransform
t01	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t01;$/;"	m	struct:__anon75
t02	spice-common/common/draw.h	/^    uint32_t t02;$/;"	m	struct:SpiceTransform
t02	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t02;$/;"	m	struct:__anon75
t10	spice-common/common/draw.h	/^    uint32_t t10;$/;"	m	struct:SpiceTransform
t10	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t10;$/;"	m	struct:__anon75
t11	spice-common/common/draw.h	/^    uint32_t t11;$/;"	m	struct:SpiceTransform
t11	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t11;$/;"	m	struct:__anon75
t12	spice-common/common/draw.h	/^    uint32_t t12;$/;"	m	struct:SpiceTransform
t12	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t	t12;$/;"	m	struct:__anon75
taTicket	server/reds.c	/^static TicketAuthentication taTicket;$/;"	v	file:
tablet	server/inputs_channel.c	/^static SpiceTabletInstance *tablet = NULL;$/;"	v	file:
tabrand	spice-common/common/quic.c	/^static unsigned int tabrand(unsigned int *tabrand_seed)$/;"	f	file:
tabrand_chaos	spice-common/common/quic.c	/^static const unsigned int tabrand_chaos[TABRAND_TABSIZE] = {$/;"	v	file:
tabrand_seed	spice-common/common/quic.c	/^    unsigned int tabrand_seed;$/;"	m	struct:CommonState	file:
taharez_look_imageset	client/gui/taharez_look.imageset.c	/^const unsigned char taharez_look_imageset[] = {$/;"	v
taharez_look_looknfeel	client/gui/taharez_look.looknfeel.c	/^const unsigned char taharez_look_looknfeel[] = {$/;"	v
taharez_look_schem	client/gui/taharez_look.scheme.c	/^const unsigned char taharez_look_schem[] = {$/;"	v
taharez_look_tga	client/gui/taharez_look.tga.c	/^const unsigned char taharez_look_tga[] = {$/;"	v
tail_image_segs	spice-common/common/lz.c	/^    LzImageSegment *tail_image_segs;$/;"	m	struct:Encoder	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	spice-common/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	spice-common/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	spice-common/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	spice-common/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	spice-common/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	spice-common/spice-protocol/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	spice-common/spice-protocol/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	spice-common/spice-protocol/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	spice-common/spice-protocol/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	spice-common/spice-protocol/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	client/Makefile	/^target_alias = $/;"	m
target_alias	docs/Makefile	/^target_alias = $/;"	m
target_alias	docs/manual/Makefile	/^target_alias = $/;"	m
target_alias	server/Makefile	/^target_alias = $/;"	m
target_alias	server/tests/Makefile	/^target_alias = $/;"	m
target_alias	spice-common/Makefile	/^target_alias = $/;"	m
target_alias	spice-common/common/Makefile	/^target_alias = $/;"	m
target_alias	spice-common/python_modules/Makefile	/^target_alias = $/;"	m
target_alias	spice-common/spice-protocol/Makefile	/^target_alias = $/;"	m
target_alias	spice-common/spice-protocol/spice/Makefile	/^target_alias = $/;"	m
target_surface	server/tests/test_display_base.h	/^    int target_surface;$/;"	m	struct:Test
targets_atom	client/x11/platform.cpp	/^static Atom targets_atom;$/;"	v	file:
tcp_nodelay	server/red_channel.h	/^    int tcp_nodelay;$/;"	m	struct:RedChannelClientLatencyMonitor
term_mem_destination	server/mjpeg_encoder.c	/^static void term_mem_destination(j_compress_ptr cinfo)$/;"	f	file:
term_printf	client/windows/platform.cpp	/^void Platform::term_printf(const char* format, ...)$/;"	f	class:Platform
term_printf	client/x11/platform.cpp	/^void Platform::term_printf(const char* format, ...)$/;"	f	class:Platform
term_source	client/mjpeg_decoder.cpp	/^    static void term_source (j_decompress_ptr cinfo)$/;"	f	file:
tesselator	spice-common/common/glc.c	/^    GLUtesselator* tesselator;$/;"	m	struct:InternaCtx	file:
tessellation_combine	spice-common/common/glc.c	/^static void tessellation_combine(GLdouble coords[3], GLdouble *vertex_data[4], GLfloat weight[4],$/;"	f	file:
tessellation_error	spice-common/common/glc.c	/^static void tessellation_error(GLenum errorCode)$/;"	f	file:
test	spice-common/common/region.c	/^static void test(const QRegion *r1, const QRegion *r2, int *expected)$/;"	f	file:
test_add_agent_interface	server/tests/test_display_base.c	/^void test_add_agent_interface(SpiceServer *server)$/;"	f
test_add_display_interface	server/tests/test_display_base.c	/^void test_add_display_interface(Test* test)$/;"	f
test_band	spice-common/common/region.c	/^static int test_band(int query,$/;"	f	file:
test_bit	client/utils.h	/^static inline int test_bit(const void* addr, int bit)$/;"	f
test_bit	server/spice_server_utils.h	/^static inline int test_bit(int index, uint32_t val)$/;"	f
test_bit_be	client/utils.h	/^static inline int test_bit_be(const void* addr, int bit)$/;"	f
test_bit_be	spice-common/common/pixman_utils.c	/^static inline int test_bit_be(void* addr, int bit)$/;"	f	file:
test_capability	client/red_channel.cpp	/^bool RedChannelBase::test_capability(const ChannelCaps& caps, uint32_t cap)$/;"	f	class:RedChannelBase
test_capability	client/red_channel.cpp	/^bool RedChannelBase::test_capability(uint32_t cap)$/;"	f	class:RedChannelBase
test_capability	server/red_channel.c	/^int test_capability(uint32_t *caps, int num_caps, uint32_t cap)$/;"	f
test_common_capability	client/red_channel.cpp	/^bool RedChannelBase::test_common_capability(uint32_t cap)$/;"	f	class:RedChannelBase
test_display_no_ssl_DEPENDENCIES	server/tests/Makefile	/^test_display_no_ssl_DEPENDENCIES =  \\$/;"	m
test_display_no_ssl_LDADD	server/tests/Makefile	/^test_display_no_ssl_LDADD = $(LDADD)$/;"	m
test_display_no_ssl_OBJECTS	server/tests/Makefile	/^test_display_no_ssl_OBJECTS = $(am_test_display_no_ssl_OBJECTS)$/;"	m
test_display_no_ssl_SOURCES	server/tests/Makefile	/^test_display_no_ssl_SOURCES = \\$/;"	m
test_display_resolution_changes_DEPENDENCIES	server/tests/Makefile	/^test_display_resolution_changes_DEPENDENCIES =  \\$/;"	m
test_display_resolution_changes_LDADD	server/tests/Makefile	/^test_display_resolution_changes_LDADD = $(LDADD)$/;"	m
test_display_resolution_changes_OBJECTS	server/tests/Makefile	/^test_display_resolution_changes_OBJECTS =  \\$/;"	m
test_display_resolution_changes_SOURCES	server/tests/Makefile	/^test_display_resolution_changes_SOURCES = \\$/;"	m
test_display_streaming_DEPENDENCIES	server/tests/Makefile	/^test_display_streaming_DEPENDENCIES =  \\$/;"	m
test_display_streaming_LDADD	server/tests/Makefile	/^test_display_streaming_LDADD = $(LDADD)$/;"	m
test_display_streaming_OBJECTS	server/tests/Makefile	/^test_display_streaming_OBJECTS = $(am_test_display_streaming_OBJECTS)$/;"	m
test_display_streaming_SOURCES	server/tests/Makefile	/^test_display_streaming_SOURCES = \\$/;"	m
test_display_width_stride_DEPENDENCIES	server/tests/Makefile	/^test_display_width_stride_DEPENDENCIES =  \\$/;"	m
test_display_width_stride_LDADD	server/tests/Makefile	/^test_display_width_stride_LDADD = $(LDADD)$/;"	m
test_display_width_stride_OBJECTS	server/tests/Makefile	/^test_display_width_stride_OBJECTS =  \\$/;"	m
test_display_width_stride_SOURCES	server/tests/Makefile	/^test_display_width_stride_SOURCES = \\$/;"	m
test_empty_success_DEPENDENCIES	server/tests/Makefile	/^test_empty_success_DEPENDENCIES =  \\$/;"	m
test_empty_success_LDADD	server/tests/Makefile	/^test_empty_success_LDADD = $(LDADD)$/;"	m
test_empty_success_OBJECTS	server/tests/Makefile	/^test_empty_success_OBJECTS = $(am_test_empty_success_OBJECTS)$/;"	m
test_empty_success_SOURCES	server/tests/Makefile	/^test_empty_success_SOURCES = \\$/;"	m
test_fail_on_null_core_interface_DEPENDENCIES	server/tests/Makefile	/^test_fail_on_null_core_interface_DEPENDENCIES =  \\$/;"	m
test_fail_on_null_core_interface_LDADD	server/tests/Makefile	/^test_fail_on_null_core_interface_LDADD = $(LDADD)$/;"	m
test_fail_on_null_core_interface_OBJECTS	server/tests/Makefile	/^test_fail_on_null_core_interface_OBJECTS =  \\$/;"	m
test_fail_on_null_core_interface_SOURCES	server/tests/Makefile	/^test_fail_on_null_core_interface_SOURCES = \\$/;"	m
test_generic	spice-common/common/region.c	/^static int test_generic (pixman_region32_t *reg1,$/;"	f	file:
test_just_sockets_no_ssl_DEPENDENCIES	server/tests/Makefile	/^test_just_sockets_no_ssl_DEPENDENCIES =  \\$/;"	m
test_just_sockets_no_ssl_LDADD	server/tests/Makefile	/^test_just_sockets_no_ssl_LDADD = $(LDADD)$/;"	m
test_just_sockets_no_ssl_OBJECTS	server/tests/Makefile	/^test_just_sockets_no_ssl_OBJECTS =  \\$/;"	m
test_just_sockets_no_ssl_SOURCES	server/tests/Makefile	/^test_just_sockets_no_ssl_SOURCES = \\$/;"	m
test_new	server/tests/test_display_base.c	/^Test *test_new(SpiceCoreInterface *core)$/;"	f
test_playback_DEPENDENCIES	server/tests/Makefile	/^test_playback_DEPENDENCIES =  \\$/;"	m
test_playback_LDADD	server/tests/Makefile	/^test_playback_LDADD = $(LDADD)$/;"	m
test_playback_OBJECTS	server/tests/Makefile	/^test_playback_OBJECTS = $(am_test_playback_OBJECTS)$/;"	m
test_playback_SOURCES	server/tests/Makefile	/^test_playback_SOURCES = \\$/;"	m
test_set_command_list	server/tests/test_display_base.c	/^void test_set_command_list(Test *test, Command *commands, int num_commands)$/;"	f
test_set_simple_command_list	server/tests/test_display_base.c	/^void test_set_simple_command_list(Test *test, int *simple_commands, int num_commands)$/;"	f
test_spice_create_update_copy_bits	server/tests/test_display_base.c	/^static SimpleSpiceUpdate *test_spice_create_update_copy_bits(Test *test, uint32_t surface_id)$/;"	f	file:
test_spice_create_update_draw	server/tests/test_display_base.c	/^static SimpleSpiceUpdate *test_spice_create_update_draw(Test *test, uint32_t surface_id, int t)$/;"	f	file:
test_spice_create_update_from_bitmap	server/tests/test_display_base.c	/^SimpleSpiceUpdate *test_spice_create_update_from_bitmap(uint32_t surface_id,$/;"	f
test_spice_create_update_solid	server/tests/test_display_base.c	/^static SimpleSpiceUpdate *test_spice_create_update_solid(uint32_t surface_id, QXLRect bbox, uint32_t color)$/;"	f	file:
test_spice_destroy_update	server/tests/test_display_base.c	/^static void test_spice_destroy_update(SimpleSpiceUpdate *update)$/;"	f	file:
test_two_servers_DEPENDENCIES	server/tests/Makefile	/^test_two_servers_DEPENDENCIES =  \\$/;"	m
test_two_servers_LDADD	server/tests/Makefile	/^test_two_servers_LDADD = $(LDADD)$/;"	m
test_two_servers_OBJECTS	server/tests/Makefile	/^test_two_servers_OBJECTS = $(am_test_two_servers_OBJECTS)$/;"	m
test_two_servers_SOURCES	server/tests/Makefile	/^test_two_servers_SOURCES = \\$/;"	m
test_varargs_macros	configure	/^  test_varargs_macros ();$/;"	f
test_varargs_macros	spice-common/configure	/^  test_varargs_macros ();$/;"	f
test_vdagent_DEPENDENCIES	server/tests/Makefile	/^test_vdagent_DEPENDENCIES =  \\$/;"	m
test_vdagent_LDADD	server/tests/Makefile	/^test_vdagent_LDADD = $(LDADD)$/;"	m
test_vdagent_OBJECTS	server/tests/Makefile	/^test_vdagent_OBJECTS = $(am_test_vdagent_OBJECTS)$/;"	m
test_vdagent_SOURCES	server/tests/Makefile	/^test_vdagent_SOURCES = \\$/;"	m
tex	client/gui/softrenderer.h	/^            const SoftTexture* tex;$/;"	m	struct:CEGUI::SoftRenderer::QuadInfo
tex	client/x11/pixels_source_p.h	/^            GLuint tex;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
tex_src	client/gui/softrenderer.h	/^            RectI tex_src;$/;"	m	struct:CEGUI::SoftRenderer::QuadInfo
text	client/gui/gui.h	/^        const char *text;$/;"	m	struct:GUI::ButtonInfo
text	server/red_parse_qxl.h	/^        SpiceText text;$/;"	m	union:RedDrawable::__anon161
text	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLText text;$/;"	m	union:QXLCompatDrawable::__anon76
text	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLText text;$/;"	m	union:QXLDrawable::__anon77
texture	spice-common/common/glc.c	/^    GLuint texture;$/;"	m	struct:InternalPat	file:
textures_lost	client/red_gl_canvas.cpp	/^void GCanvas::textures_lost()$/;"	f	class:GCanvas
textures_lost	client/x11/red_pixmap_gl.cpp	/^void RedPixmapGL::textures_lost()$/;"	f	class:RedPixmapGL
textures_lost	spice-common/common/gl_canvas.c	/^    int textures_lost;$/;"	m	struct:GLCanvas	file:
thread	server/spice_timer_queue.c	/^    pthread_t thread;$/;"	m	struct:SpiceTimerQueue	file:
thread_count	server/h264_type.h	/^    int thread_count;$/;"	m	struct:_H264StreamInfo
thread_id	server/red_channel.h	/^    pthread_t thread_id;$/;"	m	struct:RedChannel
thread_id	server/red_channel.h	/^    pthread_t thread_id;$/;"	m	struct:RedClient
thread_main_t	client/threads.h	/^    typedef void* (*thread_main_t)(void*);$/;"	t	class:Thread
thread_touch	client/red_gdi_canvas.h	/^    virtual void thread_touch() {}$/;"	f	class:GDICanvas
thread_touch	client/red_gl_canvas.h	/^    void thread_touch() {}$/;"	f	class:GCanvas
thread_touch	client/red_sw_canvas.h	/^    virtual void thread_touch() {}$/;"	f	class:SCanvas
three_bytes_pixel_t	spice-common/common/quic.c	/^typedef struct ATTR_PACKED three_bytes_pixel_t {$/;"	s	file:
three_bytes_t	spice-common/common/quic.c	/^} three_bytes_t;$/;"	t	typeref:struct:three_bytes_pixel_t	file:
tiTicketing	server/reds.c	/^    TicketInfo tiTicketing;$/;"	m	struct:RedLinkInfo	file:
ticketing_enabled	server/reds.c	/^static int ticketing_enabled = 1; \/\/Ticketing is enabled by default$/;"	v	file:
tile	spice-common/common/canvas_base.c	/^        pixman_image_t *tile;$/;"	m	union:__anon15::__anon16	file:
tile_offset_x	spice-common/common/canvas_base.c	/^    int tile_offset_x;$/;"	m	struct:__anon15	file:
tile_offset_y	spice-common/common/canvas_base.c	/^    int tile_offset_y;$/;"	m	struct:__anon15	file:
tiled_rop_16_func_t	spice-common/common/pixman_utils.c	/^typedef void (*tiled_rop_16_func_t)(uint16_t *ptr, int len,$/;"	t	file:
tiled_rop_32_func_t	spice-common/common/pixman_utils.c	/^typedef void (*tiled_rop_32_func_t)(uint32_t *ptr, int len,$/;"	t	file:
tiled_rop_8_func_t	spice-common/common/pixman_utils.c	/^typedef void (*tiled_rop_8_func_t)(uint8_t *ptr, int len,$/;"	t	file:
time	server/main_channel.c	/^    int time;$/;"	m	struct:MultiMediaTimePipeItem	file:
time	server/red_worker.c	/^    red_time_t time;$/;"	m	struct:ItemTrace	file:
time	server/snd_worker.c	/^    uint32_t time;$/;"	m	struct:AudioFrame	file:
time	spice-common/common/messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgMainMultiMediaTime
time	spice-common/common/messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackMode
time	spice-common/common/messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackPacket
time	spice-common/common/messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgPlaybackStart
time	spice-common/common/messages.h	/^    uint32_t time;$/;"	m	struct:SpiceMsgcRecordStartMark
time_base	server/h264_type.h	/^    AVRational time_base;$/;"	m	struct:_H264StreamInfo
time_stamp	spice-common/common/messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgDisconnect
time_stamp	spice-common/common/messages.h	/^    uint64_t time_stamp;$/;"	m	struct:SpiceMsgNotify
timed_lock	client/threads.cpp	/^void Lock::timed_lock(uint64_t timout_nano)$/;"	f	class:Lock
timed_wait	client/threads.cpp	/^bool Condition::timed_wait(Lock& lock, uint64_t nano)$/;"	f	class:Condition
timeout	server/red_channel.h	/^    uint32_t timeout;$/;"	m	struct:RedChannelClientConnectivityMonitor
timeout_ms	spice-common/common/messages.h	/^    uint32_t timeout_ms;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport
timeout_timers	server/tests/basic_event_loop.c	/^void timeout_timers(void)$/;"	f
timer	client/application.h	/^    AutoRef<StickyKeyTimer> timer;$/;"	m	struct:StickyInfo
timer	server/red_channel.h	/^    SpiceTimer *timer;$/;"	m	struct:RedChannelClientConnectivityMonitor
timer	server/red_channel.h	/^    SpiceTimer *timer;$/;"	m	struct:RedChannelClientLatencyMonitor
timer_add	server/spice.h	/^    SpiceTimer *(*timer_add)(SpiceTimerFunc func, void *opaque);$/;"	m	struct:SpiceCoreInterface
timer_add	server/tests/basic_event_loop.c	/^static SpiceTimer* timer_add(SpiceTimerFunc func, void *opaque)$/;"	f	file:
timer_add	server/tests/test_empty_success.c	/^SpiceTimer* timer_add(SpiceTimerFunc func, void *opaque)$/;"	f
timer_cancel	server/spice.h	/^    void (*timer_cancel)(SpiceTimer *timer);$/;"	m	struct:SpiceCoreInterface
timer_cancel	server/tests/basic_event_loop.c	/^static void timer_cancel(SpiceTimer *timer)$/;"	f	file:
timer_cancel	server/tests/test_empty_success.c	/^void timer_cancel(SpiceTimer *timer)$/;"	f
timer_queue_list	server/spice_timer_queue.c	/^static Ring timer_queue_list;$/;"	v	file:
timer_remove	server/spice.h	/^    void (*timer_remove)(SpiceTimer *timer);$/;"	m	struct:SpiceCoreInterface
timer_remove	server/tests/basic_event_loop.c	/^static void timer_remove(SpiceTimer *timer)$/;"	f	file:
timer_remove	server/tests/test_empty_success.c	/^void timer_remove(SpiceTimer *timer)$/;"	f
timer_start	server/spice.h	/^    void (*timer_start)(SpiceTimer *timer, uint32_t ms);$/;"	m	struct:SpiceCoreInterface
timer_start	server/tests/basic_event_loop.c	/^static void timer_start(SpiceTimer *timer, uint32_t ms)$/;"	f	file:
timer_start	server/tests/test_empty_success.c	/^void timer_start(SpiceTimer *timer, uint32_t ms)$/;"	f
timers	server/spice_timer_queue.c	/^    Ring timers;$/;"	m	struct:SpiceTimerQueue	file:
timers	server/tests/basic_event_loop.c	/^Ring timers;$/;"	v
timers_action	client/process_loop.cpp	/^void ProcessLoop::timers_action()$/;"	f	class:ProcessLoop
timers_action	client/process_loop.cpp	/^void TimersQueue::timers_action()$/;"	f	class:TimersQueue
timespec_to_red_time	server/red_worker.c	/^static inline red_time_t timespec_to_red_time(struct timespec *time)$/;"	f	file:
timestamp	spice-common/common/messages.h	/^    uint64_t timestamp;$/;"	m	struct:SpiceMsgPing
title	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint8_t title[0]; \/\/UTF8$/;"	m	struct:FrgMenuInit
to_native_style	client/windows/red_window.cpp	/^static LONG to_native_style(RedWindow::Type type)$/;"	f	file:
to_red_button	client/x11/red_window.cpp	/^static inline SpiceMouseButton to_red_button(unsigned int botton, unsigned int& state, bool press)$/;"	f	file:
to_red_buttons_state	client/x11/red_window.cpp	/^static inline int to_red_buttons_state(unsigned int state)$/;"	f	file:
to_red_key_code	client/x11/red_window.cpp	/^static inline RedKey to_red_key_code(unsigned int keycode)$/;"	f	file:
to_red_mouse_state	client/windows/red_window.cpp	/^static inline int to_red_mouse_state(WPARAM wParam)$/;"	f	file:
tocEntries	docs/manual/manual.html	/^function tocEntries(el, toclevels) {$/;"	f
todo	spice-common/python_modules/codegen.py	/^    def todo(self, str):$/;"	m	class:CodeWriter
toggle_full_screen	client/application.cpp	/^bool Application::toggle_full_screen()$/;"	f	class:Application
toggle_modifier	client/windows/platform.cpp	/^static void toggle_modifier(int key)$/;"	f	file:
token_price	server/char_device.h	/^    uint32_t token_price;$/;"	m	struct:SpiceCharDeviceWriteBuffer
tokens	server/main_channel.c	/^    int tokens;$/;"	m	struct:TokensPipeItem	file:
tokens	spice-common/common/messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgTunnelSocketOpen
tokens	spice-common/common/messages.h	/^    uint32_t tokens;$/;"	m	struct:SpiceMsgcTunnelSocketOpenAck
top	client/gui/softrenderer.h	/^            int top;$/;"	m	struct:CEGUI::SoftRenderer::RectI
top	server/migration_protocol.h	/^    int32_t top;$/;"	m	struct:SpiceMigrateDataRect
top	spice-common/common/draw.h	/^    int32_t top;$/;"	m	struct:SpiceRect
top	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t top;$/;"	m	struct:QXLRect
top	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t top;$/;"	m	struct:QXLURect
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	client/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	docs/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	docs/manual/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_build_prefix	server/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	server/tests/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_build_prefix	spice-common/Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	spice-common/common/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	spice-common/python_modules/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	spice-common/spice-protocol/Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	spice-common/spice-protocol/spice/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_builddir	client/Makefile	/^top_builddir = ..$/;"	m
top_builddir	docs/Makefile	/^top_builddir = ..$/;"	m
top_builddir	docs/manual/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	server/Makefile	/^top_builddir = ..$/;"	m
top_builddir	server/tests/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	spice-common/Makefile	/^top_builddir = .$/;"	m
top_builddir	spice-common/common/Makefile	/^top_builddir = ..$/;"	m
top_builddir	spice-common/python_modules/Makefile	/^top_builddir = ..$/;"	m
top_builddir	spice-common/spice-protocol/Makefile	/^top_builddir = .$/;"	m
top_builddir	spice-common/spice-protocol/spice/Makefile	/^top_builddir = ..$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	spice-common/Makefile	/^top_distdir = $(distdir)$/;"	m
top_distdir	spice-common/spice-protocol/Makefile	/^top_distdir = $(distdir)$/;"	m
top_down	client/glz_decoder.h	/^        bool top_down;$/;"	m	struct:GlzDecoder::__anon112
top_down	server/red_worker.c	/^    int top_down;$/;"	m	struct:DrawContext	file:
top_down	server/red_worker.c	/^    int top_down;$/;"	m	struct:ImageItem	file:
top_down	server/red_worker.c	/^    int top_down;$/;"	m	struct:Stream	file:
top_left	client/gui/softrenderer.h	/^            ColourI top_left;$/;"	m	struct:CEGUI::SoftRenderer::ColourIRect
top_right	client/gui/softrenderer.h	/^            ColourI top_right;$/;"	m	struct:CEGUI::SoftRenderer::ColourIRect
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
top_srcdir	client/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	docs/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	docs/manual/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	server/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	server/tests/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	spice-common/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	spice-common/common/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	spice-common/python_modules/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	spice-common/spice-protocol/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	spice-common/spice-protocol/spice/Makefile	/^top_srcdir = ..$/;"	m
total	server/red_worker.c	/^    stat_time_t total;$/;"	m	struct:stat_info_s	file:
total_size	spice-common/common/marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshaller	file:
total_size	spice-common/common/marshaller.c	/^    size_t total_size;$/;"	m	struct:SpiceMarshallerData	file:
touch_brush	spice-common/common/canvas_base.c	/^static void touch_brush(CanvasBase *canvas, SpiceBrush *brush)$/;"	f	file:
touch_context	client/red_gl_canvas.cpp	/^void GCanvas::touch_context()$/;"	f	class:GCanvas
touch_context	client/x11/red_pixmap_gl.cpp	/^void RedPixmapGL::touch_context()$/;"	f	class:RedPixmapGL
touch_context_copy	client/windows/red_window.cpp	/^void RedWindow::touch_context_copy()$/;"	f	class:RedWindow
touch_context_draw	client/windows/red_window.cpp	/^void RedWindow::touch_context_draw()$/;"	f	class:RedWindow
touched_bbox	client/canvas.h	/^    virtual void touched_bbox(const SpiceRect *bbox) {};$/;"	f	class:Canvas
touched_bbox	client/red_gl_canvas.cpp	/^void GCanvas::touched_bbox(const SpiceRect *bbox)$/;"	f	class:GCanvas
trace_is_on	client/application.h	/^    bool trace_is_on;$/;"	m	struct:StickyInfo
traceback	spice-common/spice_codegen.py	/^import traceback$/;"	i
trail	server/red_parse_qxl.h	/^        } trail;$/;"	m	union:RedCursorCmd::__anon164	typeref:struct:RedCursorCmd::__anon164::__anon166
trail	spice-common/spice-protocol/spice/qxl_dev.h	/^        } trail;$/;"	m	union:QXLCursorCmd::__anon71	typeref:struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
trail_frequency	server/red_worker.c	/^    uint16_t trail_frequency;$/;"	m	struct:CursorData	file:
trail_frequency	spice-common/common/messages.h	/^    uint16_t trail_frequency;$/;"	m	struct:SpiceMsgCursorInit
trail_length	server/red_worker.c	/^    uint16_t trail_length;$/;"	m	struct:CursorData	file:
trail_length	spice-common/common/messages.h	/^    uint16_t trail_length;$/;"	m	struct:SpiceMsgCursorInit
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	client/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	docs/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	docs/manual/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	server/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	server/tests/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	spice-common/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	spice-common/common/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	spice-common/python_modules/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	spice-common/spice-protocol/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	spice-common/spice-protocol/spice/Makefile	/^transform = $(program_transform_name)$/;"	m
transform_to_pixman_transform	spice-common/common/canvas_base.c	/^static void transform_to_pixman_transform(SpiceTransform *transform,$/;"	f	file:
translate_key	client/windows/red_window.cpp	/^static inline RedKey translate_key(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	file:
transparent	server/red_parse_qxl.h	/^        SpiceTransparent transparent;$/;"	m	union:RedDrawable::__anon161
transparent	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLTransparent transparent;$/;"	m	union:QXLCompatDrawable::__anon76
transparent	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLTransparent transparent;$/;"	m	union:QXLDrawable::__anon77
transparent_count	server/red_worker.c	/^    uint32_t transparent_count;$/;"	m	struct:RedWorker	file:
tree_item	server/red_worker.c	/^    DrawItem tree_item;$/;"	m	struct:Drawable	file:
trigger	client/display_channel.cpp	/^void GLInterruptRecreate::trigger()$/;"	f	class:GLInterruptRecreate
trigger	client/windows/event_sources_p.cpp	/^void EventSources::Trigger::trigger()$/;"	f	class:EventSources::Trigger
trigger	client/x11/event_sources_p.cpp	/^void EventSources::Trigger::trigger()$/;"	f	class:EventSources::Trigger
true_color	spice-common/common/draw.h	/^    uint32_t true_color;$/;"	m	struct:SpiceTransparent
true_color	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t true_color;$/;"	m	struct:QXLTransparent
try_read_lock	client/read_write_mutex.h	/^    bool try_read_lock()$/;"	f	class:ReadWriteMutex
try_write_lock	client/read_write_mutex.h	/^    bool try_write_lock()$/;"	f	class:ReadWriteMutex
tv_b_minus_a_return_le_zero	server/tests/basic_event_loop.c	/^void tv_b_minus_a_return_le_zero(struct timeval *a, struct timeval *b, struct timeval *dest)$/;"	f
tv_start	server/tests/basic_event_loop.c	/^    struct timeval tv_start;$/;"	m	struct:SpiceTimer	typeref:struct:SpiceTimer::timeval	file:
type	client/application.h	/^    AppMenuItemType type;$/;"	m	struct:AppMenuItem
type	client/cmd_line_parser.h	/^        OptionType type;$/;"	m	class:CmdLineParser::Option
type	client/glz_decoder.h	/^        LzImageType type;$/;"	m	struct:GlzDecoder::__anon112
type	client/menu.h	/^        ItemType type;$/;"	m	struct:Menu::MenuItem
type	client/red_client.h	/^    uint32_t type() { return _type;}$/;"	f	class:ChannelFactory
type	client/red_peer.h	/^        Type type;$/;"	m	class:RedPeer::ConnectionOptions
type	client/red_peer.h	/^    uint16_t type() { return _type;}$/;"	f	class:RedPeer::InMessage
type	client/windows/platform.cpp	/^    uint32_t type;$/;"	m	struct:ImageType	file:
type	client/x11/pixels_source_p.h	/^    int type;$/;"	m	struct:PixelsSource_p
type	client/x11/platform.cpp	/^    uint32_t type;$/;"	m	struct:clipboard_format_info	file:
type	server/glz_encoder.c	/^        LzImageType type;$/;"	m	struct:Encoder::__anon202	file:
type	server/glz_encoder_dictionary_protected.h	/^    LzImageType type;$/;"	m	struct:WindowImage
type	server/jpeg_encoder.c	/^        JpegEncoderImageType type;$/;"	m	struct:JpegEncoder::__anon167	file:
type	server/mjpeg_encoder.c	/^    int type;$/;"	m	struct:MJpegEncoderQualityEval	file:
type	server/red_channel.h	/^    int type;$/;"	m	struct:PipeItem
type	server/red_channel.h	/^    uint32_t type;$/;"	m	struct:RedChannel
type	server/red_parse_qxl.h	/^    uint8_t type;$/;"	m	struct:RedCursorCmd
type	server/red_parse_qxl.h	/^    uint8_t type;$/;"	m	struct:RedDrawable
type	server/red_parse_qxl.h	/^    uint8_t type;$/;"	m	struct:RedSurfaceCmd
type	server/red_worker.c	/^    BitmapDataType type;$/;"	m	struct:BitmapData	file:
type	server/red_worker.c	/^    uint32_t type;$/;"	m	struct:TreeItem	file:
type	server/red_worker.c	/^    uint32_t type;$/;"	m	struct:__anon192	file:
type	server/reds.c	/^    uint16_t type;$/;"	m	struct:RedsMigCertPubKeyInfo	file:
type	server/spice.h	/^    const char *type;$/;"	m	struct:SpiceBaseInterface
type	server/spice.h	/^    int type;$/;"	m	struct:SpiceChannelEventInfo
type	server/spice.h	/^    uint32_t type;$/;"	m	struct:QXLDevSurfaceCreate
type	spice-common/common/draw.h	/^    uint16_t type;$/;"	m	struct:SpiceCursorHeader
type	spice-common/common/draw.h	/^    uint32_t type;$/;"	m	struct:SpiceBrush
type	spice-common/common/draw.h	/^    uint8_t type;$/;"	m	struct:SpiceClip
type	spice-common/common/draw.h	/^    uint8_t type;$/;"	m	struct:SpiceImageDescriptor
type	spice-common/common/glc.c	/^    int type;$/;"	m	struct:PathSegment	file:
type	spice-common/common/lz.c	/^    LzImageType type;$/;"	m	struct:Encoder	file:
type	spice-common/common/messages.h	/^    VSCMsgType type;$/;"	m	struct:SpiceMsgSmartcard
type	spice-common/common/messages.h	/^    uint16_t type;$/;"	m	struct:SpiceMsgTunnelIpInfo
type	spice-common/common/messages.h	/^    uint32_t type;$/;"	m	struct:SpiceMsgcTunnelAddGenericService
type	spice-common/common/messages.h	/^    uint8_t type;$/;"	m	struct:SpiceChannelId
type	spice-common/common/messages.h	/^    uint8_t type;$/;"	m	struct:SpiceResourceID
type	spice-common/common/ogl_ctx.c	/^    int type;$/;"	m	struct:OGLCtx	file:
type	spice-common/common/quic.c	/^    QuicImageType type;$/;"	m	struct:Encoder	file:
type	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t type;$/;"	m	struct:FrgMenuAddItem
type	spice-common/spice-protocol/spice/protocol.h	/^    uint16_t type;$/;"	m	struct:SpiceDataHeader
type	spice-common/spice-protocol/spice/protocol.h	/^    uint16_t type;$/;"	m	struct:SpiceMiniDataHeader
type	spice-common/spice-protocol/spice/protocol.h	/^    uint16_t type;$/;"	m	struct:SpiceSubMessage
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t type;$/;"	m	struct:QXLCursorHeader
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t type;$/;"	m	struct:QXLBrush
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t type;$/;"	m	struct:QXLClip
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t type;$/;"	m	struct:QXLCommand
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t type;$/;"	m	struct:QXLSurfaceCreate
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t type;$/;"	m	struct:QXLCompatDrawable
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t type;$/;"	m	struct:QXLCursorCmd
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t type;$/;"	m	struct:QXLDrawable
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t type;$/;"	m	struct:QXLImageDescriptor
type	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint8_t type;$/;"	m	struct:QXLSurfaceCmd
type	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t type;$/;"	m	struct:VDAgentClipboard
type	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t type;$/;"	m	struct:VDAgentClipboardRequest
type	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t type;$/;"	m	struct:VDAgentMessage
type	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t type;$/;"	m	struct:VDAgentReply
type_exists	spice-common/python_modules/ptypes.py	/^def type_exists(name):$/;"	f
type_flags	client/red_peer.h	/^        SPICE_SSL_VERIFY_OP type_flags;$/;"	m	class:RedPeer::HostAuthOptions
types	client/windows/platform.cpp	/^    uint32_t types[CLIPBOARD_FORMAT_MAX_TYPES];$/;"	m	struct:ClipboardFormat	file:
types	spice-common/python_modules/ptypes.py	/^import types$/;"	i
types	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t types[0];$/;"	m	struct:VDAgentClipboardGrab
u	server/red_parse_qxl.h	/^    } u;$/;"	m	struct:RedCursorCmd	typeref:union:RedCursorCmd::__anon164
u	server/red_parse_qxl.h	/^    } u;$/;"	m	struct:RedDrawable	typeref:union:RedDrawable::__anon161
u	server/red_parse_qxl.h	/^    } u;$/;"	m	struct:RedSurfaceCmd	typeref:union:RedSurfaceCmd::__anon163
u	server/red_worker.c	/^    } u;$/;"	m	struct:CacheItem	typeref:union:CacheItem::__anon173	file:
u	server/red_worker.c	/^    } u;$/;"	m	struct:_CursorItem	typeref:union:_CursorItem::__anon190	file:
u	server/red_worker.c	/^    } u;$/;"	m	struct:_Drawable	typeref:union:_Drawable::__anon189	file:
u	server/red_worker.c	/^    } u;$/;"	m	struct:__anon177	typeref:union:__anon177::__anon178	file:
u	server/reds-private.h	/^    u;$/;"	m	struct:VDInternalBuf	typeref:union:VDInternalBuf::__anon152
u	spice-common/common/draw.h	/^    } u;$/;"	m	struct:SpiceBrush	typeref:union:SpiceBrush::__anon36
u	spice-common/common/draw.h	/^    } u;$/;"	m	struct:SpiceImage	typeref:union:SpiceImage::__anon35
u	spice-common/common/messages.h	/^    } u;$/;"	m	struct:SpiceMsgTunnelIpInfo	typeref:union:SpiceMsgTunnelIpInfo::__anon22
u	spice-common/common/messages.h	/^    } u;$/;"	m	struct:SpiceMsgcTunnelAddGenericService	typeref:union:SpiceMsgcTunnelAddGenericService::__anon23
u	spice-common/spice-protocol/spice/qxl_dev.h	/^    } u;$/;"	m	struct:QXLBrush	typeref:union:QXLBrush::__anon73
u	spice-common/spice-protocol/spice/qxl_dev.h	/^    } u;$/;"	m	struct:QXLCompatDrawable	typeref:union:QXLCompatDrawable::__anon76
u	spice-common/spice-protocol/spice/qxl_dev.h	/^    } u;$/;"	m	struct:QXLCursorCmd	typeref:union:QXLCursorCmd::__anon71
u	spice-common/spice-protocol/spice/qxl_dev.h	/^    } u;$/;"	m	struct:QXLDrawable	typeref:union:QXLDrawable::__anon77
u	spice-common/spice-protocol/spice/qxl_dev.h	/^    } u;$/;"	m	struct:QXLSurfaceCmd	typeref:union:QXLSurfaceCmd::__anon78
uint16	spice-common/python_modules/ptypes.py	/^uint16 = IntegerType(16, False)$/;"	v
uint16_t	client/windows/stdint.h	/^typedef unsigned short  uint16_t;$/;"	t
uint32	spice-common/python_modules/ptypes.py	/^uint32 = IntegerType(32, False)$/;"	v
uint32_t	client/windows/stdint.h	/^typedef unsigned   uint32_t;$/;"	t
uint64	spice-common/python_modules/ptypes.py	/^uint64 = IntegerType(64, False)$/;"	v
uint64_t	client/windows/stdint.h	/^typedef unsigned _int64 uint64_t;$/;"	t
uint64_t	client/windows/stdint.h	/^typedef unsigned long long   uint64_t;$/;"	t
uint8	spice-common/python_modules/ptypes.py	/^uint8 = IntegerType(8, False)$/;"	v
uint8_t	client/windows/stdint.h	/^typedef unsigned char   uint8_t;$/;"	t
uint_fast16_t	client/windows/stdint.h	/^typedef unsigned short  uint_fast16_t;$/;"	t
uint_fast32_t	client/windows/stdint.h	/^typedef unsigned  int  uint_fast32_t;$/;"	t
uint_fast64_t	client/windows/stdint.h	/^typedef unsigned long long   uint_fast64_t;$/;"	t
uint_fast8_t	client/windows/stdint.h	/^typedef unsigned char uint_fast8_t;$/;"	t
uint_least16_t	client/windows/stdint.h	/^typedef unsigned short  uint_least16_t;$/;"	t
uint_least32_t	client/windows/stdint.h	/^typedef unsigned   uint_least32_t;$/;"	t
uint_least64_t	client/windows/stdint.h	/^typedef unsigned long long   uint_least64_t;$/;"	t
uint_least8_t	client/windows/stdint.h	/^typedef unsigned char   uint_least8_t;$/;"	t
uintmax_t	client/windows/stdint.h	/^typedef unsigned long long   uintmax_t;$/;"	t
uintptr_t	client/windows/stdint.h	/^typedef unsigned uintptr_t;$/;"	t
uncompress_gray	spice-common/common/quic.c	/^static void uncompress_gray(Encoder *encoder, uint8_t *buf, int stride)$/;"	f	file:
uncompress_rgba	spice-common/common/quic.c	/^static void uncompress_rgba(Encoder *encoder, uint8_t *buf, int stride)$/;"	f	file:
uncompress_row	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(uncompress_row)(Encoder *encoder,$/;"	f	file:
uncompress_row	spice-common/common/quic_tmpl.c	/^static void FNAME(uncompress_row)(Encoder *encoder, Channel *channel,$/;"	f	file:
uncompress_row0	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(uncompress_row0)(Encoder *encoder,$/;"	f	file:
uncompress_row0	spice-common/common/quic_tmpl.c	/^static void FNAME(uncompress_row0)(Encoder *encoder, Channel *channel,$/;"	f	file:
uncompress_row0_seg	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(uncompress_row0_seg)(Encoder *encoder, int i,$/;"	f	file:
uncompress_row0_seg	spice-common/common/quic_tmpl.c	/^static void FNAME(uncompress_row0_seg)(Encoder *encoder, Channel *channel, int i,$/;"	f	file:
uncompress_row_seg	spice-common/common/quic_rgb_tmpl.c	/^static void FNAME(uncompress_row_seg)(Encoder *encoder,$/;"	f	file:
uncompress_row_seg	spice-common/common/quic_tmpl.c	/^static void FNAME(uncompress_row_seg)(Encoder *encoder, Channel *channel,$/;"	f	file:
underscores_to_camel	spice-common/python_modules/codegen.py	/^def underscores_to_camel(s):$/;"	f
undim	client/gui/gui.cpp	/^void GUI::Dialog::undim()$/;"	f	class:GUI::Dialog
unimplemented_op	spice-common/common/canvas_base.c	/^static void unimplemented_op(SpiceCanvas *canvas)$/;"	f	file:
unindent	spice-common/python_modules/codegen.py	/^    def unindent(self):$/;"	m	class:CodeWriter
unique	server/tests/test_display_base.c	/^static int unique = 1;$/;"	v	file:
unique	spice-common/common/draw.h	/^    uint64_t unique;$/;"	m	struct:SpiceCursorHeader
unique	spice-common/common/draw.h	/^    uint64_t unique;$/;"	m	struct:SpicePalette
unique	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t unique;$/;"	m	struct:QXLImageID
unique	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t unique;$/;"	m	struct:QXLCursorHeader
unique	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint64_t unique;$/;"	m	struct:QXLPalette
unique_id	spice-common/common/messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgDisplayStreamActivateReport
unique_id	spice-common/common/messages.h	/^    uint32_t unique_id;$/;"	m	struct:SpiceMsgcDisplayStreamReport
unloadRawDataContainer	client/gui/resource_provider.cpp	/^void CEGUIResourceProvider::unloadRawDataContainer(CEGUI::RawDataContainer& data)$/;"	f	class:CEGUIResourceProvider
unlock	client/threads.h	/^    void unlock()$/;"	f	class:Lock
unlock_size	client/screen.cpp	/^void RedScreen::unlock_size()$/;"	f	class:RedScreen
unpin	client/x11/platform.cpp	/^    void unpin() { ASSERT(_pin_count > 0); _pin_count--;}$/;"	f	class:XMonitor
unpress_all	client/application.cpp	/^void Application::unpress_all()$/;"	f	class:Application
unpress_key	client/application.cpp	/^bool Application::unpress_key(RedKey key)$/;"	f	class:Application
unref	client/canvas.h	/^    static void unref(SpicePalette *pal)$/;"	f	class:CachedPalette
unref	client/canvas.h	/^    void unref()$/;"	f	class:CachedPalette
unref	client/controller.h	/^    void unref() { if (!--_refs) delete this;}$/;"	f	class:Controller
unref	client/cursor.h	/^    void unref() { if (--_atomic == 0) delete this;}$/;"	f	class:LocalCursor
unref	client/cursor.h	/^    void unref() {if (--_atomic == 0) delete this;}$/;"	f	class:CursorData
unref	client/foreign_menu.h	/^    void unref() { if (!--_refs) delete this;}$/;"	f	class:ForeignMenu
unref	client/icon.h	/^    void unref() { if (!--_refs) delete this;}$/;"	f	class:Icon
unref	client/menu.h	/^    void unref() { if (!--_refs) delete this;}$/;"	f	class:Menu
unref	client/process_loop.h	/^    void unref() {if (--_refs == 0) delete this;}$/;"	f	class:EventBase
unref	client/red_peer.h	/^    void unref() {if (!--_refs) delete this;}$/;"	f	class:RedPeer::CompoundInMessage
unref	client/screen.cpp	/^void RedScreen::unref()$/;"	f	class:RedScreen
unref_msg_to_client	server/char_device.h	/^    void (*unref_msg_to_client)(SpiceCharDeviceMsgToClient *msg,$/;"	m	struct:SpiceCharDeviceCallbacks
unref_pat	spice-common/common/glc.c	/^static inline void unref_pat(InternalPat *pat)$/;"	f	file:
unregister_tab_factory	client/gui/gui.cpp	/^void GUI::unregister_tab_factory(TabFactory& factory)$/;"	f	class:GUI
unsecure_port	client/red_peer.h	/^        int unsecure_port;$/;"	m	class:RedPeer::ConnectionOptions
unset_brush	spice-common/common/gdi_canvas.c	/^static void unset_brush(HDC dc, HBRUSH prev_hbrush)$/;"	f	file:
unset_type_gl	client/screen.cpp	/^void RedScreen::unset_type_gl()$/;"	f	class:RedScreen
unset_type_gl	client/x11/red_window.cpp	/^void RedWindow::unset_type_gl()$/;"	f	class:RedWindow
untouch_context	client/screen.cpp	/^void RedScreen::untouch_context()$/;"	f	class:RedScreen
untouch_context	client/windows/red_window.cpp	/^void RedWindow::untouch_context()$/;"	f	class:RedWindow
untouch_context	client/x11/red_window.cpp	/^void RedWindow::untouch_context()$/;"	f	class:RedWindow
update	client/screen.cpp	/^void RedScreen::update()$/;"	f	class:RedScreen
update_area	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLRect update_area;$/;"	m	struct:QXLRam
update_area_complete	server/spice.h	/^    void (*update_area_complete)(QXLInstance *qin, uint32_t surface_id,$/;"	m	struct:QXLInterface
update_by_interrupt	client/screen.cpp	/^bool RedScreen::update_by_interrupt()$/;"	f	class:RedScreen
update_client_mouse_allowed	server/red_dispatcher.c	/^static void update_client_mouse_allowed(void)$/;"	f	file:
update_client_playback_delay	server/mjpeg_encoder.h	/^    void (*update_client_playback_delay)(void *opaque, uint32_t delay_ms);$/;"	m	struct:MJpegEncoderRateControlCbs
update_composit	client/screen.cpp	/^inline void RedScreen::update_composit(QRegion& composit_rgn)$/;"	f	class:RedScreen
update_copy_count	server/glz_encoder.c	/^static INLINE void update_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:
update_copy_count	spice-common/common/lz.c	/^static inline void update_copy_count(Encoder *encoder, uint8_t copy_count)$/;"	f	file:
update_cursor	client/display_channel.cpp	/^void DisplayChannel::update_cursor()$/;"	f	class:DisplayChannel
update_display_cursor	client/cursor_channel.cpp	/^void CursorChannel::update_display_cursor()$/;"	f	class:CursorChannel
update_done	client/screen.cpp	/^inline void RedScreen::update_done()$/;"	f	class:RedScreen
update_id	server/red_parse_qxl.h	/^    uint32_t update_id;$/;"	m	struct:RedUpdateCmd
update_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t update_id;$/;"	m	struct:QXLCompatUpdateCmd
update_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t update_id;$/;"	m	struct:QXLRom
update_id	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t update_id;$/;"	m	struct:QXLUpdateCmd
update_interrupt	client/display_channel.cpp	/^void DisplayChannel::update_interrupt()$/;"	f	class:DisplayChannel
update_layer_area	client/gui/gui.cpp	/^void GUI::update_layer_area()$/;"	f	class:GUI
update_menu	client/application.cpp	/^void Application::update_menu()$/;"	f	class:Application
update_menu	client/screen.cpp	/^void RedScreen::update_menu()$/;"	f	class:RedScreen
update_model	spice-common/common/quic_family_tmpl.c	/^static void FNAME(update_model)(CommonState *state, s_bucket * const bucket,$/;"	f	file:
update_model	spice-common/common/quic_rgb_tmpl.c	28;"	d	file:
update_model	spice-common/common/quic_rgb_tmpl.c	49;"	d	file:
update_model	spice-common/common/quic_rgb_tmpl.c	70;"	d	file:
update_model	spice-common/common/quic_rgb_tmpl.c	753;"	d	file:
update_model	spice-common/common/quic_rgb_tmpl.c	91;"	d	file:
update_model	spice-common/common/quic_tmpl.c	42;"	d	file:
update_model	spice-common/common/quic_tmpl.c	631;"	d	file:
update_pointer_layer	client/screen.cpp	/^bool RedScreen::update_pointer_layer()$/;"	f	class:RedScreen
update_position	client/windows/platform.cpp	/^void WinMonitor::update_position()$/;"	f	class:WinMonitor
update_position	client/x11/platform.cpp	/^void XMonitor::update_position()$/;"	f	class:XMonitor
update_sticky_rect	client/application.cpp	/^void InfoLayer::update_sticky_rect()$/;"	f	class:InfoLayer
update_surface	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t update_surface;$/;"	m	struct:QXLRam
update_texture	client/x11/red_pixmap_gl.cpp	/^void RedPixmapGL::update_texture(const SpiceRect *bbox)$/;"	f	class:RedPixmapGL
urgent	server/red_channel.h	/^        } urgent;$/;"	m	struct:RedChannelClient::__anon148	typeref:struct:RedChannelClient::__anon148::__anon150
usage	server/tests/test_display_base.c	/^void usage(const char *argv0, const int exitcode)$/;"	f
use_hardware_cursor	server/red_dispatcher.c	/^    int use_hardware_cursor;$/;"	m	struct:RedDispatcher	file:
use_hardware_cursor	server/spice.h	/^    uint32_t use_hardware_cursor;$/;"	m	struct:QXLDevInfo
use_mjpeg_encoder_rate_control	server/red_worker.c	/^    int use_mjpeg_encoder_rate_control;$/;"	m	struct:DisplayChannelClient	file:
use_surface_canvas	spice-common/common/canvas_base.c	/^    int use_surface_canvas;$/;"	m	struct:__anon15	file:
used_compress_bufs	server/red_worker.c	/^        RedCompressBuf *used_compress_bufs;$/;"	m	struct:DisplayChannelClient::__anon186	file:
used_images_head	server/glz_encoder_dictionary_protected.h	/^        WindowImage*        used_images_head;$/;"	m	struct:SharedDictionary::__anon170
used_images_tail	server/glz_encoder_dictionary_protected.h	/^        WindowImage*        used_images_tail;$/;"	m	struct:SharedDictionary::__anon170
used_segs_head	server/glz_encoder_dictionary_protected.h	/^        uint32_t used_segs_head;             \/\/ the latest head$/;"	m	struct:SharedDictionary::__anon170
used_segs_tail	server/glz_encoder_dictionary_protected.h	/^        uint32_t used_segs_tail;$/;"	m	struct:SharedDictionary::__anon170
used_tess_vertex	spice-common/common/glc.c	/^    TassVertex *used_tess_vertex;$/;"	m	struct:InternaCtx	file:
user_data_context	client/x11/red_window.cpp	/^static XContext user_data_context;$/;"	v	file:
username	server/reds_stream.c	/^    char *username;$/;"	m	struct:RedsSASL	file:
using_evdev	client/x11/red_window.cpp	/^static bool using_evdev = false;$/;"	v	file:
using_ogl	client/screen_layer.h	/^    bool using_ogl() {return _using_ogl;}$/;"	f	class:ScreenLayer
using_xfixes_1_0	client/x11/platform.cpp	/^static bool using_xfixes_1_0 = false;$/;"	v	file:
using_xinerama_1_0	client/x11/platform.cpp	/^static bool using_xinerama_1_0 = false;$/;"	v	file:
using_xrandr_1_0	client/x11/platform.cpp	/^static bool using_xrandr_1_0 = false;$/;"	v	file:
using_xrandr_1_2	client/x11/platform.cpp	/^static bool using_xrandr_1_2 = false;$/;"	v	file:
using_xrender_0_5	client/x11/platform.cpp	/^static bool using_xrender_0_5 = false;$/;"	v	file:
usr	server/glz_encoder.c	/^    GlzEncoderUsrContext *usr;$/;"	m	struct:Encoder	file:
usr	server/jpeg_encoder.c	/^    JpegEncoderUsrContext *usr;$/;"	m	struct:JpegEncoder	file:
usr	server/red_worker.c	/^    GlzEncoderUsrContext usr;$/;"	m	struct:__anon183	file:
usr	server/red_worker.c	/^    JpegEncoderUsrContext usr;$/;"	m	struct:__anon184	file:
usr	server/red_worker.c	/^    LzUsrContext usr;$/;"	m	struct:__anon182	file:
usr	server/red_worker.c	/^    QuicUsrContext usr;$/;"	m	struct:__anon181	file:
usr	server/red_worker.c	/^    ZlibEncoderUsrContext usr;$/;"	m	struct:__anon185	file:
usr	server/zlib_encoder.c	/^    ZlibEncoderUsrContext *usr;$/;"	m	struct:ZlibEncoder	file:
usr	spice-common/common/canvas_base.c	/^    LzUsrContext usr;$/;"	m	struct:LzData	file:
usr	spice-common/common/canvas_base.c	/^    QuicUsrContext usr;$/;"	m	struct:QuicData	file:
usr	spice-common/common/lz.c	/^    LzUsrContext    *usr;$/;"	m	struct:Encoder	file:
usr	spice-common/common/quic.c	/^    QuicUsrContext *usr;$/;"	m	struct:Encoder	file:
usr_context	server/glz_encoder_dictionary_protected.h	/^    GlzUsrImageContext  *usr_context;$/;"	m	struct:WindowImage
usr_data	spice-common/common/canvas_base.c	/^    void *usr_data;$/;"	m	struct:CanvasBase	file:
usr_data_destroy	spice-common/common/canvas_base.c	/^    spice_destroy_fn_t usr_data_destroy;$/;"	m	struct:CanvasBase	file:
utf16_to_utf32	client/windows/red_window.cpp	/^static uint32_t utf16_to_utf32(uint16_t*& utf16, int& len)$/;"	f	file:
utf8_alloc	client/windows/platform.cpp	/^static HGLOBAL utf8_alloc(LPCSTR data, int size)$/;"	f	file:
utf8_to_wchar	client/windows/red_window.cpp	/^static void utf8_to_wchar(const std::string& src, std::wstring& dest)$/;"	f	file:
uuid	spice-common/common/messages.h	/^    uint8_t uuid[16];$/;"	m	struct:SpiceMsgMainUuid
valid	client/utils.h	/^    bool valid() { return !!_res; }$/;"	f	class:_AutoRes
valid	client/windows/platform_utils.h	/^    bool valid() { return res != invalid; }$/;"	f	class:AutoRes
validate_SpiceClipRects	spice-common/common/generated_client_demarshallers1.c	/^static intptr_t validate_SpiceClipRects(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpiceImage	spice-common/common/generated_client_demarshallers.c	/^static intptr_t validate_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpiceImage	spice-common/common/generated_client_demarshallers1.c	/^static intptr_t validate_SpiceImage(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpicePalette	spice-common/common/generated_client_demarshallers.c	/^static intptr_t validate_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpicePalette	spice-common/common/generated_client_demarshallers1.c	/^static intptr_t validate_SpicePalette(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpicePath	spice-common/common/generated_client_demarshallers.c	/^static intptr_t validate_SpicePath(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpicePath	spice-common/common/generated_client_demarshallers1.c	/^static intptr_t validate_SpicePath(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpiceString	spice-common/common/generated_client_demarshallers.c	/^static intptr_t validate_SpiceString(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_SpiceString	spice-common/common/generated_client_demarshallers1.c	/^static intptr_t validate_SpiceString(uint8_t *message_start, uint8_t *message_end, uint64_t offset, int minor)$/;"	f	file:
validate_area	server/red_worker.c	/^static void validate_area(RedWorker *worker, const SpiceRect *area, uint32_t surface_id)$/;"	f	file:
validate_pipe_add	server/red_channel.c	/^static inline int validate_pipe_add(RedChannelClient *rcc, PipeItem *item)$/;"	f	file:
validate_surface	server/red_worker.c	/^static inline int validate_surface(RedWorker *worker, uint32_t surface_id)$/;"	f	file:
validate_virt	server/red_memslots.c	/^int validate_virt(RedMemSlotInfo *info, unsigned long virt, int slot_id,$/;"	f
value	server/reds-private.h	/^    uint32_t value;$/;"	m	struct:RedsStatValue
value	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t value;$/;"	m	struct:ControllerValue
value	spice-common/spice-protocol/spice/qxl_dev.h	/^  uint64_t value;$/;"	m	union:__anon81
value	spice-common/spice-protocol/spice/stats.h	/^    uint64_t value;$/;"	m	struct:SpiceStatNode
variable_def	spice-common/python_modules/codegen.py	/^    def variable_def(self, ctype, *names):$/;"	m	class:CodeWriter
variable_defined	spice-common/python_modules/codegen.py	/^    def variable_defined(self, name):$/;"	m	class:CodeWriter
vdagent	server/reds.c	/^static SpiceCharDeviceInstance *vdagent = NULL;$/;"	v	file:
vdagent_sif	server/tests/test_display_base.c	/^static SpiceCharDeviceInterface vdagent_sif = {$/;"	v	file:
vdagent_sin	server/tests/test_display_base.c	/^SpiceCharDeviceInstance vdagent_sin = {$/;"	v
vdi_chunk_header	server/reds-private.h	/^    VDIChunkHeader vdi_chunk_header;$/;"	m	struct:VDIPortState
vdi_port_on_free_self_token	server/reds.c	/^static void vdi_port_on_free_self_token(void *opaque)$/;"	f	file:
vdi_port_read_buf_get	server/reds.c	/^static VDIReadBuf *vdi_port_read_buf_get(void)$/;"	f	file:
vdi_port_read_buf_process	server/reds.c	/^static int vdi_port_read_buf_process(int port, VDIReadBuf *buf)$/;"	f	file:
vdi_port_read_buf_ref	server/reds.c	/^static VDIReadBuf* vdi_port_read_buf_ref(VDIReadBuf *buf)$/;"	f	file:
vdi_port_read_buf_release	server/reds.c	/^static void vdi_port_read_buf_release(uint8_t *data, void *opaque)$/;"	f	file:
vdi_port_read_buf_unref	server/reds.c	/^static void vdi_port_read_buf_unref(VDIReadBuf *buf)$/;"	f	file:
vdi_port_read_one_msg_from_device	server/reds.c	/^static SpiceCharDeviceMsgToClient *vdi_port_read_one_msg_from_device(SpiceCharDeviceInstance *sin,$/;"	f	file:
vdi_port_ref_msg_to_client	server/reds.c	/^static SpiceCharDeviceMsgToClient *vdi_port_ref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
vdi_port_remove_client	server/reds.c	/^static void vdi_port_remove_client(RedClient *client, void *opaque)$/;"	f	file:
vdi_port_send_msg_to_client	server/reds.c	/^static void vdi_port_send_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
vdi_port_send_tokens_to_client	server/reds.c	/^static void vdi_port_send_tokens_to_client(RedClient *client, uint32_t tokens, void *opaque)$/;"	f	file:
vdi_port_unref_msg_to_client	server/reds.c	/^static void vdi_port_unref_msg_to_client(SpiceCharDeviceMsgToClient *msg,$/;"	f	file:
vec	server/red_channel.h	/^    struct iovec *vec;$/;"	m	struct:OutgoingHandler	typeref:struct:OutgoingHandler::iovec
vec_buf	server/red_channel.h	/^    struct iovec vec_buf[IOV_MAX];$/;"	m	struct:OutgoingHandler	typeref:struct:OutgoingHandler::iovec
vec_size	server/red_channel.h	/^    int vec_size;$/;"	m	struct:OutgoingHandler
verb	server/red_worker.c	/^    uint16_t verb;$/;"	m	struct:VerbItem	file:
verify	spice-common/common/verify.h	241;"	d
verify_expr	spice-common/common/verify.h	235;"	d
verify_hostname	spice-common/common/ssl_verify.c	/^static int verify_hostname(X509* cert, const char *hostname)$/;"	f	file:
verify_pubkey	spice-common/common/ssl_verify.c	/^static int verify_pubkey(X509* cert, const char *key, size_t key_size)$/;"	f	file:
verify_subject	spice-common/common/ssl_verify.c	/^static int verify_subject(X509* cert, SpiceOpenSSLVerify* verify)$/;"	f	file:
verify_true	spice-common/common/verify.h	230;"	d
verifyop	spice-common/common/ssl_verify.h	/^    SPICE_SSL_VERIFY_OP verifyop;$/;"	m	struct:__anon4
version	server/migration_protocol.h	/^    uint32_t version;$/;"	m	struct:SpiceMigrateDataCharDevice
version	server/migration_protocol.h	/^    uint32_t version;$/;"	m	struct:SpiceMigrateDataHeader
version	spice-common/spice-protocol/spice/controller_prot.h	/^    uint32_t version;$/;"	m	struct:ControllerInitHeader
version	spice-common/spice-protocol/spice/foreign_menu_prot.h	/^    uint32_t version;$/;"	m	struct:FrgMenuInitHeader
version	spice-common/spice-protocol/spice/stats.h	/^    uint32_t version;$/;"	m	struct:SpiceStat
version_str	client/x11/main.cpp	/^const char * version_str = VERSION;$/;"	v
version_string	server/reds.c	/^const char *version_string = VERSION;$/;"	v
vertex_bufs	spice-common/common/glc.c	/^    TassVertexBuf *vertex_bufs;$/;"	m	struct:InternaCtx	file:
vertexs	spice-common/common/glc.c	/^    TassVertex vertexs[0];$/;"	m	struct:TassVertexBuf	file:
vheader	server/smartcard.c	/^    VSCMsgHeader vheader;$/;"	m	struct:ErrorItem	file:
vheader	server/smartcard.c	/^    VSCMsgHeader* vheader;$/;"	m	struct:MsgItem	file:
vinfo	client/x11/platform.cpp	/^static XVisualInfo **vinfo = NULL;$/;"	v	file:
virt_end	server/spice.h	/^    unsigned long virt_end;$/;"	m	struct:QXLDevMemSlot
virt_end_addr	server/red_memslots.h	/^    unsigned long virt_end_addr;$/;"	m	struct:MemSlot
virt_start	server/spice.h	/^    unsigned long virt_start;$/;"	m	struct:QXLDevMemSlot
virt_start_addr	server/red_memslots.h	/^    unsigned long virt_start_addr;$/;"	m	struct:MemSlot
virtual_card_insert	client/smartcard_channel.cpp	/^void SmartCardChannel::virtual_card_insert()$/;"	f	class:SmartCardChannel
virtual_card_insert	client/smartcard_channel.cpp	/^void virtual_card_insert()$/;"	f
virtual_card_remove	client/smartcard_channel.cpp	/^void SmartCardChannel::virtual_card_remove()$/;"	f	class:SmartCardChannel
virtual_card_remove	client/smartcard_channel.cpp	/^void virtual_card_remove()$/;"	f
virtual_ip	spice-common/common/messages.h	/^    SpiceMsgTunnelIpInfo virtual_ip;$/;"	m	struct:SpiceMsgTunnelServiceIpMap
vis_region	server/red_worker.c	/^    QRegion vis_region; \/* the part of the surface area that is currently occupied by video$/;"	m	struct:StreamAgent	file:
visibilty	spice-common/common/messages.h	/^    uint32_t visibilty;$/;"	m	struct:SpiceMsgNotify
visible	server/red_parse_qxl.h	/^            uint8_t visible;$/;"	m	struct:RedCursorCmd::__anon164::__anon165
visible	server/red_worker.c	/^    uint32_t visible;$/;"	m	struct:CursorData	file:
visible	spice-common/common/messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorInit
visible	spice-common/common/messages.h	/^    uint8_t visible;$/;"	m	struct:SpiceMsgCursorSet
visible	spice-common/spice-protocol/spice/qxl_dev.h	/^            uint8_t visible;$/;"	m	struct:QXLCursorCmd::__anon71::SPICE_ATTR_PACKED
vkey	client/windows/platform.cpp	/^    int vkey;$/;"	m	struct:KeyboardModifier	file:
vm_running	server/reds-private.h	/^    int vm_running;$/;"	m	struct:RedsState
vmc_instance	server/tests/test_vdagent.c	/^SpiceCharDeviceInstance vmc_instance = {$/;"	v
vmc_interface	server/tests/test_vdagent.c	/^static SpiceCharDeviceInterface vmc_interface = {$/;"	v	file:
vmc_read	server/tests/test_display_base.c	/^static int vmc_read(SpiceCharDeviceInstance *sin, uint8_t *buf, int len)$/;"	f	file:
vmc_read	server/tests/test_vdagent.c	/^static int vmc_read(SpiceCharDeviceInstance *sin, uint8_t *buf, int len)$/;"	f	file:
vmc_state	server/tests/test_display_base.c	/^static void vmc_state(SpiceCharDeviceInstance *sin, int connected)$/;"	f	file:
vmc_state	server/tests/test_vdagent.c	/^static void vmc_state(SpiceCharDeviceInstance *sin, int connected)$/;"	f	file:
vmc_write	server/tests/test_display_base.c	/^static int vmc_write(SpiceCharDeviceInstance *sin, const uint8_t *buf, int len)$/;"	f	file:
vmc_write	server/tests/test_vdagent.c	/^static int vmc_write(SpiceCharDeviceInstance *sin, const uint8_t *buf, int len)$/;"	f	file:
volume	server/snd_worker.c	/^    SpiceVolumeState volume;$/;"	m	struct:SpicePlaybackState	file:
volume	server/snd_worker.c	/^    SpiceVolumeState volume;$/;"	m	struct:SpiceRecordState	file:
volume	server/snd_worker.c	/^    uint16_t *volume;$/;"	m	struct:SpiceVolumeState	file:
volume	spice-common/common/messages.h	/^    uint16_t volume[0];$/;"	m	struct:SpiceMsgAudioVolume
volume_nchannels	server/snd_worker.c	/^    uint8_t volume_nchannels;$/;"	m	struct:SpiceVolumeState	file:
vreader	client/smartcard_channel.h	/^    VReader *vreader;$/;"	m	struct:ReaderData
vsnprintf_s	client/common.h	51;"	d
wait	client/process_loop.cpp	/^void SyncEvent::wait()$/;"	f	class:SyncEvent
wait	client/threads.h	/^    void wait(Lock& lock)$/;"	f	class:Condition
wait	server/red_worker.c	/^    WaitForChannels wait;$/;"	m	struct:FreeList	file:
wait_count	spice-common/common/messages.h	/^    uint8_t wait_count;$/;"	m	struct:SpiceMsgWaitForChannels
wait_events	client/windows/event_sources_p.cpp	/^bool EventSources::wait_events(int timeout_ms)$/;"	f	class:EventSources
wait_events	client/x11/event_sources_p.cpp	/^bool EventSources::wait_events(int timeout_msec)$/;"	f	class:EventSources
wait_for_channels	client/red_client.cpp	/^void RedClient::wait_for_channels(int wait_list_size, SpiceWaitForChannel* wait_list)$/;"	f	class:RedClient
wait_for_image	client/glz_decoder_window.cpp	/^void GlzDecoderWindow::wait_for_image(int index)$/;"	f	class:GlzDecoderWindow
wait_for_map	client/x11/red_window.cpp	/^void RedWindow_p::wait_for_map()$/;"	f	class:RedWindow_p
wait_for_me	client/x11/platform.cpp	/^volatile int wait_for_me = false;$/;"	v
wait_for_migrate_data	server/char_device.c	/^    int wait_for_migrate_data;$/;"	m	struct:SpiceCharDeviceState	file:
wait_for_reparent	client/x11/red_window.cpp	/^void RedWindow_p::wait_for_reparent()$/;"	f	class:RedWindow_p
wait_for_tokens_started	server/char_device.c	/^    int wait_for_tokens_started;$/;"	m	struct:SpiceCharDeviceClientState	file:
wait_for_tokens_timer	server/char_device.c	/^    SpiceTimer *wait_for_tokens_timer;$/;"	m	struct:SpiceCharDeviceClientState	file:
wait_for_unmap	client/x11/red_window.cpp	/^void RedWindow_p::wait_for_unmap()$/;"	f	class:RedWindow_p
wait_list	spice-common/common/messages.h	/^    SpiceWaitForChannel wait_list[0];$/;"	m	struct:SpiceMsgWaitForChannels
wait_migrate_data	server/red_channel.h	/^    int wait_migrate_data;$/;"	m	struct:RedChannelClient
wait_migrate_flush_mark	server/red_channel.h	/^    int wait_migrate_flush_mark;$/;"	m	struct:RedChannelClient
waitcnt	spice-common/common/quic.c	/^    unsigned int waitcnt;$/;"	m	struct:CommonState	file:
waiting_for_property_notify	client/x11/platform.cpp	/^static bool waiting_for_property_notify = false;$/;"	v	file:
wakeup	client/process_loop.cpp	/^void ProcessLoop::wakeup()$/;"	f	class:ProcessLoop
wakeup_counter	server/red_worker.c	/^    uint64_t *wakeup_counter;$/;"	m	struct:RedWorker	file:
wakeup_ms	server/tests/test_display_base.h	/^    int wakeup_ms;$/;"	m	struct:Test
wakeup_timer	server/tests/test_display_base.h	/^    SpiceTimer *wakeup_timer;$/;"	m	struct:Test
wantSSF	server/reds_stream.c	/^    int wantSSF :1;$/;"	m	struct:RedsSASL	file:
warmup_start_time	server/mjpeg_encoder.c	/^    uint64_t warmup_start_time;$/;"	m	struct:MJpegEncoderRateControl	file:
warmup_was_sent	server/red_channel.h	/^    int warmup_was_sent;$/;"	m	struct:RedChannelClientLatencyMonitor
warn	client/canvas.h	/^    virtual void warn(const std::string& str)$/;"	f	class:GlzDecoderCanvasDebug
warn	client/red_client.h	/^    virtual void warn(const std::string& str)$/;"	f	class:GlzDecoderWindowDebug
warn	server/glz_encoder_config.h	/^    SPICE_GNUC_PRINTF(2, 3) void (*warn)(GlzEncoderUsrContext *usr, const char *fmt, ...);$/;"	m	struct:GlzEncoderUsrContext
warn	spice-common/common/lz.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(LzUsrContext *usr, const char *fmt, ...);$/;"	m	struct:LzUsrContext
warn	spice-common/common/quic.h	/^    SPICE_ATTR_PRINTF(2, 3) void (*warn)(QuicUsrContext *usr, const char *fmt, ...);$/;"	m	struct:QuicUsrContext
was_upgraded	server/mjpeg_encoder.c	/^    int was_upgraded;$/;"	m	struct:MJpegEncoderBitRateInfo	file:
watch	server/reds_stream.h	/^    SpiceWatch *watch;$/;"	m	struct:RedsStream
watch_add	server/spice.h	/^    SpiceWatch *(*watch_add)(int fd, int event_mask, SpiceWatchFunc func, void *opaque);$/;"	m	struct:SpiceCoreInterface
watch_add	server/tests/basic_event_loop.c	/^static SpiceWatch *watch_add(int fd, int event_mask, SpiceWatchFunc func, void *opaque)$/;"	f	file:
watch_add	server/tests/test_empty_success.c	/^SpiceWatch *watch_add(int fd, int event_mask, SpiceWatchFunc func, void *opaque)$/;"	f
watch_count	server/tests/basic_event_loop.c	/^int watch_count = 0;$/;"	v
watch_func	server/red_worker.c	/^    SpiceWatchFunc watch_func;$/;"	m	struct:SpiceWatch	file:
watch_func_opaque	server/red_worker.c	/^    void *watch_func_opaque;$/;"	m	struct:SpiceWatch	file:
watch_remove	server/spice.h	/^    void (*watch_remove)(SpiceWatch *watch);$/;"	m	struct:SpiceCoreInterface
watch_remove	server/tests/basic_event_loop.c	/^static void watch_remove(SpiceWatch *watch)$/;"	f	file:
watch_remove	server/tests/test_empty_success.c	/^void watch_remove(SpiceWatch *watch)$/;"	f
watch_update_mask	server/spice.h	/^    void (*watch_update_mask)(SpiceWatch *watch, int event_mask);$/;"	m	struct:SpiceCoreInterface
watch_update_mask	server/tests/basic_event_loop.c	/^static void watch_update_mask(SpiceWatch *watch, int event_mask)$/;"	f	file:
watch_update_mask	server/tests/test_empty_success.c	/^void watch_update_mask(SpiceWatch *watch, int event_mask)$/;"	f
watches	server/red_worker.c	/^    struct SpiceWatch watches[MAX_EVENT_SOURCES];$/;"	m	struct:RedWorker	typeref:struct:RedWorker::SpiceWatch	file:
watches	server/tests/basic_event_loop.c	/^Ring watches;$/;"	v
wave_blocked	client/playback_channel.cpp	/^static bool wave_blocked = false;$/;"	v	file:
wave_buf	client/playback_channel.cpp	/^static uint8_t* wave_buf = NULL;$/;"	v	file:
wave_end	client/playback_channel.cpp	/^static uint8_t* wave_end = NULL;$/;"	v	file:
wave_hader	client/windows/playback.cpp	/^inline WAVEHDR* WavePlayer::wave_hader(uint32_t position)$/;"	f	class:WavePlayer
wave_hader	client/windows/record.cpp	/^inline WAVEHDR* WaveRecorder::wave_hader(uint32_t position)$/;"	f	class:WaveRecorder
wave_now	client/playback_channel.cpp	/^static uint8_t* wave_now = NULL;$/;"	v	file:
what	client/glz_decoder_config.h	/^    virtual const char* what() const throw () {return _mess.c_str();}$/;"	f	class:GlzException
what	client/utils.h	/^    virtual const char* what() const throw () {return _mess.c_str();}$/;"	f	class:Exception
what	spice-common/common/messages.h	/^    uint32_t what;$/;"	m	struct:SpiceMsgNotify
wheel	server/spice.h	/^    void (*wheel)(SpiceTabletInstance* tablet, int wheel_moution, uint32_t buttons_state);$/;"	m	struct:SpiceTabletInterface
while_loop	spice-common/python_modules/codegen.py	/^    def while_loop(self, expr):$/;"	m	class:CodeWriter
whiteness	server/red_parse_qxl.h	/^        SpiceWhiteness whiteness;$/;"	m	union:RedDrawable::__anon161
whiteness	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLWhiteness whiteness;$/;"	m	union:QXLCompatDrawable::__anon76
whiteness	spice-common/spice-protocol/spice/qxl_dev.h	/^        QXLWhiteness whiteness;$/;"	m	union:QXLDrawable::__anon77
width	client/glz_decoder.h	/^        int width;$/;"	m	struct:GlzDecoder::__anon112
width	client/red_types.h	/^    int width;$/;"	m	struct:IconHeader
width	client/red_types.h	/^    int width;$/;"	m	struct:PixmapHeader
width	client/x11/images/alt_image.c	/^        int width;$/;"	m	struct:__anon122	file:
width	client/x11/images/red_icon.c	/^    int width;$/;"	m	struct:__anon123	file:
width	client/x11/pixels_source_p.h	/^            int width, height;$/;"	m	struct:PixelsSource_p::__anon116::__anon118
width	client/x11/pixels_source_p.h	/^            int width, height;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
width	server/h264_type.h	/^    int width;$/;"	m	struct:_H264StreamInfo
width	server/jpeg_encoder.c	/^        int width;$/;"	m	struct:JpegEncoder::__anon167	file:
width	server/red_parse_qxl.h	/^    uint32_t width;$/;"	m	struct:RedSurfaceCreate
width	server/red_worker.c	/^    int width;$/;"	m	struct:ImageItem	file:
width	server/red_worker.c	/^    int width;$/;"	m	struct:ItemTrace	file:
width	server/red_worker.c	/^    int width;$/;"	m	struct:Stream	file:
width	server/red_worker.c	/^    uint32_t width;$/;"	m	struct:DrawContext	file:
width	server/spice.h	/^    uint32_t width;$/;"	m	struct:QXLDevSurfaceCreate
width	server/spice.h	/^    uint32_t width;$/;"	m	struct:QXLDrawArea
width	server/tests/test_display_base.h	/^    int width;$/;"	m	struct:Test
width	server/tests/test_display_base.h	/^    uint32_t width;$/;"	m	struct:CommandCreatePrimary
width	server/tests/test_display_base.h	/^    uint32_t width;$/;"	m	struct:CommandCreateSurface
width	spice-common/common/canvas_base.c	/^    int width;$/;"	m	struct:CanvasBase	file:
width	spice-common/common/draw.h	/^    uint16_t width;$/;"	m	struct:SpiceCursorHeader
width	spice-common/common/draw.h	/^    uint16_t width;$/;"	m	struct:SpiceRasterGlyph
width	spice-common/common/draw.h	/^    uint32_t width;$/;"	m	struct:SpiceImageDescriptor
width	spice-common/common/glc.c	/^    int width;$/;"	m	struct:FillMaskInfo	file:
width	spice-common/common/glc.c	/^    int width;$/;"	m	struct:InternaCtx	file:
width	spice-common/common/glc.c	/^    int width;$/;"	m	struct:InternalPat	file:
width	spice-common/common/glc.h	/^    double width;$/;"	m	struct:GLCRect
width	spice-common/common/glc.h	/^    int width;$/;"	m	struct:GLCPImage
width	spice-common/common/glc.h	/^    int width;$/;"	m	struct:GLCRecti
width	spice-common/common/lines.h	/^    int width;$/;"	m	struct:lineGC
width	spice-common/common/lz.c	/^    int width;                       \/\/ the original width (in pixels)$/;"	m	struct:Encoder	file:
width	spice-common/common/messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayHead
width	spice-common/common/messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgDisplayStreamDataSized
width	spice-common/common/messages.h	/^    uint32_t width;$/;"	m	struct:SpiceMsgSurfaceCreate
width	spice-common/common/quic.c	/^    unsigned int width;$/;"	m	struct:Encoder	file:
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLFIXED width;$/;"	m	struct:QXLLineAttr
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t width;$/;"	m	struct:QXLCursorHeader
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint16_t width;$/;"	m	struct:QXLRasterGlyph
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t width;$/;"	m	struct:QXLHead
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t width;$/;"	m	struct:QXLImageDescriptor
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t width;$/;"	m	struct:QXLSurface
width	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t width;$/;"	m	struct:QXLSurfaceCreate
width	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t width;$/;"	m	struct:VDAgentMonConfig
width_powed	client/x11/pixels_source_p.h	/^            int width_powed, height_powed;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
widths	spice-common/common/lines.c	/^    int *widths;                \/* pointer to list of widths        *\/$/;"	m	struct:__anon27	file:
will_overflow	client/glz_decoder_window.cpp	/^inline bool GlzDecoderWindow::will_overflow(uint64_t image_id, uint64_t relative_head_id)$/;"	f	class:GlzDecoderWindow
win	client/x11/pixels_source_p.h	/^            Win win;$/;"	m	struct:PixelsSource_p::__anon116::__anon120
win_class_name	client/windows/red_window.cpp	/^static const LPCWSTR win_class_name = L"redc_wclass";$/;"	v	file:
win_head_dist	client/glz_decoder.h	/^        int win_head_dist;$/;"	m	struct:GlzDecoder::__anon112
win_proc	client/x11/red_window.cpp	/^void RedWindow_p::win_proc(XEvent& event)$/;"	f	class:RedWindow_p
win_proc_context	client/x11/platform.cpp	/^static XContext win_proc_context;$/;"	v	file:
win_proc_t	client/x11/x_platform.h	/^    typedef void (*win_proc_t)(XEvent& event);$/;"	t	class:XPlatform
window	server/glz_encoder_dictionary_protected.h	/^    } window;$/;"	m	struct:SharedDictionary	typeref:struct:SharedDictionary::__anon170
window	spice-common/common/messages.h	/^    uint32_t window;$/;"	m	struct:SpiceMsgSetAck
window_area_from_attributes	client/x11/red_window.cpp	/^static void window_area_from_attributes(SpiceRect& area, XWindowAttributes& attrib)$/;"	f	file:
with_statement	spice-common/python_modules/codegen.py	/^from __future__ import with_statement$/;"	i
with_statement	spice-common/python_modules/demarshal.py	/^from __future__ import with_statement$/;"	i
with_statement	spice-common/python_modules/marshal.py	/^from __future__ import with_statement$/;"	i
wm_current_desktop	client/x11/red_window.cpp	/^static Atom wm_current_desktop;$/;"	v	file:
wm_delete_window_atom	client/x11/red_window.cpp	/^static Atom wm_delete_window_atom;$/;"	v	file:
wm_desktop	client/x11/red_window.cpp	/^static Atom wm_desktop;$/;"	v	file:
wm_protocol_atom	client/x11/red_window.cpp	/^static Atom wm_protocol_atom;$/;"	v	file:
wm_state	client/x11/red_window.cpp	/^static Atom wm_state;$/;"	v	file:
wm_state_above	client/x11/red_window.cpp	/^static Atom wm_state_above;$/;"	v	file:
wm_state_fullscreen	client/x11/red_window.cpp	/^static Atom wm_state_fullscreen;$/;"	v	file:
wm_trigger	spice-common/common/quic.c	/^    unsigned int wm_trigger;$/;"	m	struct:CommonState	file:
wm_user_time	client/x11/red_window.cpp	/^static Atom wm_user_time;$/;"	v	file:
wmidx	spice-common/common/quic.c	/^    unsigned int wmidx;$/;"	m	struct:CommonState	file:
wmileft	spice-common/common/quic.c	/^    unsigned int wmileft;$/;"	m	struct:CommonState	file:
wmimax	spice-common/common/quic.c	/^static int wmimax = DEFwmimax;$/;"	v	file:
wminext	spice-common/common/quic.c	/^static int wminext = DEFwminext;$/;"	v	file:
worker	server/red_worker.c	/^    RedWorker *worker;$/;"	m	struct:ShowTreeData	file:
worker	server/red_worker.c	/^    struct RedWorker *worker;$/;"	m	struct:CommonChannel	typeref:struct:CommonChannel::RedWorker	file:
worker	server/red_worker.c	/^    struct RedWorker *worker;$/;"	m	struct:CommonChannelClient	typeref:struct:CommonChannelClient::RedWorker	file:
worker	server/red_worker.c	/^    struct RedWorker *worker;$/;"	m	struct:MonitorsConfig	typeref:struct:MonitorsConfig::RedWorker	file:
worker	server/red_worker.c	/^    struct RedWorker *worker;$/;"	m	struct:SpiceWatch	typeref:struct:SpiceWatch::RedWorker	file:
worker	server/reds.h	/^    struct TunnelWorker *worker;$/;"	m	struct:SpiceNetWireState	typeref:struct:SpiceNetWireState::TunnelWorker
worker	server/snd_worker.c	/^    SndWorker *worker;$/;"	m	struct:SndChannel	file:
worker	server/snd_worker.c	/^    struct SndWorker worker;$/;"	m	struct:SpicePlaybackState	typeref:struct:SpicePlaybackState::SndWorker	file:
worker	server/snd_worker.c	/^    struct SndWorker worker;$/;"	m	struct:SpiceRecordState	typeref:struct:SpiceRecordState::SndWorker	file:
worker_core	server/red_worker.c	/^SpiceCoreInterface worker_core = {$/;"	v
worker_handle_dispatcher_async_done	server/red_worker.c	/^static void worker_handle_dispatcher_async_done(void *opaque,$/;"	f	file:
worker_main	client/red_channel.cpp	/^void* RedChannel::worker_main(void *data)$/;"	f	class:RedChannel
worker_main	client/red_client.cpp	/^void* Migrate::worker_main(void *data)$/;"	f	class:Migrate
worker_thread	server/red_dispatcher.c	/^    pthread_t worker_thread;$/;"	m	struct:RedDispatcher	file:
worker_update_monitors_config	server/red_worker.c	/^static void worker_update_monitors_config(RedWorker *worker,$/;"	f	file:
worker_watch_add	server/red_worker.c	/^static SpiceWatch *worker_watch_add(int fd, int event_mask, SpiceWatchFunc func, void *opaque)$/;"	f	file:
worker_watch_remove	server/red_worker.c	/^static void worker_watch_remove(SpiceWatch *watch)$/;"	f	file:
worker_watch_update_mask	server/red_worker.c	/^static void worker_watch_update_mask(SpiceWatch *watch, int event_mask)$/;"	f	file:
workers	server/snd_worker.c	/^static SndWorker *workers;$/;"	v	file:
write	client/read_write_mutex.h	/^        bool write;$/;"	m	struct:ReadWriteMutex::__anon114
write	client/windows/named_pipe.cpp	/^int32_t PipeWriter::write(const uint8_t *buf, int32_t size)$/;"	f	class:PipeWriter
write	client/windows/named_pipe.cpp	/^int32_t WinConnection::write(const uint8_t *buf, int32_t size)$/;"	f	class:WinConnection
write	client/windows/platform.cpp	/^int32_t NamedPipe::write(ConnectionRef conn_ref, const uint8_t *buf, int32_t size)$/;"	f	class:NamedPipe
write	client/windows/playback.cpp	/^bool WavePlayer::write(uint8_t* frame)$/;"	f	class:WavePlayer
write	client/x11/named_pipe.cpp	/^int32_t Session::write(const uint8_t *buf, int32_t size)$/;"	f	class:Session
write	client/x11/platform.cpp	/^int32_t NamedPipe::write(ConnectionRef conn_ref, const uint8_t* buf, int32_t size)$/;"	f	class:NamedPipe
write	client/x11/playback.cpp	/^bool WavePlayer::write(uint8_t* frame)$/;"	f	class:WavePlayer
write	server/reds_stream.c	/^    ssize_t (*write)(RedsStream *s, const void *buf, size_t nbyte);$/;"	m	struct:RedsStreamPrivate	file:
write	server/spice.h	/^    int (*write)(SpiceCharDeviceInstance *sin, const uint8_t *buf, int len);$/;"	m	struct:SpiceCharDeviceInterface
write	spice-common/python_modules/codegen.py	/^    def write(self, s):$/;"	m	class:CodeWriter
write_all	client/playback_channel.cpp	/^static void write_all(int fd, uint8_t* data, uint32_t size)$/;"	f	file:
write_array_marshaller	spice-common/python_modules/marshal.py	/^def write_array_marshaller(writer, member, array, container_src, scope):$/;"	f
write_array_parser	spice-common/python_modules/demarshal.py	/^def write_array_parser(writer, member, nelements, array, dest, scope):$/;"	f
write_buf	server/smartcard.c	/^    SpiceCharDeviceWriteBuffer *write_buf;$/;"	m	struct:SmartCardChannelClient	file:
write_buffers_queue_free	server/char_device.c	/^static void write_buffers_queue_free(Ring *write_queue)$/;"	f	file:
write_bufs_pool	server/char_device.c	/^    Ring write_bufs_pool;$/;"	m	struct:SpiceCharDeviceState	file:
write_channel_enums	spice-common/spice_codegen.py	/^def write_channel_enums(writer, channel, client, describe):$/;"	f
write_channel_parser	spice-common/python_modules/demarshal.py	/^def write_channel_parser(writer, channel, server):$/;"	f
write_channel_type_enum	spice-common/spice_codegen.py	/^def write_channel_type_enum(writer, describe=False):$/;"	f
write_container_marshaller	spice-common/python_modules/marshal.py	/^def write_container_marshaller(writer, container, src):$/;"	f
write_container_parser	spice-common/python_modules/demarshal.py	/^def write_container_parser(writer, container, dest):$/;"	f
write_data_ptr	server/migration_protocol.h	/^    uint32_t write_data_ptr; \/* offset from$/;"	m	struct:SpiceMigrateDataCharDevice
write_enums	spice-common/spice_codegen.py	/^def write_enums(writer, describe=False):$/;"	f
write_filter	server/reds-private.h	/^    AgentMsgFilter write_filter;$/;"	m	struct:VDIPortState
write_full_protocol_parser	spice-common/python_modules/demarshal.py	/^def write_full_protocol_parser(writer, is_server):$/;"	f
write_get_channel_parser	spice-common/python_modules/demarshal.py	/^def write_get_channel_parser(writer, channel_parsers, max_channel, is_server):$/;"	f
write_includes	spice-common/python_modules/demarshal.py	/^def write_includes(writer):$/;"	f
write_includes	spice-common/python_modules/marshal.py	/^def write_includes(writer):$/;"	f
write_int16	spice-common/common/generated_client_demarshallers.c	43;"	d	file:
write_int16	spice-common/common/generated_client_demarshallers.c	60;"	d	file:
write_int16	spice-common/common/generated_client_demarshallers1.c	43;"	d	file:
write_int16	spice-common/common/generated_client_demarshallers1.c	60;"	d	file:
write_int16	spice-common/common/generated_server_demarshallers.c	43;"	d	file:
write_int16	spice-common/common/generated_server_demarshallers.c	60;"	d	file:
write_int16	spice-common/common/marshaller.c	31;"	d	file:
write_int16	spice-common/common/marshaller.c	40;"	d	file:
write_int32	spice-common/common/generated_client_demarshallers.c	47;"	d	file:
write_int32	spice-common/common/generated_client_demarshallers.c	64;"	d	file:
write_int32	spice-common/common/generated_client_demarshallers1.c	47;"	d	file:
write_int32	spice-common/common/generated_client_demarshallers1.c	64;"	d	file:
write_int32	spice-common/common/generated_server_demarshallers.c	47;"	d	file:
write_int32	spice-common/common/generated_server_demarshallers.c	64;"	d	file:
write_int32	spice-common/common/marshaller.c	33;"	d	file:
write_int32	spice-common/common/marshaller.c	42;"	d	file:
write_int64	spice-common/common/generated_client_demarshallers.c	51;"	d	file:
write_int64	spice-common/common/generated_client_demarshallers.c	68;"	d	file:
write_int64	spice-common/common/generated_client_demarshallers1.c	51;"	d	file:
write_int64	spice-common/common/generated_client_demarshallers1.c	68;"	d	file:
write_int64	spice-common/common/generated_server_demarshallers.c	51;"	d	file:
write_int64	spice-common/common/generated_server_demarshallers.c	68;"	d	file:
write_int64	spice-common/common/marshaller.c	35;"	d	file:
write_int64	spice-common/common/marshaller.c	44;"	d	file:
write_int8	spice-common/common/generated_client_demarshallers.c	39;"	d	file:
write_int8	spice-common/common/generated_client_demarshallers.c	56;"	d	file:
write_int8	spice-common/common/generated_client_demarshallers1.c	39;"	d	file:
write_int8	spice-common/common/generated_client_demarshallers1.c	56;"	d	file:
write_int8	spice-common/common/generated_server_demarshallers.c	39;"	d	file:
write_int8	spice-common/common/generated_server_demarshallers.c	56;"	d	file:
write_int8	spice-common/common/marshaller.c	29;"	d	file:
write_int8	spice-common/common/marshaller.c	38;"	d	file:
write_io_word	spice-common/common/quic.c	/^static inline void write_io_word(Encoder *encoder)$/;"	f	file:
write_lock	client/read_write_mutex.h	/^    void write_lock()$/;"	f	class:ReadWriteMutex
write_marshal_ptr_function	spice-common/python_modules/marshal.py	/^def write_marshal_ptr_function(writer, target_type, is_helper=True):$/;"	f
write_member_marshaller	spice-common/python_modules/marshal.py	/^def write_member_marshaller(writer, container, member, src, scope):$/;"	f
write_member_parser	spice-common/python_modules/demarshal.py	/^def write_member_parser(writer, container, member, dest, scope):$/;"	f
write_message	server/red_worker.h	/^static inline void write_message(int fd, RedWorkerMessage *message)$/;"	f
write_message_marshaller	spice-common/python_modules/marshal.py	/^def write_message_marshaller(writer, message, is_server, private):$/;"	f
write_msg	client/controller.cpp	/^bool ControllerConnection::write_msg(const void *buf, int len)$/;"	f	class:ControllerConnection
write_msg	client/foreign_menu.cpp	/^bool ForeignMenuConnection::write_msg(const void *buf, int len)$/;"	f	class:ForeignMenuConnection
write_msg_parser	spice-common/python_modules/demarshal.py	/^def write_msg_parser(writer, message):$/;"	f
write_nofree	spice-common/python_modules/demarshal.py	/^def write_nofree(writer):$/;"	f
write_num_client_tokens	server/migration_protocol.h	/^    uint32_t write_num_client_tokens; \/* how many messages from the client are part of the write_data *\/$/;"	m	struct:SpiceMigrateDataCharDevice
write_parse_pointer	spice-common/python_modules/demarshal.py	/^def write_parse_pointer(writer, t, at_end, dest, member_name, scope):$/;"	f
write_parse_pointer_core	spice-common/python_modules/demarshal.py	/^def write_parse_pointer_core(writer, target_type, offset, at_end, dest, member_name, scope):$/;"	f
write_parse_ptr_function	spice-common/python_modules/demarshal.py	/^def write_parse_ptr_function(writer, target_type):$/;"	f
write_parse_to_pointer	spice-common/python_modules/demarshal.py	/^def write_parse_to_pointer(writer, t, at_end, dest, member_name, scope):$/;"	f
write_parser_helpers	spice-common/python_modules/demarshal.py	/^def write_parser_helpers(writer):$/;"	f
write_pointer_marshaller	spice-common/python_modules/marshal.py	/^def write_pointer_marshaller(writer, member, src):$/;"	f
write_pos	server/snd_worker.c	/^    uint32_t write_pos;$/;"	m	struct:RecordChannel	file:
write_protocol_marshaller	spice-common/python_modules/marshal.py	/^def write_protocol_marshaller(writer, proto, is_server, private_marshallers):$/;"	f
write_protocol_parser	spice-common/python_modules/demarshal.py	/^def write_protocol_parser(writer, proto, is_server):$/;"	f
write_ptr_info_check	spice-common/python_modules/demarshal.py	/^def write_ptr_info_check(writer):$/;"	f
write_queue	server/char_device.c	/^    Ring write_queue;$/;"	m	struct:SpiceCharDeviceState	file:
write_read_primitive	spice-common/python_modules/demarshal.py	/^def write_read_primitive(writer, start, container, name, scope):$/;"	f
write_read_primitive_item	spice-common/python_modules/demarshal.py	/^def write_read_primitive_item(writer, item, scope):$/;"	f
write_safe	server/dispatcher.c	/^static int write_safe(int fd, uint8_t *buf, size_t size)$/;"	f	file:
write_size	server/migration_protocol.h	/^    uint32_t write_size; \/* write to dev *\/$/;"	m	struct:SpiceMigrateDataCharDevice
write_switch_marshaller	spice-common/python_modules/marshal.py	/^def write_switch_marshaller(writer, container, switch, src, scope):$/;"	f
write_switch_parser	spice-common/python_modules/demarshal.py	/^def write_switch_parser(writer, container, switch, dest, scope):$/;"	f
write_to_dev_timer	server/char_device.c	/^    SpiceTimer *write_to_dev_timer;$/;"	m	struct:SpiceCharDeviceState	file:
write_trailer	spice-common/python_modules/marshal.py	/^def write_trailer(writer):$/;"	f
write_uint16	spice-common/common/generated_client_demarshallers.c	45;"	d	file:
write_uint16	spice-common/common/generated_client_demarshallers.c	62;"	d	file:
write_uint16	spice-common/common/generated_client_demarshallers1.c	45;"	d	file:
write_uint16	spice-common/common/generated_client_demarshallers1.c	62;"	d	file:
write_uint16	spice-common/common/generated_server_demarshallers.c	45;"	d	file:
write_uint16	spice-common/common/generated_server_demarshallers.c	62;"	d	file:
write_uint16	spice-common/common/marshaller.c	32;"	d	file:
write_uint16	spice-common/common/marshaller.c	41;"	d	file:
write_uint32	spice-common/common/generated_client_demarshallers.c	49;"	d	file:
write_uint32	spice-common/common/generated_client_demarshallers.c	66;"	d	file:
write_uint32	spice-common/common/generated_client_demarshallers1.c	49;"	d	file:
write_uint32	spice-common/common/generated_client_demarshallers1.c	66;"	d	file:
write_uint32	spice-common/common/generated_server_demarshallers.c	49;"	d	file:
write_uint32	spice-common/common/generated_server_demarshallers.c	66;"	d	file:
write_uint32	spice-common/common/marshaller.c	34;"	d	file:
write_uint32	spice-common/common/marshaller.c	43;"	d	file:
write_uint64	spice-common/common/generated_client_demarshallers.c	53;"	d	file:
write_uint64	spice-common/common/generated_client_demarshallers.c	70;"	d	file:
write_uint64	spice-common/common/generated_client_demarshallers1.c	53;"	d	file:
write_uint64	spice-common/common/generated_client_demarshallers1.c	70;"	d	file:
write_uint64	spice-common/common/generated_server_demarshallers.c	53;"	d	file:
write_uint64	spice-common/common/generated_server_demarshallers.c	70;"	d	file:
write_uint64	spice-common/common/marshaller.c	36;"	d	file:
write_uint64	spice-common/common/marshaller.c	45;"	d	file:
write_uint8	spice-common/common/generated_client_demarshallers.c	41;"	d	file:
write_uint8	spice-common/common/generated_client_demarshallers.c	58;"	d	file:
write_uint8	spice-common/common/generated_client_demarshallers1.c	41;"	d	file:
write_uint8	spice-common/common/generated_client_demarshallers1.c	58;"	d	file:
write_uint8	spice-common/common/generated_server_demarshallers.c	41;"	d	file:
write_uint8	spice-common/common/generated_server_demarshallers.c	58;"	d	file:
write_uint8	spice-common/common/marshaller.c	30;"	d	file:
write_uint8	spice-common/common/marshaller.c	39;"	d	file:
write_unlock	client/read_write_mutex.h	/^    void write_unlock()$/;"	f	class:ReadWriteMutex
write_validate_array_item	spice-common/python_modules/demarshal.py	/^def write_validate_array_item(writer, container, item, scope, parent_scope, start,$/;"	f
write_validate_container	spice-common/python_modules/demarshal.py	/^def write_validate_container(writer, prefix, container, start, parent_scope, want_nw_size, want_mem_size, want_extra_size):$/;"	f
write_validate_item	spice-common/python_modules/demarshal.py	/^def write_validate_item(writer, container, item, scope, parent_scope, start,$/;"	f
write_validate_member	spice-common/python_modules/demarshal.py	/^def write_validate_member(writer, container, member, parent_scope, start,$/;"	f
write_validate_pointer_item	spice-common/python_modules/demarshal.py	/^def write_validate_pointer_item(writer, container, item, scope, parent_scope, start,$/;"	f
write_validate_primitive_item	spice-common/python_modules/demarshal.py	/^def write_validate_primitive_item(writer, container, item, scope, parent_scope, start,$/;"	f
write_validate_struct_function	spice-common/python_modules/demarshal.py	/^def write_validate_struct_function(writer, struct):$/;"	f
write_validate_struct_item	spice-common/python_modules/demarshal.py	/^def write_validate_struct_item(writer, container, item, scope, parent_scope, start,$/;"	f
write_validate_switch_member	spice-common/python_modules/demarshal.py	/^def write_validate_switch_member(writer, container, switch_member, scope, parent_scope, start,$/;"	f
write_waiting	client/read_write_mutex.h	/^        bool write_waiting;$/;"	m	struct:ReadWriteMutex::__anon114
write_wave	client/playback_channel.cpp	/^static void write_wave()$/;"	f	file:
write_write_primitive	spice-common/python_modules/demarshal.py	/^def write_write_primitive(writer, start, container, name, val):$/;"	f
writeln	spice-common/python_modules/codegen.py	/^    def writeln(self, s):$/;"	m	class:CodeWriter
writer	spice-common/spice_codegen.py	/^writer = codegen.CodeWriter()$/;"	v
writev	server/reds_stream.c	/^    ssize_t (*writev)(RedsStream *s, const struct iovec *iov, int iovcnt);$/;"	m	struct:RedsStreamPrivate	file:
x	spice-common/common/draw.h	/^    SPICE_FIXED28_4 x;$/;"	m	struct:SpicePointFix
x	spice-common/common/draw.h	/^    int16_t x;$/;"	m	struct:SpicePoint16
x	spice-common/common/draw.h	/^    int32_t x;$/;"	m	struct:SpicePoint
x	spice-common/common/draw.h	/^    uint32_t x;$/;"	m	struct:SpiceBitmap
x	spice-common/common/glc.c	/^    double x;$/;"	m	struct:PathPoint	file:
x	spice-common/common/glc.c	/^    double x;$/;"	m	struct:PathStroke	file:
x	spice-common/common/glc.h	/^    double x;$/;"	m	struct:GLCRect
x	spice-common/common/glc.h	/^    int x;$/;"	m	struct:GLCRecti
x	spice-common/common/lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:
x	spice-common/common/lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:
x	spice-common/common/lines.c	/^    int x;                      \/* starting x coordinate *\/$/;"	m	struct:_PolyEdge	file:
x	spice-common/common/messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgDisplayHead
x	spice-common/common/messages.h	/^    uint32_t x;$/;"	m	struct:SpiceMsgcMousePosition
x	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLFIXED x;$/;"	m	struct:QXLPointFix
x	spice-common/spice-protocol/spice/qxl_dev.h	/^    int16_t x;$/;"	m	struct:QXLPoint16
x	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t x;$/;"	m	struct:QXLPoint
x	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t x;$/;"	m	struct:QXLBitmap
x	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t x;$/;"	m	struct:QXLHead
x	spice-common/spice-protocol/spice/vd_agent.h	/^    int32_t x;$/;"	m	struct:VDAgentMonConfig
x	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t x;$/;"	m	struct:VDAgentMouseState
x16	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSanaxx, (~(*pat & *src) & *dest) ^ *src ^ *pat, 0x16);$/;"	v
x86	spice-common/common/rop3.c	/^ROP3_HANDLERS(DSPDSoaxx, ((*src | *dest) & *pat) ^ *src ^ *dest, 0x86);$/;"	v
x92	spice-common/common/rop3.c	/^ROP3_HANDLERS(DPSDPoaxx, ((*pat | *dest) & *src) ^ *pat ^ *dest, 0x92);$/;"	v
x94	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSoaxx, ((*src | *pat) & *dest) ^ *src ^ *pat, 0x94);$/;"	v
x97	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSonoxx, (~(*src | *pat) | *dest) ^ *src ^ *pat, 0x97);$/;"	v
x9e	spice-common/common/rop3.c	/^ROP3_HANDLERS(DSPDSaoxx, ((*src & *dest) | *pat) ^ *src ^ *dest, 0x9e);$/;"	v
xRectangle	spice-common/common/lines.c	/^typedef pixman_rectangle32_t xRectangle;$/;"	t	file:
x_dest	spice-common/common/glc.c	/^    int x_dest;$/;"	m	struct:FillMaskInfo	file:
x_display	client/x11/platform.cpp	/^static Display* x_display = NULL;$/;"	v	file:
x_display	client/x11/red_window.cpp	/^static Display* x_display = NULL;$/;"	v	file:
x_display	spice-common/common/ogl_ctx.c	/^    Display *x_display;$/;"	m	struct:OGLCtx	file:
x_drawable	client/x11/pixels_source_p.h	/^        } x_drawable;$/;"	m	union:PixelsSource_p::__anon116	typeref:struct:PixelsSource_p::__anon116::__anon118
x_error	client/x11/red_window.cpp	/^static unsigned char x_error = Success;$/;"	v	file:
x_error_code	client/x11/platform.cpp	/^static int x_error_code;$/;"	v	file:
x_error_handler	client/x11/platform.cpp	/^static int x_error_handler(Display* display, XErrorEvent* error_event)$/;"	f	file:
x_error_handler	client/x11/red_window.cpp	/^static int x_error_handler(Display* display, XErrorEvent* error_event)$/;"	f	file:
x_image	client/x11/pixels_source_p.h	/^            XImage* x_image;$/;"	m	struct:PixelsSource_p::__anon116::__anon117
x_input_context	client/x11/platform.cpp	/^static XIC x_input_context = NULL;$/;"	v	file:
x_input_context	client/x11/red_window.cpp	/^static XIC x_input_context = NULL;$/;"	v	file:
x_input_method	client/x11/platform.cpp	/^static XIM x_input_method = NULL;$/;"	v	file:
x_io_error_handler	client/x11/platform.cpp	/^static SPICE_GNUC_NORETURN int x_io_error_handler(Display* display)$/;"	f	file:
x_mili	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t x_mili;$/;"	m	struct:QXLMode
x_orign	spice-common/common/glc.c	/^    int x_orign;$/;"	m	struct:InternalPat	file:
x_res	server/red_dispatcher.c	/^    int x_res;$/;"	m	struct:RedDispatcher	file:
x_res	server/red_dispatcher.c	/^    uint32_t x_res;$/;"	m	struct:RedWorkeState	file:
x_res	server/reds-private.h	/^    uint32_t x_res;$/;"	m	struct:MonitorMode
x_res	server/spice.h	/^    uint32_t x_res;$/;"	m	struct:QXLDevInfo
x_res	spice-common/common/messages.h	/^    uint32_t x_res;$/;"	m	struct:SpiceMsgDisplayMode
x_res	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t x_res;$/;"	m	struct:QXLMode
x_shm_avail	client/x11/platform.cpp	/^static bool x_shm_avail = false;$/;"	v	file:
xa	spice-common/common/lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:
xalloc	spice-common/common/lines.c	64;"	d	file:
xb6	spice-common/common/rop3.c	/^ROP3_HANDLERS(DPSDPaoxx, ((*pat & *dest) | *src) ^ *pat ^ *dest, 0xb6);$/;"	v
xd6	spice-common/common/rop3.c	/^ROP3_HANDLERS(PSDPSaoxx, ((*src & *pat) | *dest) ^ *src ^ *pat, 0xd6);$/;"	v
xfixes_error_base	client/x11/platform.cpp	/^static int xfixes_error_base;$/;"	v	file:
xfixes_event_base	client/x11/platform.cpp	/^static int xfixes_event_base;$/;"	v	file:
xfree	spice-common/common/lines.c	66;"	d	file:
xlatL2U	spice-common/common/quic.c	/^    unsigned int xlatL2U[256];$/;"	m	struct:QuicFamily	file:
xlatU2L	spice-common/common/quic.c	/^    BYTE xlatU2L[256];$/;"	m	struct:QuicFamily	file:
xrandr_error_base	client/x11/platform.cpp	/^static int xrandr_error_base;$/;"	v	file:
xrandr_event_base	client/x11/platform.cpp	/^static int xrandr_event_base;$/;"	v	file:
xrandr_major	client/x11/platform.cpp	/^static int xrandr_major = 0;$/;"	v	file:
xrandr_minor	client/x11/platform.cpp	/^static int xrandr_minor = 0;$/;"	v	file:
xrealloc	spice-common/common/lines.c	65;"	d	file:
xres	spice-common/spice-protocol/spice/qxl_windows.h	/^    uint32_t xres;$/;"	m	struct:QXLEscapeSetCustomDisplay
y	spice-common/common/draw.h	/^    SPICE_FIXED28_4 y;$/;"	m	struct:SpicePointFix
y	spice-common/common/draw.h	/^    int16_t y;$/;"	m	struct:SpicePoint16
y	spice-common/common/draw.h	/^    int32_t y;$/;"	m	struct:SpicePoint
y	spice-common/common/draw.h	/^    uint32_t y;$/;"	m	struct:SpiceBitmap
y	spice-common/common/glc.c	/^    double y;$/;"	m	struct:PathPoint	file:
y	spice-common/common/glc.c	/^    double y;$/;"	m	struct:PathStroke	file:
y	spice-common/common/glc.h	/^    double y;$/;"	m	struct:GLCRect
y	spice-common/common/glc.h	/^    int y;$/;"	m	struct:GLCRecti
y	spice-common/common/lines.c	/^    double x, y;$/;"	m	struct:_PolyVertex	file:
y	spice-common/common/lines.c	/^    int x, y;$/;"	m	struct:_LineFace	file:
y	spice-common/common/messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgDisplayHead
y	spice-common/common/messages.h	/^    uint32_t y;$/;"	m	struct:SpiceMsgcMousePosition
y	spice-common/spice-protocol/spice/qxl_dev.h	/^    QXLFIXED y;$/;"	m	struct:QXLPointFix
y	spice-common/spice-protocol/spice/qxl_dev.h	/^    int16_t y;$/;"	m	struct:QXLPoint16
y	spice-common/spice-protocol/spice/qxl_dev.h	/^    int32_t y;$/;"	m	struct:QXLPoint
y	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t y;$/;"	m	struct:QXLBitmap
y	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t y;$/;"	m	struct:QXLHead
y	spice-common/spice-protocol/spice/vd_agent.h	/^    int32_t y;$/;"	m	struct:VDAgentMonConfig
y	spice-common/spice-protocol/spice/vd_agent.h	/^    uint32_t y;$/;"	m	struct:VDAgentMouseState
y_dest	spice-common/common/glc.c	/^    int y_dest;$/;"	m	struct:FillMaskInfo	file:
y_mili	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t y_mili;$/;"	m	struct:QXLMode
y_orign	spice-common/common/glc.c	/^    int y_orign;$/;"	m	struct:InternalPat	file:
y_res	server/red_dispatcher.c	/^    int y_res;$/;"	m	struct:RedDispatcher	file:
y_res	server/red_dispatcher.c	/^    uint32_t y_res;$/;"	m	struct:RedWorkeState	file:
y_res	server/reds-private.h	/^    uint32_t y_res;$/;"	m	struct:MonitorMode
y_res	server/spice.h	/^    uint32_t y_res;$/;"	m	struct:QXLDevInfo
y_res	spice-common/common/messages.h	/^    uint32_t y_res;$/;"	m	struct:SpiceMsgDisplayMode
y_res	spice-common/spice-protocol/spice/qxl_dev.h	/^    uint32_t y_res;$/;"	m	struct:QXLMode
ya	spice-common/common/lines.c	/^    double xa, ya;$/;"	m	struct:_LineFace	file:
yield	client/windows/platform.cpp	/^void Platform::yield()$/;"	f	class:Platform
yield	client/x11/platform.cpp	/^void Platform::yield()$/;"	f	class:Platform
ymax	spice-common/common/lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon28	file:
ymin	spice-common/common/lines.c	/^    int ymin, ymax;             \/* Min, max y values encountered        *\/$/;"	m	struct:__anon28	file:
yres	spice-common/spice-protocol/spice/qxl_windows.h	/^    uint32_t yres;$/;"	m	struct:QXLEscapeSetCustomDisplay
yuvframe	server/h264_encoder.h	/^   AVFrame *yuvframe;$/;"	m	struct:_H264Encoder
z	client/gui/softrenderer.h	/^            float z;$/;"	m	struct:CEGUI::SoftRenderer::QuadInfo
z	spice-common/common/glc.c	/^    double z;$/;"	m	struct:PathPoint	file:
z_order	client/screen_layer.h	/^    int z_order() { return _z_order;}$/;"	f	class:ScreenLayer
zeroLUT	spice-common/common/quic.c	/^static int zeroLUT[256]; \/* table to find out number of leading zeros *\/$/;"	v	file:
zero_page	server/main_channel.c	/^static uint8_t zero_page[ZERO_BUF_SIZE] = {0};$/;"	v	file:
zlib	server/red_worker.c	/^    ZlibEncoder *zlib;$/;"	m	struct:RedWorker	file:
zlib	spice-common/common/canvas_base.c	/^    SpiceZlibDecoder* zlib;$/;"	m	struct:CanvasBase	file:
zlib_data	server/red_worker.c	/^    ZlibData zlib_data;$/;"	m	struct:RedWorker	file:
zlib_decoder	client/canvas.h	/^    ZlibDecoder& zlib_decoder() { return _zlib_decoder;}$/;"	f	class:Canvas
zlib_encode	server/zlib_encoder.c	/^int zlib_encode(ZlibEncoder *zlib, int level, int input_size,$/;"	f
zlib_encoder_create	server/zlib_encoder.c	/^ZlibEncoder* zlib_encoder_create(ZlibEncoderUsrContext *usr, int level)$/;"	f
zlib_encoder_destroy	server/zlib_encoder.c	/^void zlib_encoder_destroy(ZlibEncoder *encoder)$/;"	f
zlib_glz	spice-common/common/draw.h	/^        SpiceZlibGlzRGBData zlib_glz;$/;"	m	union:SpiceImage::__anon35
zlib_glz_stat	server/red_worker.c	/^    stat_info_t zlib_glz_stat;$/;"	m	struct:DisplayChannel	file:
zlib_glz_state	server/red_worker.c	/^    spice_wan_compression_t zlib_glz_state;$/;"	m	struct:RedWorker	file:
zlib_glz_state	server/red_worker.h	/^    spice_wan_compression_t zlib_glz_state;$/;"	m	struct:WorkerInitData
zlib_glz_state	server/reds.c	/^spice_wan_compression_t zlib_glz_state = SPICE_WAN_COMPRESSION_AUTO;$/;"	v
zlib_level	server/red_worker.c	/^    int zlib_level;$/;"	m	struct:DisplayChannel	file:
zlib_stat_name	server/red_worker.c	/^static const char *zlib_stat_name = "zlib_glz";$/;"	v	file:
zlib_usr_more_input	server/red_worker.c	/^static int zlib_usr_more_input(ZlibEncoderUsrContext *usr, uint8_t** input)$/;"	f	file:
zlib_usr_more_space	server/red_worker.c	/^static int zlib_usr_more_space(ZlibEncoderUsrContext *usr, uint8_t **io_ptr)$/;"	f	file:
~AbstractProcessLoop	client/process_loop.h	/^    virtual ~AbstractProcessLoop() {}$/;"	f	class:AbstractProcessLoop
~AlphaImageFromRes	client/windows/pixels_source.cpp	/^AlphaImageFromRes::~AlphaImageFromRes()$/;"	f	class:AlphaImageFromRes
~AlphaImageFromRes	client/x11/pixels_source.cpp	/^AlphaImageFromRes::~AlphaImageFromRes()$/;"	f	class:AlphaImageFromRes
~Application	client/application.cpp	/^Application::~Application()$/;"	f	class:Application
~AutoAbort	client/application.cpp	/^    ~AutoAbort() { _app.abort();}$/;"	f	class:AutoAbort
~AutoArray	client/utils.h	/^    ~AutoArray() { delete[] _array;}$/;"	f	class:AutoArray
~AutoMessage	client/red_channel.cpp	/^    ~AutoMessage() {if (_message) _message->release();}$/;"	f	class:AutoMessage
~AutoRef	client/utils.h	/^    ~AutoRef() { if (_obj) _obj->unref();}$/;"	f	class:AutoRef
~AutoRes	client/windows/platform_utils.h	/^    ~AutoRes() { set(invalid); }$/;"	f	class:AutoRes
~AutoXErrorHandler	client/x11/red_window.cpp	/^    ~AutoXErrorHandler()$/;"	f	class:AutoXErrorHandler
~BoxResponse	client/gui/gui.h	/^        virtual ~BoxResponse() {}$/;"	f	class:GUI::BoxResponse
~Cache	client/cache.hpp	/^    ~Cache()$/;"	f	class:Cache
~CachedPalette	client/canvas.h	/^    ~CachedPalette()$/;"	f	class:CachedPalette
~Canvas	client/canvas.cpp	/^Canvas::~Canvas()$/;"	f	class:Canvas
~ChannelFactory	client/red_client.h	/^    virtual ~ChannelFactory() {}$/;"	f	class:ChannelFactory
~ClientNetSocket	client/client_net_socket.cpp	/^ClientNetSocket::~ClientNetSocket()$/;"	f	class:ClientNetSocket
~ClipboardGrabEvent	client/red_client.h	/^    ~ClipboardGrabEvent()$/;"	f	class:ClipboardGrabEvent
~ClipboardListener	client/platform.h	/^    virtual ~ClipboardListener() {}$/;"	f	class:Platform::ClipboardListener
~ClipboardNotifyEvent	client/red_client.h	/^    ~ClipboardNotifyEvent()$/;"	f	class:ClipboardNotifyEvent
~CmdLineParser	client/cmd_line_parser.cpp	/^CmdLineParser::~CmdLineParser()$/;"	f	class:CmdLineParser
~CommandTarget	client/menu.h	/^    virtual ~CommandTarget() {}$/;"	f	class:CommandTarget
~CompoundInMessage	client/red_peer.h	/^    virtual ~CompoundInMessage() { delete[] _data;}$/;"	f	class:RedPeer::CompoundInMessage
~Condition	client/threads.h	/^    ~Condition()$/;"	f	class:Condition
~ConnectionInterface	client/platform.h	/^        virtual ~ConnectionInterface() {}$/;"	f	class:NamedPipe::ConnectionInterface
~ConnectionOptions	client/red_peer.h	/^        virtual ~ConnectionOptions() {}$/;"	f	class:RedPeer::ConnectionOptions
~ConsoleWait	client/windows/platform.cpp	/^    ~ConsoleWait()$/;"	f	class:ConsoleWait
~Controller	client/controller.cpp	/^Controller::~Controller()$/;"	f	class:Controller
~ControllerConnection	client/controller.cpp	/^ControllerConnection::~ControllerConnection()$/;"	f	class:ControllerConnection
~ControllerInterface	client/controller.h	/^    virtual ~ControllerInterface() {}$/;"	f	class:ControllerInterface
~CursorChannel	client/cursor_channel.cpp	/^CursorChannel::~CursorChannel()$/;"	f	class:CursorChannel
~CursorData	client/cursor.cpp	/^CursorData::~CursorData()$/;"	f	class:CursorData
~CursorOpaque	client/cursor.h	/^    virtual ~CursorOpaque() {}$/;"	f	class:CursorOpaque
~Dialog	client/gui/gui.cpp	/^    virtual ~Dialog()$/;"	f	class:GUI::Dialog
~DisplayChannel	client/display_channel.cpp	/^DisplayChannel::~DisplayChannel()$/;"	f	class:DisplayChannel
~DisplayModeListener	client/platform.h	/^    virtual ~DisplayModeListener() {}$/;"	f	class:Platform::DisplayModeListener
~DynamicScreen	client/x11/platform.cpp	/^DynamicScreen::~DynamicScreen()$/;"	f	class:DynamicScreen
~EventBase	client/process_loop.h	/^    virtual ~EventBase() {}$/;"	f	class:EventBase
~EventHandler	client/client_net_socket.h	/^    virtual ~EventHandler() {}$/;"	f	class:ClientNetSocket::EventHandler
~EventListener	client/platform.h	/^    virtual ~EventListener() {}$/;"	f	class:Platform::EventListener
~EventSource	client/event_sources.h	/^    virtual ~EventSource() {}$/;"	f	class:EventSource
~EventSources	client/windows/event_sources_p.cpp	/^EventSources::~EventSources()$/;"	f	class:EventSources
~EventSources	client/x11/event_sources_p.cpp	/^EventSources::~EventSources()$/;"	f	class:EventSources
~EventsQueue	client/process_loop.cpp	/^EventsQueue::~EventsQueue()$/;"	f	class:EventsQueue
~Exception	client/utils.h	/^    virtual ~Exception() throw () {}$/;"	f	class:Exception
~ForeignMenu	client/foreign_menu.cpp	/^ForeignMenu::~ForeignMenu()$/;"	f	class:ForeignMenu
~ForeignMenuConnection	client/foreign_menu.cpp	/^ForeignMenuConnection::~ForeignMenuConnection()$/;"	f	class:ForeignMenuConnection
~ForeignMenuInterface	client/foreign_menu.h	/^    virtual ~ForeignMenuInterface() {}$/;"	f	class:ForeignMenuInterface
~GCanvas	client/red_gl_canvas.cpp	/^GCanvas::~GCanvas()$/;"	f	class:GCanvas
~GDICanvas	client/red_gdi_canvas.cpp	/^GDICanvas::~GDICanvas()$/;"	f	class:GDICanvas
~GUI	client/gui/gui.cpp	/^GUI::~GUI()$/;"	f	class:GUI
~GUIBarrier	client/application.cpp	/^    ~GUIBarrier()$/;"	f	class:GUIBarrier
~GlzDecodeHandler	client/glz_decoder.h	/^    virtual ~GlzDecodeHandler() {}$/;"	f	class:GlzDecodeHandler
~GlzDecodedImage	client/glz_decoded_image.h	/^    virtual ~GlzDecodedImage() {}$/;"	f	class:GlzDecodedImage
~GlzDecodedSurface	client/canvas.h	/^    virtual ~GlzDecodedSurface()$/;"	f	class:GlzDecodedSurface
~GlzDecoder	client/glz_decoder.cpp	/^GlzDecoder::~GlzDecoder()$/;"	f	class:GlzDecoder
~GlzDecoderDebug	client/glz_decoder_config.h	/^    virtual ~GlzDecoderDebug() {}$/;"	f	class:GlzDecoderDebug
~GlzDecoderWindow	client/glz_decoder_window.cpp	/^GlzDecoderWindow::~GlzDecoderWindow()$/;"	f	class:GlzDecoderWindow
~GlzException	client/glz_decoder_config.h	/^    virtual ~GlzException() throw () {}$/;"	f	class:GlzException
~Handle_p	client/windows/event_sources_p.cpp	/^Handle_p::~Handle_p()$/;"	f	class:Handle_p
~Icon	client/icon.h	/^    virtual ~Icon() {}$/;"	f	class:Icon
~ImageFromRes	client/windows/pixels_source.cpp	/^ImageFromRes::~ImageFromRes()$/;"	f	class:ImageFromRes
~ImageFromRes	client/x11/pixels_source.cpp	/^ImageFromRes::~ImageFromRes()$/;"	f	class:ImageFromRes
~InMessage	client/red_peer.h	/^    virtual ~InMessage() {}$/;"	f	class:RedPeer::InMessage
~InputsChannel	client/inputs_channel.cpp	/^InputsChannel::~InputsChannel()$/;"	f	class:InputsChannel
~Item	client/cache.hpp	/^        ~Item()$/;"	f	class:Cache::Item
~Item	client/shared_cache.hpp	/^        ~Item()$/;"	f	class:SharedCache::Item
~JpegDecoder	client/jpeg_decoder.cpp	/^JpegDecoder::~JpegDecoder()$/;"	f	class:JpegDecoder
~KeyHandler	client/inputs_handler.h	/^    virtual ~KeyHandler() {}$/;"	f	class:KeyHandler
~LinuxListener	client/x11/named_pipe.cpp	/^LinuxListener::~LinuxListener()$/;"	f	class:LinuxListener
~Listener	client/red_window.h	/^    virtual ~Listener() {}$/;"	f	class:RedWindow::Listener
~ListenerInterface	client/platform.h	/^        virtual ~ListenerInterface() {}$/;"	f	class:NamedPipe::ListenerInterface
~LocalCursor	client/cursor.h	/^    virtual ~LocalCursor() {}$/;"	f	class:LocalCursor
~Lock	client/threads.h	/^    ~Lock()$/;"	f	class:Lock
~MJpegDecoder	client/mjpeg_decoder.cpp	/^MJpegDecoder::~MJpegDecoder()$/;"	f	class:MJpegDecoder
~Menu	client/menu.cpp	/^Menu::~Menu()$/;"	f	class:Menu
~MessageDialog	client/gui/gui.cpp	/^    virtual ~MessageDialog() {}$/;"	f	class:MessageDialog
~MessageHandler	client/red_channel.h	/^    virtual ~MessageHandler() {}$/;"	f	class:RedChannel::MessageHandler
~MessageHandlerImp	client/red_channel.h	/^    ~MessageHandlerImp() { delete [] _handlers; };$/;"	f	class:MessageHandlerImp
~Migrate	client/red_client.cpp	/^Migrate::~Migrate()$/;"	f	class:Migrate
~Monitor	client/monitor.h	/^    virtual ~Monitor() {}$/;"	f	class:Monitor
~MouseHandler	client/inputs_handler.h	/^    virtual ~MouseHandler() {}$/;"	f	class:MouseHandler
~MultyMonScreen	client/x11/platform.cpp	/^MultyMonScreen::~MultyMonScreen()$/;"	f	class:MultyMonScreen
~Mutex	client/threads.cpp	/^Mutex::~Mutex()$/;"	f	class:Mutex
~OutMessage	client/red_channel.h	/^    virtual ~OutMessage() {}$/;"	f	class:RedChannel::OutMessage
~OutMessage	client/red_peer.cpp	/^RedPeer::OutMessage::~OutMessage()$/;"	f	class:RedPeer::OutMessage
~PipeBuffer	client/windows/named_pipe.cpp	/^PipeBuffer::~PipeBuffer()$/;"	f	class:PipeBuffer
~PixelsSource	client/windows/pixels_source.cpp	/^PixelsSource::~PixelsSource()$/;"	f	class:PixelsSource
~PixelsSource	client/x11/pixels_source.cpp	/^PixelsSource::~PixelsSource()$/;"	f	class:PixelsSource
~PlaybackChannel	client/playback_channel.cpp	/^PlaybackChannel::~PlaybackChannel(void)$/;"	f	class:PlaybackChannel
~PreLoginDialog	client/gui/gui.cpp	/^    virtual ~PreLoginDialog() { delete _login_dialog;}$/;"	f	class:PreLoginDialog
~ProcessLoop	client/process_loop.cpp	/^ProcessLoop::~ProcessLoop()$/;"	f	class:ProcessLoop
~RGBConverter	client/jpeg_decoder.h	/^    virtual ~RGBConverter() {}$/;"	f	class:RGBConverter
~ReadWriteMutex	client/read_write_mutex.h	/^    virtual ~ReadWriteMutex()$/;"	f	class:ReadWriteMutex
~ReceiveBuffer	client/client_net_socket.h	/^    virtual ~ReceiveBuffer() {}$/;"	f	class:ClientNetSocket::ReceiveBuffer
~RecordChannel	client/record_channel.cpp	/^RecordChannel::~RecordChannel(void)$/;"	f	class:RecordChannel
~RecordClient	client/platform.h	/^    virtual ~RecordClient() {}$/;"	f	class:Platform::RecordClient
~RecordSamplesMessage	client/record_channel.cpp	/^RecordSamplesMessage::~RecordSamplesMessage()$/;"	f	class:RecordSamplesMessage
~RedChannel	client/red_channel.cpp	/^RedChannel::~RedChannel()$/;"	f	class:RedChannel
~RedChannelBase	client/red_channel.cpp	/^RedChannelBase::~RedChannelBase()$/;"	f	class:RedChannelBase
~RedClient	client/red_client.cpp	/^RedClient::~RedClient()$/;"	f	class:RedClient
~RedDrawable	client/red_drawable.h	/^    virtual ~RedDrawable() {}$/;"	f	class:RedDrawable
~RedPeer	client/red_peer.cpp	/^RedPeer::~RedPeer()$/;"	f	class:RedPeer
~RedPixmap	client/windows/red_pixmap.cpp	/^RedPixmap::~RedPixmap()$/;"	f	class:RedPixmap
~RedPixmap	client/x11/red_pixmap.cpp	/^RedPixmap::~RedPixmap()$/;"	f	class:RedPixmap
~RedPixmapGL	client/x11/red_pixmap_gl.cpp	/^RedPixmapGL::~RedPixmapGL()$/;"	f	class:RedPixmapGL
~RedPixmapGdi	client/windows/red_pixmap_gdi.cpp	/^RedPixmapGdi::~RedPixmapGdi()$/;"	f	class:RedPixmapGdi
~RedPixmapSw	client/windows/red_pixmap_sw.cpp	/^RedPixmapSw::~RedPixmapSw()$/;"	f	class:RedPixmapSw
~RedPixmapSw	client/x11/red_pixmap_sw.cpp	/^RedPixmapSw::~RedPixmapSw()$/;"	f	class:RedPixmapSw
~RedScreen	client/screen.cpp	/^RedScreen::~RedScreen()$/;"	f	class:RedScreen
~RedWindow	client/windows/red_window.cpp	/^RedWindow::~RedWindow()$/;"	f	class:RedWindow
~RedWindow	client/x11/red_window.cpp	/^RedWindow::~RedWindow()$/;"	f	class:RedWindow
~Region_p	client/windows/red_window.cpp	/^    ~Region_p() {}$/;"	f	class:Region_p
~Region_p	client/x11/red_window.cpp	/^    ~Region_p() { delete _region;}$/;"	f	class:Region_p
~SCanvas	client/red_sw_canvas.cpp	/^SCanvas::~SCanvas()$/;"	f	class:SCanvas
~SampleTab	client/gui/gui.cpp	/^        virtual ~SampleTab()$/;"	f	class:SampleTabFactory::SampleTab
~ScreenLayer	client/screen_layer.cpp	/^ScreenLayer::~ScreenLayer()$/;"	f	class:ScreenLayer
~SendBuffer	client/client_net_socket.h	/^    virtual ~SendBuffer() {}$/;"	f	class:ClientNetSocket::SendBuffer
~Session	client/x11/named_pipe.cpp	/^Session::~Session()$/;"	f	class:Session
~SharedCache	client/shared_cache.hpp	/^    ~SharedCache()$/;"	f	class:SharedCache
~SoftRenderer	client/gui/softrenderer.cpp	/^SoftRenderer::~SoftRenderer()$/;"	f	class:CEGUI::SoftRenderer
~SoftTexture	client/gui/softtexture.cpp	/^SoftTexture::~SoftTexture()$/;"	f	class:CEGUI::SoftTexture
~SyncEvent	client/process_loop.cpp	/^SyncEvent::~SyncEvent()$/;"	f	class:SyncEvent
~Tab	client/gui/gui.h	/^    virtual ~Tab() {}$/;"	f	class:GUI::Tab
~TabDialog	client/gui/gui.cpp	/^TabDialog::~TabDialog()$/;"	f	class:TabDialog
~TabFactory	client/gui/gui.h	/^    virtual ~TabFactory() {}$/;"	f	class:GUI::TabFactory
~Timer	client/process_loop.cpp	/^Timer::~Timer()$/;"	f	class:Timer
~TimersQueue	client/process_loop.cpp	/^TimersQueue::~TimersQueue()$/;"	f	class:TimersQueue
~Trigger	client/windows/event_sources_p.cpp	/^EventSources::Trigger::~Trigger()$/;"	f	class:EventSources::Trigger
~Trigger	client/x11/event_sources_p.cpp	/^EventSources::Trigger::~Trigger()$/;"	f	class:EventSources::Trigger
~VEventEvent	client/smartcard_channel.cpp	/^VEventEvent::~VEventEvent()$/;"	f	class:VEventEvent
~VSCMessageEvent	client/smartcard_channel.cpp	/^VSCMessageEvent::~VSCMessageEvent()$/;"	f	class:VSCMessageEvent
~VideoStream	client/display_channel.cpp	/^VideoStream::~VideoStream()$/;"	f	class:VideoStream
~WavePlaybackAbstract	client/audio_devices.h	/^    virtual ~WavePlaybackAbstract() {}$/;"	f	class:WavePlaybackAbstract
~WavePlayer	client/windows/playback.cpp	/^WavePlayer::~WavePlayer()$/;"	f	class:WavePlayer
~WavePlayer	client/x11/playback.cpp	/^WavePlayer::~WavePlayer()$/;"	f	class:WavePlayer
~WaveRecordAbstract	client/audio_devices.h	/^    virtual ~WaveRecordAbstract() {}$/;"	f	class:WaveRecordAbstract
~WaveRecorder	client/windows/record.cpp	/^WaveRecorder::~WaveRecorder()$/;"	f	class:WaveRecorder
~WaveRecorder	client/x11/record.cpp	/^WaveRecorder::~WaveRecorder()$/;"	f	class:WaveRecorder
~WinConnection	client/windows/named_pipe.cpp	/^WinConnection::~WinConnection()$/;"	f	class:WinConnection
~WinListener	client/windows/named_pipe.cpp	/^WinListener::~WinListener()$/;"	f	class:WinListener
~WinLocalCursor	client/windows/platform.cpp	/^WinLocalCursor::~WinLocalCursor()$/;"	f	class:WinLocalCursor
~WinMonitor	client/windows/platform.cpp	/^WinMonitor::~WinMonitor()$/;"	f	class:WinMonitor
~WindowDC	client/windows/platform_utils.h	/^    ~WindowDC() { ReleaseDC(_window, _dc);}$/;"	f	class:WindowDC
~XBaseLocalCursor	client/x11/platform.cpp	/^XBaseLocalCursor::~XBaseLocalCursor()$/;"	f	class:XBaseLocalCursor
~XIcon	client/x11/x_icon.cpp	/^XIcon::~XIcon()$/;"	f	class:XIcon
~XMonitor	client/x11/platform.cpp	/^XMonitor::~XMonitor()$/;"	f	class:XMonitor
~XScreen	client/x11/platform.cpp	/^    virtual ~XScreen() {}$/;"	f	class:XScreen
~XineramaScreen	client/x11/platform.cpp	/^XineramaScreen::~XineramaScreen()$/;"	f	class:XineramaScreen
~ZlibDecoder	client/zlib_decoder.cpp	/^ZlibDecoder::~ZlibDecoder()$/;"	f	class:ZlibDecoder
~_AutoRes	client/utils.h	/^    ~_AutoRes() { set(NULL); }$/;"	f	class:_AutoRes
